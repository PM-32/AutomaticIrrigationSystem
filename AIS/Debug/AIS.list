
AIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001400c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ccc  080141ac  080141ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e78  08016e78  000181ac  2**0
                  CONTENTS
  4 .ARM          00000008  08016e78  08016e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e80  08016e80  000181ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e80  08016e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016e84  08016e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ac  20000000  08016e88  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d8  200001ac  08017034  000181ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001784  08017034  00018784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c90  00000000  00000000  000181dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003668  00000000  00000000  0002fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  000334d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a0  00000000  00000000  00034cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab77  00000000  00000000  00035f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021510  00000000  00000000  00050ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f286  00000000  00000000  00071fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011125d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  001112a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00117c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ac 	.word	0x200001ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014194 	.word	0x08014194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001b0 	.word	0x200001b0
 80001dc:	08014194 	.word	0x08014194

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <OLED_ClearBuffer>:
static uint8_t oled_buffer[1024];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	81fb      	strh	r3, [r7, #14]
 800058e:	e006      	b.n	800059e <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 8000590:	89fb      	ldrh	r3, [r7, #14]
 8000592:	4908      	ldr	r1, [pc, #32]	@ (80005b4 <OLED_ClearBuffer+0x34>)
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	3301      	adds	r3, #1
 800059c:	81fb      	strh	r3, [r7, #14]
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005a4:	d3f4      	bcc.n	8000590 <OLED_ClearBuffer+0x10>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	200001c8 	.word	0x200001c8

080005b8 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 80005c2:	2300      	movs	r3, #0
 80005c4:	733b      	strb	r3, [r7, #12]
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <OLED_SendCommand+0x30>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	230a      	movs	r3, #10
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2302      	movs	r3, #2
 80005d8:	2178      	movs	r1, #120	@ 0x78
 80005da:	f00c fdc1 	bl	800d160 <HAL_I2C_Master_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200005c8 	.word	0x200005c8

080005ec <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 80005f6:	2340      	movs	r3, #64	@ 0x40
 80005f8:	733b      	strb	r3, [r7, #12]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <OLED_SendData+0x30>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	f107 020c 	add.w	r2, r7, #12
 8000606:	230a      	movs	r3, #10
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2302      	movs	r3, #2
 800060c:	2178      	movs	r1, #120	@ 0x78
 800060e:	f00c fda7 	bl	800d160 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200005c8 	.word	0x200005c8

08000620 <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <OLED_Init+0xcc>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 800062e:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <OLED_Init+0xcc>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	2364      	movs	r3, #100	@ 0x64
 8000634:	220a      	movs	r2, #10
 8000636:	2178      	movs	r1, #120	@ 0x78
 8000638:	f00d f9bc 	bl	800d9b4 <HAL_I2C_IsDeviceReady>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <OLED_Init+0x26>
	{
		return 0;
 8000642:	2300      	movs	r3, #0
 8000644:	e04e      	b.n	80006e4 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8000646:	20ae      	movs	r0, #174	@ 0xae
 8000648:	f7ff ffb6 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 800064c:	20d5      	movs	r0, #213	@ 0xd5
 800064e:	f7ff ffb3 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 8000652:	2080      	movs	r0, #128	@ 0x80
 8000654:	f7ff ffb0 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 8000658:	20a8      	movs	r0, #168	@ 0xa8
 800065a:	f7ff ffad 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 800065e:	203f      	movs	r0, #63	@ 0x3f
 8000660:	f7ff ffaa 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 8000664:	20d3      	movs	r0, #211	@ 0xd3
 8000666:	f7ff ffa7 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ffa4 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 8000670:	2040      	movs	r0, #64	@ 0x40
 8000672:	f7ff ffa1 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8000676:	208d      	movs	r0, #141	@ 0x8d
 8000678:	f7ff ff9e 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f7ff ff9b 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 8000682:	2020      	movs	r0, #32
 8000684:	f7ff ff98 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ff95 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 800068e:	20a1      	movs	r0, #161	@ 0xa1
 8000690:	f7ff ff92 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 8000694:	20c8      	movs	r0, #200	@ 0xc8
 8000696:	f7ff ff8f 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 800069a:	20da      	movs	r0, #218	@ 0xda
 800069c:	f7ff ff8c 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 80006a0:	2012      	movs	r0, #18
 80006a2:	f7ff ff89 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 80006a6:	2081      	movs	r0, #129	@ 0x81
 80006a8:	f7ff ff86 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 80006ac:	20ff      	movs	r0, #255	@ 0xff
 80006ae:	f7ff ff83 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 80006b2:	20d9      	movs	r0, #217	@ 0xd9
 80006b4:	f7ff ff80 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 80006b8:	20f1      	movs	r0, #241	@ 0xf1
 80006ba:	f7ff ff7d 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 80006be:	20db      	movs	r0, #219	@ 0xdb
 80006c0:	f7ff ff7a 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 80006c4:	2040      	movs	r0, #64	@ 0x40
 80006c6:	f7ff ff77 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 80006ca:	20a4      	movs	r0, #164	@ 0xa4
 80006cc:	f7ff ff74 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 80006d0:	20a6      	movs	r0, #166	@ 0xa6
 80006d2:	f7ff ff71 	bl	80005b8 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 80006d6:	20af      	movs	r0, #175	@ 0xaf
 80006d8:	f7ff ff6e 	bl	80005b8 <OLED_SendCommand>

	OLED_Clear(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f807 	bl	80006f0 <OLED_Clear>
	
	return 1;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200005c8 	.word	0x200005c8

080006f0 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <OLED_Clear+0x18>
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	f7ff ff3d 	bl	8000580 <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 8000706:	e002      	b.n	800070e <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff39 	bl	8000580 <OLED_ClearBuffer>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <OLED_DrawBitmap>:
/**********************************************************************************/
/*                            D R A W    S C R E E N                               */
/**********************************************************************************/

void OLED_DrawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	4608      	mov	r0, r1
 8000720:	4611      	mov	r1, r2
 8000722:	461a      	mov	r2, r3
 8000724:	4603      	mov	r3, r0
 8000726:	70fb      	strb	r3, [r7, #3]
 8000728:	460b      	mov	r3, r1
 800072a:	70bb      	strb	r3, [r7, #2]
 800072c:	4613      	mov	r3, r2
 800072e:	707b      	strb	r3, [r7, #1]
	uint8_t current_byte;
	uint8_t byte_width = (width + 7) / 8;
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	3307      	adds	r3, #7
 8000734:	2b00      	cmp	r3, #0
 8000736:	da00      	bge.n	800073a <OLED_DrawBitmap+0x24>
 8000738:	3307      	adds	r3, #7
 800073a:	10db      	asrs	r3, r3, #3
 800073c:	737b      	strb	r3, [r7, #13]

	for (uint8_t current_y = 0; current_y < height; current_y++)
 800073e:	2300      	movs	r3, #0
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e03c      	b.n	80007be <OLED_DrawBitmap+0xa8>
	{
		for (uint8_t current_x = 0; current_x < width; current_x++)
 8000744:	2300      	movs	r3, #0
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	e032      	b.n	80007b0 <OLED_DrawBitmap+0x9a>
		{
			current_byte = progmem_bitmap[current_y * byte_width + current_x / 8];
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	7b7a      	ldrb	r2, [r7, #13]
 800074e:	fb02 f303 	mul.w	r3, r2, r3
 8000752:	7bba      	ldrb	r2, [r7, #14]
 8000754:	08d2      	lsrs	r2, r2, #3
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	4413      	add	r3, r2
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	733b      	strb	r3, [r7, #12]

			if (current_byte & (OLED_WIDTH >> (current_x & 7)))	OLED_DrawPixelStatus(current_x + pos_x, current_y + pos_y, 1);
 8000764:	7b3a      	ldrb	r2, [r7, #12]
 8000766:	7bbb      	ldrb	r3, [r7, #14]
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	fa41 f303 	asr.w	r3, r1, r3
 8000772:	4013      	ands	r3, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00c      	beq.n	8000792 <OLED_DrawBitmap+0x7c>
 8000778:	7bba      	ldrb	r2, [r7, #14]
 800077a:	787b      	ldrb	r3, [r7, #1]
 800077c:	4413      	add	r3, r2
 800077e:	b2d8      	uxtb	r0, r3
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	7e3b      	ldrb	r3, [r7, #24]
 8000784:	4413      	add	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f000 f820 	bl	80007d0 <OLED_DrawPixelStatus>
 8000790:	e00b      	b.n	80007aa <OLED_DrawBitmap+0x94>
			else												OLED_DrawPixelStatus(current_x + pos_x, current_y + pos_y, 0);
 8000792:	7bba      	ldrb	r2, [r7, #14]
 8000794:	787b      	ldrb	r3, [r7, #1]
 8000796:	4413      	add	r3, r2
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	7bfa      	ldrb	r2, [r7, #15]
 800079c:	7e3b      	ldrb	r3, [r7, #24]
 800079e:	4413      	add	r3, r2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	f000 f813 	bl	80007d0 <OLED_DrawPixelStatus>
		for (uint8_t current_x = 0; current_x < width; current_x++)
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73bb      	strb	r3, [r7, #14]
 80007b0:	7bba      	ldrb	r2, [r7, #14]
 80007b2:	78bb      	ldrb	r3, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3c8      	bcc.n	800074a <OLED_DrawBitmap+0x34>
	for (uint8_t current_y = 0; current_y < height; current_y++)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d3be      	bcc.n	8000744 <OLED_DrawBitmap+0x2e>
		}
	}
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	460b      	mov	r3, r1
 80007dc:	71bb      	strb	r3, [r7, #6]
 80007de:	4613      	mov	r3, r2
 80007e0:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db3d      	blt.n	8000866 <OLED_DrawPixelStatus+0x96>
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80007ee:	d83a      	bhi.n	8000866 <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d01a      	beq.n	800082c <OLED_DrawPixelStatus+0x5c>
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	b2d8      	uxtb	r0, r3
 80007fe:	4603      	mov	r3, r0
 8000800:	01db      	lsls	r3, r3, #7
 8000802:	4413      	add	r3, r2
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <OLED_DrawPixelStatus+0xa4>)
 8000806:	5cd3      	ldrb	r3, [r2, r3]
 8000808:	b25a      	sxtb	r2, r3
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	f003 0307 	and.w	r3, r3, #7
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	b25b      	sxtb	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b259      	sxtb	r1, r3
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	4603      	mov	r3, r0
 8000820:	01db      	lsls	r3, r3, #7
 8000822:	4413      	add	r3, r2
 8000824:	b2c9      	uxtb	r1, r1
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <OLED_DrawPixelStatus+0xa4>)
 8000828:	54d1      	strb	r1, [r2, r3]
 800082a:	e01d      	b.n	8000868 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	b2d8      	uxtb	r0, r3
 8000834:	4603      	mov	r3, r0
 8000836:	01db      	lsls	r3, r3, #7
 8000838:	4413      	add	r3, r2
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <OLED_DrawPixelStatus+0xa4>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	b25a      	sxtb	r2, r3
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	b25b      	sxtb	r3, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4013      	ands	r3, r2
 8000854:	b259      	sxtb	r1, r3
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4603      	mov	r3, r0
 800085a:	01db      	lsls	r3, r3, #7
 800085c:	4413      	add	r3, r2
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <OLED_DrawPixelStatus+0xa4>)
 8000862:	54d1      	strb	r1, [r2, r3]
 8000864:	e000      	b.n	8000868 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8000866:	bf00      	nop
}
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200001c8 	.word	0x200001c8

08000878 <OLED_DrawPixel>:

void OLED_DrawPixel(uint8_t pos_x, uint8_t pos_y)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	71bb      	strb	r3, [r7, #6]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db1d      	blt.n	80008cc <OLED_DrawPixel+0x54>
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	2b3f      	cmp	r3, #63	@ 0x3f
 8000894:	d81a      	bhi.n	80008cc <OLED_DrawPixel+0x54>
	
	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	b2d8      	uxtb	r0, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	01db      	lsls	r3, r3, #7
 80008a2:	4413      	add	r3, r2
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <OLED_DrawPixel+0x60>)
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	b25a      	sxtb	r2, r3
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b259      	sxtb	r1, r3
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	4603      	mov	r3, r0
 80008c0:	01db      	lsls	r3, r3, #7
 80008c2:	4413      	add	r3, r2
 80008c4:	b2c9      	uxtb	r1, r1
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <OLED_DrawPixel+0x60>)
 80008c8:	54d1      	strb	r1, [r2, r3]
 80008ca:	e000      	b.n	80008ce <OLED_DrawPixel+0x56>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80008cc:	bf00      	nop
}
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	200001c8 	.word	0x200001c8

080008dc <OLED_DrawRectangleFill>:
	OLED_DrawVLine(x1, y1, height);
	OLED_DrawVLine(x2, y1, height);
}

void OLED_DrawRectangleFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t mode)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
 80008f2:	460b      	mov	r3, r1
 80008f4:	717b      	strb	r3, [r7, #5]
 80008f6:	4613      	mov	r3, r2
 80008f8:	713b      	strb	r3, [r7, #4]
	uint8_t length = x2 - x1 + 1;
 80008fa:	797a      	ldrb	r2, [r7, #5]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3301      	adds	r3, #1
 8000904:	72fb      	strb	r3, [r7, #11]
	uint8_t height = y2 - y1;
 8000906:	793a      	ldrb	r2, [r7, #4]
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	72bb      	strb	r3, [r7, #10]

	for (int16_t x = 0; x < length; ++x)
 800090e:	2300      	movs	r3, #0
 8000910:	81fb      	strh	r3, [r7, #14]
 8000912:	e01e      	b.n	8000952 <OLED_DrawRectangleFill+0x76>
	{
		for (int16_t y = 0; y <= height; ++y)
 8000914:	2300      	movs	r3, #0
 8000916:	81bb      	strh	r3, [r7, #12]
 8000918:	e012      	b.n	8000940 <OLED_DrawRectangleFill+0x64>
		{
			OLED_DrawPixelStatus(x1 + x, y + y1, mode);
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4413      	add	r3, r2
 8000922:	b2d8      	uxtb	r0, r3
 8000924:	89bb      	ldrh	r3, [r7, #12]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	4413      	add	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000932:	4619      	mov	r1, r3
 8000934:	f7ff ff4c 	bl	80007d0 <OLED_DrawPixelStatus>
		for (int16_t y = 0; y <= height; ++y)
 8000938:	89bb      	ldrh	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	81bb      	strh	r3, [r7, #12]
 8000940:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	429a      	cmp	r2, r3
 8000948:	dde7      	ble.n	800091a <OLED_DrawRectangleFill+0x3e>
	for (int16_t x = 0; x < length; ++x)
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	3301      	adds	r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	81fb      	strh	r3, [r7, #14]
 8000952:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbdb      	blt.n	8000914 <OLED_DrawRectangleFill+0x38>
		}
	}
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bd90      	pop	{r4, r7, pc}

08000966 <OLED_DrawLine>:
		OLED_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x);
	}
}

void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000966:	b590      	push	{r4, r7, lr}
 8000968:	b087      	sub	sp, #28
 800096a:	af00      	add	r7, sp, #0
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	461a      	mov	r2, r3
 8000974:	4623      	mov	r3, r4
 8000976:	80fb      	strh	r3, [r7, #6]
 8000978:	4603      	mov	r3, r0
 800097a:	80bb      	strh	r3, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
 8000980:	4613      	mov	r3, r2
 8000982:	803b      	strh	r3, [r7, #0]
	uint16_t curr_dx = ABS(x1 - x0);
 8000984:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	82fb      	strh	r3, [r7, #22]
	uint16_t curr_dy = ABS(y1 - y0);
 8000996:	f9b7 2000 	ldrsh.w	r2, [r7]
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bfb8      	it	lt
 80009a4:	425b      	neglt	r3, r3
 80009a6:	82bb      	strh	r3, [r7, #20]
	uint8_t step = curr_dy > curr_dx;
 80009a8:	8aba      	ldrh	r2, [r7, #20]
 80009aa:	8afb      	ldrh	r3, [r7, #22]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	bf8c      	ite	hi
 80009b0:	2301      	movhi	r3, #1
 80009b2:	2300      	movls	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	747b      	strb	r3, [r7, #17]

	if (step)
 80009b8:	7c7b      	ldrb	r3, [r7, #17]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d023      	beq.n	8000a06 <OLED_DrawLine+0xa0>
	{
		SWAP(x0, y0);
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4053      	eors	r3, r2
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4053      	eors	r3, r2
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4053      	eors	r3, r2
 80009d4:	80fb      	strh	r3, [r7, #6]
		SWAP(x1, y1);
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	883b      	ldrh	r3, [r7, #0]
 80009da:	4053      	eors	r3, r2
 80009dc:	807b      	strh	r3, [r7, #2]
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	883b      	ldrh	r3, [r7, #0]
 80009e2:	4053      	eors	r3, r2
 80009e4:	803b      	strh	r3, [r7, #0]
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	883b      	ldrh	r3, [r7, #0]
 80009ea:	4053      	eors	r3, r2
 80009ec:	807b      	strh	r3, [r7, #2]
		SWAP(curr_dx, curr_dy);
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	8abb      	ldrh	r3, [r7, #20]
 80009f2:	4053      	eors	r3, r2
 80009f4:	82fb      	strh	r3, [r7, #22]
 80009f6:	8afa      	ldrh	r2, [r7, #22]
 80009f8:	8abb      	ldrh	r3, [r7, #20]
 80009fa:	4053      	eors	r3, r2
 80009fc:	82bb      	strh	r3, [r7, #20]
 80009fe:	8afa      	ldrh	r2, [r7, #22]
 8000a00:	8abb      	ldrh	r3, [r7, #20]
 8000a02:	4053      	eors	r3, r2
 8000a04:	82fb      	strh	r3, [r7, #22]
	}

	if (x0 > x1)
 8000a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dd17      	ble.n	8000a42 <OLED_DrawLine+0xdc>
	{
		SWAP(x0, x1);
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	4053      	eors	r3, r2
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	4053      	eors	r3, r2
 8000a20:	807b      	strh	r3, [r7, #2]
 8000a22:	88fa      	ldrh	r2, [r7, #6]
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	4053      	eors	r3, r2
 8000a28:	80fb      	strh	r3, [r7, #6]
		SWAP(y0, y1);
 8000a2a:	88ba      	ldrh	r2, [r7, #4]
 8000a2c:	883b      	ldrh	r3, [r7, #0]
 8000a2e:	4053      	eors	r3, r2
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	883b      	ldrh	r3, [r7, #0]
 8000a36:	4053      	eors	r3, r2
 8000a38:	803b      	strh	r3, [r7, #0]
 8000a3a:	88ba      	ldrh	r2, [r7, #4]
 8000a3c:	883b      	ldrh	r3, [r7, #0]
 8000a3e:	4053      	eors	r3, r2
 8000a40:	80bb      	strh	r3, [r7, #4]
	}

	int16_t y_step = (y0 < y1) ? 1 : -1;
 8000a42:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	da01      	bge.n	8000a52 <OLED_DrawLine+0xec>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e001      	b.n	8000a56 <OLED_DrawLine+0xf0>
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	81fb      	strh	r3, [r7, #14]
	int16_t err = curr_dx >> 1;
 8000a58:	8afb      	ldrh	r3, [r7, #22]
 8000a5a:	085b      	lsrs	r3, r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	827b      	strh	r3, [r7, #18]

	for ( ; x0 <= x1; x0++)
 8000a60:	e02c      	b.n	8000abc <OLED_DrawLine+0x156>
	{
		if (step)	OLED_DrawPixel(y0, x0);
 8000a62:	7c7b      	ldrb	r3, [r7, #17]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d008      	beq.n	8000a7a <OLED_DrawLine+0x114>
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	88fa      	ldrh	r2, [r7, #6]
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff00 	bl	8000878 <OLED_DrawPixel>
 8000a78:	e007      	b.n	8000a8a <OLED_DrawLine+0x124>
		else		OLED_DrawPixel(x0, y0);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	88ba      	ldrh	r2, [r7, #4]
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fef7 	bl	8000878 <OLED_DrawPixel>
		
		err -= curr_dy;
 8000a8a:	8a7a      	ldrh	r2, [r7, #18]
 8000a8c:	8abb      	ldrh	r3, [r7, #20]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	827b      	strh	r3, [r7, #18]
		if (err < 0)
 8000a94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da09      	bge.n	8000ab0 <OLED_DrawLine+0x14a>
		{
			y0 += y_step;
 8000a9c:	88ba      	ldrh	r2, [r7, #4]
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	80bb      	strh	r3, [r7, #4]
			err += curr_dx;
 8000aa6:	8a7a      	ldrh	r2, [r7, #18]
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	827b      	strh	r3, [r7, #18]
	for ( ; x0 <= x1; x0++)
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	80fb      	strh	r3, [r7, #6]
 8000abc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	ddcc      	ble.n	8000a62 <OLED_DrawLine+0xfc>
		}
	}
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	371c      	adds	r7, #28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
	...

08000ad4 <OLED_GetWidthStr>:

uint8_t OLED_GetWidthStr(const char* str)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fb7f 	bl	80001e0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	73bb      	strb	r3, [r7, #14]
 8000aee:	e01a      	b.n	8000b26 <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <OLED_GetWidthStr+0x64>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <OLED_GetWidthStr+0x64>)
 8000af6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000afa:	4619      	mov	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <OLED_GetWidthStr+0x64>)
 8000b04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b08:	1ac3      	subs	r3, r0, r3
 8000b0a:	fb01 f303 	mul.w	r3, r1, r3
 8000b0e:	3304      	adds	r3, #4
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4413      	add	r3, r2
 8000b18:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73bb      	strb	r3, [r7, #14]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	7bba      	ldrb	r2, [r7, #14]
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3e0      	bcc.n	8000af0 <OLED_GetWidthStr+0x1c>
	}

	return len;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200005cc 	.word	0x200005cc

08000b3c <OLED_GetWidthNum>:

uint8_t OLED_GetWidthNum(int16_t num)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	char buf[15];
	sprintf(buf, "%d", num);
 8000b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4907      	ldr	r1, [pc, #28]	@ (8000b6c <OLED_GetWidthNum+0x30>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f012 fead 	bl	80138b0 <siprintf>

	return OLED_GetWidthStr(buf);
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffba 	bl	8000ad4 <OLED_GetWidthStr>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	080141ac 	.word	0x080141ac

08000b70 <OLED_DrawChar>:

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	4603      	mov	r3, r0
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	460b      	mov	r3, r1
 8000b88:	717b      	strb	r3, [r7, #5]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 8000b8e:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000b94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4933      	ldr	r1, [pc, #204]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000b9e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8000ba2:	1a5b      	subs	r3, r3, r1
 8000ba4:	fb00 f303 	mul.w	r3, r0, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4413      	add	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e050      	b.n	8000c56 <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	e044      	b.n	8000c44 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4929      	ldr	r1, [pc, #164]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000bc6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8000bca:	3901      	subs	r1, #1
 8000bcc:	fb01 f303 	mul.w	r3, r1, r3
 8000bd0:	4926      	ldr	r1, [pc, #152]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000bd2:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000bd6:	fb93 f3f1 	sdiv	r3, r3, r1
 8000bda:	4413      	add	r3, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	fa42 f303 	asr.w	r3, r2, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d011      	beq.n	8000c1c <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2d8      	uxtb	r0, r3
 8000c00:	797a      	ldrb	r2, [r7, #5]
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	4413      	add	r3, r2
 8000c06:	b2d9      	uxtb	r1, r3
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f7ff fddb 	bl	80007d0 <OLED_DrawPixelStatus>
 8000c1a:	e010      	b.n	8000c3e <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 8000c1c:	79ba      	ldrb	r2, [r7, #6]
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2d8      	uxtb	r0, r3
 8000c24:	797a      	ldrb	r2, [r7, #5]
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b2d9      	uxtb	r1, r3
 8000c2c:	793b      	ldrb	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f7ff fdc9 	bl	80007d0 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	3301      	adds	r3, #1
 8000c42:	73bb      	strb	r3, [r7, #14]
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <OLED_DrawChar+0xfc>)
 8000c48:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	dbb4      	blt.n	8000bba <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3a9      	bcc.n	8000bb4 <OLED_DrawChar+0x44>
		}
	}
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200005cc 	.word	0x200005cc

08000c70 <OLED_DrawNum>:

void OLED_DrawNum(int16_t num, uint8_t x, uint8_t y, uint8_t mode)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	4603      	mov	r3, r0
 8000c84:	717b      	strb	r3, [r7, #5]
 8000c86:	460b      	mov	r3, r1
 8000c88:	713b      	strb	r3, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	70fb      	strb	r3, [r7, #3]
	char buf[15];
	sprintf(buf, "%d", num);
 8000c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4907      	ldr	r1, [pc, #28]	@ (8000cb4 <OLED_DrawNum+0x44>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f012 fe09 	bl	80138b0 <siprintf>

	OLED_DrawStr(buf, x, y, mode);
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	793a      	ldrb	r2, [r7, #4]
 8000ca2:	7979      	ldrb	r1, [r7, #5]
 8000ca4:	f107 0008 	add.w	r0, r7, #8
 8000ca8:	f000 f806 	bl	8000cb8 <OLED_DrawStr>
}
 8000cac:	bf00      	nop
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	080141ac 	.word	0x080141ac

08000cb8 <OLED_DrawStr>:

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	70fb      	strb	r3, [r7, #3]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70bb      	strb	r3, [r7, #2]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fa84 	bl	80001e0 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce4:	d106      	bne.n	8000cf4 <OLED_DrawStr+0x3c>
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fef4 	bl	8000ad4 <OLED_GetWidthStr>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000cf2:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2bff      	cmp	r3, #255	@ 0xff
 8000cf8:	d109      	bne.n	8000d0e <OLED_DrawStr+0x56>
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff feea 	bl	8000ad4 <OLED_GetWidthStr>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d06:	0fda      	lsrs	r2, r3, #31
 8000d08:	4413      	add	r3, r2
 8000d0a:	105b      	asrs	r3, r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 8000d0e:	78bb      	ldrb	r3, [r7, #2]
 8000d10:	2bff      	cmp	r3, #255	@ 0xff
 8000d12:	d108      	bne.n	8000d26 <OLED_DrawStr+0x6e>
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <OLED_DrawStr+0xcc>)
 8000d16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d1a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000d1e:	0fda      	lsrs	r2, r3, #31
 8000d20:	4413      	add	r3, r2
 8000d22:	105b      	asrs	r3, r3, #1
 8000d24:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	73bb      	strb	r3, [r7, #14]
 8000d2a:	e021      	b.n	8000d70 <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7818      	ldrb	r0, [r3, #0]
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	78ba      	ldrb	r2, [r7, #2]
 8000d34:	7bf9      	ldrb	r1, [r7, #15]
 8000d36:	f7ff ff1b 	bl	8000b70 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <OLED_DrawStr+0xcc>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <OLED_DrawStr+0xcc>)
 8000d40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d44:	4619      	mov	r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <OLED_DrawStr+0xcc>)
 8000d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d52:	1ac3      	subs	r3, r0, r3
 8000d54:	fb01 f303 	mul.w	r3, r1, r3
 8000d58:	3304      	adds	r3, #4
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	4413      	add	r3, r2
 8000d62:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73bb      	strb	r3, [r7, #14]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	7bba      	ldrb	r2, [r7, #14]
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3d9      	bcc.n	8000d2c <OLED_DrawStr+0x74>
	}
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005cc 	.word	0x200005cc

08000d88 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e032      	b.n	8000dfa <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <OLED_UpdateScreen+0x84>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc0a 	bl	80005b8 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <OLED_UpdateScreen+0x84>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc00 	bl	80005b8 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fbf9 	bl	80005b8 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	80bb      	strh	r3, [r7, #4]
 8000dca:	e00f      	b.n	8000dec <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	01da      	lsls	r2, r3, #7
 8000dd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <OLED_UpdateScreen+0x88>)
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc06 	bl	80005ec <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	80bb      	strh	r3, [r7, #4]
 8000dec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df2:	ddeb      	ble.n	8000dcc <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	3301      	adds	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d9c9      	bls.n	8000d94 <OLED_UpdateScreen+0xc>
		}
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	200001c8 	.word	0x200001c8

08000e14 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	 Font.font = new_font;
 8000e1c:	4a13      	ldr	r2, [pc, #76]	@ (8000e6c <FontSet+0x58>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
	 Font.width = (int16_t)fontbyte(0);
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <FontSet+0x58>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <FontSet+0x58>)
 8000e2c:	809a      	strh	r2, [r3, #4]
	 Font.height = (int16_t)fontbyte(1);
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <FontSet+0x58>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <FontSet+0x58>)
 8000e3a:	80da      	strh	r2, [r3, #6]
	 Font.offset = (int16_t)fontbyte(2);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <FontSet+0x58>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3302      	adds	r3, #2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <FontSet+0x58>)
 8000e48:	811a      	strh	r2, [r3, #8]
	 Font.numchars = (int16_t)fontbyte(3);
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <FontSet+0x58>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3303      	adds	r3, #3
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <FontSet+0x58>)
 8000e56:	815a      	strh	r2, [r3, #10]
	 Font.inverted = NORMAL;
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <FontSet+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	731a      	strb	r2, [r3, #12]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200005cc 	.word	0x200005cc

08000e70 <KEYB_Add_Button>:
uint8_t  KEYB_all_button = 0;					//Счетчик количества кнопок
KEYB_key_map_ *KEYB_keys_map = 0;				//Указатель на массив с данными кнопок

//функция добавляет кнопку
void KEYB_Add_Button(GPIO_TypeDef *key_port, uint32_t key_pin, uint8_t key_bit, KEYB_BUTTON_STATUS key_status)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71bb      	strb	r3, [r7, #6]
	KEYB_all_button++;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <KEYB_Add_Button+0x7c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <KEYB_Add_Button+0x7c>)
 8000e90:	701a      	strb	r2, [r3, #0]
	KEYB_keys_map = (KEYB_key_map_*)realloc(KEYB_keys_map, KEYB_all_button*sizeof(KEYB_key_map_));
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <KEYB_Add_Button+0x80>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <KEYB_Add_Button+0x7c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	440b      	add	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f012 fccc 	bl	8013844 <realloc>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <KEYB_Add_Button+0x80>)
 8000eb0:	6013      	str	r3, [r2, #0]
	KEYB_key_map_ *button = &KEYB_keys_map[KEYB_all_button-1];
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <KEYB_Add_Button+0x80>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <KEYB_Add_Button+0x7c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	440b      	add	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	3b0c      	subs	r3, #12
 8000ec6:	4413      	add	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
	button->key_port = key_port;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
	button->key_pin = key_pin;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	605a      	str	r2, [r3, #4]
	button->key_bit = key_bit;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	721a      	strb	r2, [r3, #8]
	button->key_status = key_status;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	725a      	strb	r2, [r3, #9]
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000641 	.word	0x20000641
 8000ef0:	20000644 	.word	0x20000644

08000ef4 <KEYB_Inkeys>:
//Используется в пользовательской программе для реализации опроса кнопок.
//Для того, чтобы узнать нажата кнопка или нет, необходимо опросить соответствующий
//ей бит в возвращенном значении.
//Кнопки для опроса добавляются функцией KEYB_Add_Button.
uint32_t KEYB_Inkeys(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
	uint32_t k_inkey = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
	//есть ли в буфере данные и определена ли хотя бы одна кнопка?
	KEYB_TIM->DIER &= ~TIM_DIER_UIE;
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	60d3      	str	r3, [r2, #12]
	if (KEYB_count_key && KEYB_all_button)
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <KEYB_Inkeys+0x84>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d021      	beq.n	8000f5a <KEYB_Inkeys+0x66>
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <KEYB_Inkeys+0x88>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01d      	beq.n	8000f5a <KEYB_Inkeys+0x66>
	{
		//читаем данные из 0 позиции буфера
		k_inkey = KEYB_key_buff[0];
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <KEYB_Inkeys+0x8c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	607b      	str	r3, [r7, #4]
		//смещаем буфер на 1 позицию влево
		for (int i = 0; i < KEYB_SIZE_BUFFER - 1; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	e00b      	b.n	8000f42 <KEYB_Inkeys+0x4e>
		{
			KEYB_key_buff[i] = KEYB_key_buff[i + 1];
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <KEYB_Inkeys+0x8c>)
 8000f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f34:	4912      	ldr	r1, [pc, #72]	@ (8000f80 <KEYB_Inkeys+0x8c>)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < KEYB_SIZE_BUFFER - 1; i++)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	ddf0      	ble.n	8000f2a <KEYB_Inkeys+0x36>
		}
		//уменьшаем количество данных в буфере на 1
		KEYB_count_key--;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <KEYB_Inkeys+0x84>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <KEYB_Inkeys+0x84>)
 8000f52:	701a      	strb	r2, [r3, #0]
		//дописываем 0
		KEYB_key_buff[KEYB_SIZE_BUFFER - 1] = 0;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <KEYB_Inkeys+0x8c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	KEYB_TIM->DIER |= TIM_DIER_UIE;
 8000f5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	60d3      	str	r3, [r2, #12]
	return k_inkey;
 8000f6a:	687b      	ldr	r3, [r7, #4]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000640 	.word	0x20000640
 8000f7c:	20000641 	.word	0x20000641
 8000f80:	200005f0 	.word	0x200005f0

08000f84 <KEYB_Input_Keys>:
}


//опрос кнопок
void KEYB_Input_Keys(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
	KEYB_TIM->SR &= ~TIM_SR_UIF; //сброс флага прерывания по обновлению
 8000f8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6113      	str	r3, [r2, #16]
	uint32_t keys = 0;//переменная для хранения состояний кнопок
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
	KEYB_key_map_ *button; //хранит указатель на данные (порт, пин, бит) текущей кнопки
	if (!KEYB_all_button) return; //если нет ни одной добавленной кнопки, то выходим
 8000fa2:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <KEYB_Input_Keys+0x180>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 809d 	beq.w	80010e6 <KEYB_Input_Keys+0x162>
	while(i < KEYB_all_button) //в цикле читаем состояние всех кнопок, параметры которых заданы в массиве KEYB_keys_map
 8000fac:	e022      	b.n	8000ff4 <KEYB_Input_Keys+0x70>
	{
		button = &KEYB_keys_map[i++]; //указатель на данные текущей кнопки
 8000fae:	4b56      	ldr	r3, [pc, #344]	@ (8001108 <KEYB_Input_Keys+0x184>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1c59      	adds	r1, r3, #1
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	440b      	add	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	607b      	str	r3, [r7, #4]
		if (button->key_status != KEYB_BUTTON_ACTIVE) continue; //если кнопка неактивна (неиспользуется), то пропускаем ее
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7a5b      	ldrb	r3, [r3, #9]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d111      	bne.n	8000ff2 <KEYB_Input_Keys+0x6e>
		//Кнопка нажата, если состояние входа равно 0 (вход прижат к "земле"). При выполнении этого условия устанавливаем бит,
		//соответствующий кнопке в переменной keys.
		if (!(button->key_port->IDR & button->key_pin)) keys |= 1<<button->key_bit;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <KEYB_Input_Keys+0x70>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7a1b      	ldrb	r3, [r3, #8]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e000      	b.n	8000ff4 <KEYB_Input_Keys+0x70>
		if (button->key_status != KEYB_BUTTON_ACTIVE) continue; //если кнопка неактивна (неиспользуется), то пропускаем ее
 8000ff2:	bf00      	nop
	while(i < KEYB_all_button) //в цикле читаем состояние всех кнопок, параметры которых заданы в массиве KEYB_keys_map
 8000ff4:	4b43      	ldr	r3, [pc, #268]	@ (8001104 <KEYB_Input_Keys+0x180>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	dbd6      	blt.n	8000fae <KEYB_Input_Keys+0x2a>
	}
	if (keys && (KEYB_old_keys == keys)) //предыдущая кнопка/комбинация равна текущей?
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d05f      	beq.n	80010c6 <KEYB_Input_Keys+0x142>
 8001006:	4b41      	ldr	r3, [pc, #260]	@ (800110c <KEYB_Input_Keys+0x188>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d15a      	bne.n	80010c6 <KEYB_Input_Keys+0x142>
	{
		KEYB_contact_counter++; //увеличиваем счетчик фильтра дребезга
 8001010:	4b3f      	ldr	r3, [pc, #252]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 800101a:	701a      	strb	r2, [r3, #0]
		if (KEYB_contact_counter < KEYB_CONTACT_PER) return; //прошло ли время для устранения дребезга?
 800101c:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d962      	bls.n	80010ea <KEYB_Input_Keys+0x166>
		if (KEYB_repeat_fl) //установлен ли флаг автоповтора?
 8001024:	4b3b      	ldr	r3, [pc, #236]	@ (8001114 <KEYB_Input_Keys+0x190>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <KEYB_Input_Keys+0xd0>
		{
			KEYB_contact_counter = KEYB_CONTACT_PER;
 800102c:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]
			KEYB_repeat_count++; //увеличиваем счетчик автоповтора
 8001032:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <KEYB_Input_Keys+0x194>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a37      	ldr	r2, [pc, #220]	@ (8001118 <KEYB_Input_Keys+0x194>)
 800103a:	6013      	str	r3, [r2, #0]
			if (KEYB_repeat_count < KEYB_REPEAT_PER) return; //прошло ли время включения автоповтора?
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <KEYB_Input_Keys+0x194>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b07      	cmp	r3, #7
 8001042:	d954      	bls.n	80010ee <KEYB_Input_Keys+0x16a>
			KEYB_repeat_count = 0; //инициализируем счетчик автоповтора
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <KEYB_Input_Keys+0x194>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
			KEYB_repeat_fl = 1; //устанавливаем флаг автоповтора
			KEYB_repeat_count = 0; //инициализируем счетчик автоповтора
			KEYB_contact_counter = KEYB_CONTACT_PER;
			return;
		}
		if (KEYB_count_key < KEYB_SIZE_BUFFER) //есть ли место в буфере ввода?
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <KEYB_Input_Keys+0x198>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b13      	cmp	r3, #19
 8001050:	d84f      	bhi.n	80010f2 <KEYB_Input_Keys+0x16e>
 8001052:	e02a      	b.n	80010aa <KEYB_Input_Keys+0x126>
			if (!KEYB_repeat_pre_count) //это первый автоповтор?
 8001054:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d110      	bne.n	800107e <KEYB_Input_Keys+0xfa>
				if (KEYB_count_key < KEYB_SIZE_BUFFER) //есть ли место в буфере ввода?
 800105c:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <KEYB_Input_Keys+0x198>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b13      	cmp	r3, #19
 8001062:	d80c      	bhi.n	800107e <KEYB_Input_Keys+0xfa>
					KEYB_key_buff[KEYB_count_key] = keys; //запоминаем состояние кнопок в буфере
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <KEYB_Input_Keys+0x198>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <KEYB_Input_Keys+0x1a0>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					KEYB_count_key++; //увеличиваем счетчик запомненных состояний кнопок
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <KEYB_Input_Keys+0x198>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <KEYB_Input_Keys+0x198>)
 800107c:	701a      	strb	r2, [r3, #0]
			KEYB_repeat_pre_count++; //увеличиваем счетчик-задержку до первого автоповтора
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 8001086:	6013      	str	r3, [r2, #0]
			if (KEYB_repeat_pre_count < KEYB_REPPRE_PER) return; //
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b63      	cmp	r3, #99	@ 0x63
 800108e:	d932      	bls.n	80010f6 <KEYB_Input_Keys+0x172>
			KEYB_repeat_pre_count = 0; //инициализируем счетчик-задержку до первого автоповтора
 8001090:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
			KEYB_repeat_fl = 1; //устанавливаем флаг автоповтора
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <KEYB_Input_Keys+0x190>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
			KEYB_repeat_count = 0; //инициализируем счетчик автоповтора
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <KEYB_Input_Keys+0x194>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
			KEYB_contact_counter = KEYB_CONTACT_PER;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	701a      	strb	r2, [r3, #0]
			return;
 80010a8:	e026      	b.n	80010f8 <KEYB_Input_Keys+0x174>
		{
			KEYB_key_buff[KEYB_count_key] = keys; //запоминаем состояние кнопок в буфере
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <KEYB_Input_Keys+0x198>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <KEYB_Input_Keys+0x1a0>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			KEYB_count_key++; //увеличиваем счетчик запомненных в буфере состояний кнопок
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <KEYB_Input_Keys+0x198>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <KEYB_Input_Keys+0x198>)
 80010c2:	701a      	strb	r2, [r3, #0]
		}
		return;
 80010c4:	e015      	b.n	80010f2 <KEYB_Input_Keys+0x16e>
	}
	//текущая кнопка/комбинация отличается от предыдущей
	KEYB_old_keys = keys; //старая кобинация = текущей
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <KEYB_Input_Keys+0x188>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6013      	str	r3, [r2, #0]
	KEYB_contact_counter = 0; //инициализация счетчика устранения дребезга
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <KEYB_Input_Keys+0x18c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	KEYB_repeat_fl = 0; //сброс флага автоповтора
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <KEYB_Input_Keys+0x190>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	KEYB_repeat_count = 0; //инициализация счетчика автоповтора
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <KEYB_Input_Keys+0x194>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	KEYB_repeat_pre_count = 0; //инициализация счетчика-задержки до первого автоповтора
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <KEYB_Input_Keys+0x19c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e008      	b.n	80010f8 <KEYB_Input_Keys+0x174>
	if (!KEYB_all_button) return; //если нет ни одной добавленной кнопки, то выходим
 80010e6:	bf00      	nop
 80010e8:	e006      	b.n	80010f8 <KEYB_Input_Keys+0x174>
		if (KEYB_contact_counter < KEYB_CONTACT_PER) return; //прошло ли время для устранения дребезга?
 80010ea:	bf00      	nop
 80010ec:	e004      	b.n	80010f8 <KEYB_Input_Keys+0x174>
			if (KEYB_repeat_count < KEYB_REPEAT_PER) return; //прошло ли время включения автоповтора?
 80010ee:	bf00      	nop
 80010f0:	e002      	b.n	80010f8 <KEYB_Input_Keys+0x174>
		return;
 80010f2:	bf00      	nop
 80010f4:	e000      	b.n	80010f8 <KEYB_Input_Keys+0x174>
			if (KEYB_repeat_pre_count < KEYB_REPPRE_PER) return; //
 80010f6:	bf00      	nop
}
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000641 	.word	0x20000641
 8001108:	20000644 	.word	0x20000644
 800110c:	200005dc 	.word	0x200005dc
 8001110:	200005ec 	.word	0x200005ec
 8001114:	200005e4 	.word	0x200005e4
 8001118:	200005e8 	.word	0x200005e8
 800111c:	20000640 	.word	0x20000640
 8001120:	200005e0 	.word	0x200005e0
 8001124:	200005f0 	.word	0x200005f0

08001128 <SD_ReadData>:
//	Micro SD
//============================================================================

// Чтение параметров с MicroSD
uint8_t SD_ReadData(uint8_t num_data)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800112e:	af00      	add	r7, sp, #0
 8001130:	4602      	mov	r2, r0
 8001132:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001136:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800113a:	701a      	strb	r2, [r3, #0]

	// Указатель на структуру для чтения
	char* ptr_struct;

	// Размер структуры в байтах
	uint8_t size = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

	// Количество прочитанных байт
	UINT bytes_read;

	// Рассчитанное значение CRC32
	uint32_t crc = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

	// Количество слов (по 32 байта) для расчёта CRC32
	uint8_t crc_num_words = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e

	// Указатель на структуру для сравнения CRC32
	uint32_t* ptr_struct_32;


	if (num_data == 1)
 800114e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001152:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11d      	bne.n	8001198 <SD_ReadData+0x70>
	{
		file_name = "WateringParams.txt";
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <SD_ReadData+0x1bc>)
 800115e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
		file = file_WateringParams;
 8001162:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001166:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800116a:	4a5f      	ldr	r2, [pc, #380]	@ (80012e8 <SD_ReadData+0x1c0>)
 800116c:	4618      	mov	r0, r3
 800116e:	4611      	mov	r1, r2
 8001170:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001174:	461a      	mov	r2, r3
 8001176:	f012 fbef 	bl	8013958 <memcpy>
		ptr_struct = ptr_WateringParams;
 800117a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <SD_ReadData+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
		ptr_struct_32 = (uint32_t*) ptr_WateringParams;
 8001182:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <SD_ReadData+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		size = sizeof(WateringParams);
 800118a:	230c      	movs	r3, #12
 800118c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		crc_num_words = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 8001196:	e04b      	b.n	8001230 <SD_ReadData+0x108>
	}

	else
	if (num_data == 2)
 8001198:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800119c:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d11d      	bne.n	80011e2 <SD_ReadData+0xba>
	{
		file_name = "ScreenOff.txt";
 80011a6:	4b52      	ldr	r3, [pc, #328]	@ (80012f0 <SD_ReadData+0x1c8>)
 80011a8:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
		file = file_ScreenOff;
 80011ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80011b0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80011b4:	4a4f      	ldr	r2, [pc, #316]	@ (80012f4 <SD_ReadData+0x1cc>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	4611      	mov	r1, r2
 80011ba:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80011be:	461a      	mov	r2, r3
 80011c0:	f012 fbca 	bl	8013958 <memcpy>
		ptr_struct = ptr_ScreenOff;
 80011c4:	4b4c      	ldr	r3, [pc, #304]	@ (80012f8 <SD_ReadData+0x1d0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
		ptr_struct_32 = (uint32_t*) ptr_ScreenOff;
 80011cc:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <SD_ReadData+0x1d0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		size = sizeof(ScreenOff);
 80011d4:	2308      	movs	r3, #8
 80011d6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		crc_num_words = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 80011e0:	e026      	b.n	8001230 <SD_ReadData+0x108>
	}

	else
	if (num_data == 3)
 80011e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80011e6:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d11d      	bne.n	800122c <SD_ReadData+0x104>
	{
		file_name = "WaterLevelSensorState.txt";
 80011f0:	4b42      	ldr	r3, [pc, #264]	@ (80012fc <SD_ReadData+0x1d4>)
 80011f2:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
		file = file_WaterLevelSensorState;
 80011f6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80011fa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80011fe:	4a40      	ldr	r2, [pc, #256]	@ (8001300 <SD_ReadData+0x1d8>)
 8001200:	4618      	mov	r0, r3
 8001202:	4611      	mov	r1, r2
 8001204:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001208:	461a      	mov	r2, r3
 800120a:	f012 fba5 	bl	8013958 <memcpy>
		ptr_struct = ptr_WaterLevelSensorState;
 800120e:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <SD_ReadData+0x1dc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
		ptr_struct_32 = (uint32_t*) ptr_WaterLevelSensorState;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <SD_ReadData+0x1dc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		size = sizeof(WaterLevelSensorState);
 800121e:	2308      	movs	r3, #8
 8001220:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		crc_num_words = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 800122a:	e001      	b.n	8001230 <SD_ReadData+0x108>
	}

	else
		return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e053      	b.n	80012d8 <SD_ReadData+0x1b0>

	// Открытие файла на чтение
	status = f_open(&file, file_name, FA_READ);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2201      	movs	r2, #1
 8001236:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800123a:	4618      	mov	r0, r3
 800123c:	f011 fcca 	bl	8012bd4 <f_open>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243

	if (status != FR_OK)
 8001246:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <SD_ReadData+0x13a>
	{
		f_close(&file);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f012 f9aa 	bl	80135ac <f_close>
		f_ErrorSD = 2;
 8001258:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <SD_ReadData+0x1e0>)
 800125a:	2202      	movs	r2, #2
 800125c:	701a      	strb	r2, [r3, #0]
		return 2;
 800125e:	2302      	movs	r3, #2
 8001260:	e03a      	b.n	80012d8 <SD_ReadData+0x1b0>
	}

	// Чтение файла в структуру
	status = f_read(&file, ptr_struct, size, &bytes_read);
 8001262:	f897 224f 	ldrb.w	r2, [r7, #591]	@ 0x24f
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	f107 0010 	add.w	r0, r7, #16
 800126e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8001272:	f011 fe69 	bl	8012f48 <f_read>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243

	// Закрытие файла
	f_close(&file);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4618      	mov	r0, r3
 8001282:	f012 f993 	bl	80135ac <f_close>

	if (status != FR_OK)
 8001286:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <SD_ReadData+0x170>
	{
		f_ErrorSD = 3;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <SD_ReadData+0x1e0>)
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
		return 3;
 8001294:	2303      	movs	r3, #3
 8001296:	e01f      	b.n	80012d8 <SD_ReadData+0x1b0>
	}

	// Расчёт CRC32
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) ptr_struct, crc_num_words);
 8001298:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 800129c:	461a      	mov	r2, r3
 800129e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 80012a2:	481a      	ldr	r0, [pc, #104]	@ (800130c <SD_ReadData+0x1e4>)
 80012a4:	f00b f84d 	bl	800c342 <HAL_CRC_Calculate>
 80012a8:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244

	// Если CRC32 не сходятся
	if (crc != (*(ptr_struct_32 + crc_num_words)))
 80012ac:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80012be:	429a      	cmp	r2, r3
 80012c0:	d009      	beq.n	80012d6 <SD_ReadData+0x1ae>
	{
		// Очистка структуры
		memset(ptr_struct, 0, size);
 80012c2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80012c6:	461a      	mov	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 80012ce:	f012 fb0f 	bl	80138f0 <memset>
		return 4;
 80012d2:	2304      	movs	r3, #4
 80012d4:	e000      	b.n	80012d8 <SD_ReadData+0x1b0>
	}

	return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	080141b0 	.word	0x080141b0
 80012e8:	20000af0 	.word	0x20000af0
 80012ec:	20000120 	.word	0x20000120
 80012f0:	080141c4 	.word	0x080141c4
 80012f4:	20000d20 	.word	0x20000d20
 80012f8:	20000128 	.word	0x20000128
 80012fc:	080141d4 	.word	0x080141d4
 8001300:	20000f50 	.word	0x20000f50
 8001304:	20000130 	.word	0x20000130
 8001308:	20000aec 	.word	0x20000aec
 800130c:	200006f0 	.word	0x200006f0

08001310 <SD_WriteData>:


// Запись параметров на MicroSD
uint8_t SD_WriteData(uint8_t num_data)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8001316:	af00      	add	r7, sp, #0
 8001318:	4602      	mov	r2, r0
 800131a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800131e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8001322:	701a      	strb	r2, [r3, #0]

	// Указатель на структуру для записи
	char* ptr_struct;

	// Размер структуры в байтах
	uint8_t size = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247

	// Количество записанных байт
	UINT bytes_wrote;

	// Количество слов (по 32 байта) для расчёта CRC32
	uint8_t crc_num_words = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
	// Указатель на структуру для расчёта CRC32
	uint32_t* ptr_struct_32;

	// Смещение поля bytes_alignment
	// относительно адреса начала структуры
	uint8_t bytes_alignment_shift = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f


	if (num_data == 1)
 8001336:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800133a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d120      	bne.n	8001386 <SD_WriteData+0x76>
	{
		file_name = "WateringParams.txt";
 8001344:	4b65      	ldr	r3, [pc, #404]	@ (80014dc <SD_WriteData+0x1cc>)
 8001346:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
		file = file_WateringParams;
 800134a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800134e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001352:	4a63      	ldr	r2, [pc, #396]	@ (80014e0 <SD_WriteData+0x1d0>)
 8001354:	4618      	mov	r0, r3
 8001356:	4611      	mov	r1, r2
 8001358:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800135c:	461a      	mov	r2, r3
 800135e:	f012 fafb 	bl	8013958 <memcpy>
		ptr_struct = ptr_WateringParamsSet;
 8001362:	4b60      	ldr	r3, [pc, #384]	@ (80014e4 <SD_WriteData+0x1d4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		ptr_struct_32 = (uint32_t*) ptr_WateringParamsSet;
 800136a:	4b5e      	ldr	r3, [pc, #376]	@ (80014e4 <SD_WriteData+0x1d4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
		size = sizeof(WateringParamsSet);
 8001372:	230c      	movs	r3, #12
 8001374:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
		crc_num_words = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
		bytes_alignment_shift = 6;
 800137e:	2306      	movs	r3, #6
 8001380:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8001384:	e04e      	b.n	8001424 <SD_WriteData+0x114>
	}

	else
	if (num_data == 2)
 8001386:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800138a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d120      	bne.n	80013d6 <SD_WriteData+0xc6>
	{
		file_name = "ScreenOff.txt";
 8001394:	4b54      	ldr	r3, [pc, #336]	@ (80014e8 <SD_WriteData+0x1d8>)
 8001396:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
		file = file_ScreenOff;
 800139a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800139e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80013a2:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <SD_WriteData+0x1dc>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	4611      	mov	r1, r2
 80013a8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80013ac:	461a      	mov	r2, r3
 80013ae:	f012 fad3 	bl	8013958 <memcpy>
		ptr_struct = ptr_ScreenOffSet;
 80013b2:	4b4f      	ldr	r3, [pc, #316]	@ (80014f0 <SD_WriteData+0x1e0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		ptr_struct_32 = (uint32_t*) ptr_ScreenOffSet;
 80013ba:	4b4d      	ldr	r3, [pc, #308]	@ (80014f0 <SD_WriteData+0x1e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
		size = sizeof(ScreenOffSet);
 80013c2:	2308      	movs	r3, #8
 80013c4:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
		crc_num_words = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
		bytes_alignment_shift = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 80013d4:	e026      	b.n	8001424 <SD_WriteData+0x114>
	}

	else
	if (num_data == 3)
 80013d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80013da:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d11d      	bne.n	8001420 <SD_WriteData+0x110>
	{
		file_name = "WaterLevelSensorState.txt";
 80013e4:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <SD_WriteData+0x1e4>)
 80013e6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
		file = file_WaterLevelSensorState;
 80013ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80013ee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80013f2:	4a41      	ldr	r2, [pc, #260]	@ (80014f8 <SD_WriteData+0x1e8>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	4611      	mov	r1, r2
 80013f8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80013fc:	461a      	mov	r2, r3
 80013fe:	f012 faab 	bl	8013958 <memcpy>
		ptr_struct = ptr_WaterLevelSensorState;
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <SD_WriteData+0x1ec>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
		ptr_struct_32 = (uint32_t*) ptr_WaterLevelSensorState;
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <SD_WriteData+0x1ec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
		size = sizeof(WaterLevelSensorState);
 8001412:	2308      	movs	r3, #8
 8001414:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
		crc_num_words = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 800141e:	e001      	b.n	8001424 <SD_WriteData+0x114>
	}

	else
		return 1;
 8001420:	2301      	movs	r3, #1
 8001422:	e055      	b.n	80014d0 <SD_WriteData+0x1c0>

	// У структуры WaterLevelSensorState
	// нет поля bytes_alignment_shift
	if (num_data != 3)
 8001424:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001428:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d009      	beq.n	8001446 <SD_WriteData+0x136>
	{
		// Очистка поля bytes_alignment структуры
		memset(ptr_struct + bytes_alignment_shift, 0, 2);
 8001432:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001436:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800143a:	4413      	add	r3, r2
 800143c:	2202      	movs	r2, #2
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f012 fa55 	bl	80138f0 <memset>
	}

	// Расчёт CRC32 и заполнение поля crc32 структуры
	*(ptr_struct_32 + crc_num_words) = HAL_CRC_Calculate(&hcrc, (uint32_t*) ptr_struct, crc_num_words);
 8001446:	f897 1246 	ldrb.w	r1, [r7, #582]	@ 0x246
 800144a:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8001454:	18d4      	adds	r4, r2, r3
 8001456:	460a      	mov	r2, r1
 8001458:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800145c:	4828      	ldr	r0, [pc, #160]	@ (8001500 <SD_WriteData+0x1f0>)
 800145e:	f00a ff70 	bl	800c342 <HAL_CRC_Calculate>
 8001462:	4603      	mov	r3, r0
 8001464:	6023      	str	r3, [r4, #0]

	// Открытие файла на запись
	status = f_open(&file, file_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	221a      	movs	r2, #26
 800146c:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8001470:	4618      	mov	r0, r3
 8001472:	f011 fbaf 	bl	8012bd4 <f_open>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e

	if (status != FR_OK)
 800147c:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <SD_WriteData+0x188>
	{
		f_close(&file);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f012 f88f 	bl	80135ac <f_close>
		f_ErrorSD = 4;
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <SD_WriteData+0x1f4>)
 8001490:	2204      	movs	r2, #4
 8001492:	701a      	strb	r2, [r3, #0]
		return 2;
 8001494:	2302      	movs	r3, #2
 8001496:	e01b      	b.n	80014d0 <SD_WriteData+0x1c0>
	}

	// Запись структуры в файл
	status = f_write(&file, ptr_struct, size, &bytes_wrote);
 8001498:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	f107 000c 	add.w	r0, r7, #12
 80014a4:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80014a8:	f011 fe8d 	bl	80131c6 <f_write>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e

	// Закрытие файла
	f_close(&file);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4618      	mov	r0, r3
 80014b8:	f012 f878 	bl	80135ac <f_close>

	if (status != FR_OK)
 80014bc:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <SD_WriteData+0x1be>
	{
		f_ErrorSD = 5;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <SD_WriteData+0x1f4>)
 80014c6:	2205      	movs	r2, #5
 80014c8:	701a      	strb	r2, [r3, #0]
		return 3;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e000      	b.n	80014d0 <SD_WriteData+0x1c0>
	}

	return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	bf00      	nop
 80014dc:	080141b0 	.word	0x080141b0
 80014e0:	20000af0 	.word	0x20000af0
 80014e4:	20000124 	.word	0x20000124
 80014e8:	080141c4 	.word	0x080141c4
 80014ec:	20000d20 	.word	0x20000d20
 80014f0:	2000012c 	.word	0x2000012c
 80014f4:	080141d4 	.word	0x080141d4
 80014f8:	20000f50 	.word	0x20000f50
 80014fc:	20000130 	.word	0x20000130
 8001500:	200006f0 	.word	0x200006f0
 8001504:	20000aec 	.word	0x20000aec

08001508 <ReadFlashParams>:


// Чтение настроек,
// если они были изменены
void ReadFlashParams(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	 if (f_WateringParamsChanged)
 800150c:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <ReadFlashParams+0xa0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <ReadFlashParams+0x18>
	 {
		 SD_ReadData(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fe07 	bl	8001128 <SD_ReadData>
		 f_WateringParamsChanged = 0;
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <ReadFlashParams+0xa0>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
	 }

	 if (f_ScreenOffChanged)
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <ReadFlashParams+0xa4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d032      	beq.n	800158e <ReadFlashParams+0x86>
	 {
		 SD_ReadData(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f7ff fdfd 	bl	8001128 <SD_ReadData>

		 if (!f_SleepMode)
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <ReadFlashParams+0xa8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d127      	bne.n	8001588 <ReadFlashParams+0x80>
		 {
			 // Сброс секунд бездействия пользователя
			 SecondsSleepMode_CNT = 0;
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <ReadFlashParams+0xac>)
 800153a:	2200      	movs	r2, #0
 800153c:	801a      	strh	r2, [r3, #0]

			 // Автоотключение экрана было выключено
			 if ((!ScreenOff.minutes_screen_off) &&
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <ReadFlashParams+0xb0>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <ReadFlashParams+0x5a>
				 (!ScreenOff.seconds_screen_off))
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <ReadFlashParams+0xb0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
			 if ((!ScreenOff.minutes_screen_off) &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <ReadFlashParams+0x5a>
			 {
				// Сброс времени автоотключения экрана
				SecondsSleepMode_ARR = 0;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <ReadFlashParams+0xb4>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]

				// Сброс и выключение таймера 3
				HAL_TIM_Base_Stop_IT(&htim3);
 8001554:	481a      	ldr	r0, [pc, #104]	@ (80015c0 <ReadFlashParams+0xb8>)
 8001556:	f00e f88f 	bl	800f678 <HAL_TIM_Base_Stop_IT>
				TIM3->CNT = 0;
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <ReadFlashParams+0xbc>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001560:	e012      	b.n	8001588 <ReadFlashParams+0x80>
			 }

			 else
			 {
				 // Обновление времени автоотключения экрана в секундах
				 SecondsSleepMode_ARR = ScreenOff.minutes_screen_off * 60 + ScreenOff.seconds_screen_off;
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <ReadFlashParams+0xb0>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	461a      	mov	r2, r3
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	b29b      	uxth	r3, r3
 8001570:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <ReadFlashParams+0xb0>)
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <ReadFlashParams+0xb4>)
 800157a:	801a      	strh	r2, [r3, #0]

				 // Сброс и включение таймера 3
				 TIM3->CNT = 0;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <ReadFlashParams+0xbc>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
				 HAL_TIM_Base_Start_IT(&htim3);
 8001582:	480f      	ldr	r0, [pc, #60]	@ (80015c0 <ReadFlashParams+0xb8>)
 8001584:	f00e f816 	bl	800f5b4 <HAL_TIM_Base_Start_IT>
			 }
		 }

		 f_ScreenOffChanged = 0;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <ReadFlashParams+0xa4>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
	 }

	 if (f_WaterLevelSensorStateChanged)
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <ReadFlashParams+0xc0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <ReadFlashParams+0x9a>
	 {
		 SD_ReadData(3);
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff fdc6 	bl	8001128 <SD_ReadData>
		 f_WaterLevelSensorStateChanged = 0;
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <ReadFlashParams+0xc0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	 }
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000a1d 	.word	0x20000a1d
 80015ac:	20000a2f 	.word	0x20000a2f
 80015b0:	20001182 	.word	0x20001182
 80015b4:	20001180 	.word	0x20001180
 80015b8:	20000a74 	.word	0x20000a74
 80015bc:	20000a32 	.word	0x20000a32
 80015c0:	20000900 	.word	0x20000900
 80015c4:	40000400 	.word	0x40000400
 80015c8:	20000a34 	.word	0x20000a34

080015cc <InitReadFlashParams>:

// Чтение настроек полива
// и времени автоотключения экрана
// при включении
void InitReadFlashParams(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	SD_ReadData(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff fda9 	bl	8001128 <SD_ReadData>
	SD_ReadData(2);
 80015d6:	2002      	movs	r0, #2
 80015d8:	f7ff fda6 	bl	8001128 <SD_ReadData>
	SD_ReadData(3);
 80015dc:	2003      	movs	r0, #3
 80015de:	f7ff fda3 	bl	8001128 <SD_ReadData>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <decToBcd>:
//	RTC DS3231
//============================================================================

// Преобразование чисел из десятичной системы в двоичную
uint8_t decToBcd(int val)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return (uint8_t) ((val/10*16) + (val%10));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <decToBcd+0x48>)
 80015f4:	fb82 1203 	smull	r1, r2, r2, r3
 80015f8:	1092      	asrs	r2, r2, #2
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	b2d8      	uxtb	r0, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <decToBcd+0x48>)
 8001608:	fb83 1302 	smull	r1, r3, r3, r2
 800160c:	1099      	asrs	r1, r3, #2
 800160e:	17d3      	asrs	r3, r2, #31
 8001610:	1ac9      	subs	r1, r1, r3
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	1ad1      	subs	r1, r2, r3
 800161c:	b2cb      	uxtb	r3, r1
 800161e:	4403      	add	r3, r0
 8001620:	b2db      	uxtb	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	66666667 	.word	0x66666667

08001634 <bcdToDec>:


// Преобразование чисел из двоичной системы в десятичную
int bcdToDec(uint8_t val)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  return (int) ((val/16*10) + (val%16));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	4413      	add	r3, r2
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SetDateDS>:


// Установка даты и дня недели
static void SetDateDS(uint8_t dow, uint8_t dom,
						 uint8_t month, uint8_t year)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af04      	add	r7, sp, #16
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4603      	mov	r3, r0
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	717b      	strb	r3, [r7, #5]
 800167e:	4613      	mov	r3, r2
 8001680:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[4];

	set_time[0] = decToBcd(dow);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ffaf 	bl	80015e8 <decToBcd>
 800168a:	4603      	mov	r3, r0
 800168c:	733b      	strb	r3, [r7, #12]
	set_time[1] = decToBcd(dom);
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffa9 	bl	80015e8 <decToBcd>
 8001696:	4603      	mov	r3, r0
 8001698:	737b      	strb	r3, [r7, #13]
	set_time[2] = decToBcd(month);
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ffa3 	bl	80015e8 <decToBcd>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73bb      	strb	r3, [r7, #14]
	set_time[3] = decToBcd(year);
 80016a6:	793b      	ldrb	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff9d 	bl	80015e8 <decToBcd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x03, 1, set_time, 4, 1000);
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2304      	movs	r3, #4
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	21d0      	movs	r1, #208	@ 0xd0
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <SetDateDS+0x74>)
 80016ca:	f00b fe47 	bl	800d35c <HAL_I2C_Mem_Write>
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000074c 	.word	0x2000074c

080016dc <SetTimeDS>:


// Установка времени
static void SetTimeDS(uint8_t sec, uint8_t min, uint8_t hour)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	717b      	strb	r3, [r7, #5]
	uint8_t set_time[3];

	set_time[0] = decToBcd(sec);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff79 	bl	80015e8 <decToBcd>
 80016f6:	4603      	mov	r3, r0
 80016f8:	733b      	strb	r3, [r7, #12]
	set_time[1] = decToBcd(min);
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff73 	bl	80015e8 <decToBcd>
 8001702:	4603      	mov	r3, r0
 8001704:	737b      	strb	r3, [r7, #13]
	set_time[2] = decToBcd(hour);
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff6d 	bl	80015e8 <decToBcd>
 800170e:	4603      	mov	r3, r0
 8001710:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, set_time, 3, 1000);
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2303      	movs	r3, #3
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	2200      	movs	r2, #0
 8001726:	21d0      	movs	r1, #208	@ 0xd0
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <SetTimeDS+0x5c>)
 800172a:	f00b fe17 	bl	800d35c <HAL_I2C_Mem_Write>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000074c 	.word	0x2000074c

0800173c <Get_Time>:


// Чтение текущего времени с DS3231
void Get_Time(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2307      	movs	r3, #7
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	463b      	mov	r3, r7
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	2200      	movs	r2, #0
 8001754:	21d0      	movs	r1, #208	@ 0xd0
 8001756:	481f      	ldr	r0, [pc, #124]	@ (80017d4 <Get_Time+0x98>)
 8001758:	f00b fefa 	bl	800d550 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 800175c:	783b      	ldrb	r3, [r7, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff68 	bl	8001634 <bcdToDec>
 8001764:	4603      	mov	r3, r0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <Get_Time+0x9c>)
 800176a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff60 	bl	8001634 <bcdToDec>
 8001774:	4603      	mov	r3, r0
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <Get_Time+0x9c>)
 800177a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff58 	bl	8001634 <bcdToDec>
 8001784:	4603      	mov	r3, r0
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <Get_Time+0x9c>)
 800178a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff50 	bl	8001634 <bcdToDec>
 8001794:	4603      	mov	r3, r0
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <Get_Time+0x9c>)
 800179a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800179c:	793b      	ldrb	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff48 	bl	8001634 <bcdToDec>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <Get_Time+0x9c>)
 80017aa:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80017ac:	797b      	ldrb	r3, [r7, #5]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff40 	bl	8001634 <bcdToDec>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <Get_Time+0x9c>)
 80017ba:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff38 	bl	8001634 <bcdToDec>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <Get_Time+0x9c>)
 80017ca:	719a      	strb	r2, [r3, #6]
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000074c 	.word	0x2000074c
 80017d8:	20000a4c 	.word	0x20000a4c

080017dc <force_temp_conv>:
}


// Увеличение скорости обновления температуры
void force_temp_conv(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af04      	add	r7, sp, #16
	uint8_t status=0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71bb      	strb	r3, [r7, #6]

	// Чтение status register
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);
 80017ea:	2364      	movs	r3, #100	@ 0x64
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2301      	movs	r3, #1
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	220f      	movs	r2, #15
 80017fa:	21d0      	movs	r1, #208	@ 0xd0
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <force_temp_conv+0x70>)
 80017fe:	f00b fea7 	bl	800d550 <HAL_I2C_Mem_Read>

	if (!(status&0x04))
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11b      	bne.n	8001844 <force_temp_conv+0x68>
	{
		// Чтение control register
		HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);
 800180c:	2364      	movs	r3, #100	@ 0x64
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	220e      	movs	r2, #14
 800181c:	21d0      	movs	r1, #208	@ 0xd0
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <force_temp_conv+0x70>)
 8001820:	f00b fe96 	bl	800d550 <HAL_I2C_Mem_Read>

		// Запись в control register
		HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	2364      	movs	r3, #100	@ 0x64
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	2301      	movs	r3, #1
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	220e      	movs	r2, #14
 800183c:	21d0      	movs	r1, #208	@ 0xd0
 800183e:	4803      	ldr	r0, [pc, #12]	@ (800184c <force_temp_conv+0x70>)
 8001840:	f00b fd8c 	bl	800d35c <HAL_I2C_Mem_Write>
	}
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000074c 	.word	0x2000074c

08001850 <OLED_DrawStr_RuModified>:
//	Модифицированные процедуры из файла OLED.c
//============================================================================

// Модифицированная процедура отрисовки строки (русский)
void OLED_DrawStr_RuModified(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	460b      	mov	r3, r1
 8001864:	70bb      	strb	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	707b      	strb	r3, [r7, #1]
	FontSet(Segoe_UI_Rus_10);
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <OLED_DrawStr_RuModified+0x34>)
 800186c:	f7ff fad2 	bl	8000e14 <FontSet>
	OLED_DrawStr(str, x, y, mode);
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	78ba      	ldrb	r2, [r7, #2]
 8001874:	78f9      	ldrb	r1, [r7, #3]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fa1e 	bl	8000cb8 <OLED_DrawStr>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	080152fc 	.word	0x080152fc

08001888 <OLED_DrawStr_EnModified>:


// Модифицированная процедура отрисовки строки (английский)
void OLED_DrawStr_EnModified(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
 800189a:	460b      	mov	r3, r1
 800189c:	70bb      	strb	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	707b      	strb	r3, [r7, #1]
	FontSet(Segoe_UI_Eng_10);
 80018a2:	4806      	ldr	r0, [pc, #24]	@ (80018bc <OLED_DrawStr_EnModified+0x34>)
 80018a4:	f7ff fab6 	bl	8000e14 <FontSet>
	OLED_DrawStr(str, x, y, mode);
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	78ba      	ldrb	r2, [r7, #2]
 80018ac:	78f9      	ldrb	r1, [r7, #3]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fa02 	bl	8000cb8 <OLED_DrawStr>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08015d20 	.word	0x08015d20

080018c0 <OLED_DrawChar_Modified>:


// Модифицированная процедура отрисовки символа (ASCII)
void OLED_DrawChar_Modified(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	4603      	mov	r3, r0
 80018d4:	71bb      	strb	r3, [r7, #6]
 80018d6:	460b      	mov	r3, r1
 80018d8:	717b      	strb	r3, [r7, #5]
 80018da:	4613      	mov	r3, r2
 80018dc:	713b      	strb	r3, [r7, #4]
	FontSet(Segoe_UI_Eng_10);
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <OLED_DrawChar_Modified+0x38>)
 80018e0:	f7ff fa98 	bl	8000e14 <FontSet>
	OLED_DrawChar(c, ix, iy, mode);
 80018e4:	793b      	ldrb	r3, [r7, #4]
 80018e6:	797a      	ldrb	r2, [r7, #5]
 80018e8:	79b9      	ldrb	r1, [r7, #6]
 80018ea:	79f8      	ldrb	r0, [r7, #7]
 80018ec:	f7ff f940 	bl	8000b70 <OLED_DrawChar>
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	08015d20 	.word	0x08015d20

080018fc <OLED_DrawLine_Modified>:


// Модифицированная процедура отрисовки линии
// (позволяет выбрать цвет линии через параметр mode)
void OLED_DrawLine_Modified(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t mode)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	4604      	mov	r4, r0
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	4603      	mov	r3, r0
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	803b      	strh	r3, [r7, #0]
	uint16_t curr_dx = ABS(x1 - x0);
 800191a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfb8      	it	lt
 8001928:	425b      	neglt	r3, r3
 800192a:	82fb      	strh	r3, [r7, #22]
	uint16_t curr_dy = ABS(y1 - y0);
 800192c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001930:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	bfb8      	it	lt
 800193a:	425b      	neglt	r3, r3
 800193c:	82bb      	strh	r3, [r7, #20]
	uint8_t step = curr_dy > curr_dx;
 800193e:	8aba      	ldrh	r2, [r7, #20]
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	429a      	cmp	r2, r3
 8001944:	bf8c      	ite	hi
 8001946:	2301      	movhi	r3, #1
 8001948:	2300      	movls	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	747b      	strb	r3, [r7, #17]

	if (step)
 800194e:	7c7b      	ldrb	r3, [r7, #17]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <OLED_DrawLine_Modified+0xa0>
	{
		SWAP(x0, y0);
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	4053      	eors	r3, r2
 800195a:	80fb      	strh	r3, [r7, #6]
 800195c:	88fa      	ldrh	r2, [r7, #6]
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	4053      	eors	r3, r2
 8001962:	80bb      	strh	r3, [r7, #4]
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	4053      	eors	r3, r2
 800196a:	80fb      	strh	r3, [r7, #6]
		SWAP(x1, y1);
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	883b      	ldrh	r3, [r7, #0]
 8001970:	4053      	eors	r3, r2
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	887a      	ldrh	r2, [r7, #2]
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	4053      	eors	r3, r2
 800197a:	803b      	strh	r3, [r7, #0]
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	883b      	ldrh	r3, [r7, #0]
 8001980:	4053      	eors	r3, r2
 8001982:	807b      	strh	r3, [r7, #2]
		SWAP(curr_dx, curr_dy);
 8001984:	8afa      	ldrh	r2, [r7, #22]
 8001986:	8abb      	ldrh	r3, [r7, #20]
 8001988:	4053      	eors	r3, r2
 800198a:	82fb      	strh	r3, [r7, #22]
 800198c:	8afa      	ldrh	r2, [r7, #22]
 800198e:	8abb      	ldrh	r3, [r7, #20]
 8001990:	4053      	eors	r3, r2
 8001992:	82bb      	strh	r3, [r7, #20]
 8001994:	8afa      	ldrh	r2, [r7, #22]
 8001996:	8abb      	ldrh	r3, [r7, #20]
 8001998:	4053      	eors	r3, r2
 800199a:	82fb      	strh	r3, [r7, #22]
	}

	if (x0 > x1)
 800199c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dd17      	ble.n	80019d8 <OLED_DrawLine_Modified+0xdc>
	{
		SWAP(x0, x1);
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	4053      	eors	r3, r2
 80019ae:	80fb      	strh	r3, [r7, #6]
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	4053      	eors	r3, r2
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	4053      	eors	r3, r2
 80019be:	80fb      	strh	r3, [r7, #6]
		SWAP(y0, y1);
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	4053      	eors	r3, r2
 80019c6:	80bb      	strh	r3, [r7, #4]
 80019c8:	88ba      	ldrh	r2, [r7, #4]
 80019ca:	883b      	ldrh	r3, [r7, #0]
 80019cc:	4053      	eors	r3, r2
 80019ce:	803b      	strh	r3, [r7, #0]
 80019d0:	88ba      	ldrh	r2, [r7, #4]
 80019d2:	883b      	ldrh	r3, [r7, #0]
 80019d4:	4053      	eors	r3, r2
 80019d6:	80bb      	strh	r3, [r7, #4]
	}

	int16_t y_step = (y0 < y1) ? 1 : -1;
 80019d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	da01      	bge.n	80019e8 <OLED_DrawLine_Modified+0xec>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e001      	b.n	80019ec <OLED_DrawLine_Modified+0xf0>
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	81fb      	strh	r3, [r7, #14]
	int16_t err = curr_dx >> 1;
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	827b      	strh	r3, [r7, #18]

	for ( ; x0 <= x1; x0++)
 80019f6:	e02e      	b.n	8001a56 <OLED_DrawLine_Modified+0x15a>
	{
		if (step)	OLED_DrawPixelStatus(y0, x0, mode);
 80019f8:	7c7b      	ldrb	r3, [r7, #17]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <OLED_DrawLine_Modified+0x116>
 80019fe:	88bb      	ldrh	r3, [r7, #4]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	b2d1      	uxtb	r1, r2
 8001a06:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fee0 	bl	80007d0 <OLED_DrawPixelStatus>
 8001a10:	e008      	b.n	8001a24 <OLED_DrawLine_Modified+0x128>
		else		OLED_DrawPixelStatus(x0, y0, mode);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	88ba      	ldrh	r2, [r7, #4]
 8001a18:	b2d1      	uxtb	r1, r2
 8001a1a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fed6 	bl	80007d0 <OLED_DrawPixelStatus>

		err -= curr_dy;
 8001a24:	8a7a      	ldrh	r2, [r7, #18]
 8001a26:	8abb      	ldrh	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	827b      	strh	r3, [r7, #18]
		if (err < 0)
 8001a2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da09      	bge.n	8001a4a <OLED_DrawLine_Modified+0x14e>
		{
			y0 += y_step;
 8001a36:	88ba      	ldrh	r2, [r7, #4]
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	80bb      	strh	r3, [r7, #4]
			err += curr_dx;
 8001a40:	8a7a      	ldrh	r2, [r7, #18]
 8001a42:	8afb      	ldrh	r3, [r7, #22]
 8001a44:	4413      	add	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	827b      	strh	r3, [r7, #18]
	for ( ; x0 <= x1; x0++)
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	ddca      	ble.n	80019f8 <OLED_DrawLine_Modified+0xfc>
		}
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <OLED_DrawTriangleFill_Modified>:


// Модифицированная процедура отрисовки треугольника с заполнением
// (позволяет выбрать цвет заполнения через параметр mode)
void OLED_DrawTriangleFill_Modified(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3, uint8_t mode)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b08d      	sub	sp, #52	@ 0x34
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80bb      	strh	r3, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	807b      	strh	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	803b      	strh	r3, [r7, #0]
	int16_t delta_x = 0, delta_y = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	823b      	strh	r3, [r7, #16]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	81fb      	strh	r3, [r7, #14]
	int16_t	x = 0, y = 0, x_inc_1 = 0, x_inc_2 = 0, y_inc_1 = 0, y_inc_2 = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a96:	2300      	movs	r3, #0
 8001a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	843b      	strh	r3, [r7, #32]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	83fb      	strh	r3, [r7, #30]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	83bb      	strh	r3, [r7, #28]
	int16_t	den = 0, num = 0, num_add = 0, num_pixels = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	837b      	strh	r3, [r7, #26]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	833b      	strh	r3, [r7, #24]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	82fb      	strh	r3, [r7, #22]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	82bb      	strh	r3, [r7, #20]

	delta_x = ABS(x2 - x1);
 8001aba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bfb8      	it	lt
 8001ac8:	425b      	neglt	r3, r3
 8001aca:	823b      	strh	r3, [r7, #16]
	delta_y = ABS(y2 - y1);
 8001acc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ad0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	425b      	neglt	r3, r3
 8001adc:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1)	{	x_inc_1 = 1;	x_inc_2 = 1;	}
 8001ae6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	db04      	blt.n	8001afc <OLED_DrawTriangleFill_Modified+0x90>
 8001af2:	2301      	movs	r3, #1
 8001af4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001af6:	2301      	movs	r3, #1
 8001af8:	843b      	strh	r3, [r7, #32]
 8001afa:	e005      	b.n	8001b08 <OLED_DrawTriangleFill_Modified+0x9c>
	else 			{	x_inc_1 = -1;	x_inc_2 = -1;	}
 8001afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b06:	843b      	strh	r3, [r7, #32]

	if (y2 >= y1) 	{	y_inc_1 = 1;	y_inc_2 = 1;	}
 8001b08:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001b0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	db04      	blt.n	8001b1e <OLED_DrawTriangleFill_Modified+0xb2>
 8001b14:	2301      	movs	r3, #1
 8001b16:	83fb      	strh	r3, [r7, #30]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	83bb      	strh	r3, [r7, #28]
 8001b1c:	e005      	b.n	8001b2a <OLED_DrawTriangleFill_Modified+0xbe>
	else 			{	y_inc_1 = -1;	y_inc_2 = -1;	}
 8001b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b28:	83bb      	strh	r3, [r7, #28]

	if (delta_x >= delta_y)
 8001b2a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	db10      	blt.n	8001b58 <OLED_DrawTriangleFill_Modified+0xec>
	{
		x_inc_1 = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	847b      	strh	r3, [r7, #34]	@ 0x22
		y_inc_2 = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	83bb      	strh	r3, [r7, #28]
		den = delta_x;
 8001b3e:	8a3b      	ldrh	r3, [r7, #16]
 8001b40:	837b      	strh	r3, [r7, #26]
		num = delta_x / 2;
 8001b42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b46:	0fda      	lsrs	r2, r3, #31
 8001b48:	4413      	add	r3, r2
 8001b4a:	105b      	asrs	r3, r3, #1
 8001b4c:	833b      	strh	r3, [r7, #24]
		num_add = delta_y;
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	82fb      	strh	r3, [r7, #22]
		num_pixels = delta_x;
 8001b52:	8a3b      	ldrh	r3, [r7, #16]
 8001b54:	82bb      	strh	r3, [r7, #20]
 8001b56:	e00f      	b.n	8001b78 <OLED_DrawTriangleFill_Modified+0x10c>
	}
	else
	{
		x_inc_2 = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	843b      	strh	r3, [r7, #32]
		y_inc_1 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	83fb      	strh	r3, [r7, #30]
		den = delta_y;
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	837b      	strh	r3, [r7, #26]
		num = delta_y / 2;
 8001b64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b68:	0fda      	lsrs	r2, r3, #31
 8001b6a:	4413      	add	r3, r2
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	833b      	strh	r3, [r7, #24]
		num_add = delta_x;
 8001b70:	8a3b      	ldrh	r3, [r7, #16]
 8001b72:	82fb      	strh	r3, [r7, #22]
		num_pixels = delta_y;
 8001b74:	89fb      	ldrh	r3, [r7, #14]
 8001b76:	82bb      	strh	r3, [r7, #20]
	}

	for (int16_t cur_pixel = 0; cur_pixel <= num_pixels; cur_pixel++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	827b      	strh	r3, [r7, #18]
 8001b7c:	e037      	b.n	8001bee <OLED_DrawTriangleFill_Modified+0x182>
	{
		OLED_DrawLine_Modified(x, y, x3, y3, mode);
 8001b7e:	f9b7 403c 	ldrsh.w	r4, [r7, #60]	@ 0x3c
 8001b82:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001b86:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 8001b8a:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	@ 0x26
 8001b8e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7ff feb1 	bl	80018fc <OLED_DrawLine_Modified>

		num += num_add;
 8001b9a:	8b3a      	ldrh	r2, [r7, #24]
 8001b9c:	8afb      	ldrh	r3, [r7, #22]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 8001ba4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ba8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	db0e      	blt.n	8001bce <OLED_DrawTriangleFill_Modified+0x162>
		{
			num -= den;
 8001bb0:	8b3a      	ldrh	r2, [r7, #24]
 8001bb2:	8b7b      	ldrh	r3, [r7, #26]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	833b      	strh	r3, [r7, #24]
			x += x_inc_1;
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += y_inc_1;
 8001bc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bc6:	8bfb      	ldrh	r3, [r7, #30]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += x_inc_2;
 8001bce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bd0:	8c3b      	ldrh	r3, [r7, #32]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += y_inc_2;
 8001bd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bda:	8bbb      	ldrh	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int16_t cur_pixel = 0; cur_pixel <= num_pixels; cur_pixel++)
 8001be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	827b      	strh	r3, [r7, #18]
 8001bee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	ddc1      	ble.n	8001b7e <OLED_DrawTriangleFill_Modified+0x112>
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	372c      	adds	r7, #44	@ 0x2c
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <OLED_DrawCircle_Modified>:


// Модифицированная процедура отрисовки круга без заполнения
// (позволяет выбрать цвет контура через параметр mode)
void OLED_DrawCircle_Modified(int16_t x0, int16_t y0, uint8_t r, uint8_t mode)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	80fb      	strh	r3, [r7, #6]
 8001c16:	4603      	mov	r3, r0
 8001c18:	80bb      	strh	r3, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	70bb      	strb	r3, [r7, #2]
	int16_t x = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	82fb      	strh	r3, [r7, #22]
	int16_t y = r;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = - (r << 1);
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	425b      	negs	r3, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	827b      	strh	r3, [r7, #18]
	int16_t ddF_x = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	823b      	strh	r3, [r7, #16]
	int16_t f = 1 - r;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f1c3 0301 	rsb	r3, r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	81fb      	strh	r3, [r7, #14]

	OLED_DrawPixelStatus(x0, y0 + r, mode);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	78ba      	ldrb	r2, [r7, #2]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe fdb9 	bl	80007d0 <OLED_DrawPixelStatus>
	OLED_DrawPixelStatus(x0, y0 - r, mode);
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	b2d8      	uxtb	r0, r3
 8001c62:	88bb      	ldrh	r3, [r7, #4]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	78ba      	ldrb	r2, [r7, #2]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe fdae 	bl	80007d0 <OLED_DrawPixelStatus>
	OLED_DrawPixelStatus(x0 + r, y0, mode);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	88ba      	ldrh	r2, [r7, #4]
 8001c80:	b2d1      	uxtb	r1, r2
 8001c82:	78ba      	ldrb	r2, [r7, #2]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fda3 	bl	80007d0 <OLED_DrawPixelStatus>
	OLED_DrawPixelStatus(x0 - r, y0, mode);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	b2d1      	uxtb	r1, r2
 8001c98:	78ba      	ldrb	r2, [r7, #2]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fd98 	bl	80007d0 <OLED_DrawPixelStatus>

	while(x < y)
 8001ca0:	e0a1      	b.n	8001de6 <OLED_DrawCircle_Modified+0x1e2>
	{
		if (f >= 0)
 8001ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0e      	blt.n	8001cc8 <OLED_DrawCircle_Modified+0xc4>
		{
			y--;
 8001caa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	82bb      	strh	r3, [r7, #20]
			ddF_y += 2;
 8001cb6:	8a7b      	ldrh	r3, [r7, #18]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001cbe:	89fa      	ldrh	r2, [r7, #14]
 8001cc0:	8a7b      	ldrh	r3, [r7, #18]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	81fb      	strh	r3, [r7, #14]
		}

		x++;
 8001cc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	82fb      	strh	r3, [r7, #22]
		ddF_x += 2;
 8001cd4:	8a3b      	ldrh	r3, [r7, #16]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	823b      	strh	r3, [r7, #16]
		f += ddF_x;
 8001cdc:	89fa      	ldrh	r2, [r7, #14]
 8001cde:	8a3b      	ldrh	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	81fb      	strh	r3, [r7, #14]

		OLED_DrawPixelStatus(x0 + x, y0 + y, mode);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	8afb      	ldrh	r3, [r7, #22]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2d8      	uxtb	r0, r3
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8abb      	ldrh	r3, [r7, #20]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	78ba      	ldrb	r2, [r7, #2]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe fd65 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 - x, y0 + y, mode);
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	8afb      	ldrh	r3, [r7, #22]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	8abb      	ldrh	r3, [r7, #20]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	78ba      	ldrb	r2, [r7, #2]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fd55 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 + x, y0 - y, mode);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8afb      	ldrh	r3, [r7, #22]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2d8      	uxtb	r0, r3
 8001d32:	88bb      	ldrh	r3, [r7, #4]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	8abb      	ldrh	r3, [r7, #20]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	78ba      	ldrb	r2, [r7, #2]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fd45 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 - x, y0 - y, mode);
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	8afb      	ldrh	r3, [r7, #22]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b2d8      	uxtb	r0, r3
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	8abb      	ldrh	r3, [r7, #20]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	78ba      	ldrb	r2, [r7, #2]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fd35 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 + y, y0 + x, mode);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8abb      	ldrh	r3, [r7, #20]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2d8      	uxtb	r0, r3
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8afb      	ldrh	r3, [r7, #22]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	78ba      	ldrb	r2, [r7, #2]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe fd25 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 - y, y0 + x, mode);
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8abb      	ldrh	r3, [r7, #20]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	88bb      	ldrh	r3, [r7, #4]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	8afb      	ldrh	r3, [r7, #22]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	78ba      	ldrb	r2, [r7, #2]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fd15 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 + y, y0 - x, mode);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	8abb      	ldrh	r3, [r7, #20]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	78ba      	ldrb	r2, [r7, #2]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fd05 	bl	80007d0 <OLED_DrawPixelStatus>
		OLED_DrawPixelStatus(x0 - y, y0 - x, mode);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	8abb      	ldrh	r3, [r7, #20]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b2d8      	uxtb	r0, r3
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	78ba      	ldrb	r2, [r7, #2]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fcf5 	bl	80007d0 <OLED_DrawPixelStatus>
	while(x < y)
 8001de6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	f6ff af57 	blt.w	8001ca2 <OLED_DrawCircle_Modified+0x9e>
	}
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}

08001dfe <OLED_DrawCircleFill_Modified>:


// Модифицированная процедура отрисовки круга с заполнением
// (позволяет выбрать цвет заполнения через параметр mode)
void OLED_DrawCircleFill_Modified(int16_t x0, int16_t y0, uint8_t r, uint8_t mode)
{
 8001dfe:	b590      	push	{r4, r7, lr}
 8001e00:	b089      	sub	sp, #36	@ 0x24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	4604      	mov	r4, r0
 8001e06:	4608      	mov	r0, r1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4623      	mov	r3, r4
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	4603      	mov	r3, r0
 8001e12:	80bb      	strh	r3, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	70bb      	strb	r3, [r7, #2]
	int16_t f = 1 - r;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f1c3 0301 	rsb	r3, r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	03d2      	lsls	r2, r2, #15
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	81fb      	strh	r3, [r7, #14]

	OLED_DrawPixel(x0, y0 + r);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	b2d8      	uxtb	r0, r3
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fd10 	bl	8000878 <OLED_DrawPixel>
	OLED_DrawPixel(x0, y0 - r);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	b2d8      	uxtb	r0, r3
 8001e5c:	88bb      	ldrh	r3, [r7, #4]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fd06 	bl	8000878 <OLED_DrawPixel>
	OLED_DrawPixel(x0 + r, y0);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	4413      	add	r3, r2
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	88ba      	ldrh	r2, [r7, #4]
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fcfb 	bl	8000878 <OLED_DrawPixel>
	OLED_DrawPixel(x0 - r, y0);
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	88ba      	ldrh	r2, [r7, #4]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fcf0 	bl	8000878 <OLED_DrawPixel>
	OLED_DrawLine(x0 - r, y0, x0 + r, y0);
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b218      	sxth	r0, r3
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001eb8:	f7fe fd55 	bl	8000966 <OLED_DrawLine>

	while (x < y)
 8001ebc:	e089      	b.n	8001fd2 <OLED_DrawCircleFill_Modified+0x1d4>
	{
		if (f >= 0)
 8001ebe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0e      	blt.n	8001ee4 <OLED_DrawCircleFill_Modified+0xe6>
		{
			y--;
 8001ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001ed2:	8a7b      	ldrh	r3, [r7, #18]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001eda:	8afa      	ldrh	r2, [r7, #22]
 8001edc:	8a7b      	ldrh	r3, [r7, #18]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001ef8:	8afa      	ldrh	r2, [r7, #22]
 8001efa:	8abb      	ldrh	r3, [r7, #20]
 8001efc:	4413      	add	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	82fb      	strh	r3, [r7, #22]

		OLED_DrawLine_Modified(x0 - x, y0 + y, x0 + x, y0 + y, mode);
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	8a3b      	ldrh	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b218      	sxth	r0, r3
 8001f0c:	88ba      	ldrh	r2, [r7, #4]
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	4413      	add	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	b219      	sxth	r1, r3
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	8a3b      	ldrh	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b21c      	sxth	r4, r3
 8001f20:	88ba      	ldrh	r2, [r7, #4]
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	4413      	add	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	78bb      	ldrb	r3, [r7, #2]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	4622      	mov	r2, r4
 8001f32:	f7ff fce3 	bl	80018fc <OLED_DrawLine_Modified>
		OLED_DrawLine_Modified(x0 + x, y0 - y, x0 - x, y0 - y, mode);
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	8a3b      	ldrh	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b218      	sxth	r0, r3
 8001f40:	88ba      	ldrh	r2, [r7, #4]
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b219      	sxth	r1, r3
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	8a3b      	ldrh	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b21c      	sxth	r4, r3
 8001f54:	88ba      	ldrh	r2, [r7, #4]
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	78bb      	ldrb	r3, [r7, #2]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	4622      	mov	r2, r4
 8001f66:	f7ff fcc9 	bl	80018fc <OLED_DrawLine_Modified>

		OLED_DrawLine_Modified(x0 + y, y0 + x, x0 - y, y0 + x, mode);
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b218      	sxth	r0, r3
 8001f74:	88ba      	ldrh	r2, [r7, #4]
 8001f76:	8a3b      	ldrh	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b219      	sxth	r1, r3
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b21c      	sxth	r4, r3
 8001f88:	88ba      	ldrh	r2, [r7, #4]
 8001f8a:	8a3b      	ldrh	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	78bb      	ldrb	r3, [r7, #2]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	4622      	mov	r2, r4
 8001f9a:	f7ff fcaf 	bl	80018fc <OLED_DrawLine_Modified>
		OLED_DrawLine_Modified(x0 + y, y0 - x, x0 - y, y0 - x, mode);
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	89fb      	ldrh	r3, [r7, #14]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b218      	sxth	r0, r3
 8001fa8:	88ba      	ldrh	r2, [r7, #4]
 8001faa:	8a3b      	ldrh	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b219      	sxth	r1, r3
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21c      	sxth	r4, r3
 8001fbc:	88ba      	ldrh	r2, [r7, #4]
 8001fbe:	8a3b      	ldrh	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	4622      	mov	r2, r4
 8001fce:	f7ff fc95 	bl	80018fc <OLED_DrawLine_Modified>
	while (x < y)
 8001fd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	f6ff af6f 	blt.w	8001ebe <OLED_DrawCircleFill_Modified+0xc0>
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
	...

08001fec <DrawDayOfWeek>:
//============================================================================

// Отрисовка текущего дня недели
// (параметр mode определяет цвет)
void DrawDayOfWeek(uint8_t mode)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	switch(time.dayofweek)
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <DrawDayOfWeek+0xa4>)
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d842      	bhi.n	8002086 <DrawDayOfWeek+0x9a>
 8002000:	a201      	add	r2, pc, #4	@ (adr r2, 8002008 <DrawDayOfWeek+0x1c>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	08002025 	.word	0x08002025
 800200c:	08002033 	.word	0x08002033
 8002010:	08002041 	.word	0x08002041
 8002014:	0800204f 	.word	0x0800204f
 8002018:	0800205d 	.word	0x0800205d
 800201c:	0800206b 	.word	0x0800206b
 8002020:	08002079 	.word	0x08002079
	{
		// Понедельник
		case 1:
				OLED_DrawStr_RuModified("Gjytltkmybr", 12, 13 * 3, mode);
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2227      	movs	r2, #39	@ 0x27
 8002028:	210c      	movs	r1, #12
 800202a:	481a      	ldr	r0, [pc, #104]	@ (8002094 <DrawDayOfWeek+0xa8>)
 800202c:	f7ff fc10 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002030:	e02a      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Вторник
		case 2:
				OLED_DrawStr_RuModified("Dnjhybr", 12, 13 * 3, mode);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2227      	movs	r2, #39	@ 0x27
 8002036:	210c      	movs	r1, #12
 8002038:	4817      	ldr	r0, [pc, #92]	@ (8002098 <DrawDayOfWeek+0xac>)
 800203a:	f7ff fc09 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 800203e:	e023      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Среда
		case 3:
				OLED_DrawStr_RuModified("Chtlf", 12, 13 * 3, mode);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2227      	movs	r2, #39	@ 0x27
 8002044:	210c      	movs	r1, #12
 8002046:	4815      	ldr	r0, [pc, #84]	@ (800209c <DrawDayOfWeek+0xb0>)
 8002048:	f7ff fc02 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 800204c:	e01c      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Четверг
		case 4:
				OLED_DrawStr_RuModified("Xtndthu", 12, 13 * 3, mode);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2227      	movs	r2, #39	@ 0x27
 8002052:	210c      	movs	r1, #12
 8002054:	4812      	ldr	r0, [pc, #72]	@ (80020a0 <DrawDayOfWeek+0xb4>)
 8002056:	f7ff fbfb 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 800205a:	e015      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Пятница
		case 5:
				OLED_DrawStr_RuModified("Gznybwf", 12, 13 * 3, mode);
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2227      	movs	r2, #39	@ 0x27
 8002060:	210c      	movs	r1, #12
 8002062:	4810      	ldr	r0, [pc, #64]	@ (80020a4 <DrawDayOfWeek+0xb8>)
 8002064:	f7ff fbf4 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002068:	e00e      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Суббота
		case 6:
				OLED_DrawStr_RuModified("Ce,,jnf", 12, 13 * 3, mode);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2227      	movs	r2, #39	@ 0x27
 800206e:	210c      	movs	r1, #12
 8002070:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <DrawDayOfWeek+0xbc>)
 8002072:	f7ff fbed 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002076:	e007      	b.n	8002088 <DrawDayOfWeek+0x9c>


		// Воскресенье
		case 7:
				OLED_DrawStr_RuModified("Djcrhtctymt", 12, 13 * 3, mode);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2227      	movs	r2, #39	@ 0x27
 800207c:	210c      	movs	r1, #12
 800207e:	480b      	ldr	r0, [pc, #44]	@ (80020ac <DrawDayOfWeek+0xc0>)
 8002080:	f7ff fbe6 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002084:	e000      	b.n	8002088 <DrawDayOfWeek+0x9c>


		default:
		break;
 8002086:	bf00      	nop
	}
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000a4c 	.word	0x20000a4c
 8002094:	080141f0 	.word	0x080141f0
 8002098:	080141fc 	.word	0x080141fc
 800209c:	08014204 	.word	0x08014204
 80020a0:	0801420c 	.word	0x0801420c
 80020a4:	08014214 	.word	0x08014214
 80020a8:	0801421c 	.word	0x0801421c
 80020ac:	08014224 	.word	0x08014224

080020b0 <DrawTime>:


// Отрисовка текущего времени
// (параметр mode определяет цвет)
void DrawTime(uint8_t mode)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	73bb      	strb	r3, [r7, #14]

	// Длина символа двоеточия в пикселях
	uint8_t char_length = OLED_GetWidthStr("/");
 80020c2:	485d      	ldr	r0, [pc, #372]	@ (8002238 <DrawTime+0x188>)
 80020c4:	f7fe fd06 	bl	8000ad4 <OLED_GetWidthStr>
 80020c8:	4603      	mov	r3, r0
 80020ca:	737b      	strb	r3, [r7, #13]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[3] = {0};
 80020cc:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <DrawTime+0x18c>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	813b      	strh	r3, [r7, #8]
 80020d2:	2300      	movs	r3, #0
 80020d4:	72bb      	strb	r3, [r7, #10]

	// �?значально время установлено как 0.
	// Но формат времени предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (time.hour < 10)
 80020d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <DrawTime+0x190>)
 80020d8:	789b      	ldrb	r3, [r3, #2]
 80020da:	2b09      	cmp	r3, #9
 80020dc:	d80a      	bhi.n	80020f4 <DrawTime+0x44>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7fe fd2c 	bl	8000b3c <OLED_GetWidthNum>
 80020e4:	4603      	mov	r3, r0
 80020e6:	723b      	strb	r3, [r7, #8]
		OLED_DrawNum((int16_t) 0, 12 + 40, 13 * 1, mode);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	220d      	movs	r2, #13
 80020ec:	2134      	movs	r1, #52	@ 0x34
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7fe fdbe 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.hour, 12 + num_length_zero[0] + 40, 13 * 1, mode);
 80020f4:	4b52      	ldr	r3, [pc, #328]	@ (8002240 <DrawTime+0x190>)
 80020f6:	789b      	ldrb	r3, [r3, #2]
 80020f8:	b218      	sxth	r0, r3
 80020fa:	7a3b      	ldrb	r3, [r7, #8]
 80020fc:	3334      	adds	r3, #52	@ 0x34
 80020fe:	b2d9      	uxtb	r1, r3
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	220d      	movs	r2, #13
 8002104:	f7fe fdb4 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(time.hour);
 8002108:	4b4d      	ldr	r3, [pc, #308]	@ (8002240 <DrawTime+0x190>)
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fd14 	bl	8000b3c <OLED_GetWidthNum>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

	OLED_DrawChar_Modified(':', 12 + num_length_zero[0] + num_length_1 + 2 + 40, 13 * 1, mode);
 8002118:	7a3a      	ldrb	r2, [r7, #8]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4413      	add	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3336      	adds	r3, #54	@ 0x36
 8002122:	b2d9      	uxtb	r1, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	220d      	movs	r2, #13
 8002128:	203a      	movs	r0, #58	@ 0x3a
 800212a:	f7ff fbc9 	bl	80018c0 <OLED_DrawChar_Modified>

	if (time.minutes < 10)
 800212e:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <DrawTime+0x190>)
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b09      	cmp	r3, #9
 8002134:	d812      	bhi.n	800215c <DrawTime+0xac>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 8002136:	2000      	movs	r0, #0
 8002138:	f7fe fd00 	bl	8000b3c <OLED_GetWidthNum>
 800213c:	4603      	mov	r3, r0
 800213e:	727b      	strb	r3, [r7, #9]
		OLED_DrawNum((int16_t) 0, 12 + num_length_zero[0] + num_length_1 + char_length + 40 , 13 * 1, mode);
 8002140:	7a3a      	ldrb	r2, [r7, #8]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	4413      	add	r3, r2
 8002146:	b2da      	uxtb	r2, r3
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	4413      	add	r3, r2
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3334      	adds	r3, #52	@ 0x34
 8002150:	b2d9      	uxtb	r1, r3
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	220d      	movs	r2, #13
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fd8a 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.minutes, 12 + num_length_zero[0] + num_length_1 + char_length + num_length_zero[1] + 40, 13 * 1, mode);
 800215c:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <DrawTime+0x190>)
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	b218      	sxth	r0, r3
 8002162:	7a3a      	ldrb	r2, [r7, #8]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	4413      	add	r3, r2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	7b7b      	ldrb	r3, [r7, #13]
 800216c:	4413      	add	r3, r2
 800216e:	b2da      	uxtb	r2, r3
 8002170:	7a7b      	ldrb	r3, [r7, #9]
 8002172:	4413      	add	r3, r2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3334      	adds	r3, #52	@ 0x34
 8002178:	b2d9      	uxtb	r1, r3
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	220d      	movs	r2, #13
 800217e:	f7fe fd77 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(time.minutes);
 8002182:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <DrawTime+0x190>)
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fcd7 	bl	8000b3c <OLED_GetWidthNum>
 800218e:	4603      	mov	r3, r0
 8002190:	73bb      	strb	r3, [r7, #14]

	OLED_DrawChar_Modified(':', 12 + num_length_1 + num_length_zero[0] + char_length + num_length_2 + num_length_zero[1] + 2 + 40, 13 * 1, mode);
 8002192:	7a3a      	ldrb	r2, [r7, #8]
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4413      	add	r3, r2
 8002198:	b2da      	uxtb	r2, r3
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	4413      	add	r3, r2
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
 80021a2:	4413      	add	r3, r2
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	7a7b      	ldrb	r3, [r7, #9]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3336      	adds	r3, #54	@ 0x36
 80021ae:	b2d9      	uxtb	r1, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	220d      	movs	r2, #13
 80021b4:	203a      	movs	r0, #58	@ 0x3a
 80021b6:	f7ff fb83 	bl	80018c0 <OLED_DrawChar_Modified>

	if (time.seconds < 10)
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <DrawTime+0x190>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b09      	cmp	r3, #9
 80021c0:	d81a      	bhi.n	80021f8 <DrawTime+0x148>
	{
		num_length_zero[2] = OLED_GetWidthNum(0);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7fe fcba 	bl	8000b3c <OLED_GetWidthNum>
 80021c8:	4603      	mov	r3, r0
 80021ca:	72bb      	strb	r3, [r7, #10]
		OLED_DrawNum((int16_t) 0, 12 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + 40, 13 * 1, mode);
 80021cc:	7a3a      	ldrb	r2, [r7, #8]
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	4413      	add	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	7b7b      	ldrb	r3, [r7, #13]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4413      	add	r3, r2
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	4413      	add	r3, r2
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	7a7b      	ldrb	r3, [r7, #9]
 80021e6:	4413      	add	r3, r2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3334      	adds	r3, #52	@ 0x34
 80021ec:	b2d9      	uxtb	r1, r3
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	220d      	movs	r2, #13
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fd3c 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.seconds, 12 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + num_length_zero[2] + 40, 13 * 1, mode);
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <DrawTime+0x190>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b218      	sxth	r0, r3
 80021fe:	7a3a      	ldrb	r2, [r7, #8]
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	4413      	add	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	7b7b      	ldrb	r3, [r7, #13]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4413      	add	r3, r2
 800220e:	b2da      	uxtb	r2, r3
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	4413      	add	r3, r2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	7a7b      	ldrb	r3, [r7, #9]
 8002218:	4413      	add	r3, r2
 800221a:	b2da      	uxtb	r2, r3
 800221c:	7abb      	ldrb	r3, [r7, #10]
 800221e:	4413      	add	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3334      	adds	r3, #52	@ 0x34
 8002224:	b2d9      	uxtb	r1, r3
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	220d      	movs	r2, #13
 800222a:	f7fe fd21 	bl	8000c70 <OLED_DrawNum>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	08014230 	.word	0x08014230
 800223c:	08014234 	.word	0x08014234
 8002240:	20000a4c 	.word	0x20000a4c

08002244 <DrawDate>:


// Отрисовка текущей даты
// (параметр mode определяет цвет)
void DrawDate(uint8_t mode)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	73bb      	strb	r3, [r7, #14]

	// Длина символа дроби в пикселях
	uint8_t char_length = OLED_GetWidthStr("/");
 8002256:	485d      	ldr	r0, [pc, #372]	@ (80023cc <DrawDate+0x188>)
 8002258:	f7fe fc3c 	bl	8000ad4 <OLED_GetWidthStr>
 800225c:	4603      	mov	r3, r0
 800225e:	737b      	strb	r3, [r7, #13]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[3] = {0};
 8002260:	4b5b      	ldr	r3, [pc, #364]	@ (80023d0 <DrawDate+0x18c>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	813b      	strh	r3, [r7, #8]
 8002266:	2300      	movs	r3, #0
 8002268:	72bb      	strb	r3, [r7, #10]

	// Изначально число месяца установлено как 0.
	// Но формат даты предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (time.dayofmonth < 10)
 800226a:	4b5a      	ldr	r3, [pc, #360]	@ (80023d4 <DrawDate+0x190>)
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	2b09      	cmp	r3, #9
 8002270:	d80a      	bhi.n	8002288 <DrawDate+0x44>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fc62 	bl	8000b3c <OLED_GetWidthNum>
 8002278:	4603      	mov	r3, r0
 800227a:	723b      	strb	r3, [r7, #8]
		OLED_DrawNum((int16_t) 0, 12 + 40, 13 * 0, mode);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2200      	movs	r2, #0
 8002280:	2134      	movs	r1, #52	@ 0x34
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fcf4 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.dayofmonth, 12 + num_length_zero[0] + 40, 13 * 0, mode);
 8002288:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <DrawDate+0x190>)
 800228a:	791b      	ldrb	r3, [r3, #4]
 800228c:	b218      	sxth	r0, r3
 800228e:	7a3b      	ldrb	r3, [r7, #8]
 8002290:	3334      	adds	r3, #52	@ 0x34
 8002292:	b2d9      	uxtb	r1, r3
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2200      	movs	r2, #0
 8002298:	f7fe fcea 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(time.dayofmonth);
 800229c:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <DrawDate+0x190>)
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fc4a 	bl	8000b3c <OLED_GetWidthNum>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]

	OLED_DrawChar('/', 12 + num_length_zero[0] + num_length_1 + 40, 13 * 0, mode);
 80022ac:	7a3a      	ldrb	r2, [r7, #8]
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3334      	adds	r3, #52	@ 0x34
 80022b6:	b2d9      	uxtb	r1, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2200      	movs	r2, #0
 80022bc:	202f      	movs	r0, #47	@ 0x2f
 80022be:	f7fe fc57 	bl	8000b70 <OLED_DrawChar>

	if (time.month < 10)
 80022c2:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <DrawDate+0x190>)
 80022c4:	795b      	ldrb	r3, [r3, #5]
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d812      	bhi.n	80022f0 <DrawDate+0xac>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fc36 	bl	8000b3c <OLED_GetWidthNum>
 80022d0:	4603      	mov	r3, r0
 80022d2:	727b      	strb	r3, [r7, #9]
		OLED_DrawNum((int16_t) 0, 12 + num_length_zero[0] + num_length_1 + char_length + 40, 13 * 0, mode);
 80022d4:	7a3a      	ldrb	r2, [r7, #8]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	4413      	add	r3, r2
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	7b7b      	ldrb	r3, [r7, #13]
 80022de:	4413      	add	r3, r2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3334      	adds	r3, #52	@ 0x34
 80022e4:	b2d9      	uxtb	r1, r3
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7fe fcc0 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.month, 12 + num_length_zero[0] + num_length_1 + char_length + num_length_zero[1] + 40, 13 * 0, mode);
 80022f0:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <DrawDate+0x190>)
 80022f2:	795b      	ldrb	r3, [r3, #5]
 80022f4:	b218      	sxth	r0, r3
 80022f6:	7a3a      	ldrb	r2, [r7, #8]
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	4413      	add	r3, r2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	7b7b      	ldrb	r3, [r7, #13]
 8002300:	4413      	add	r3, r2
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7a7b      	ldrb	r3, [r7, #9]
 8002306:	4413      	add	r3, r2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3334      	adds	r3, #52	@ 0x34
 800230c:	b2d9      	uxtb	r1, r3
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2200      	movs	r2, #0
 8002312:	f7fe fcad 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(time.month);
 8002316:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <DrawDate+0x190>)
 8002318:	795b      	ldrb	r3, [r3, #5]
 800231a:	b21b      	sxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fc0d 	bl	8000b3c <OLED_GetWidthNum>
 8002322:	4603      	mov	r3, r0
 8002324:	73bb      	strb	r3, [r7, #14]

	OLED_DrawChar('/', 12 + num_length_1 + num_length_zero[0] + char_length + num_length_2 + num_length_zero[1] + 40, 13 * 0, mode);
 8002326:	7a3a      	ldrb	r2, [r7, #8]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4413      	add	r3, r2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	4413      	add	r3, r2
 8002332:	b2da      	uxtb	r2, r3
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	4413      	add	r3, r2
 8002338:	b2da      	uxtb	r2, r3
 800233a:	7a7b      	ldrb	r3, [r7, #9]
 800233c:	4413      	add	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3334      	adds	r3, #52	@ 0x34
 8002342:	b2d9      	uxtb	r1, r3
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2200      	movs	r2, #0
 8002348:	202f      	movs	r0, #47	@ 0x2f
 800234a:	f7fe fc11 	bl	8000b70 <OLED_DrawChar>

	if (time.year < 10)
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <DrawDate+0x190>)
 8002350:	799b      	ldrb	r3, [r3, #6]
 8002352:	2b09      	cmp	r3, #9
 8002354:	d81a      	bhi.n	800238c <DrawDate+0x148>
	{
		num_length_zero[2] = OLED_GetWidthNum(0);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fbf0 	bl	8000b3c <OLED_GetWidthNum>
 800235c:	4603      	mov	r3, r0
 800235e:	72bb      	strb	r3, [r7, #10]
		OLED_DrawNum((int16_t) 0, 12 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + 40, 13 * 0, mode);
 8002360:	7a3a      	ldrb	r2, [r7, #8]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	4413      	add	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	4413      	add	r3, r2
 8002376:	b2da      	uxtb	r2, r3
 8002378:	7a7b      	ldrb	r3, [r7, #9]
 800237a:	4413      	add	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3334      	adds	r3, #52	@ 0x34
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2200      	movs	r2, #0
 8002386:	2000      	movs	r0, #0
 8002388:	f7fe fc72 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) time.year, 12 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + num_length_zero[2] + 40, 13 * 0, mode);
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <DrawDate+0x190>)
 800238e:	799b      	ldrb	r3, [r3, #6]
 8002390:	b218      	sxth	r0, r3
 8002392:	7a3a      	ldrb	r2, [r7, #8]
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	4413      	add	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7b7b      	ldrb	r3, [r7, #13]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	4413      	add	r3, r2
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	7a7b      	ldrb	r3, [r7, #9]
 80023ac:	4413      	add	r3, r2
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	4413      	add	r3, r2
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3334      	adds	r3, #52	@ 0x34
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2200      	movs	r2, #0
 80023be:	f7fe fc57 	bl	8000c70 <OLED_DrawNum>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	08014230 	.word	0x08014230
 80023d0:	08014234 	.word	0x08014234
 80023d4:	20000a4c 	.word	0x20000a4c

080023d8 <BuildSetDate>:


// Сборка даты при настройке
void BuildSetDate(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	timeSetDate.dayofmonth = NumberSetDate[0] * 10 + NumberSetDate[1];
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <BuildSetDate+0x5c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <BuildSetDate+0x5c>)
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <BuildSetDate+0x60>)
 80023f4:	711a      	strb	r2, [r3, #4]
	timeSetDate.month = NumberSetDate[2] * 10 + NumberSetDate[3];
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <BuildSetDate+0x5c>)
 80023f8:	789b      	ldrb	r3, [r3, #2]
 80023fa:	461a      	mov	r2, r3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <BuildSetDate+0x5c>)
 8002406:	78db      	ldrb	r3, [r3, #3]
 8002408:	4413      	add	r3, r2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <BuildSetDate+0x60>)
 800240e:	715a      	strb	r2, [r3, #5]
	timeSetDate.year = NumberSetDate[4] * 10 + NumberSetDate[5];
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <BuildSetDate+0x5c>)
 8002412:	791b      	ldrb	r3, [r3, #4]
 8002414:	461a      	mov	r2, r3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4413      	add	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <BuildSetDate+0x5c>)
 8002420:	795b      	ldrb	r3, [r3, #5]
 8002422:	4413      	add	r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <BuildSetDate+0x60>)
 8002428:	719a      	strb	r2, [r3, #6]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	200009d8 	.word	0x200009d8
 8002438:	20000a54 	.word	0x20000a54

0800243c <DrawSetDate>:


// Отрисовка даты при настройке
// (параметр mode определяет цвет)
void DrawSetDate(uint8_t mode)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	73bb      	strb	r3, [r7, #14]

	// Длина символа дроби в пикселях
	uint8_t char_length = OLED_GetWidthStr("/");
 800244e:	485d      	ldr	r0, [pc, #372]	@ (80025c4 <DrawSetDate+0x188>)
 8002450:	f7fe fb40 	bl	8000ad4 <OLED_GetWidthStr>
 8002454:	4603      	mov	r3, r0
 8002456:	737b      	strb	r3, [r7, #13]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[3] = {0};
 8002458:	4b5b      	ldr	r3, [pc, #364]	@ (80025c8 <DrawSetDate+0x18c>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	2300      	movs	r3, #0
 8002460:	72bb      	strb	r3, [r7, #10]

	// �?значально число месяца установлено как 0.
	// Но формат даты предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (timeSetDate.dayofmonth < 10)
 8002462:	4b5a      	ldr	r3, [pc, #360]	@ (80025cc <DrawSetDate+0x190>)
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d80a      	bhi.n	8002480 <DrawSetDate+0x44>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fb66 	bl	8000b3c <OLED_GetWidthNum>
 8002470:	4603      	mov	r3, r0
 8002472:	723b      	strb	r3, [r7, #8]
		OLED_DrawNum((int16_t) 0, 16, 13 * 2, mode);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	221a      	movs	r2, #26
 8002478:	2110      	movs	r1, #16
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe fbf8 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) timeSetDate.dayofmonth, 16 + num_length_zero[0], 13 * 2, mode);
 8002480:	4b52      	ldr	r3, [pc, #328]	@ (80025cc <DrawSetDate+0x190>)
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	b218      	sxth	r0, r3
 8002486:	7a3b      	ldrb	r3, [r7, #8]
 8002488:	3310      	adds	r3, #16
 800248a:	b2d9      	uxtb	r1, r3
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	221a      	movs	r2, #26
 8002490:	f7fe fbee 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(timeSetDate.dayofmonth);
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <DrawSetDate+0x190>)
 8002496:	791b      	ldrb	r3, [r3, #4]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fb4e 	bl	8000b3c <OLED_GetWidthNum>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]

	OLED_DrawChar('/', 16 + num_length_zero[0] + num_length_1, 13 * 2, mode);
 80024a4:	7a3a      	ldrb	r2, [r7, #8]
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4413      	add	r3, r2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3310      	adds	r3, #16
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	221a      	movs	r2, #26
 80024b4:	202f      	movs	r0, #47	@ 0x2f
 80024b6:	f7fe fb5b 	bl	8000b70 <OLED_DrawChar>

	if (timeSetDate.month < 10)
 80024ba:	4b44      	ldr	r3, [pc, #272]	@ (80025cc <DrawSetDate+0x190>)
 80024bc:	795b      	ldrb	r3, [r3, #5]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d812      	bhi.n	80024e8 <DrawSetDate+0xac>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fb3a 	bl	8000b3c <OLED_GetWidthNum>
 80024c8:	4603      	mov	r3, r0
 80024ca:	727b      	strb	r3, [r7, #9]
		OLED_DrawNum((int16_t) 0, 16 + num_length_zero[0] + num_length_1 + char_length, 13 * 2, mode);
 80024cc:	7a3a      	ldrb	r2, [r7, #8]
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	4413      	add	r3, r2
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	4413      	add	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3310      	adds	r3, #16
 80024dc:	b2d9      	uxtb	r1, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	221a      	movs	r2, #26
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fbc4 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) timeSetDate.month, 16 + num_length_zero[0] + num_length_1 + char_length + num_length_zero[1], 13 * 2, mode);
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <DrawSetDate+0x190>)
 80024ea:	795b      	ldrb	r3, [r3, #5]
 80024ec:	b218      	sxth	r0, r3
 80024ee:	7a3a      	ldrb	r2, [r7, #8]
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	4413      	add	r3, r2
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	7b7b      	ldrb	r3, [r7, #13]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	7a7b      	ldrb	r3, [r7, #9]
 80024fe:	4413      	add	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3310      	adds	r3, #16
 8002504:	b2d9      	uxtb	r1, r3
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	221a      	movs	r2, #26
 800250a:	f7fe fbb1 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(timeSetDate.month);
 800250e:	4b2f      	ldr	r3, [pc, #188]	@ (80025cc <DrawSetDate+0x190>)
 8002510:	795b      	ldrb	r3, [r3, #5]
 8002512:	b21b      	sxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fb11 	bl	8000b3c <OLED_GetWidthNum>
 800251a:	4603      	mov	r3, r0
 800251c:	73bb      	strb	r3, [r7, #14]

	OLED_DrawChar('/', 16 + num_length_1 + num_length_zero[0] + char_length + num_length_2 + num_length_zero[1], 13 * 2, mode);
 800251e:	7a3a      	ldrb	r2, [r7, #8]
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	4413      	add	r3, r2
 8002524:	b2da      	uxtb	r2, r3
 8002526:	7b7b      	ldrb	r3, [r7, #13]
 8002528:	4413      	add	r3, r2
 800252a:	b2da      	uxtb	r2, r3
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	4413      	add	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	7a7b      	ldrb	r3, [r7, #9]
 8002534:	4413      	add	r3, r2
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3310      	adds	r3, #16
 800253a:	b2d9      	uxtb	r1, r3
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	221a      	movs	r2, #26
 8002540:	202f      	movs	r0, #47	@ 0x2f
 8002542:	f7fe fb15 	bl	8000b70 <OLED_DrawChar>

	if (timeSetDate.year < 10)
 8002546:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <DrawSetDate+0x190>)
 8002548:	799b      	ldrb	r3, [r3, #6]
 800254a:	2b09      	cmp	r3, #9
 800254c:	d81a      	bhi.n	8002584 <DrawSetDate+0x148>
	{
		num_length_zero[2] = OLED_GetWidthNum(0);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe faf4 	bl	8000b3c <OLED_GetWidthNum>
 8002554:	4603      	mov	r3, r0
 8002556:	72bb      	strb	r3, [r7, #10]
		OLED_DrawNum((int16_t) 0, 16 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1], 13 * 2, mode);
 8002558:	7a3a      	ldrb	r2, [r7, #8]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4413      	add	r3, r2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4413      	add	r3, r2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	4413      	add	r3, r2
 800256e:	b2da      	uxtb	r2, r3
 8002570:	7a7b      	ldrb	r3, [r7, #9]
 8002572:	4413      	add	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3310      	adds	r3, #16
 8002578:	b2d9      	uxtb	r1, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	221a      	movs	r2, #26
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fb76 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) timeSetDate.year, 16 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + num_length_zero[2], 13 * 2, mode);
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <DrawSetDate+0x190>)
 8002586:	799b      	ldrb	r3, [r3, #6]
 8002588:	b218      	sxth	r0, r3
 800258a:	7a3a      	ldrb	r2, [r7, #8]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4413      	add	r3, r2
 8002590:	b2da      	uxtb	r2, r3
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4413      	add	r3, r2
 800259a:	b2da      	uxtb	r2, r3
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	4413      	add	r3, r2
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	7a7b      	ldrb	r3, [r7, #9]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	7abb      	ldrb	r3, [r7, #10]
 80025aa:	4413      	add	r3, r2
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3310      	adds	r3, #16
 80025b0:	b2d9      	uxtb	r1, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	221a      	movs	r2, #26
 80025b6:	f7fe fb5b 	bl	8000c70 <OLED_DrawNum>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08014230 	.word	0x08014230
 80025c8:	08014234 	.word	0x08014234
 80025cc:	20000a54 	.word	0x20000a54

080025d0 <SetDate>:


// Настройка даты
void SetDate(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	// Сбор текущей даты
	BuildSetDate();
 80025d4:	f7ff ff00 	bl	80023d8 <BuildSetDate>

	// Вывод даты на экран
	DrawSetDate(1);
 80025d8:	2001      	movs	r0, #1
 80025da:	f7ff ff2f 	bl	800243c <DrawSetDate>
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <BuildSetDayOfWeek>:


// Сборка дня недели при настройке
void BuildSetDayOfWeek(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	timeSetDate.dayofweek = NumberSetDayOfWeek;
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <BuildSetDayOfWeek+0x18>)
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <BuildSetDayOfWeek+0x1c>)
 80025ee:	70da      	strb	r2, [r3, #3]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20000a54 	.word	0x20000a54

08002604 <DrawSetDayOfWeek>:


// Отрисовка дня недели при установке
// (параметр mode определяет цвет)
void DrawSetDayOfWeek(uint8_t mode)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	switch(timeSetDate.dayofweek)
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <DrawSetDayOfWeek+0xa4>)
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	3b01      	subs	r3, #1
 8002614:	2b06      	cmp	r3, #6
 8002616:	d842      	bhi.n	800269e <DrawSetDayOfWeek+0x9a>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <DrawSetDayOfWeek+0x1c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	0800263d 	.word	0x0800263d
 8002624:	0800264b 	.word	0x0800264b
 8002628:	08002659 	.word	0x08002659
 800262c:	08002667 	.word	0x08002667
 8002630:	08002675 	.word	0x08002675
 8002634:	08002683 	.word	0x08002683
 8002638:	08002691 	.word	0x08002691
	{
		// Понедельник
		case 1:
				OLED_DrawStr_RuModified("Gjytltkmybr", 12, 13 * 2, mode);
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	221a      	movs	r2, #26
 8002640:	210c      	movs	r1, #12
 8002642:	481a      	ldr	r0, [pc, #104]	@ (80026ac <DrawSetDayOfWeek+0xa8>)
 8002644:	f7ff f904 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002648:	e02a      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Вторник
		case 2:
				OLED_DrawStr_RuModified("Dnjhybr", 12, 13 * 2, mode);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	221a      	movs	r2, #26
 800264e:	210c      	movs	r1, #12
 8002650:	4817      	ldr	r0, [pc, #92]	@ (80026b0 <DrawSetDayOfWeek+0xac>)
 8002652:	f7ff f8fd 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002656:	e023      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Среда
		case 3:
				OLED_DrawStr_RuModified("Chtlf", 12, 13 * 2, mode);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	221a      	movs	r2, #26
 800265c:	210c      	movs	r1, #12
 800265e:	4815      	ldr	r0, [pc, #84]	@ (80026b4 <DrawSetDayOfWeek+0xb0>)
 8002660:	f7ff f8f6 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002664:	e01c      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Четверг
		case 4:
				OLED_DrawStr_RuModified("Xtndthu", 12, 13 * 2, mode);
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	221a      	movs	r2, #26
 800266a:	210c      	movs	r1, #12
 800266c:	4812      	ldr	r0, [pc, #72]	@ (80026b8 <DrawSetDayOfWeek+0xb4>)
 800266e:	f7ff f8ef 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002672:	e015      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Пятница
		case 5:
				OLED_DrawStr_RuModified("Gznybwf", 12, 13 * 2, mode);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	221a      	movs	r2, #26
 8002678:	210c      	movs	r1, #12
 800267a:	4810      	ldr	r0, [pc, #64]	@ (80026bc <DrawSetDayOfWeek+0xb8>)
 800267c:	f7ff f8e8 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 8002680:	e00e      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Суббота
		case 6:
				OLED_DrawStr_RuModified("Ce,,jnf", 12, 13 * 2, mode);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	221a      	movs	r2, #26
 8002686:	210c      	movs	r1, #12
 8002688:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <DrawSetDayOfWeek+0xbc>)
 800268a:	f7ff f8e1 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 800268e:	e007      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		// Воскресенье
		case 7:
				OLED_DrawStr_RuModified("Djcrhtctymt", 12, 13 * 2, mode);
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	221a      	movs	r2, #26
 8002694:	210c      	movs	r1, #12
 8002696:	480b      	ldr	r0, [pc, #44]	@ (80026c4 <DrawSetDayOfWeek+0xc0>)
 8002698:	f7ff f8da 	bl	8001850 <OLED_DrawStr_RuModified>
		break;
 800269c:	e000      	b.n	80026a0 <DrawSetDayOfWeek+0x9c>


		default:
		break;
 800269e:	bf00      	nop
	}
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000a54 	.word	0x20000a54
 80026ac:	080141f0 	.word	0x080141f0
 80026b0:	080141fc 	.word	0x080141fc
 80026b4:	08014204 	.word	0x08014204
 80026b8:	0801420c 	.word	0x0801420c
 80026bc:	08014214 	.word	0x08014214
 80026c0:	0801421c 	.word	0x0801421c
 80026c4:	08014224 	.word	0x08014224

080026c8 <SetDayOfWeek>:


// Настройка дня недели
void SetDayOfWeek(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	// Сборка дня
	// недели при настройке
	BuildSetDayOfWeek();
 80026cc:	f7ff ff8a 	bl	80025e4 <BuildSetDayOfWeek>

	// Вывод дня недели на экран
	DrawSetDayOfWeek(1);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff ff97 	bl	8002604 <DrawSetDayOfWeek>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <BuildSetTime>:


// Сбор времени при настройке
void BuildSetTime(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	switch(current_frame)
 80026e0:	4b3d      	ldr	r3, [pc, #244]	@ (80027d8 <BuildSetTime+0xfc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b0e      	cmp	r3, #14
 80026e6:	d049      	beq.n	800277c <BuildSetTime+0xa0>
 80026e8:	2b0e      	cmp	r3, #14
 80026ea:	dc6f      	bgt.n	80027cc <BuildSetTime+0xf0>
 80026ec:	2b07      	cmp	r3, #7
 80026ee:	d002      	beq.n	80026f6 <BuildSetTime+0x1a>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d028      	beq.n	8002746 <BuildSetTime+0x6a>
			timeSetDate.seconds = NumberSetTime[4] * 10 + NumberSetTime[5];

		break;

		default:
		break;
 80026f4:	e06a      	b.n	80027cc <BuildSetTime+0xf0>
			WateringParamsSet.hour = NumberSetTimeWater[0] * 10 + NumberSetTimeWater[1];
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <BuildSetTime+0x100>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	0092      	lsls	r2, r2, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b35      	ldr	r3, [pc, #212]	@ (80027dc <BuildSetTime+0x100>)
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	4413      	add	r3, r2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <BuildSetTime+0x104>)
 800270e:	709a      	strb	r2, [r3, #2]
			WateringParamsSet.minutes = NumberSetTimeWater[2] * 10 + NumberSetTimeWater[3];
 8002710:	4b32      	ldr	r3, [pc, #200]	@ (80027dc <BuildSetTime+0x100>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	461a      	mov	r2, r3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4413      	add	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <BuildSetTime+0x100>)
 8002720:	78db      	ldrb	r3, [r3, #3]
 8002722:	4413      	add	r3, r2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <BuildSetTime+0x104>)
 8002728:	705a      	strb	r2, [r3, #1]
			WateringParamsSet.seconds = NumberSetTimeWater[4] * 10 + NumberSetTimeWater[5];
 800272a:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <BuildSetTime+0x100>)
 800272c:	791b      	ldrb	r3, [r3, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4413      	add	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <BuildSetTime+0x100>)
 800273a:	795b      	ldrb	r3, [r3, #5]
 800273c:	4413      	add	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <BuildSetTime+0x104>)
 8002742:	701a      	strb	r2, [r3, #0]
		break;
 8002744:	e043      	b.n	80027ce <BuildSetTime+0xf2>
			WateringParamsSet.minutes_watering = NumberSetDurationWater[0] * 10 + NumberSetDurationWater[1];
 8002746:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <BuildSetTime+0x108>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	0092      	lsls	r2, r2, #2
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <BuildSetTime+0x108>)
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	4413      	add	r3, r2
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <BuildSetTime+0x104>)
 800275e:	711a      	strb	r2, [r3, #4]
			WateringParamsSet.seconds_watering = NumberSetDurationWater[2] * 10 + NumberSetDurationWater[3];
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <BuildSetTime+0x108>)
 8002762:	789b      	ldrb	r3, [r3, #2]
 8002764:	461a      	mov	r2, r3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4413      	add	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <BuildSetTime+0x108>)
 8002770:	78db      	ldrb	r3, [r3, #3]
 8002772:	4413      	add	r3, r2
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <BuildSetTime+0x104>)
 8002778:	70da      	strb	r2, [r3, #3]
		break;
 800277a:	e028      	b.n	80027ce <BuildSetTime+0xf2>
			timeSetDate.hour = NumberSetTime[0] * 10 + NumberSetTime[1];
 800277c:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <BuildSetTime+0x10c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4413      	add	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <BuildSetTime+0x10c>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	4413      	add	r3, r2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <BuildSetTime+0x110>)
 8002794:	709a      	strb	r2, [r3, #2]
			timeSetDate.minutes = NumberSetTime[2] * 10 + NumberSetTime[3];
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <BuildSetTime+0x10c>)
 8002798:	789b      	ldrb	r3, [r3, #2]
 800279a:	461a      	mov	r2, r3
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <BuildSetTime+0x10c>)
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	4413      	add	r3, r2
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <BuildSetTime+0x110>)
 80027ae:	705a      	strb	r2, [r3, #1]
			timeSetDate.seconds = NumberSetTime[4] * 10 + NumberSetTime[5];
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <BuildSetTime+0x10c>)
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	461a      	mov	r2, r3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <BuildSetTime+0x10c>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	4413      	add	r3, r2
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <BuildSetTime+0x110>)
 80027c8:	701a      	strb	r2, [r3, #0]
		break;
 80027ca:	e000      	b.n	80027ce <BuildSetTime+0xf2>
		break;
 80027cc:	bf00      	nop
	}
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000a3c 	.word	0x20000a3c
 80027dc:	200009fc 	.word	0x200009fc
 80027e0:	20000a68 	.word	0x20000a68
 80027e4:	20000a04 	.word	0x20000a04
 80027e8:	200009e0 	.word	0x200009e0
 80027ec:	20000a54 	.word	0x20000a54

080027f0 <DrawSetTime>:

// Отрисовка времени при настройке
// (параметр ptr_struct - указатель на структуру
// timeSetDate или WateringParamsSet)
void DrawSetTime(char* ptr_struct, uint8_t mode)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	75fb      	strb	r3, [r7, #23]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	75bb      	strb	r3, [r7, #22]

	// Длина символа в пикселях
	uint8_t char_length = OLED_GetWidthStr("/");
 8002804:	485e      	ldr	r0, [pc, #376]	@ (8002980 <DrawSetTime+0x190>)
 8002806:	f7fe f965 	bl	8000ad4 <OLED_GetWidthStr>
 800280a:	4603      	mov	r3, r0
 800280c:	757b      	strb	r3, [r7, #21]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[3] = {0};
 800280e:	4b5d      	ldr	r3, [pc, #372]	@ (8002984 <DrawSetTime+0x194>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	823b      	strh	r3, [r7, #16]
 8002814:	2300      	movs	r3, #0
 8002816:	74bb      	strb	r3, [r7, #18]

	// Массив, хранящий значения:
	// [0] - секунд, [1] - минут,
	// [2] - часов (для кадров 7, 14)
	uint8_t temp_arr[3] = {0};
 8002818:	4b5a      	ldr	r3, [pc, #360]	@ (8002984 <DrawSetTime+0x194>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	81bb      	strh	r3, [r7, #12]
 800281e:	2300      	movs	r3, #0
 8002820:	73bb      	strb	r3, [r7, #14]


	// Копирование данных в массив temp_arr
	memcpy((char*) &temp_arr, ptr_struct, 3);
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	8811      	ldrh	r1, [r2, #0]
 800282a:	7892      	ldrb	r2, [r2, #2]
 800282c:	8019      	strh	r1, [r3, #0]
 800282e:	709a      	strb	r2, [r3, #2]

	// Изначально время установлено как 0.
	// Но формат времени предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (temp_arr[2] < 10)
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	2b09      	cmp	r3, #9
 8002834:	d80a      	bhi.n	800284c <DrawSetTime+0x5c>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe f980 	bl	8000b3c <OLED_GetWidthNum>
 800283c:	4603      	mov	r3, r0
 800283e:	743b      	strb	r3, [r7, #16]
		OLED_DrawNum((int16_t) 0, 16, 13 * 2, mode);
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	221a      	movs	r2, #26
 8002844:	2110      	movs	r1, #16
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fa12 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[2], 16 + num_length_zero[0], 13 * 2, mode);
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	b218      	sxth	r0, r3
 8002850:	7c3b      	ldrb	r3, [r7, #16]
 8002852:	3310      	adds	r3, #16
 8002854:	b2d9      	uxtb	r1, r3
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	221a      	movs	r2, #26
 800285a:	f7fe fa09 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(temp_arr[2]);
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	b21b      	sxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f96a 	bl	8000b3c <OLED_GetWidthNum>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]

	OLED_DrawChar_Modified(':', 16 + num_length_zero[0] + num_length_1 + 2, 13 * 2, mode);
 800286c:	7c3a      	ldrb	r2, [r7, #16]
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	4413      	add	r3, r2
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3312      	adds	r3, #18
 8002876:	b2d9      	uxtb	r1, r3
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	221a      	movs	r2, #26
 800287c:	203a      	movs	r0, #58	@ 0x3a
 800287e:	f7ff f81f 	bl	80018c0 <OLED_DrawChar_Modified>

	if (temp_arr[1] < 10)
 8002882:	7b7b      	ldrb	r3, [r7, #13]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d812      	bhi.n	80028ae <DrawSetTime+0xbe>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe f957 	bl	8000b3c <OLED_GetWidthNum>
 800288e:	4603      	mov	r3, r0
 8002890:	747b      	strb	r3, [r7, #17]
		OLED_DrawNum((int16_t) 0, 16 + num_length_zero[0] + num_length_1 + char_length, 13 * 2, mode);
 8002892:	7c3a      	ldrb	r2, [r7, #16]
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	4413      	add	r3, r2
 8002898:	b2da      	uxtb	r2, r3
 800289a:	7d7b      	ldrb	r3, [r7, #21]
 800289c:	4413      	add	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3310      	adds	r3, #16
 80028a2:	b2d9      	uxtb	r1, r3
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	221a      	movs	r2, #26
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe f9e1 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[1], 16 + num_length_zero[0] + num_length_1 + char_length + num_length_zero[1], 13 * 2, mode);
 80028ae:	7b7b      	ldrb	r3, [r7, #13]
 80028b0:	b218      	sxth	r0, r3
 80028b2:	7c3a      	ldrb	r2, [r7, #16]
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	7d7b      	ldrb	r3, [r7, #21]
 80028bc:	4413      	add	r3, r2
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	7c7b      	ldrb	r3, [r7, #17]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3310      	adds	r3, #16
 80028c8:	b2d9      	uxtb	r1, r3
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	221a      	movs	r2, #26
 80028ce:	f7fe f9cf 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(temp_arr[1]);
 80028d2:	7b7b      	ldrb	r3, [r7, #13]
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f930 	bl	8000b3c <OLED_GetWidthNum>
 80028dc:	4603      	mov	r3, r0
 80028de:	75bb      	strb	r3, [r7, #22]

	OLED_DrawChar_Modified(':', 16 + num_length_1 + num_length_zero[0] + char_length + num_length_2 + num_length_zero[1] + 2, 13 * 2, mode);
 80028e0:	7c3a      	ldrb	r2, [r7, #16]
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	4413      	add	r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7d7b      	ldrb	r3, [r7, #21]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	7dbb      	ldrb	r3, [r7, #22]
 80028f0:	4413      	add	r3, r2
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	4413      	add	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3312      	adds	r3, #18
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	221a      	movs	r2, #26
 8002902:	203a      	movs	r0, #58	@ 0x3a
 8002904:	f7fe ffdc 	bl	80018c0 <OLED_DrawChar_Modified>

	if (temp_arr[0] < 10)
 8002908:	7b3b      	ldrb	r3, [r7, #12]
 800290a:	2b09      	cmp	r3, #9
 800290c:	d81a      	bhi.n	8002944 <DrawSetTime+0x154>
	{
		num_length_zero[2] = OLED_GetWidthNum(0);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f914 	bl	8000b3c <OLED_GetWidthNum>
 8002914:	4603      	mov	r3, r0
 8002916:	74bb      	strb	r3, [r7, #18]
		OLED_DrawNum((int16_t) 0, 16 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1], 13 * 2, mode);
 8002918:	7c3a      	ldrb	r2, [r7, #16]
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	4413      	add	r3, r2
 800291e:	b2da      	uxtb	r2, r3
 8002920:	7d7b      	ldrb	r3, [r7, #21]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4413      	add	r3, r2
 8002928:	b2da      	uxtb	r2, r3
 800292a:	7dbb      	ldrb	r3, [r7, #22]
 800292c:	4413      	add	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	7c7b      	ldrb	r3, [r7, #17]
 8002932:	4413      	add	r3, r2
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3310      	adds	r3, #16
 8002938:	b2d9      	uxtb	r1, r3
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	221a      	movs	r2, #26
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f996 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[0], 16 + num_length_1 + num_length_zero[0] + char_length * 2 + num_length_2 + num_length_zero[1] + num_length_zero[2], 13 * 2, mode);
 8002944:	7b3b      	ldrb	r3, [r7, #12]
 8002946:	b218      	sxth	r0, r3
 8002948:	7c3a      	ldrb	r2, [r7, #16]
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	4413      	add	r3, r2
 800294e:	b2da      	uxtb	r2, r3
 8002950:	7d7b      	ldrb	r3, [r7, #21]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	7dbb      	ldrb	r3, [r7, #22]
 800295c:	4413      	add	r3, r2
 800295e:	b2da      	uxtb	r2, r3
 8002960:	7c7b      	ldrb	r3, [r7, #17]
 8002962:	4413      	add	r3, r2
 8002964:	b2da      	uxtb	r2, r3
 8002966:	7cbb      	ldrb	r3, [r7, #18]
 8002968:	4413      	add	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3310      	adds	r3, #16
 800296e:	b2d9      	uxtb	r1, r3
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	221a      	movs	r2, #26
 8002974:	f7fe f97c 	bl	8000c70 <OLED_DrawNum>
}
 8002978:	bf00      	nop
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	08014230 	.word	0x08014230
 8002984:	08014234 	.word	0x08014234

08002988 <DrawSetDurationWater>:


// Отрисовка продолжительности полива при настройке
void DrawSetDurationWater(char* ptr_struct, uint8_t mode)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	73bb      	strb	r3, [r7, #14]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[2] = {0};
 800299c:	2300      	movs	r3, #0
 800299e:	81bb      	strh	r3, [r7, #12]

	// Массив, хранящий значения:
	// [0] - секунд, [1] - минут (для кадров 8)
	uint8_t temp_arr[2] = {0};
 80029a0:	2300      	movs	r3, #0
 80029a2:	813b      	strh	r3, [r7, #8]


	// Копирование данных в массив temp_arr
	memcpy((char*) &temp_arr, ptr_struct, 2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	813b      	strh	r3, [r7, #8]

	// Изначально время установлено как 0.
	// Но формат времени предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (temp_arr[1] < 10)
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	d80a      	bhi.n	80029c8 <DrawSetDurationWater+0x40>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f8c2 	bl	8000b3c <OLED_GetWidthNum>
 80029b8:	4603      	mov	r3, r0
 80029ba:	733b      	strb	r3, [r7, #12]
		OLED_DrawNum((int16_t) 0, 16, 13 * 2, mode);
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	221a      	movs	r2, #26
 80029c0:	2110      	movs	r1, #16
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe f954 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[1], 16 + num_length_zero[0], 13 * 2, mode);
 80029c8:	7a7b      	ldrb	r3, [r7, #9]
 80029ca:	b218      	sxth	r0, r3
 80029cc:	7b3b      	ldrb	r3, [r7, #12]
 80029ce:	3310      	adds	r3, #16
 80029d0:	b2d9      	uxtb	r1, r3
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	221a      	movs	r2, #26
 80029d6:	f7fe f94b 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(temp_arr[1]);
 80029da:	7a7b      	ldrb	r3, [r7, #9]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f8ac 	bl	8000b3c <OLED_GetWidthNum>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]

	OLED_DrawStr_RuModified("vby", 16 + num_length_zero[0] + num_length_1 + 2, 13 * 2, mode);
 80029e8:	7b3a      	ldrb	r2, [r7, #12]
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	4413      	add	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3312      	adds	r3, #18
 80029f2:	b2d9      	uxtb	r1, r3
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	221a      	movs	r2, #26
 80029f8:	4829      	ldr	r0, [pc, #164]	@ (8002aa0 <DrawSetDurationWater+0x118>)
 80029fa:	f7fe ff29 	bl	8001850 <OLED_DrawStr_RuModified>

	if (temp_arr[0] < 10)
 80029fe:	7a3b      	ldrb	r3, [r7, #8]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d815      	bhi.n	8002a30 <DrawSetDurationWater+0xa8>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe f899 	bl	8000b3c <OLED_GetWidthNum>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	737b      	strb	r3, [r7, #13]
		OLED_DrawNum((int16_t) 0, 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 2, 13 * 2, mode);
 8002a0e:	7b3a      	ldrb	r2, [r7, #12]
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	4413      	add	r3, r2
 8002a14:	b2dc      	uxtb	r4, r3
 8002a16:	4822      	ldr	r0, [pc, #136]	@ (8002aa0 <DrawSetDurationWater+0x118>)
 8002a18:	f7fe f85c 	bl	8000ad4 <OLED_GetWidthStr>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4423      	add	r3, r4
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3317      	adds	r3, #23
 8002a24:	b2d9      	uxtb	r1, r3
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	221a      	movs	r2, #26
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe f920 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[0], 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 2 + num_length_zero[1], 13 * 2, mode);
 8002a30:	7a3b      	ldrb	r3, [r7, #8]
 8002a32:	b21d      	sxth	r5, r3
 8002a34:	7b3a      	ldrb	r2, [r7, #12]
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b2dc      	uxtb	r4, r3
 8002a3c:	4818      	ldr	r0, [pc, #96]	@ (8002aa0 <DrawSetDurationWater+0x118>)
 8002a3e:	f7fe f849 	bl	8000ad4 <OLED_GetWidthStr>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4423      	add	r3, r4
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	7b7b      	ldrb	r3, [r7, #13]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3317      	adds	r3, #23
 8002a50:	b2d9      	uxtb	r1, r3
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	221a      	movs	r2, #26
 8002a56:	4628      	mov	r0, r5
 8002a58:	f7fe f90a 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(temp_arr[0]);
 8002a5c:	7a3b      	ldrb	r3, [r7, #8]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe f86b 	bl	8000b3c <OLED_GetWidthNum>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73bb      	strb	r3, [r7, #14]

	OLED_DrawStr_RuModified("ctr", 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 3 + num_length_zero[1] + num_length_2, 13 * 2, mode);
 8002a6a:	7b3a      	ldrb	r2, [r7, #12]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b2dc      	uxtb	r4, r3
 8002a72:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <DrawSetDurationWater+0x118>)
 8002a74:	f7fe f82e 	bl	8000ad4 <OLED_GetWidthStr>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4423      	add	r3, r4
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	7b7b      	ldrb	r3, [r7, #13]
 8002a80:	4413      	add	r3, r2
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	4413      	add	r3, r2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3319      	adds	r3, #25
 8002a8c:	b2d9      	uxtb	r1, r3
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	221a      	movs	r2, #26
 8002a92:	4804      	ldr	r0, [pc, #16]	@ (8002aa4 <DrawSetDurationWater+0x11c>)
 8002a94:	f7fe fedc 	bl	8001850 <OLED_DrawStr_RuModified>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa0:	08014238 	.word	0x08014238
 8002aa4:	0801423c 	.word	0x0801423c

08002aa8 <SetTimeSMH>:


// Настройка времени
void SetTimeSMH(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	// Сбор текущего времени
	BuildSetTime();
 8002aac:	f7ff fe16 	bl	80026dc <BuildSetTime>

	switch(current_frame)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <SetTimeSMH+0x50>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b0e      	cmp	r3, #14
 8002ab6:	d015      	beq.n	8002ae4 <SetTimeSMH+0x3c>
 8002ab8:	2b0e      	cmp	r3, #14
 8002aba:	dc1a      	bgt.n	8002af2 <SetTimeSMH+0x4a>
 8002abc:	2b07      	cmp	r3, #7
 8002abe:	d002      	beq.n	8002ac6 <SetTimeSMH+0x1e>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d007      	beq.n	8002ad4 <SetTimeSMH+0x2c>
			// Вывод времени на экран
			DrawSetTime(ptr_timeSetDate, 1);

		break;
	}
}
 8002ac4:	e015      	b.n	8002af2 <SetTimeSMH+0x4a>
			DrawSetTime(ptr_WateringParamsSet, 1);
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <SetTimeSMH+0x54>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fe8f 	bl	80027f0 <DrawSetTime>
		break;
 8002ad2:	e00e      	b.n	8002af2 <SetTimeSMH+0x4a>
			DrawSetDurationWater(ptr_WateringParamsSet + 3, 1);
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <SetTimeSMH+0x54>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3303      	adds	r3, #3
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff53 	bl	8002988 <DrawSetDurationWater>
		break;
 8002ae2:	e006      	b.n	8002af2 <SetTimeSMH+0x4a>
			DrawSetTime(ptr_timeSetDate, 1);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <SetTimeSMH+0x58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe80 	bl	80027f0 <DrawSetTime>
		break;
 8002af0:	bf00      	nop
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000a3c 	.word	0x20000a3c
 8002afc:	20000124 	.word	0x20000124
 8002b00:	2000011c 	.word	0x2000011c

08002b04 <BuildSetScreenAutoOff>:


// Сбор текущего времени
// автоотключения экрана
void BuildSetScreenAutoOff(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
	ScreenOffSet.minutes_screen_off = NumberSetScreenOff[0] * 10 + NumberSetScreenOff[1];
 8002b08:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <BuildSetScreenAutoOff+0x44>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <BuildSetScreenAutoOff+0x44>)
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <BuildSetScreenAutoOff+0x48>)
 8002b20:	705a      	strb	r2, [r3, #1]
	ScreenOffSet.seconds_screen_off = NumberSetScreenOff[2] * 10 + NumberSetScreenOff[3];
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <BuildSetScreenAutoOff+0x44>)
 8002b24:	789b      	ldrb	r3, [r3, #2]
 8002b26:	461a      	mov	r2, r3
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <BuildSetScreenAutoOff+0x44>)
 8002b32:	78db      	ldrb	r3, [r3, #3]
 8002b34:	4413      	add	r3, r2
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <BuildSetScreenAutoOff+0x48>)
 8002b3a:	701a      	strb	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000a24 	.word	0x20000a24
 8002b4c:	20000a7c 	.word	0x20000a7c

08002b50 <DrawSetScreenOff>:


// Отрисовка времени при установке времени автоотключения экрана
// (параметр ptr_struct - указатель на структуру)
void DrawSetScreenOff(char* ptr_struct, uint8_t mode)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
	// Длина числа месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_1 = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]

	// Длина номера месяца в пикселях
	// (для расчёта смещения)
	uint8_t num_length_2 = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73bb      	strb	r3, [r7, #14]

	// Смещение для нарисованных нулей
	uint8_t num_length_zero[2] = {0};
 8002b64:	2300      	movs	r3, #0
 8002b66:	81bb      	strh	r3, [r7, #12]

	// Массив, хранящий значения:
	// [0] - секунд, [1] - минут (для кадра 23)
	uint8_t temp_arr[2] = {0};
 8002b68:	2300      	movs	r3, #0
 8002b6a:	813b      	strh	r3, [r7, #8]


	// Копирование данных в массив temp_arr
	memcpy((char*) &temp_arr, ptr_struct, 2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	813b      	strh	r3, [r7, #8]

	// Изначально время установлено как 0.
	// Но формат времени предполагает, что должно быть отрисовано 2 нуля.
	// Поэтому если первая цифра не установлена,
	// то нужно дорисовать ноль самостоятельно
	if (temp_arr[1] < 10)
 8002b74:	7a7b      	ldrb	r3, [r7, #9]
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	d80a      	bhi.n	8002b90 <DrawSetScreenOff+0x40>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd ffde 	bl	8000b3c <OLED_GetWidthNum>
 8002b80:	4603      	mov	r3, r0
 8002b82:	733b      	strb	r3, [r7, #12]
		OLED_DrawNum((int16_t) 0, 16, 13 * 3, mode);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	2227      	movs	r2, #39	@ 0x27
 8002b88:	2110      	movs	r1, #16
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fe f870 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[1], 16 + num_length_zero[0], 13 * 3, mode);
 8002b90:	7a7b      	ldrb	r3, [r7, #9]
 8002b92:	b218      	sxth	r0, r3
 8002b94:	7b3b      	ldrb	r3, [r7, #12]
 8002b96:	3310      	adds	r3, #16
 8002b98:	b2d9      	uxtb	r1, r3
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	2227      	movs	r2, #39	@ 0x27
 8002b9e:	f7fe f867 	bl	8000c70 <OLED_DrawNum>
	num_length_1 = OLED_GetWidthNum(temp_arr[1]);
 8002ba2:	7a7b      	ldrb	r3, [r7, #9]
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd ffc8 	bl	8000b3c <OLED_GetWidthNum>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]

	OLED_DrawStr_RuModified("vby", 16 + num_length_zero[0] + num_length_1 + 2, 13 * 3, mode);
 8002bb0:	7b3a      	ldrb	r2, [r7, #12]
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3312      	adds	r3, #18
 8002bba:	b2d9      	uxtb	r1, r3
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	2227      	movs	r2, #39	@ 0x27
 8002bc0:	4829      	ldr	r0, [pc, #164]	@ (8002c68 <DrawSetScreenOff+0x118>)
 8002bc2:	f7fe fe45 	bl	8001850 <OLED_DrawStr_RuModified>

	if (temp_arr[0] < 10)
 8002bc6:	7a3b      	ldrb	r3, [r7, #8]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d815      	bhi.n	8002bf8 <DrawSetScreenOff+0xa8>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ffb5 	bl	8000b3c <OLED_GetWidthNum>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	737b      	strb	r3, [r7, #13]
		OLED_DrawNum((int16_t) 0, 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 2, 13 * 3, mode);
 8002bd6:	7b3a      	ldrb	r2, [r7, #12]
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2dc      	uxtb	r4, r3
 8002bde:	4822      	ldr	r0, [pc, #136]	@ (8002c68 <DrawSetScreenOff+0x118>)
 8002be0:	f7fd ff78 	bl	8000ad4 <OLED_GetWidthStr>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4423      	add	r3, r4
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3317      	adds	r3, #23
 8002bec:	b2d9      	uxtb	r1, r3
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	2227      	movs	r2, #39	@ 0x27
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fe f83c 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum((int16_t) temp_arr[0], 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 2 + num_length_zero[1], 13 * 3, mode);
 8002bf8:	7a3b      	ldrb	r3, [r7, #8]
 8002bfa:	b21d      	sxth	r5, r3
 8002bfc:	7b3a      	ldrb	r2, [r7, #12]
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	4413      	add	r3, r2
 8002c02:	b2dc      	uxtb	r4, r3
 8002c04:	4818      	ldr	r0, [pc, #96]	@ (8002c68 <DrawSetScreenOff+0x118>)
 8002c06:	f7fd ff65 	bl	8000ad4 <OLED_GetWidthStr>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4423      	add	r3, r4
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	7b7b      	ldrb	r3, [r7, #13]
 8002c12:	4413      	add	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3317      	adds	r3, #23
 8002c18:	b2d9      	uxtb	r1, r3
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	2227      	movs	r2, #39	@ 0x27
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7fe f826 	bl	8000c70 <OLED_DrawNum>
	num_length_2 = OLED_GetWidthNum(temp_arr[0]);
 8002c24:	7a3b      	ldrb	r3, [r7, #8]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd ff87 	bl	8000b3c <OLED_GetWidthNum>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73bb      	strb	r3, [r7, #14]

	OLED_DrawStr_RuModified("ctr", 3 + 16 + num_length_zero[0] + num_length_1 + OLED_GetWidthStr("vby") + 2 * 3 + num_length_zero[1] + num_length_2, 13 * 3, mode);
 8002c32:	7b3a      	ldrb	r2, [r7, #12]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4413      	add	r3, r2
 8002c38:	b2dc      	uxtb	r4, r3
 8002c3a:	480b      	ldr	r0, [pc, #44]	@ (8002c68 <DrawSetScreenOff+0x118>)
 8002c3c:	f7fd ff4a 	bl	8000ad4 <OLED_GetWidthStr>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4423      	add	r3, r4
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	7b7b      	ldrb	r3, [r7, #13]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	7bbb      	ldrb	r3, [r7, #14]
 8002c4e:	4413      	add	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3319      	adds	r3, #25
 8002c54:	b2d9      	uxtb	r1, r3
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2227      	movs	r2, #39	@ 0x27
 8002c5a:	4804      	ldr	r0, [pc, #16]	@ (8002c6c <DrawSetScreenOff+0x11c>)
 8002c5c:	f7fe fdf8 	bl	8001850 <OLED_DrawStr_RuModified>
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdb0      	pop	{r4, r5, r7, pc}
 8002c68:	08014238 	.word	0x08014238
 8002c6c:	0801423c 	.word	0x0801423c

08002c70 <SetScreenOff>:


// Настройка времени автоотключения экрана
void SetScreenOff(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	// Сбор текущего времени
	// автоотключения экрана
	BuildSetScreenAutoOff();
 8002c74:	f7ff ff46 	bl	8002b04 <BuildSetScreenAutoOff>

	// Вывод времени автоотключения на экран (без часов)
	DrawSetScreenOff(ptr_ScreenOffSet, 1);
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <SetScreenOff+0x18>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff66 	bl	8002b50 <DrawSetScreenOff>
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000012c 	.word	0x2000012c

08002c8c <InitScreenOff>:


// Определение времени
// автоотключения экрана при включении
void InitScreenOff(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	// Автоотключение экрана
	// выключено или не настроено
	if ((!ScreenOff.minutes_screen_off) &&
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <InitScreenOff+0x44>)
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <InitScreenOff+0x1c>
        (!ScreenOff.seconds_screen_off))
 8002c98:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <InitScreenOff+0x44>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
	if ((!ScreenOff.minutes_screen_off) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <InitScreenOff+0x1c>
	{
		// Выключение таймера 3
		HAL_TIM_Base_Stop_IT(&htim3);
 8002ca0:	480c      	ldr	r0, [pc, #48]	@ (8002cd4 <InitScreenOff+0x48>)
 8002ca2:	f00c fce9 	bl	800f678 <HAL_TIM_Base_Stop_IT>
 8002ca6:	e010      	b.n	8002cca <InitScreenOff+0x3e>

	// Если время автоотключения экрана установлено
	else
	{
		// Время автоотключения экрана в секундах
		SecondsSleepMode_ARR = ScreenOff.minutes_screen_off * 60 + ScreenOff.seconds_screen_off;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <InitScreenOff+0x44>)
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	461a      	mov	r2, r3
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4a06      	ldr	r2, [pc, #24]	@ (8002cd0 <InitScreenOff+0x44>)
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <InitScreenOff+0x4c>)
 8002cc0:	801a      	strh	r2, [r3, #0]

		// Включение таймера 3
		HAL_TIM_Base_Start_IT(&htim3);
 8002cc2:	4804      	ldr	r0, [pc, #16]	@ (8002cd4 <InitScreenOff+0x48>)
 8002cc4:	f00c fc76 	bl	800f5b4 <HAL_TIM_Base_Start_IT>
	}
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000a74 	.word	0x20000a74
 8002cd4:	20000900 	.word	0x20000900
 8002cd8:	20000a32 	.word	0x20000a32

08002cdc <BuildSetDaysWater>:


// Сбор текущих дней полива при настройке
void BuildSetDaysWater(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
	WateringParamsSet.daysofweek = WaterDays;
 8002ce0:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <BuildSetDaysWater+0x18>)
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <BuildSetDaysWater+0x1c>)
 8002ce6:	715a      	strb	r2, [r3, #5]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000a08 	.word	0x20000a08
 8002cf8:	20000a68 	.word	0x20000a68

08002cfc <DrawSetDaysWater>:


// Отрисовка дней полива при настройке
void DrawSetDaysWater(uint8_t mode)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0x01;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73bb      	strb	r3, [r7, #14]
	 *	 1 - день выбран для полива).
	 *	 Нумерация дней по возрастанию битов, т.е.
	 *	 бит 0 - понедельник ... бит 6 - воскресенье.
	 */

	for (i = 0; i < 7; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e22a      	b.n	800316a <DrawSetDaysWater+0x46e>
	{
		if (i != 0)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <DrawSetDaysWater+0x24>
			mask <<= 1;
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	73bb      	strb	r3, [r7, #14]

		// Если текущий день выбран для полива,
		// то отрисовывается заполненный круг
		if (WateringParamsSet.daysofweek & mask)
 8002d20:	4bc3      	ldr	r3, [pc, #780]	@ (8003030 <DrawSetDaysWater+0x334>)
 8002d22:	795a      	ldrb	r2, [r3, #5]
 8002d24:	7bbb      	ldrb	r3, [r7, #14]
 8002d26:	4013      	ands	r3, r2
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8106 	beq.w	8002f3c <DrawSetDaysWater+0x240>
		{
			switch(mask)
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	dc4a      	bgt.n	8002dcc <DrawSetDaysWater+0xd0>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f340 8214 	ble.w	8003164 <DrawSetDaysWater+0x468>
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	2b1f      	cmp	r3, #31
 8002d40:	f200 8210 	bhi.w	8003164 <DrawSetDaysWater+0x468>
 8002d44:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <DrawSetDaysWater+0x50>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002dd5 	.word	0x08002dd5
 8002d50:	08002de3 	.word	0x08002de3
 8002d54:	08003165 	.word	0x08003165
 8002d58:	08002dfd 	.word	0x08002dfd
 8002d5c:	08003165 	.word	0x08003165
 8002d60:	08003165 	.word	0x08003165
 8002d64:	08003165 	.word	0x08003165
 8002d68:	08002e25 	.word	0x08002e25
 8002d6c:	08003165 	.word	0x08003165
 8002d70:	08003165 	.word	0x08003165
 8002d74:	08003165 	.word	0x08003165
 8002d78:	08003165 	.word	0x08003165
 8002d7c:	08003165 	.word	0x08003165
 8002d80:	08003165 	.word	0x08003165
 8002d84:	08003165 	.word	0x08003165
 8002d88:	08002e59 	.word	0x08002e59
 8002d8c:	08003165 	.word	0x08003165
 8002d90:	08003165 	.word	0x08003165
 8002d94:	08003165 	.word	0x08003165
 8002d98:	08003165 	.word	0x08003165
 8002d9c:	08003165 	.word	0x08003165
 8002da0:	08003165 	.word	0x08003165
 8002da4:	08003165 	.word	0x08003165
 8002da8:	08003165 	.word	0x08003165
 8002dac:	08003165 	.word	0x08003165
 8002db0:	08003165 	.word	0x08003165
 8002db4:	08003165 	.word	0x08003165
 8002db8:	08003165 	.word	0x08003165
 8002dbc:	08003165 	.word	0x08003165
 8002dc0:	08003165 	.word	0x08003165
 8002dc4:	08003165 	.word	0x08003165
 8002dc8:	08002e99 	.word	0x08002e99
 8002dcc:	2b40      	cmp	r3, #64	@ 0x40
 8002dce:	f000 8089 	beq.w	8002ee4 <DrawSetDaysWater+0x1e8>
 8002dd2:	e1c7      	b.n	8003164 <DrawSetDaysWater+0x468>
			{
				// Понедельник
				case 0x01:
							OLED_DrawCircleFill_Modified(8 + 12, 13 * 3.5, 3, mode);
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	212d      	movs	r1, #45	@ 0x2d
 8002dda:	2014      	movs	r0, #20
 8002ddc:	f7ff f80f 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002de0:	e1c0      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Вторник
				case 0x02:
							OLED_DrawCircleFill_Modified(6 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 3.5, 3, mode);
 8002de2:	4894      	ldr	r0, [pc, #592]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002de4:	f7fd fe76 	bl	8000ad4 <OLED_GetWidthStr>
 8002de8:	4603      	mov	r3, r0
 8002dea:	3315      	adds	r3, #21
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b218      	sxth	r0, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	2203      	movs	r2, #3
 8002df4:	212d      	movs	r1, #45	@ 0x2d
 8002df6:	f7ff f802 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002dfa:	e1b3      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Среда
				case 0x04:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 3.5, 3, mode);
 8002dfc:	488d      	ldr	r0, [pc, #564]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002dfe:	f7fd fe69 	bl	8000ad4 <OLED_GetWidthStr>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461c      	mov	r4, r3
 8002e06:	488c      	ldr	r0, [pc, #560]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8002e08:	f7fd fe64 	bl	8000ad4 <OLED_GetWidthStr>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4423      	add	r3, r4
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	331a      	adds	r3, #26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b218      	sxth	r0, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	212d      	movs	r1, #45	@ 0x2d
 8002e1e:	f7fe ffee 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002e22:	e19f      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Четверг
				case 0x08:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 3.5, 3, mode);
 8002e24:	4883      	ldr	r0, [pc, #524]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002e26:	f7fd fe55 	bl	8000ad4 <OLED_GetWidthStr>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	4882      	ldr	r0, [pc, #520]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8002e30:	f7fd fe50 	bl	8000ad4 <OLED_GetWidthStr>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4423      	add	r3, r4
 8002e38:	b29c      	uxth	r4, r3
 8002e3a:	4880      	ldr	r0, [pc, #512]	@ (800303c <DrawSetDaysWater+0x340>)
 8002e3c:	f7fd fe4a 	bl	8000ad4 <OLED_GetWidthStr>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4423      	add	r3, r4
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	331d      	adds	r3, #29
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b218      	sxth	r0, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	212d      	movs	r1, #45	@ 0x2d
 8002e52:	f7fe ffd4 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002e56:	e185      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Пятница
				case 0x10:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 3.5, 3, mode);
 8002e58:	4876      	ldr	r0, [pc, #472]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002e5a:	f7fd fe3b 	bl	8000ad4 <OLED_GetWidthStr>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461c      	mov	r4, r3
 8002e62:	4875      	ldr	r0, [pc, #468]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8002e64:	f7fd fe36 	bl	8000ad4 <OLED_GetWidthStr>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4423      	add	r3, r4
 8002e6c:	b29c      	uxth	r4, r3
 8002e6e:	4873      	ldr	r0, [pc, #460]	@ (800303c <DrawSetDaysWater+0x340>)
 8002e70:	f7fd fe30 	bl	8000ad4 <OLED_GetWidthStr>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4423      	add	r3, r4
 8002e78:	b29c      	uxth	r4, r3
 8002e7a:	4871      	ldr	r0, [pc, #452]	@ (8003040 <DrawSetDaysWater+0x344>)
 8002e7c:	f7fd fe2a 	bl	8000ad4 <OLED_GetWidthStr>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4423      	add	r3, r4
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3320      	adds	r3, #32
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b218      	sxth	r0, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	212d      	movs	r1, #45	@ 0x2d
 8002e92:	f7fe ffb4 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002e96:	e165      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Суббота
				case 0x20:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 3.5, 3, mode);
 8002e98:	4866      	ldr	r0, [pc, #408]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002e9a:	f7fd fe1b 	bl	8000ad4 <OLED_GetWidthStr>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	4865      	ldr	r0, [pc, #404]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8002ea4:	f7fd fe16 	bl	8000ad4 <OLED_GetWidthStr>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4423      	add	r3, r4
 8002eac:	b29c      	uxth	r4, r3
 8002eae:	4863      	ldr	r0, [pc, #396]	@ (800303c <DrawSetDaysWater+0x340>)
 8002eb0:	f7fd fe10 	bl	8000ad4 <OLED_GetWidthStr>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4423      	add	r3, r4
 8002eb8:	b29c      	uxth	r4, r3
 8002eba:	4861      	ldr	r0, [pc, #388]	@ (8003040 <DrawSetDaysWater+0x344>)
 8002ebc:	f7fd fe0a 	bl	8000ad4 <OLED_GetWidthStr>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4423      	add	r3, r4
 8002ec4:	b29c      	uxth	r4, r3
 8002ec6:	485f      	ldr	r0, [pc, #380]	@ (8003044 <DrawSetDaysWater+0x348>)
 8002ec8:	f7fd fe04 	bl	8000ad4 <OLED_GetWidthStr>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4423      	add	r3, r4
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3323      	adds	r3, #35	@ 0x23
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b218      	sxth	r0, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2203      	movs	r2, #3
 8002edc:	212d      	movs	r1, #45	@ 0x2d
 8002ede:	f7fe ff8e 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002ee2:	e13f      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Воскресенье
				case 0x40:
							OLED_DrawCircleFill_Modified(7 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 3.5, 3, mode);
 8002ee4:	4853      	ldr	r0, [pc, #332]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002ee6:	f7fd fdf5 	bl	8000ad4 <OLED_GetWidthStr>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461c      	mov	r4, r3
 8002eee:	4852      	ldr	r0, [pc, #328]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8002ef0:	f7fd fdf0 	bl	8000ad4 <OLED_GetWidthStr>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4423      	add	r3, r4
 8002ef8:	b29c      	uxth	r4, r3
 8002efa:	4850      	ldr	r0, [pc, #320]	@ (800303c <DrawSetDaysWater+0x340>)
 8002efc:	f7fd fdea 	bl	8000ad4 <OLED_GetWidthStr>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4423      	add	r3, r4
 8002f04:	b29c      	uxth	r4, r3
 8002f06:	484e      	ldr	r0, [pc, #312]	@ (8003040 <DrawSetDaysWater+0x344>)
 8002f08:	f7fd fde4 	bl	8000ad4 <OLED_GetWidthStr>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4423      	add	r3, r4
 8002f10:	b29c      	uxth	r4, r3
 8002f12:	484c      	ldr	r0, [pc, #304]	@ (8003044 <DrawSetDaysWater+0x348>)
 8002f14:	f7fd fdde 	bl	8000ad4 <OLED_GetWidthStr>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4423      	add	r3, r4
 8002f1c:	b29c      	uxth	r4, r3
 8002f1e:	484a      	ldr	r0, [pc, #296]	@ (8003048 <DrawSetDaysWater+0x34c>)
 8002f20:	f7fd fdd8 	bl	8000ad4 <OLED_GetWidthStr>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4423      	add	r3, r4
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3325      	adds	r3, #37	@ 0x25
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b218      	sxth	r0, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	2203      	movs	r2, #3
 8002f34:	212d      	movs	r1, #45	@ 0x2d
 8002f36:	f7fe ff62 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8002f3a:	e113      	b.n	8003164 <DrawSetDaysWater+0x468>

		// Если текущий день не выбран для полива,
		// то отрисовывается пустой круг
		else
		{
			switch(mask)
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	dc4a      	bgt.n	8002fd8 <DrawSetDaysWater+0x2dc>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f340 810e 	ble.w	8003164 <DrawSetDaysWater+0x468>
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	2b1f      	cmp	r3, #31
 8002f4c:	f200 810a 	bhi.w	8003164 <DrawSetDaysWater+0x468>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <DrawSetDaysWater+0x25c>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002fe1 	.word	0x08002fe1
 8002f5c:	08002fef 	.word	0x08002fef
 8002f60:	08003165 	.word	0x08003165
 8002f64:	08003009 	.word	0x08003009
 8002f68:	08003165 	.word	0x08003165
 8002f6c:	08003165 	.word	0x08003165
 8002f70:	08003165 	.word	0x08003165
 8002f74:	0800304d 	.word	0x0800304d
 8002f78:	08003165 	.word	0x08003165
 8002f7c:	08003165 	.word	0x08003165
 8002f80:	08003165 	.word	0x08003165
 8002f84:	08003165 	.word	0x08003165
 8002f88:	08003165 	.word	0x08003165
 8002f8c:	08003165 	.word	0x08003165
 8002f90:	08003165 	.word	0x08003165
 8002f94:	08003081 	.word	0x08003081
 8002f98:	08003165 	.word	0x08003165
 8002f9c:	08003165 	.word	0x08003165
 8002fa0:	08003165 	.word	0x08003165
 8002fa4:	08003165 	.word	0x08003165
 8002fa8:	08003165 	.word	0x08003165
 8002fac:	08003165 	.word	0x08003165
 8002fb0:	08003165 	.word	0x08003165
 8002fb4:	08003165 	.word	0x08003165
 8002fb8:	08003165 	.word	0x08003165
 8002fbc:	08003165 	.word	0x08003165
 8002fc0:	08003165 	.word	0x08003165
 8002fc4:	08003165 	.word	0x08003165
 8002fc8:	08003165 	.word	0x08003165
 8002fcc:	08003165 	.word	0x08003165
 8002fd0:	08003165 	.word	0x08003165
 8002fd4:	080030c1 	.word	0x080030c1
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	f000 8097 	beq.w	800310c <DrawSetDaysWater+0x410>
 8002fde:	e0c1      	b.n	8003164 <DrawSetDaysWater+0x468>
			{
				// Понедельник
				case 0x01:
							OLED_DrawCircle_Modified(8 + 12, 13 * 3.5, 3, mode);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	212d      	movs	r1, #45	@ 0x2d
 8002fe6:	2014      	movs	r0, #20
 8002fe8:	f7fe fe0c 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8002fec:	e0ba      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Вторник
				case 0x02:
							OLED_DrawCircle_Modified(6 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 3.5, 3, mode);
 8002fee:	4811      	ldr	r0, [pc, #68]	@ (8003034 <DrawSetDaysWater+0x338>)
 8002ff0:	f7fd fd70 	bl	8000ad4 <OLED_GetWidthStr>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	3315      	adds	r3, #21
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	b218      	sxth	r0, r3
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2203      	movs	r2, #3
 8003000:	212d      	movs	r1, #45	@ 0x2d
 8003002:	f7fe fdff 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8003006:	e0ad      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Среда
				case 0x04:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 3.5, 3, mode);
 8003008:	480a      	ldr	r0, [pc, #40]	@ (8003034 <DrawSetDaysWater+0x338>)
 800300a:	f7fd fd63 	bl	8000ad4 <OLED_GetWidthStr>
 800300e:	4603      	mov	r3, r0
 8003010:	461c      	mov	r4, r3
 8003012:	4809      	ldr	r0, [pc, #36]	@ (8003038 <DrawSetDaysWater+0x33c>)
 8003014:	f7fd fd5e 	bl	8000ad4 <OLED_GetWidthStr>
 8003018:	4603      	mov	r3, r0
 800301a:	4423      	add	r3, r4
 800301c:	b29b      	uxth	r3, r3
 800301e:	331a      	adds	r3, #26
 8003020:	b29b      	uxth	r3, r3
 8003022:	b218      	sxth	r0, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	2203      	movs	r2, #3
 8003028:	212d      	movs	r1, #45	@ 0x2d
 800302a:	f7fe fdeb 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 800302e:	e099      	b.n	8003164 <DrawSetDaysWater+0x468>
 8003030:	20000a68 	.word	0x20000a68
 8003034:	08014240 	.word	0x08014240
 8003038:	08014244 	.word	0x08014244
 800303c:	08014248 	.word	0x08014248
 8003040:	0801424c 	.word	0x0801424c
 8003044:	08014250 	.word	0x08014250
 8003048:	08014254 	.word	0x08014254

				// Четверг
				case 0x08:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 3.5, 3, mode);
 800304c:	484b      	ldr	r0, [pc, #300]	@ (800317c <DrawSetDaysWater+0x480>)
 800304e:	f7fd fd41 	bl	8000ad4 <OLED_GetWidthStr>
 8003052:	4603      	mov	r3, r0
 8003054:	461c      	mov	r4, r3
 8003056:	484a      	ldr	r0, [pc, #296]	@ (8003180 <DrawSetDaysWater+0x484>)
 8003058:	f7fd fd3c 	bl	8000ad4 <OLED_GetWidthStr>
 800305c:	4603      	mov	r3, r0
 800305e:	4423      	add	r3, r4
 8003060:	b29c      	uxth	r4, r3
 8003062:	4848      	ldr	r0, [pc, #288]	@ (8003184 <DrawSetDaysWater+0x488>)
 8003064:	f7fd fd36 	bl	8000ad4 <OLED_GetWidthStr>
 8003068:	4603      	mov	r3, r0
 800306a:	4423      	add	r3, r4
 800306c:	b29b      	uxth	r3, r3
 800306e:	331d      	adds	r3, #29
 8003070:	b29b      	uxth	r3, r3
 8003072:	b218      	sxth	r0, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2203      	movs	r2, #3
 8003078:	212d      	movs	r1, #45	@ 0x2d
 800307a:	f7fe fdc3 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 800307e:	e071      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Пятница
				case 0x10:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 3.5, 3, mode);
 8003080:	483e      	ldr	r0, [pc, #248]	@ (800317c <DrawSetDaysWater+0x480>)
 8003082:	f7fd fd27 	bl	8000ad4 <OLED_GetWidthStr>
 8003086:	4603      	mov	r3, r0
 8003088:	461c      	mov	r4, r3
 800308a:	483d      	ldr	r0, [pc, #244]	@ (8003180 <DrawSetDaysWater+0x484>)
 800308c:	f7fd fd22 	bl	8000ad4 <OLED_GetWidthStr>
 8003090:	4603      	mov	r3, r0
 8003092:	4423      	add	r3, r4
 8003094:	b29c      	uxth	r4, r3
 8003096:	483b      	ldr	r0, [pc, #236]	@ (8003184 <DrawSetDaysWater+0x488>)
 8003098:	f7fd fd1c 	bl	8000ad4 <OLED_GetWidthStr>
 800309c:	4603      	mov	r3, r0
 800309e:	4423      	add	r3, r4
 80030a0:	b29c      	uxth	r4, r3
 80030a2:	4839      	ldr	r0, [pc, #228]	@ (8003188 <DrawSetDaysWater+0x48c>)
 80030a4:	f7fd fd16 	bl	8000ad4 <OLED_GetWidthStr>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4423      	add	r3, r4
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3320      	adds	r3, #32
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b218      	sxth	r0, r3
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2203      	movs	r2, #3
 80030b8:	212d      	movs	r1, #45	@ 0x2d
 80030ba:	f7fe fda3 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 80030be:	e051      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Суббота
				case 0x20:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 3.5, 3, mode);
 80030c0:	482e      	ldr	r0, [pc, #184]	@ (800317c <DrawSetDaysWater+0x480>)
 80030c2:	f7fd fd07 	bl	8000ad4 <OLED_GetWidthStr>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461c      	mov	r4, r3
 80030ca:	482d      	ldr	r0, [pc, #180]	@ (8003180 <DrawSetDaysWater+0x484>)
 80030cc:	f7fd fd02 	bl	8000ad4 <OLED_GetWidthStr>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4423      	add	r3, r4
 80030d4:	b29c      	uxth	r4, r3
 80030d6:	482b      	ldr	r0, [pc, #172]	@ (8003184 <DrawSetDaysWater+0x488>)
 80030d8:	f7fd fcfc 	bl	8000ad4 <OLED_GetWidthStr>
 80030dc:	4603      	mov	r3, r0
 80030de:	4423      	add	r3, r4
 80030e0:	b29c      	uxth	r4, r3
 80030e2:	4829      	ldr	r0, [pc, #164]	@ (8003188 <DrawSetDaysWater+0x48c>)
 80030e4:	f7fd fcf6 	bl	8000ad4 <OLED_GetWidthStr>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4423      	add	r3, r4
 80030ec:	b29c      	uxth	r4, r3
 80030ee:	4827      	ldr	r0, [pc, #156]	@ (800318c <DrawSetDaysWater+0x490>)
 80030f0:	f7fd fcf0 	bl	8000ad4 <OLED_GetWidthStr>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4423      	add	r3, r4
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3323      	adds	r3, #35	@ 0x23
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b218      	sxth	r0, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2203      	movs	r2, #3
 8003104:	212d      	movs	r1, #45	@ 0x2d
 8003106:	f7fe fd7d 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 800310a:	e02b      	b.n	8003164 <DrawSetDaysWater+0x468>

				// Воскресенье
				case 0x40:
							OLED_DrawCircle_Modified(7 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 3.5, 3, mode);
 800310c:	481b      	ldr	r0, [pc, #108]	@ (800317c <DrawSetDaysWater+0x480>)
 800310e:	f7fd fce1 	bl	8000ad4 <OLED_GetWidthStr>
 8003112:	4603      	mov	r3, r0
 8003114:	461c      	mov	r4, r3
 8003116:	481a      	ldr	r0, [pc, #104]	@ (8003180 <DrawSetDaysWater+0x484>)
 8003118:	f7fd fcdc 	bl	8000ad4 <OLED_GetWidthStr>
 800311c:	4603      	mov	r3, r0
 800311e:	4423      	add	r3, r4
 8003120:	b29c      	uxth	r4, r3
 8003122:	4818      	ldr	r0, [pc, #96]	@ (8003184 <DrawSetDaysWater+0x488>)
 8003124:	f7fd fcd6 	bl	8000ad4 <OLED_GetWidthStr>
 8003128:	4603      	mov	r3, r0
 800312a:	4423      	add	r3, r4
 800312c:	b29c      	uxth	r4, r3
 800312e:	4816      	ldr	r0, [pc, #88]	@ (8003188 <DrawSetDaysWater+0x48c>)
 8003130:	f7fd fcd0 	bl	8000ad4 <OLED_GetWidthStr>
 8003134:	4603      	mov	r3, r0
 8003136:	4423      	add	r3, r4
 8003138:	b29c      	uxth	r4, r3
 800313a:	4814      	ldr	r0, [pc, #80]	@ (800318c <DrawSetDaysWater+0x490>)
 800313c:	f7fd fcca 	bl	8000ad4 <OLED_GetWidthStr>
 8003140:	4603      	mov	r3, r0
 8003142:	4423      	add	r3, r4
 8003144:	b29c      	uxth	r4, r3
 8003146:	4812      	ldr	r0, [pc, #72]	@ (8003190 <DrawSetDaysWater+0x494>)
 8003148:	f7fd fcc4 	bl	8000ad4 <OLED_GetWidthStr>
 800314c:	4603      	mov	r3, r0
 800314e:	4423      	add	r3, r4
 8003150:	b29b      	uxth	r3, r3
 8003152:	3325      	adds	r3, #37	@ 0x25
 8003154:	b29b      	uxth	r3, r3
 8003156:	b218      	sxth	r0, r3
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2203      	movs	r2, #3
 800315c:	212d      	movs	r1, #45	@ 0x2d
 800315e:	f7fe fd51 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8003162:	bf00      	nop
	for (i = 0; i < 7; i++)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	3301      	adds	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b06      	cmp	r3, #6
 800316e:	f67f add1 	bls.w	8002d14 <DrawSetDaysWater+0x18>
			}
		}
	}
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	08014240 	.word	0x08014240
 8003180:	08014244 	.word	0x08014244
 8003184:	08014248 	.word	0x08014248
 8003188:	0801424c 	.word	0x0801424c
 800318c:	08014250 	.word	0x08014250
 8003190:	08014254 	.word	0x08014254

08003194 <SetDaysWater>:


// Настройка дней полива
void SetDaysWater(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	// Сбор текущих дней полива
	BuildSetDaysWater();
 8003198:	f7ff fda0 	bl	8002cdc <BuildSetDaysWater>

	// Вывод дней полива на экран
	DrawSetDaysWater(1);
 800319c:	2001      	movs	r0, #1
 800319e:	f7ff fdad 	bl	8002cfc <DrawSetDaysWater>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <DrawWateringParamsPt1>:


// Отрисовка текущих параметров
// полива на кадре 1
void DrawWateringParamsPt1(void)
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
	// Смещение для нарисованных нулей
	uint8_t num_length_zero[5] = {0};
 80031ae:	2300      	movs	r3, #0
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	713b      	strb	r3, [r7, #4]


	// Время начала полива
	if (WateringParams.hour < 10)
 80031b6:	4bb6      	ldr	r3, [pc, #728]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80031b8:	789b      	ldrb	r3, [r3, #2]
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d80f      	bhi.n	80031de <DrawWateringParamsPt1+0x36>
	{
		num_length_zero[0] = OLED_GetWidthNum(0);
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd fcbc 	bl	8000b3c <OLED_GetWidthNum>
 80031c4:	4603      	mov	r3, r0
 80031c6:	703b      	strb	r3, [r7, #0]
		OLED_DrawNum((int16_t) 0, 10 + 12 + OLED_GetWidthStr("gjkbdf") + 1, 13 * 1, 1);
 80031c8:	48b2      	ldr	r0, [pc, #712]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 80031ca:	f7fd fc83 	bl	8000ad4 <OLED_GetWidthStr>
 80031ce:	4603      	mov	r3, r0
 80031d0:	3317      	adds	r3, #23
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	220d      	movs	r2, #13
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fd fd49 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum(WateringParams.hour, 10 + 12 + OLED_GetWidthStr("gjkbdf") + 1 + num_length_zero[0], 13 * 1, 1);
 80031de:	4bac      	ldr	r3, [pc, #688]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	b21c      	sxth	r4, r3
 80031e4:	48ab      	ldr	r0, [pc, #684]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 80031e6:	f7fd fc75 	bl	8000ad4 <OLED_GetWidthStr>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	783b      	ldrb	r3, [r7, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3317      	adds	r3, #23
 80031f6:	b2d9      	uxtb	r1, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	220d      	movs	r2, #13
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7fd fd37 	bl	8000c70 <OLED_DrawNum>
	OLED_DrawChar_Modified(':', 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0], 13 * 1, 1);
 8003202:	48a4      	ldr	r0, [pc, #656]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 8003204:	f7fd fc66 	bl	8000ad4 <OLED_GetWidthStr>
 8003208:	4603      	mov	r3, r0
 800320a:	461c      	mov	r4, r3
 800320c:	4ba0      	ldr	r3, [pc, #640]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	b21b      	sxth	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fc92 	bl	8000b3c <OLED_GetWidthNum>
 8003218:	4603      	mov	r3, r0
 800321a:	4423      	add	r3, r4
 800321c:	b2da      	uxtb	r2, r3
 800321e:	783b      	ldrb	r3, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3318      	adds	r3, #24
 8003226:	b2d9      	uxtb	r1, r3
 8003228:	2301      	movs	r3, #1
 800322a:	220d      	movs	r2, #13
 800322c:	203a      	movs	r0, #58	@ 0x3a
 800322e:	f7fe fb47 	bl	80018c0 <OLED_DrawChar_Modified>

	if (WateringParams.minutes < 10)
 8003232:	4b97      	ldr	r3, [pc, #604]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b09      	cmp	r3, #9
 8003238:	d81c      	bhi.n	8003274 <DrawWateringParamsPt1+0xcc>
	{
		num_length_zero[1] = OLED_GetWidthNum(0);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fc7e 	bl	8000b3c <OLED_GetWidthNum>
 8003240:	4603      	mov	r3, r0
 8003242:	707b      	strb	r3, [r7, #1]
		OLED_DrawNum((int16_t) 0, 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0] + 3, 13 * 1, 1);
 8003244:	4893      	ldr	r0, [pc, #588]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 8003246:	f7fd fc45 	bl	8000ad4 <OLED_GetWidthStr>
 800324a:	4603      	mov	r3, r0
 800324c:	461c      	mov	r4, r3
 800324e:	4b90      	ldr	r3, [pc, #576]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003250:	789b      	ldrb	r3, [r3, #2]
 8003252:	b21b      	sxth	r3, r3
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fc71 	bl	8000b3c <OLED_GetWidthNum>
 800325a:	4603      	mov	r3, r0
 800325c:	4423      	add	r3, r4
 800325e:	b2da      	uxtb	r2, r3
 8003260:	783b      	ldrb	r3, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	b2db      	uxtb	r3, r3
 8003266:	331b      	adds	r3, #27
 8003268:	b2d9      	uxtb	r1, r3
 800326a:	2301      	movs	r3, #1
 800326c:	220d      	movs	r2, #13
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd fcfe 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum(WateringParams.minutes, 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0] + 3 + num_length_zero[1], 13 * 1, 1);
 8003274:	4b86      	ldr	r3, [pc, #536]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	b21c      	sxth	r4, r3
 800327a:	4886      	ldr	r0, [pc, #536]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 800327c:	f7fd fc2a 	bl	8000ad4 <OLED_GetWidthStr>
 8003280:	4603      	mov	r3, r0
 8003282:	461d      	mov	r5, r3
 8003284:	4b82      	ldr	r3, [pc, #520]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003286:	789b      	ldrb	r3, [r3, #2]
 8003288:	b21b      	sxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fc56 	bl	8000b3c <OLED_GetWidthNum>
 8003290:	4603      	mov	r3, r0
 8003292:	442b      	add	r3, r5
 8003294:	b2da      	uxtb	r2, r3
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	4413      	add	r3, r2
 800329a:	b2da      	uxtb	r2, r3
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	4413      	add	r3, r2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	331b      	adds	r3, #27
 80032a4:	b2d9      	uxtb	r1, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	220d      	movs	r2, #13
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7fd fce0 	bl	8000c70 <OLED_DrawNum>
	OLED_DrawChar_Modified(':', 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0] + 3 + num_length_zero[1] + 2 + OLED_GetWidthNum(WateringParams.minutes) - 1, 13 * 1, 1);
 80032b0:	4878      	ldr	r0, [pc, #480]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 80032b2:	f7fd fc0f 	bl	8000ad4 <OLED_GetWidthStr>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461c      	mov	r4, r3
 80032ba:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fc3b 	bl	8000b3c <OLED_GetWidthNum>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4423      	add	r3, r4
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	783b      	ldrb	r3, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	787b      	ldrb	r3, [r7, #1]
 80032d4:	4413      	add	r3, r2
 80032d6:	b2dc      	uxtb	r4, r3
 80032d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	b21b      	sxth	r3, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fc2c 	bl	8000b3c <OLED_GetWidthNum>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4423      	add	r3, r4
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	331c      	adds	r3, #28
 80032ec:	b2d9      	uxtb	r1, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	220d      	movs	r2, #13
 80032f2:	203a      	movs	r0, #58	@ 0x3a
 80032f4:	f7fe fae4 	bl	80018c0 <OLED_DrawChar_Modified>

	if (WateringParams.seconds < 10)
 80032f8:	4b65      	ldr	r3, [pc, #404]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d828      	bhi.n	8003352 <DrawWateringParamsPt1+0x1aa>
	{
		num_length_zero[2] = OLED_GetWidthNum(0);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fc1b 	bl	8000b3c <OLED_GetWidthNum>
 8003306:	4603      	mov	r3, r0
 8003308:	70bb      	strb	r3, [r7, #2]
		OLED_DrawNum((int16_t) 0, 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0] + 3 + num_length_zero[1] + 2 + OLED_GetWidthNum(WateringParams.minutes) + 2, 13 * 1, 1);
 800330a:	4862      	ldr	r0, [pc, #392]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 800330c:	f7fd fbe2 	bl	8000ad4 <OLED_GetWidthStr>
 8003310:	4603      	mov	r3, r0
 8003312:	461c      	mov	r4, r3
 8003314:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003316:	789b      	ldrb	r3, [r3, #2]
 8003318:	b21b      	sxth	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fc0e 	bl	8000b3c <OLED_GetWidthNum>
 8003320:	4603      	mov	r3, r0
 8003322:	4423      	add	r3, r4
 8003324:	b2da      	uxtb	r2, r3
 8003326:	783b      	ldrb	r3, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	b2da      	uxtb	r2, r3
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	4413      	add	r3, r2
 8003330:	b2dc      	uxtb	r4, r3
 8003332:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	b21b      	sxth	r3, r3
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd fbff 	bl	8000b3c <OLED_GetWidthNum>
 800333e:	4603      	mov	r3, r0
 8003340:	4423      	add	r3, r4
 8003342:	b2db      	uxtb	r3, r3
 8003344:	331f      	adds	r3, #31
 8003346:	b2d9      	uxtb	r1, r3
 8003348:	2301      	movs	r3, #1
 800334a:	220d      	movs	r2, #13
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd fc8f 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum(WateringParams.seconds, 10 + 12 + OLED_GetWidthStr("gjkbdf") + OLED_GetWidthNum(WateringParams.hour) + 2 + num_length_zero[0] + 3 + num_length_zero[1] + 2 + OLED_GetWidthNum(WateringParams.minutes) + 2 + num_length_zero[2], 13 * 1, 1);
 8003352:	4b4f      	ldr	r3, [pc, #316]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b21d      	sxth	r5, r3
 8003358:	484e      	ldr	r0, [pc, #312]	@ (8003494 <DrawWateringParamsPt1+0x2ec>)
 800335a:	f7fd fbbb 	bl	8000ad4 <OLED_GetWidthStr>
 800335e:	4603      	mov	r3, r0
 8003360:	461c      	mov	r4, r3
 8003362:	4b4b      	ldr	r3, [pc, #300]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003364:	789b      	ldrb	r3, [r3, #2]
 8003366:	b21b      	sxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd fbe7 	bl	8000b3c <OLED_GetWidthNum>
 800336e:	4603      	mov	r3, r0
 8003370:	4423      	add	r3, r4
 8003372:	b2da      	uxtb	r2, r3
 8003374:	783b      	ldrb	r3, [r7, #0]
 8003376:	4413      	add	r3, r2
 8003378:	b2da      	uxtb	r2, r3
 800337a:	787b      	ldrb	r3, [r7, #1]
 800337c:	4413      	add	r3, r2
 800337e:	b2dc      	uxtb	r4, r3
 8003380:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	b21b      	sxth	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fbd8 	bl	8000b3c <OLED_GetWidthNum>
 800338c:	4603      	mov	r3, r0
 800338e:	4423      	add	r3, r4
 8003390:	b2da      	uxtb	r2, r3
 8003392:	78bb      	ldrb	r3, [r7, #2]
 8003394:	4413      	add	r3, r2
 8003396:	b2db      	uxtb	r3, r3
 8003398:	331f      	adds	r3, #31
 800339a:	b2d9      	uxtb	r1, r3
 800339c:	2301      	movs	r3, #1
 800339e:	220d      	movs	r2, #13
 80033a0:	4628      	mov	r0, r5
 80033a2:	f7fd fc65 	bl	8000c70 <OLED_DrawNum>


	// Продолжительность полива
	if (WateringParams.minutes_watering < 10)
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80033a8:	791b      	ldrb	r3, [r3, #4]
 80033aa:	2b09      	cmp	r3, #9
 80033ac:	d80a      	bhi.n	80033c4 <DrawWateringParamsPt1+0x21c>
	{
		num_length_zero[3] = OLED_GetWidthNum(0);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fbc4 	bl	8000b3c <OLED_GetWidthNum>
 80033b4:	4603      	mov	r3, r0
 80033b6:	70fb      	strb	r3, [r7, #3]
		OLED_DrawNum((int16_t) 0, 12, 13 * 4, 1);
 80033b8:	2301      	movs	r3, #1
 80033ba:	2234      	movs	r2, #52	@ 0x34
 80033bc:	210c      	movs	r1, #12
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fc56 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum(WateringParams.minutes_watering, 12 + num_length_zero[3], 13 * 4, 1);
 80033c4:	4b32      	ldr	r3, [pc, #200]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	b218      	sxth	r0, r3
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	330c      	adds	r3, #12
 80033ce:	b2d9      	uxtb	r1, r3
 80033d0:	2301      	movs	r3, #1
 80033d2:	2234      	movs	r2, #52	@ 0x34
 80033d4:	f7fd fc4c 	bl	8000c70 <OLED_DrawNum>
	OLED_DrawStr_RuModified("vby", 12 + num_length_zero[3] + OLED_GetWidthNum(WateringParams.minutes_watering) + 2, 13 * 4, 1);
 80033d8:	78fc      	ldrb	r4, [r7, #3]
 80033da:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fbab 	bl	8000b3c <OLED_GetWidthNum>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4423      	add	r3, r4
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	330e      	adds	r3, #14
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	2301      	movs	r3, #1
 80033f2:	2234      	movs	r2, #52	@ 0x34
 80033f4:	4828      	ldr	r0, [pc, #160]	@ (8003498 <DrawWateringParamsPt1+0x2f0>)
 80033f6:	f7fe fa2b 	bl	8001850 <OLED_DrawStr_RuModified>

	if (WateringParams.seconds_watering < 10)
 80033fa:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d81b      	bhi.n	800343a <DrawWateringParamsPt1+0x292>
	{
		num_length_zero[4] = OLED_GetWidthNum(0);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fb9a 	bl	8000b3c <OLED_GetWidthNum>
 8003408:	4603      	mov	r3, r0
 800340a:	713b      	strb	r3, [r7, #4]
		OLED_DrawNum((int16_t) 0, 12 + num_length_zero[3] + OLED_GetWidthNum(WateringParams.minutes_watering) + 2 + OLED_GetWidthStr("vby") + 5, 13 * 4, 1);
 800340c:	78fc      	ldrb	r4, [r7, #3]
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	b21b      	sxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fb91 	bl	8000b3c <OLED_GetWidthNum>
 800341a:	4603      	mov	r3, r0
 800341c:	4423      	add	r3, r4
 800341e:	b2dc      	uxtb	r4, r3
 8003420:	481d      	ldr	r0, [pc, #116]	@ (8003498 <DrawWateringParamsPt1+0x2f0>)
 8003422:	f7fd fb57 	bl	8000ad4 <OLED_GetWidthStr>
 8003426:	4603      	mov	r3, r0
 8003428:	4423      	add	r3, r4
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3313      	adds	r3, #19
 800342e:	b2d9      	uxtb	r1, r3
 8003430:	2301      	movs	r3, #1
 8003432:	2234      	movs	r2, #52	@ 0x34
 8003434:	2000      	movs	r0, #0
 8003436:	f7fd fc1b 	bl	8000c70 <OLED_DrawNum>
	}

	OLED_DrawNum(WateringParams.seconds_watering, 12 + num_length_zero[3] + OLED_GetWidthNum(WateringParams.minutes_watering) + 2 + OLED_GetWidthStr("vby") + 5 + num_length_zero[4], 13 * 4, 1);
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	b21d      	sxth	r5, r3
 8003440:	78fc      	ldrb	r4, [r7, #3]
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003444:	791b      	ldrb	r3, [r3, #4]
 8003446:	b21b      	sxth	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fb77 	bl	8000b3c <OLED_GetWidthNum>
 800344e:	4603      	mov	r3, r0
 8003450:	4423      	add	r3, r4
 8003452:	b2dc      	uxtb	r4, r3
 8003454:	4810      	ldr	r0, [pc, #64]	@ (8003498 <DrawWateringParamsPt1+0x2f0>)
 8003456:	f7fd fb3d 	bl	8000ad4 <OLED_GetWidthStr>
 800345a:	4603      	mov	r3, r0
 800345c:	4423      	add	r3, r4
 800345e:	b2da      	uxtb	r2, r3
 8003460:	793b      	ldrb	r3, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3313      	adds	r3, #19
 8003468:	b2d9      	uxtb	r1, r3
 800346a:	2301      	movs	r3, #1
 800346c:	2234      	movs	r2, #52	@ 0x34
 800346e:	4628      	mov	r0, r5
 8003470:	f7fd fbfe 	bl	8000c70 <OLED_DrawNum>
	OLED_DrawStr_RuModified("ctr", 12 + num_length_zero[3] + OLED_GetWidthNum(WateringParams.minutes_watering) + 2 + OLED_GetWidthStr("vby") + 5 + num_length_zero[4] + OLED_GetWidthNum(WateringParams.seconds_watering) + 2, 13 * 4, 1);
 8003474:	78fc      	ldrb	r4, [r7, #3]
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <DrawWateringParamsPt1+0x2e8>)
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	b21b      	sxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fb5d 	bl	8000b3c <OLED_GetWidthNum>
 8003482:	4603      	mov	r3, r0
 8003484:	4423      	add	r3, r4
 8003486:	b2dc      	uxtb	r4, r3
 8003488:	4803      	ldr	r0, [pc, #12]	@ (8003498 <DrawWateringParamsPt1+0x2f0>)
 800348a:	f7fd fb23 	bl	8000ad4 <OLED_GetWidthStr>
 800348e:	e005      	b.n	800349c <DrawWateringParamsPt1+0x2f4>
 8003490:	20000a5c 	.word	0x20000a5c
 8003494:	08014258 	.word	0x08014258
 8003498:	08014238 	.word	0x08014238
 800349c:	4603      	mov	r3, r0
 800349e:	4423      	add	r3, r4
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	793b      	ldrb	r3, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	b2dc      	uxtb	r4, r3
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <DrawWateringParamsPt1+0x328>)
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fb44 	bl	8000b3c <OLED_GetWidthNum>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4423      	add	r3, r4
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3315      	adds	r3, #21
 80034bc:	b2d9      	uxtb	r1, r3
 80034be:	2301      	movs	r3, #1
 80034c0:	2234      	movs	r2, #52	@ 0x34
 80034c2:	4804      	ldr	r0, [pc, #16]	@ (80034d4 <DrawWateringParamsPt1+0x32c>)
 80034c4:	f7fe f9c4 	bl	8001850 <OLED_DrawStr_RuModified>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}
 80034d0:	20000a5c 	.word	0x20000a5c
 80034d4:	0801423c 	.word	0x0801423c

080034d8 <DrawWateringParamsPt2>:


// Отрисовка текущих параметров
// полива на кадре 2
void DrawWateringParamsPt2(void)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	71fb      	strb	r3, [r7, #7]
	uint8_t mask = 0x01;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71bb      	strb	r3, [r7, #6]
	 *	 1 - день выбран для полива).
	 *	 Нумерация дней по возрастанию битов, т.е.
	 *	 бит 0 - понедельник ... бит 6 - воскресенье.
	 */

	for (i = 0; i < 7; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	71fb      	strb	r3, [r7, #7]
 80034ea:	e22a      	b.n	8003942 <DrawWateringParamsPt2+0x46a>
	{
		if (i != 0)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <DrawWateringParamsPt2+0x20>
			mask <<= 1;
 80034f2:	79bb      	ldrb	r3, [r7, #6]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	71bb      	strb	r3, [r7, #6]

		// Если текущий день выбран для полива,
		// то отрисовывается заполненный круг
		if (WateringParams.daysofweek & mask)
 80034f8:	4bc3      	ldr	r3, [pc, #780]	@ (8003808 <DrawWateringParamsPt2+0x330>)
 80034fa:	795a      	ldrb	r2, [r3, #5]
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	4013      	ands	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8106 	beq.w	8003714 <DrawWateringParamsPt2+0x23c>
		{
			switch(mask)
 8003508:	79bb      	ldrb	r3, [r7, #6]
 800350a:	2b20      	cmp	r3, #32
 800350c:	dc4a      	bgt.n	80035a4 <DrawWateringParamsPt2+0xcc>
 800350e:	2b00      	cmp	r3, #0
 8003510:	f340 8214 	ble.w	800393c <DrawWateringParamsPt2+0x464>
 8003514:	3b01      	subs	r3, #1
 8003516:	2b1f      	cmp	r3, #31
 8003518:	f200 8210 	bhi.w	800393c <DrawWateringParamsPt2+0x464>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DrawWateringParamsPt2+0x4c>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	080035ad 	.word	0x080035ad
 8003528:	080035bb 	.word	0x080035bb
 800352c:	0800393d 	.word	0x0800393d
 8003530:	080035d5 	.word	0x080035d5
 8003534:	0800393d 	.word	0x0800393d
 8003538:	0800393d 	.word	0x0800393d
 800353c:	0800393d 	.word	0x0800393d
 8003540:	080035fd 	.word	0x080035fd
 8003544:	0800393d 	.word	0x0800393d
 8003548:	0800393d 	.word	0x0800393d
 800354c:	0800393d 	.word	0x0800393d
 8003550:	0800393d 	.word	0x0800393d
 8003554:	0800393d 	.word	0x0800393d
 8003558:	0800393d 	.word	0x0800393d
 800355c:	0800393d 	.word	0x0800393d
 8003560:	08003631 	.word	0x08003631
 8003564:	0800393d 	.word	0x0800393d
 8003568:	0800393d 	.word	0x0800393d
 800356c:	0800393d 	.word	0x0800393d
 8003570:	0800393d 	.word	0x0800393d
 8003574:	0800393d 	.word	0x0800393d
 8003578:	0800393d 	.word	0x0800393d
 800357c:	0800393d 	.word	0x0800393d
 8003580:	0800393d 	.word	0x0800393d
 8003584:	0800393d 	.word	0x0800393d
 8003588:	0800393d 	.word	0x0800393d
 800358c:	0800393d 	.word	0x0800393d
 8003590:	0800393d 	.word	0x0800393d
 8003594:	0800393d 	.word	0x0800393d
 8003598:	0800393d 	.word	0x0800393d
 800359c:	0800393d 	.word	0x0800393d
 80035a0:	08003671 	.word	0x08003671
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	f000 8089 	beq.w	80036bc <DrawWateringParamsPt2+0x1e4>
 80035aa:	e1c7      	b.n	800393c <DrawWateringParamsPt2+0x464>
			{
				// Понедельник
				case 0x01:
							OLED_DrawCircleFill_Modified(8 + 12, 13 * 2.5, 3, 1);
 80035ac:	2301      	movs	r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	2120      	movs	r1, #32
 80035b2:	2014      	movs	r0, #20
 80035b4:	f7fe fc23 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 80035b8:	e1c0      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Вторник
				case 0x02:
							OLED_DrawCircleFill_Modified(6 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 2.5, 3, 1);
 80035ba:	4894      	ldr	r0, [pc, #592]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80035bc:	f7fd fa8a 	bl	8000ad4 <OLED_GetWidthStr>
 80035c0:	4603      	mov	r3, r0
 80035c2:	3315      	adds	r3, #21
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b218      	sxth	r0, r3
 80035c8:	2301      	movs	r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	2120      	movs	r1, #32
 80035ce:	f7fe fc16 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 80035d2:	e1b3      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Среда
				case 0x04:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 2.5, 3, 1);
 80035d4:	488d      	ldr	r0, [pc, #564]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80035d6:	f7fd fa7d 	bl	8000ad4 <OLED_GetWidthStr>
 80035da:	4603      	mov	r3, r0
 80035dc:	461c      	mov	r4, r3
 80035de:	488c      	ldr	r0, [pc, #560]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 80035e0:	f7fd fa78 	bl	8000ad4 <OLED_GetWidthStr>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4423      	add	r3, r4
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	331a      	adds	r3, #26
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b218      	sxth	r0, r3
 80035f0:	2301      	movs	r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	2120      	movs	r1, #32
 80035f6:	f7fe fc02 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 80035fa:	e19f      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Четверг
				case 0x08:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 2.5, 3, 1);
 80035fc:	4883      	ldr	r0, [pc, #524]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80035fe:	f7fd fa69 	bl	8000ad4 <OLED_GetWidthStr>
 8003602:	4603      	mov	r3, r0
 8003604:	461c      	mov	r4, r3
 8003606:	4882      	ldr	r0, [pc, #520]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 8003608:	f7fd fa64 	bl	8000ad4 <OLED_GetWidthStr>
 800360c:	4603      	mov	r3, r0
 800360e:	4423      	add	r3, r4
 8003610:	b29c      	uxth	r4, r3
 8003612:	4880      	ldr	r0, [pc, #512]	@ (8003814 <DrawWateringParamsPt2+0x33c>)
 8003614:	f7fd fa5e 	bl	8000ad4 <OLED_GetWidthStr>
 8003618:	4603      	mov	r3, r0
 800361a:	4423      	add	r3, r4
 800361c:	b29b      	uxth	r3, r3
 800361e:	331d      	adds	r3, #29
 8003620:	b29b      	uxth	r3, r3
 8003622:	b218      	sxth	r0, r3
 8003624:	2301      	movs	r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	2120      	movs	r1, #32
 800362a:	f7fe fbe8 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 800362e:	e185      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Пятница
				case 0x10:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 2.5, 3, 1);
 8003630:	4876      	ldr	r0, [pc, #472]	@ (800380c <DrawWateringParamsPt2+0x334>)
 8003632:	f7fd fa4f 	bl	8000ad4 <OLED_GetWidthStr>
 8003636:	4603      	mov	r3, r0
 8003638:	461c      	mov	r4, r3
 800363a:	4875      	ldr	r0, [pc, #468]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 800363c:	f7fd fa4a 	bl	8000ad4 <OLED_GetWidthStr>
 8003640:	4603      	mov	r3, r0
 8003642:	4423      	add	r3, r4
 8003644:	b29c      	uxth	r4, r3
 8003646:	4873      	ldr	r0, [pc, #460]	@ (8003814 <DrawWateringParamsPt2+0x33c>)
 8003648:	f7fd fa44 	bl	8000ad4 <OLED_GetWidthStr>
 800364c:	4603      	mov	r3, r0
 800364e:	4423      	add	r3, r4
 8003650:	b29c      	uxth	r4, r3
 8003652:	4871      	ldr	r0, [pc, #452]	@ (8003818 <DrawWateringParamsPt2+0x340>)
 8003654:	f7fd fa3e 	bl	8000ad4 <OLED_GetWidthStr>
 8003658:	4603      	mov	r3, r0
 800365a:	4423      	add	r3, r4
 800365c:	b29b      	uxth	r3, r3
 800365e:	3320      	adds	r3, #32
 8003660:	b29b      	uxth	r3, r3
 8003662:	b218      	sxth	r0, r3
 8003664:	2301      	movs	r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	2120      	movs	r1, #32
 800366a:	f7fe fbc8 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 800366e:	e165      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Суббота
				case 0x20:
							OLED_DrawCircleFill_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 2.5, 3, 1);
 8003670:	4866      	ldr	r0, [pc, #408]	@ (800380c <DrawWateringParamsPt2+0x334>)
 8003672:	f7fd fa2f 	bl	8000ad4 <OLED_GetWidthStr>
 8003676:	4603      	mov	r3, r0
 8003678:	461c      	mov	r4, r3
 800367a:	4865      	ldr	r0, [pc, #404]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 800367c:	f7fd fa2a 	bl	8000ad4 <OLED_GetWidthStr>
 8003680:	4603      	mov	r3, r0
 8003682:	4423      	add	r3, r4
 8003684:	b29c      	uxth	r4, r3
 8003686:	4863      	ldr	r0, [pc, #396]	@ (8003814 <DrawWateringParamsPt2+0x33c>)
 8003688:	f7fd fa24 	bl	8000ad4 <OLED_GetWidthStr>
 800368c:	4603      	mov	r3, r0
 800368e:	4423      	add	r3, r4
 8003690:	b29c      	uxth	r4, r3
 8003692:	4861      	ldr	r0, [pc, #388]	@ (8003818 <DrawWateringParamsPt2+0x340>)
 8003694:	f7fd fa1e 	bl	8000ad4 <OLED_GetWidthStr>
 8003698:	4603      	mov	r3, r0
 800369a:	4423      	add	r3, r4
 800369c:	b29c      	uxth	r4, r3
 800369e:	485f      	ldr	r0, [pc, #380]	@ (800381c <DrawWateringParamsPt2+0x344>)
 80036a0:	f7fd fa18 	bl	8000ad4 <OLED_GetWidthStr>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4423      	add	r3, r4
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3323      	adds	r3, #35	@ 0x23
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	b218      	sxth	r0, r3
 80036b0:	2301      	movs	r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	2120      	movs	r1, #32
 80036b6:	f7fe fba2 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 80036ba:	e13f      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Воскресенье
				case 0x40:
							OLED_DrawCircleFill_Modified(7 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 2.5, 3, 1);
 80036bc:	4853      	ldr	r0, [pc, #332]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80036be:	f7fd fa09 	bl	8000ad4 <OLED_GetWidthStr>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461c      	mov	r4, r3
 80036c6:	4852      	ldr	r0, [pc, #328]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 80036c8:	f7fd fa04 	bl	8000ad4 <OLED_GetWidthStr>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4423      	add	r3, r4
 80036d0:	b29c      	uxth	r4, r3
 80036d2:	4850      	ldr	r0, [pc, #320]	@ (8003814 <DrawWateringParamsPt2+0x33c>)
 80036d4:	f7fd f9fe 	bl	8000ad4 <OLED_GetWidthStr>
 80036d8:	4603      	mov	r3, r0
 80036da:	4423      	add	r3, r4
 80036dc:	b29c      	uxth	r4, r3
 80036de:	484e      	ldr	r0, [pc, #312]	@ (8003818 <DrawWateringParamsPt2+0x340>)
 80036e0:	f7fd f9f8 	bl	8000ad4 <OLED_GetWidthStr>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4423      	add	r3, r4
 80036e8:	b29c      	uxth	r4, r3
 80036ea:	484c      	ldr	r0, [pc, #304]	@ (800381c <DrawWateringParamsPt2+0x344>)
 80036ec:	f7fd f9f2 	bl	8000ad4 <OLED_GetWidthStr>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4423      	add	r3, r4
 80036f4:	b29c      	uxth	r4, r3
 80036f6:	484a      	ldr	r0, [pc, #296]	@ (8003820 <DrawWateringParamsPt2+0x348>)
 80036f8:	f7fd f9ec 	bl	8000ad4 <OLED_GetWidthStr>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4423      	add	r3, r4
 8003700:	b29b      	uxth	r3, r3
 8003702:	3325      	adds	r3, #37	@ 0x25
 8003704:	b29b      	uxth	r3, r3
 8003706:	b218      	sxth	r0, r3
 8003708:	2301      	movs	r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	2120      	movs	r1, #32
 800370e:	f7fe fb76 	bl	8001dfe <OLED_DrawCircleFill_Modified>
				break;
 8003712:	e113      	b.n	800393c <DrawWateringParamsPt2+0x464>

		// Если текущий день не выбран для полива,
		// то отрисовывается пустой круг
		else
		{
			switch(mask)
 8003714:	79bb      	ldrb	r3, [r7, #6]
 8003716:	2b20      	cmp	r3, #32
 8003718:	dc4a      	bgt.n	80037b0 <DrawWateringParamsPt2+0x2d8>
 800371a:	2b00      	cmp	r3, #0
 800371c:	f340 810e 	ble.w	800393c <DrawWateringParamsPt2+0x464>
 8003720:	3b01      	subs	r3, #1
 8003722:	2b1f      	cmp	r3, #31
 8003724:	f200 810a 	bhi.w	800393c <DrawWateringParamsPt2+0x464>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <DrawWateringParamsPt2+0x258>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	080037b9 	.word	0x080037b9
 8003734:	080037c7 	.word	0x080037c7
 8003738:	0800393d 	.word	0x0800393d
 800373c:	080037e1 	.word	0x080037e1
 8003740:	0800393d 	.word	0x0800393d
 8003744:	0800393d 	.word	0x0800393d
 8003748:	0800393d 	.word	0x0800393d
 800374c:	08003825 	.word	0x08003825
 8003750:	0800393d 	.word	0x0800393d
 8003754:	0800393d 	.word	0x0800393d
 8003758:	0800393d 	.word	0x0800393d
 800375c:	0800393d 	.word	0x0800393d
 8003760:	0800393d 	.word	0x0800393d
 8003764:	0800393d 	.word	0x0800393d
 8003768:	0800393d 	.word	0x0800393d
 800376c:	08003859 	.word	0x08003859
 8003770:	0800393d 	.word	0x0800393d
 8003774:	0800393d 	.word	0x0800393d
 8003778:	0800393d 	.word	0x0800393d
 800377c:	0800393d 	.word	0x0800393d
 8003780:	0800393d 	.word	0x0800393d
 8003784:	0800393d 	.word	0x0800393d
 8003788:	0800393d 	.word	0x0800393d
 800378c:	0800393d 	.word	0x0800393d
 8003790:	0800393d 	.word	0x0800393d
 8003794:	0800393d 	.word	0x0800393d
 8003798:	0800393d 	.word	0x0800393d
 800379c:	0800393d 	.word	0x0800393d
 80037a0:	0800393d 	.word	0x0800393d
 80037a4:	0800393d 	.word	0x0800393d
 80037a8:	0800393d 	.word	0x0800393d
 80037ac:	08003899 	.word	0x08003899
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	f000 8097 	beq.w	80038e4 <DrawWateringParamsPt2+0x40c>
 80037b6:	e0c1      	b.n	800393c <DrawWateringParamsPt2+0x464>
			{
				// Понедельник
				case 0x01:
							OLED_DrawCircle_Modified(8 + 12, 13 * 2.5, 3, 1);
 80037b8:	2301      	movs	r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	2120      	movs	r1, #32
 80037be:	2014      	movs	r0, #20
 80037c0:	f7fe fa20 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 80037c4:	e0ba      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Вторник
				case 0x02:
							OLED_DrawCircle_Modified(6 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 2.5, 3, 1);
 80037c6:	4811      	ldr	r0, [pc, #68]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80037c8:	f7fd f984 	bl	8000ad4 <OLED_GetWidthStr>
 80037cc:	4603      	mov	r3, r0
 80037ce:	3315      	adds	r3, #21
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	b218      	sxth	r0, r3
 80037d4:	2301      	movs	r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	2120      	movs	r1, #32
 80037da:	f7fe fa13 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 80037de:	e0ad      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Среда
				case 0x04:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 2.5, 3, 1);
 80037e0:	480a      	ldr	r0, [pc, #40]	@ (800380c <DrawWateringParamsPt2+0x334>)
 80037e2:	f7fd f977 	bl	8000ad4 <OLED_GetWidthStr>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461c      	mov	r4, r3
 80037ea:	4809      	ldr	r0, [pc, #36]	@ (8003810 <DrawWateringParamsPt2+0x338>)
 80037ec:	f7fd f972 	bl	8000ad4 <OLED_GetWidthStr>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4423      	add	r3, r4
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	331a      	adds	r3, #26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b218      	sxth	r0, r3
 80037fc:	2301      	movs	r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	2120      	movs	r1, #32
 8003802:	f7fe f9ff 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8003806:	e099      	b.n	800393c <DrawWateringParamsPt2+0x464>
 8003808:	20000a5c 	.word	0x20000a5c
 800380c:	08014240 	.word	0x08014240
 8003810:	08014244 	.word	0x08014244
 8003814:	08014248 	.word	0x08014248
 8003818:	0801424c 	.word	0x0801424c
 800381c:	08014250 	.word	0x08014250
 8003820:	08014254 	.word	0x08014254

				// Четверг
				case 0x08:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 2.5, 3, 1);
 8003824:	484b      	ldr	r0, [pc, #300]	@ (8003954 <DrawWateringParamsPt2+0x47c>)
 8003826:	f7fd f955 	bl	8000ad4 <OLED_GetWidthStr>
 800382a:	4603      	mov	r3, r0
 800382c:	461c      	mov	r4, r3
 800382e:	484a      	ldr	r0, [pc, #296]	@ (8003958 <DrawWateringParamsPt2+0x480>)
 8003830:	f7fd f950 	bl	8000ad4 <OLED_GetWidthStr>
 8003834:	4603      	mov	r3, r0
 8003836:	4423      	add	r3, r4
 8003838:	b29c      	uxth	r4, r3
 800383a:	4848      	ldr	r0, [pc, #288]	@ (800395c <DrawWateringParamsPt2+0x484>)
 800383c:	f7fd f94a 	bl	8000ad4 <OLED_GetWidthStr>
 8003840:	4603      	mov	r3, r0
 8003842:	4423      	add	r3, r4
 8003844:	b29b      	uxth	r3, r3
 8003846:	331d      	adds	r3, #29
 8003848:	b29b      	uxth	r3, r3
 800384a:	b218      	sxth	r0, r3
 800384c:	2301      	movs	r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	2120      	movs	r1, #32
 8003852:	f7fe f9d7 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8003856:	e071      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Пятница
				case 0x10:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 2.5, 3, 1);
 8003858:	483e      	ldr	r0, [pc, #248]	@ (8003954 <DrawWateringParamsPt2+0x47c>)
 800385a:	f7fd f93b 	bl	8000ad4 <OLED_GetWidthStr>
 800385e:	4603      	mov	r3, r0
 8003860:	461c      	mov	r4, r3
 8003862:	483d      	ldr	r0, [pc, #244]	@ (8003958 <DrawWateringParamsPt2+0x480>)
 8003864:	f7fd f936 	bl	8000ad4 <OLED_GetWidthStr>
 8003868:	4603      	mov	r3, r0
 800386a:	4423      	add	r3, r4
 800386c:	b29c      	uxth	r4, r3
 800386e:	483b      	ldr	r0, [pc, #236]	@ (800395c <DrawWateringParamsPt2+0x484>)
 8003870:	f7fd f930 	bl	8000ad4 <OLED_GetWidthStr>
 8003874:	4603      	mov	r3, r0
 8003876:	4423      	add	r3, r4
 8003878:	b29c      	uxth	r4, r3
 800387a:	4839      	ldr	r0, [pc, #228]	@ (8003960 <DrawWateringParamsPt2+0x488>)
 800387c:	f7fd f92a 	bl	8000ad4 <OLED_GetWidthStr>
 8003880:	4603      	mov	r3, r0
 8003882:	4423      	add	r3, r4
 8003884:	b29b      	uxth	r3, r3
 8003886:	3320      	adds	r3, #32
 8003888:	b29b      	uxth	r3, r3
 800388a:	b218      	sxth	r0, r3
 800388c:	2301      	movs	r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	2120      	movs	r1, #32
 8003892:	f7fe f9b7 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 8003896:	e051      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Суббота
				case 0x20:
							OLED_DrawCircle_Modified(8 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 2.5, 3, 1);
 8003898:	482e      	ldr	r0, [pc, #184]	@ (8003954 <DrawWateringParamsPt2+0x47c>)
 800389a:	f7fd f91b 	bl	8000ad4 <OLED_GetWidthStr>
 800389e:	4603      	mov	r3, r0
 80038a0:	461c      	mov	r4, r3
 80038a2:	482d      	ldr	r0, [pc, #180]	@ (8003958 <DrawWateringParamsPt2+0x480>)
 80038a4:	f7fd f916 	bl	8000ad4 <OLED_GetWidthStr>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4423      	add	r3, r4
 80038ac:	b29c      	uxth	r4, r3
 80038ae:	482b      	ldr	r0, [pc, #172]	@ (800395c <DrawWateringParamsPt2+0x484>)
 80038b0:	f7fd f910 	bl	8000ad4 <OLED_GetWidthStr>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4423      	add	r3, r4
 80038b8:	b29c      	uxth	r4, r3
 80038ba:	4829      	ldr	r0, [pc, #164]	@ (8003960 <DrawWateringParamsPt2+0x488>)
 80038bc:	f7fd f90a 	bl	8000ad4 <OLED_GetWidthStr>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4423      	add	r3, r4
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	4827      	ldr	r0, [pc, #156]	@ (8003964 <DrawWateringParamsPt2+0x48c>)
 80038c8:	f7fd f904 	bl	8000ad4 <OLED_GetWidthStr>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4423      	add	r3, r4
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3323      	adds	r3, #35	@ 0x23
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b218      	sxth	r0, r3
 80038d8:	2301      	movs	r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	2120      	movs	r1, #32
 80038de:	f7fe f991 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 80038e2:	e02b      	b.n	800393c <DrawWateringParamsPt2+0x464>

				// Воскресенье
				case 0x40:
							OLED_DrawCircle_Modified(7 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 2.5, 3, 1);
 80038e4:	481b      	ldr	r0, [pc, #108]	@ (8003954 <DrawWateringParamsPt2+0x47c>)
 80038e6:	f7fd f8f5 	bl	8000ad4 <OLED_GetWidthStr>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461c      	mov	r4, r3
 80038ee:	481a      	ldr	r0, [pc, #104]	@ (8003958 <DrawWateringParamsPt2+0x480>)
 80038f0:	f7fd f8f0 	bl	8000ad4 <OLED_GetWidthStr>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4423      	add	r3, r4
 80038f8:	b29c      	uxth	r4, r3
 80038fa:	4818      	ldr	r0, [pc, #96]	@ (800395c <DrawWateringParamsPt2+0x484>)
 80038fc:	f7fd f8ea 	bl	8000ad4 <OLED_GetWidthStr>
 8003900:	4603      	mov	r3, r0
 8003902:	4423      	add	r3, r4
 8003904:	b29c      	uxth	r4, r3
 8003906:	4816      	ldr	r0, [pc, #88]	@ (8003960 <DrawWateringParamsPt2+0x488>)
 8003908:	f7fd f8e4 	bl	8000ad4 <OLED_GetWidthStr>
 800390c:	4603      	mov	r3, r0
 800390e:	4423      	add	r3, r4
 8003910:	b29c      	uxth	r4, r3
 8003912:	4814      	ldr	r0, [pc, #80]	@ (8003964 <DrawWateringParamsPt2+0x48c>)
 8003914:	f7fd f8de 	bl	8000ad4 <OLED_GetWidthStr>
 8003918:	4603      	mov	r3, r0
 800391a:	4423      	add	r3, r4
 800391c:	b29c      	uxth	r4, r3
 800391e:	4812      	ldr	r0, [pc, #72]	@ (8003968 <DrawWateringParamsPt2+0x490>)
 8003920:	f7fd f8d8 	bl	8000ad4 <OLED_GetWidthStr>
 8003924:	4603      	mov	r3, r0
 8003926:	4423      	add	r3, r4
 8003928:	b29b      	uxth	r3, r3
 800392a:	3325      	adds	r3, #37	@ 0x25
 800392c:	b29b      	uxth	r3, r3
 800392e:	b218      	sxth	r0, r3
 8003930:	2301      	movs	r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	2120      	movs	r1, #32
 8003936:	f7fe f965 	bl	8001c04 <OLED_DrawCircle_Modified>
				break;
 800393a:	bf00      	nop
	for (i = 0; i < 7; i++)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	3301      	adds	r3, #1
 8003940:	71fb      	strb	r3, [r7, #7]
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b06      	cmp	r3, #6
 8003946:	f67f add1 	bls.w	80034ec <DrawWateringParamsPt2+0x14>
			}
		}
	}
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	08014240 	.word	0x08014240
 8003958:	08014244 	.word	0x08014244
 800395c:	08014248 	.word	0x08014248
 8003960:	0801424c 	.word	0x0801424c
 8003964:	08014250 	.word	0x08014250
 8003968:	08014254 	.word	0x08014254

0800396c <IsSetDateFinished>:


// Проверка того, что дата была установлена
void IsSetDateFinished(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
	new_CondSetDate = f_StSetDate;
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <IsSetDateFinished+0x34>)
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <IsSetDateFinished+0x38>)
 8003976:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetDate) && (old_CondSetDate))
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <IsSetDateFinished+0x38>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <IsSetDateFinished+0x22>
 8003980:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <IsSetDateFinished+0x3c>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <IsSetDateFinished+0x22>
		f_DateIsSet = 1;
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <IsSetDateFinished+0x40>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]

	old_CondSetDate = new_CondSetDate;
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <IsSetDateFinished+0x38>)
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <IsSetDateFinished+0x3c>)
 8003994:	701a      	strb	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	200009ed 	.word	0x200009ed
 80039a4:	200009f0 	.word	0x200009f0
 80039a8:	200009f1 	.word	0x200009f1
 80039ac:	200009f2 	.word	0x200009f2

080039b0 <IsSetDayOfWeekFinished>:


// Проверка того, что день недели был установлен
void IsSetDayOfWeekFinished(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
	new_CondSetDayOfWeek = f_StSetDayOfWeek;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <IsSetDayOfWeekFinished+0x34>)
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <IsSetDayOfWeekFinished+0x38>)
 80039ba:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetDayOfWeek) && (old_CondSetDayOfWeek))
 80039bc:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <IsSetDayOfWeekFinished+0x38>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <IsSetDayOfWeekFinished+0x22>
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <IsSetDayOfWeekFinished+0x3c>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <IsSetDayOfWeekFinished+0x22>
		f_DayOfWeekIsSet = 1;
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <IsSetDayOfWeekFinished+0x40>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]

	old_CondSetDayOfWeek = new_CondSetDayOfWeek;
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <IsSetDayOfWeekFinished+0x38>)
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <IsSetDayOfWeekFinished+0x3c>)
 80039d8:	701a      	strb	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	200009ee 	.word	0x200009ee
 80039e8:	200009f3 	.word	0x200009f3
 80039ec:	200009f4 	.word	0x200009f4
 80039f0:	200009f5 	.word	0x200009f5

080039f4 <IsSetTimeWaterFinished>:


// Проверка того, что время полива было установлено
void IsSetTimeWaterFinished(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
	new_CondSetTimeWater = f_StSetTimeWater;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <IsSetTimeWaterFinished+0x34>)
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <IsSetTimeWaterFinished+0x38>)
 80039fe:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetTimeWater) && (old_CondSetTimeWater))
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <IsSetTimeWaterFinished+0x38>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <IsSetTimeWaterFinished+0x22>
 8003a08:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <IsSetTimeWaterFinished+0x3c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <IsSetTimeWaterFinished+0x22>
		f_TimeIsSetWater = 1;
 8003a10:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <IsSetTimeWaterFinished+0x40>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]

	old_CondSetTimeWater = new_CondSetTimeWater;
 8003a16:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <IsSetTimeWaterFinished+0x38>)
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <IsSetTimeWaterFinished+0x3c>)
 8003a1c:	701a      	strb	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	20000a11 	.word	0x20000a11
 8003a2c:	20000a14 	.word	0x20000a14
 8003a30:	20000a15 	.word	0x20000a15
 8003a34:	20000a16 	.word	0x20000a16

08003a38 <IsSetTimeDurationWaterFinished>:


// Проверка того, что продолжительность полива была установлена
void IsSetTimeDurationWaterFinished(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
	new_CondSetDurationWater = f_StSetDurationWater;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <IsSetTimeDurationWaterFinished+0x34>)
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <IsSetTimeDurationWaterFinished+0x38>)
 8003a42:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetDurationWater) && (old_CondSetDurationWater))
 8003a44:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <IsSetTimeDurationWaterFinished+0x38>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <IsSetTimeDurationWaterFinished+0x22>
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <IsSetTimeDurationWaterFinished+0x3c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <IsSetTimeDurationWaterFinished+0x22>
		f_TimeIsSetDurationWater = 1;
 8003a54:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <IsSetTimeDurationWaterFinished+0x40>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]

	old_CondSetDurationWater = new_CondSetDurationWater;
 8003a5a:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <IsSetTimeDurationWaterFinished+0x38>)
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <IsSetTimeDurationWaterFinished+0x3c>)
 8003a60:	701a      	strb	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000a12 	.word	0x20000a12
 8003a70:	20000a17 	.word	0x20000a17
 8003a74:	20000a18 	.word	0x20000a18
 8003a78:	20000a19 	.word	0x20000a19

08003a7c <IsSetTimeDaysWaterFinished>:


// Проверка того, что дни полива были установлены
void IsSetTimeDaysWaterFinished(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	new_CondSetDaysWater = f_StSetDaysWater;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <IsSetTimeDaysWaterFinished+0x34>)
 8003a82:	781a      	ldrb	r2, [r3, #0]
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <IsSetTimeDaysWaterFinished+0x38>)
 8003a86:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetDaysWater) && (old_CondSetDaysWater))
 8003a88:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <IsSetTimeDaysWaterFinished+0x38>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <IsSetTimeDaysWaterFinished+0x22>
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <IsSetTimeDaysWaterFinished+0x3c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <IsSetTimeDaysWaterFinished+0x22>
		f_DaysWaterIsSet = 1;
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <IsSetTimeDaysWaterFinished+0x40>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]

	old_CondSetDaysWater = new_CondSetDaysWater;
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <IsSetTimeDaysWaterFinished+0x38>)
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <IsSetTimeDaysWaterFinished+0x3c>)
 8003aa4:	701a      	strb	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20000a13 	.word	0x20000a13
 8003ab4:	20000a1a 	.word	0x20000a1a
 8003ab8:	20000a1b 	.word	0x20000a1b
 8003abc:	20000a1c 	.word	0x20000a1c

08003ac0 <IsSetTimeFinished>:


// Проверка того, что время было установлено
void IsSetTimeFinished(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
	new_CondSetTime = f_StSetTime;
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <IsSetTimeFinished+0x34>)
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <IsSetTimeFinished+0x38>)
 8003aca:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetTime) && (old_CondSetTime))
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <IsSetTimeFinished+0x38>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <IsSetTimeFinished+0x22>
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <IsSetTimeFinished+0x3c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <IsSetTimeFinished+0x22>
		f_TimeIsSet = 1;
 8003adc:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <IsSetTimeFinished+0x40>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]

	old_CondSetTime = new_CondSetTime;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <IsSetTimeFinished+0x38>)
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <IsSetTimeFinished+0x3c>)
 8003ae8:	701a      	strb	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	200009ef 	.word	0x200009ef
 8003af8:	200009f6 	.word	0x200009f6
 8003afc:	200009f7 	.word	0x200009f7
 8003b00:	200009f8 	.word	0x200009f8

08003b04 <IsSetScreenOffFinished>:


// Проверка того, что время
// автоотключения экрана было установлено
void IsSetScreenOffFinished(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	new_CondSetScreenOff = f_StSetScreenOff;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <IsSetScreenOffFinished+0x34>)
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <IsSetScreenOffFinished+0x38>)
 8003b0e:	701a      	strb	r2, [r3, #0]

	if ((!new_CondSetScreenOff) && (old_CondSetScreenOff))
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <IsSetScreenOffFinished+0x38>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <IsSetScreenOffFinished+0x22>
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <IsSetScreenOffFinished+0x3c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <IsSetScreenOffFinished+0x22>
		f_ScreenOffIsSet = 1;
 8003b20:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <IsSetScreenOffFinished+0x40>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]

	old_CondSetScreenOff = new_CondSetScreenOff;
 8003b26:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <IsSetScreenOffFinished+0x38>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <IsSetScreenOffFinished+0x3c>)
 8003b2c:	701a      	strb	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000a2b 	.word	0x20000a2b
 8003b3c:	20000a2c 	.word	0x20000a2c
 8003b40:	20000a2d 	.word	0x20000a2d
 8003b44:	20000a2e 	.word	0x20000a2e

08003b48 <EmergencyTerminationOfWatering>:


// Экстренное завершение полива
void EmergencyTerminationOfWatering(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	// Выключение помпы
	PumpOff();
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b52:	480a      	ldr	r0, [pc, #40]	@ (8003b7c <EmergencyTerminationOfWatering+0x34>)
 8003b54:	f009 f98c 	bl	800ce70 <HAL_GPIO_WritePin>

	// Сброс и выключение таймера 4
	HAL_TIM_Base_Stop_IT(&htim4);
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <EmergencyTerminationOfWatering+0x38>)
 8003b5a:	f00b fd8d 	bl	800f678 <HAL_TIM_Base_Stop_IT>
	TIM4->CNT = 0;
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <EmergencyTerminationOfWatering+0x3c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

	f_StartWatering = 0;
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <EmergencyTerminationOfWatering+0x40>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
	SecondsStartWatering_CNT = 0;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <EmergencyTerminationOfWatering+0x44>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
	SecondsWatering = 0;
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <EmergencyTerminationOfWatering+0x48>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	801a      	strh	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	20000948 	.word	0x20000948
 8003b84:	40000800 	.word	0x40000800
 8003b88:	20000a20 	.word	0x20000a20
 8003b8c:	20001186 	.word	0x20001186
 8003b90:	20000a1e 	.word	0x20000a1e

08003b94 <IsTodayWateringDay>:

// Определение того, нужен ли сегодня полив
void IsTodayWateringDay(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	switch(time.dayofweek)
 8003b98:	4b29      	ldr	r3, [pc, #164]	@ (8003c40 <IsTodayWateringDay+0xac>)
 8003b9a:	78db      	ldrb	r3, [r3, #3]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d848      	bhi.n	8003c34 <IsTodayWateringDay+0xa0>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <IsTodayWateringDay+0x14>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bc5 	.word	0x08003bc5
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003c05 	.word	0x08003c05
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c25 	.word	0x08003c25
	{
		// Понедельник
		case 1:
				f_WaterDay = WateringParams.daysofweek & 0x01;
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003bc6:	795b      	ldrb	r3, [r3, #5]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003bd0:	701a      	strb	r2, [r3, #0]
		break;
 8003bd2:	e02f      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Вторник
		case 2:
				f_WaterDay = WateringParams.daysofweek & 0x02;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003bd6:	795b      	ldrb	r3, [r3, #5]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003be0:	701a      	strb	r2, [r3, #0]
		break;
 8003be2:	e027      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Среда
		case 3:
				f_WaterDay = WateringParams.daysofweek & 0x04;
 8003be4:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003be6:	795b      	ldrb	r3, [r3, #5]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003bf0:	701a      	strb	r2, [r3, #0]
		break;
 8003bf2:	e01f      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Четверг
		case 4:
				f_WaterDay = WateringParams.daysofweek & 0x08;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003bf6:	795b      	ldrb	r3, [r3, #5]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003c00:	701a      	strb	r2, [r3, #0]
		break;
 8003c02:	e017      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Пятница
		case 5:
				f_WaterDay = WateringParams.daysofweek & 0x10;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003c06:	795b      	ldrb	r3, [r3, #5]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003c10:	701a      	strb	r2, [r3, #0]
		break;
 8003c12:	e00f      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Суббота
		case 6:
				f_WaterDay = WateringParams.daysofweek & 0x20;
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003c16:	795b      	ldrb	r3, [r3, #5]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003c20:	701a      	strb	r2, [r3, #0]
		break;
 8003c22:	e007      	b.n	8003c34 <IsTodayWateringDay+0xa0>

		// Воскресенье
		case 7:
				f_WaterDay = WateringParams.daysofweek & 0x40;
 8003c24:	4b07      	ldr	r3, [pc, #28]	@ (8003c44 <IsTodayWateringDay+0xb0>)
 8003c26:	795b      	ldrb	r3, [r3, #5]
 8003c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <IsTodayWateringDay+0xb4>)
 8003c30:	701a      	strb	r2, [r3, #0]
		break;
 8003c32:	bf00      	nop
	}
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000a4c 	.word	0x20000a4c
 8003c44:	20000a5c 	.word	0x20000a5c
 8003c48:	20000a21 	.word	0x20000a21

08003c4c <IsTimeToStartWatering>:


// Включение помпы (начало полива)
void IsTimeToStartWatering(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	// Определение того, нужен ли сегодня полив
	IsTodayWateringDay();
 8003c50:	f7ff ffa0 	bl	8003b94 <IsTodayWateringDay>

	// Если сегодня нужен полив
	if (f_WaterDay)
 8003c54:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <IsTimeToStartWatering+0xe8>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d069      	beq.n	8003d30 <IsTimeToStartWatering+0xe4>
	{
		// Если наступило время полива
		if ((time.hour == WateringParams.hour) &&
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <IsTimeToStartWatering+0xec>)
 8003c5e:	789a      	ldrb	r2, [r3, #2]
 8003c60:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003c62:	789b      	ldrb	r3, [r3, #2]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d163      	bne.n	8003d30 <IsTimeToStartWatering+0xe4>
			(time.minutes == WateringParams.minutes) &&
 8003c68:	4b33      	ldr	r3, [pc, #204]	@ (8003d38 <IsTimeToStartWatering+0xec>)
 8003c6a:	785a      	ldrb	r2, [r3, #1]
 8003c6c:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003c6e:	785b      	ldrb	r3, [r3, #1]
		if ((time.hour == WateringParams.hour) &&
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d15d      	bne.n	8003d30 <IsTimeToStartWatering+0xe4>
			(time.seconds == WateringParams.seconds))
 8003c74:	4b30      	ldr	r3, [pc, #192]	@ (8003d38 <IsTimeToStartWatering+0xec>)
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
			(time.minutes == WateringParams.minutes) &&
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d157      	bne.n	8003d30 <IsTimeToStartWatering+0xe4>
		{
			// Если датчик уровня воды включен
			if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 8003c80:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <IsTimeToStartWatering+0xf4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d037      	beq.n	8003cf8 <IsTimeToStartWatering+0xac>
			{
				// Если в момент начала
				// полива в резервуаре есть вода
				if (WaterLevel != NoWater)
 8003c88:	4b2e      	ldr	r3, [pc, #184]	@ (8003d44 <IsTimeToStartWatering+0xf8>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01c      	beq.n	8003cca <IsTimeToStartWatering+0x7e>
				{
					// Определение продолжительности полива в секундах
					SecondsWatering = WateringParams.minutes_watering * 60 +
 8003c90:	4b2a      	ldr	r3, [pc, #168]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003c92:	791b      	ldrb	r3, [r3, #4]
 8003c94:	461a      	mov	r2, r3
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	b29b      	uxth	r3, r3
									  WateringParams.seconds_watering;
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003ca0:	78d2      	ldrb	r2, [r2, #3]
					SecondsWatering = WateringParams.minutes_watering * 60 +
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	4b28      	ldr	r3, [pc, #160]	@ (8003d48 <IsTimeToStartWatering+0xfc>)
 8003ca8:	801a      	strh	r2, [r3, #0]

					// Флаг начала полива
					f_StartWatering = 1;
 8003caa:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <IsTimeToStartWatering+0x100>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

					// Сброс и включение таймера 4
					TIM4->CNT = 0;
 8003cb0:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <IsTimeToStartWatering+0x104>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start_IT(&htim4);
 8003cb6:	4827      	ldr	r0, [pc, #156]	@ (8003d54 <IsTimeToStartWatering+0x108>)
 8003cb8:	f00b fc7c 	bl	800f5b4 <HAL_TIM_Base_Start_IT>

					// Включение помпы
					PumpOn();
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cc2:	4825      	ldr	r0, [pc, #148]	@ (8003d58 <IsTimeToStartWatering+0x10c>)
 8003cc4:	f009 f8d4 	bl	800ce70 <HAL_GPIO_WritePin>
				// Включение помпы
				PumpOn();
			}
		}
	}
}
 8003cc8:	e032      	b.n	8003d30 <IsTimeToStartWatering+0xe4>
					if (current_frame != 28)
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <IsTimeToStartWatering+0x110>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b1c      	cmp	r3, #28
 8003cd0:	d02e      	beq.n	8003d30 <IsTimeToStartWatering+0xe4>
						if (current_frame != 29)
 8003cd2:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <IsTimeToStartWatering+0x110>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b1d      	cmp	r3, #29
 8003cd8:	d007      	beq.n	8003cea <IsTimeToStartWatering+0x9e>
							prev_frame = current_frame;
 8003cda:	4b20      	ldr	r3, [pc, #128]	@ (8003d5c <IsTimeToStartWatering+0x110>)
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <IsTimeToStartWatering+0x114>)
 8003ce0:	701a      	strb	r2, [r3, #0]
							prev_pos_cursor = pos_cursor;
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <IsTimeToStartWatering+0x118>)
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <IsTimeToStartWatering+0x11c>)
 8003ce8:	701a      	strb	r2, [r3, #0]
						current_frame = 29;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <IsTimeToStartWatering+0x110>)
 8003cec:	221d      	movs	r2, #29
 8003cee:	701a      	strb	r2, [r3, #0]
						pos_cursor = 4;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <IsTimeToStartWatering+0x118>)
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	701a      	strb	r2, [r3, #0]
}
 8003cf6:	e01b      	b.n	8003d30 <IsTimeToStartWatering+0xe4>
				SecondsWatering = WateringParams.minutes_watering * 60 +
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003cfa:	791b      	ldrb	r3, [r3, #4]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	b29b      	uxth	r3, r3
								  WateringParams.seconds_watering;
 8003d06:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <IsTimeToStartWatering+0xf0>)
 8003d08:	78d2      	ldrb	r2, [r2, #3]
				SecondsWatering = WateringParams.minutes_watering * 60 +
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <IsTimeToStartWatering+0xfc>)
 8003d10:	801a      	strh	r2, [r3, #0]
				f_StartWatering = 1;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <IsTimeToStartWatering+0x100>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
				TIM4->CNT = 0;
 8003d18:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <IsTimeToStartWatering+0x104>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim4);
 8003d1e:	480d      	ldr	r0, [pc, #52]	@ (8003d54 <IsTimeToStartWatering+0x108>)
 8003d20:	f00b fc48 	bl	800f5b4 <HAL_TIM_Base_Start_IT>
				PumpOn();
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d2a:	480b      	ldr	r0, [pc, #44]	@ (8003d58 <IsTimeToStartWatering+0x10c>)
 8003d2c:	f009 f8a0 	bl	800ce70 <HAL_GPIO_WritePin>
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000a21 	.word	0x20000a21
 8003d38:	20000a4c 	.word	0x20000a4c
 8003d3c:	20000a5c 	.word	0x20000a5c
 8003d40:	20000a84 	.word	0x20000a84
 8003d44:	20000134 	.word	0x20000134
 8003d48:	20000a1e 	.word	0x20000a1e
 8003d4c:	20000a20 	.word	0x20000a20
 8003d50:	40000800 	.word	0x40000800
 8003d54:	20000948 	.word	0x20000948
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	20000a3c 	.word	0x20000a3c
 8003d60:	20000a3a 	.word	0x20000a3a
 8003d64:	20000a3d 	.word	0x20000a3d
 8003d68:	20000a3b 	.word	0x20000a3b

08003d6c <BuildFrame>:


// Формирование кадров для отрисовки
void BuildFrame(uint8_t frame_number)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af04      	add	r7, sp, #16
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
	switch(frame_number)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b21      	cmp	r3, #33	@ 0x21
 8003d7a:	f203 84fc 	bhi.w	8007776 <BuildFrame+0x3a0a>
 8003d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <BuildFrame+0x18>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003e0d 	.word	0x08003e0d
 8003d88:	08003f6f 	.word	0x08003f6f
 8003d8c:	080040a5 	.word	0x080040a5
 8003d90:	0800427f 	.word	0x0800427f
 8003d94:	08004519 	.word	0x08004519
 8003d98:	0800473d 	.word	0x0800473d
 8003d9c:	08004985 	.word	0x08004985
 8003da0:	08004aa1 	.word	0x08004aa1
 8003da4:	08004c89 	.word	0x08004c89
 8003da8:	08007777 	.word	0x08007777
 8003dac:	08004edf 	.word	0x08004edf
 8003db0:	08007777 	.word	0x08007777
 8003db4:	08004f65 	.word	0x08004f65
 8003db8:	080050fd 	.word	0x080050fd
 8003dbc:	08005267 	.word	0x08005267
 8003dc0:	0800554b 	.word	0x0800554b
 8003dc4:	08005805 	.word	0x08005805
 8003dc8:	08005945 	.word	0x08005945
 8003dcc:	08005b05 	.word	0x08005b05
 8003dd0:	08005d37 	.word	0x08005d37
 8003dd4:	08006291 	.word	0x08006291
 8003dd8:	08006509 	.word	0x08006509
 8003ddc:	080067cd 	.word	0x080067cd
 8003de0:	08006885 	.word	0x08006885
 8003de4:	08006cef 	.word	0x08006cef
 8003de8:	08006d23 	.word	0x08006d23
 8003dec:	08006dd1 	.word	0x08006dd1
 8003df0:	08006ebd 	.word	0x08006ebd
 8003df4:	08006f59 	.word	0x08006f59
 8003df8:	080070d5 	.word	0x080070d5
 8003dfc:	0800724d 	.word	0x0800724d
 8003e00:	0800730b 	.word	0x0800730b
 8003e04:	08007509 	.word	0x08007509
 8003e08:	0800764f 	.word	0x0800764f
	{
		// 0. Начальный кадр
		case 0:

				// Текущая позиция курсора
				switch(pos_cursor)
 8003e0c:	4b97      	ldr	r3, [pc, #604]	@ (800406c <BuildFrame+0x300>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d073      	beq.n	8003efc <BuildFrame+0x190>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	f300 80a7 	bgt.w	8003f68 <BuildFrame+0x1fc>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <BuildFrame+0xb8>
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d036      	beq.n	8003e90 <BuildFrame+0x124>

					break;


					default:
					break;
 8003e22:	e0a1      	b.n	8003f68 <BuildFrame+0x1fc>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8003e24:	2300      	movs	r3, #0
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	230d      	movs	r3, #13
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	2309      	movs	r3, #9
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2310      	movs	r3, #16
 8003e32:	2203      	movs	r2, #3
 8003e34:	210a      	movs	r1, #10
 8003e36:	2003      	movs	r0, #3
 8003e38:	f7fd fe18 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Ntreobt", 12, 0, 0);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2200      	movs	r2, #0
 8003e40:	210c      	movs	r1, #12
 8003e42:	488b      	ldr	r0, [pc, #556]	@ (8004070 <BuildFrame+0x304>)
 8003e44:	f7fd fd04 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13, 0);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	220d      	movs	r2, #13
 8003e4c:	210c      	movs	r1, #12
 8003e4e:	4889      	ldr	r0, [pc, #548]	@ (8004074 <BuildFrame+0x308>)
 8003e50:	f7fd fcfe 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Yfcnhjqrb", 12, 13 * 2, 1);
 8003e54:	2301      	movs	r3, #1
 8003e56:	221a      	movs	r2, #26
 8003e58:	210c      	movs	r1, #12
 8003e5a:	4887      	ldr	r0, [pc, #540]	@ (8004078 <BuildFrame+0x30c>)
 8003e5c:	f7fd fcf8 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Ytvtlktyyj", 12, 13 * 3, 1);
 8003e60:	2301      	movs	r3, #1
 8003e62:	2227      	movs	r2, #39	@ 0x27
 8003e64:	210c      	movs	r1, #12
 8003e66:	4885      	ldr	r0, [pc, #532]	@ (800407c <BuildFrame+0x310>)
 8003e68:	f7fd fcf2 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("pfdthibnm", 12, 13 * 4, 1);
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	2234      	movs	r2, #52	@ 0x34
 8003e70:	210c      	movs	r1, #12
 8003e72:	4883      	ldr	r0, [pc, #524]	@ (8004080 <BuildFrame+0x314>)
 8003e74:	f7fd fcec 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbd", 12 + OLED_GetWidthStr("pfdthibnm") + 3, 13 * 4, 1);
 8003e78:	4881      	ldr	r0, [pc, #516]	@ (8004080 <BuildFrame+0x314>)
 8003e7a:	f7fc fe2b 	bl	8000ad4 <OLED_GetWidthStr>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	330f      	adds	r3, #15
 8003e82:	b2d9      	uxtb	r1, r3
 8003e84:	2301      	movs	r3, #1
 8003e86:	2234      	movs	r2, #52	@ 0x34
 8003e88:	487e      	ldr	r0, [pc, #504]	@ (8004084 <BuildFrame+0x318>)
 8003e8a:	f7fd fce1 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 8003e8e:	e06c      	b.n	8003f6a <BuildFrame+0x1fe>
						OLED_DrawStr_RuModified("Ntreobt", 12, 0, 1);
 8003e90:	2301      	movs	r3, #1
 8003e92:	2200      	movs	r2, #0
 8003e94:	210c      	movs	r1, #12
 8003e96:	4876      	ldr	r0, [pc, #472]	@ (8004070 <BuildFrame+0x304>)
 8003e98:	f7fd fcda 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13, 1);
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	220d      	movs	r2, #13
 8003ea0:	210c      	movs	r1, #12
 8003ea2:	4874      	ldr	r0, [pc, #464]	@ (8004074 <BuildFrame+0x308>)
 8003ea4:	f7fd fcd4 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	2320      	movs	r3, #32
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2309      	movs	r3, #9
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2323      	movs	r3, #35	@ 0x23
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	211d      	movs	r1, #29
 8003eba:	2003      	movs	r0, #3
 8003ebc:	f7fd fdd6 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Yfcnhjqrb", 12, 13 * 2, 0);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	221a      	movs	r2, #26
 8003ec4:	210c      	movs	r1, #12
 8003ec6:	486c      	ldr	r0, [pc, #432]	@ (8004078 <BuildFrame+0x30c>)
 8003ec8:	f7fd fcc2 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Ytvtlktyyj", 12, 13 * 3, 1);
 8003ecc:	2301      	movs	r3, #1
 8003ece:	2227      	movs	r2, #39	@ 0x27
 8003ed0:	210c      	movs	r1, #12
 8003ed2:	486a      	ldr	r0, [pc, #424]	@ (800407c <BuildFrame+0x310>)
 8003ed4:	f7fd fcbc 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("pfdthibnm", 12, 13 * 4, 1);
 8003ed8:	2301      	movs	r3, #1
 8003eda:	2234      	movs	r2, #52	@ 0x34
 8003edc:	210c      	movs	r1, #12
 8003ede:	4868      	ldr	r0, [pc, #416]	@ (8004080 <BuildFrame+0x314>)
 8003ee0:	f7fd fcb6 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbd", 12 + OLED_GetWidthStr("pfdthibnm") + 3, 13 * 4, 1);
 8003ee4:	4866      	ldr	r0, [pc, #408]	@ (8004080 <BuildFrame+0x314>)
 8003ee6:	f7fc fdf5 	bl	8000ad4 <OLED_GetWidthStr>
 8003eea:	4603      	mov	r3, r0
 8003eec:	330f      	adds	r3, #15
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2234      	movs	r2, #52	@ 0x34
 8003ef4:	4863      	ldr	r0, [pc, #396]	@ (8004084 <BuildFrame+0x318>)
 8003ef6:	f7fd fcab 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 8003efa:	e036      	b.n	8003f6a <BuildFrame+0x1fe>
						OLED_DrawStr_RuModified("Ntreobt", 12, 0, 1);
 8003efc:	2301      	movs	r3, #1
 8003efe:	2200      	movs	r2, #0
 8003f00:	210c      	movs	r1, #12
 8003f02:	485b      	ldr	r0, [pc, #364]	@ (8004070 <BuildFrame+0x304>)
 8003f04:	f7fd fca4 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13, 1);
 8003f08:	2301      	movs	r3, #1
 8003f0a:	220d      	movs	r2, #13
 8003f0c:	210c      	movs	r1, #12
 8003f0e:	4859      	ldr	r0, [pc, #356]	@ (8004074 <BuildFrame+0x308>)
 8003f10:	f7fd fc9e 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Yfcnhjqrb", 12, 13 * 2, 1);
 8003f14:	2301      	movs	r3, #1
 8003f16:	221a      	movs	r2, #26
 8003f18:	210c      	movs	r1, #12
 8003f1a:	4857      	ldr	r0, [pc, #348]	@ (8004078 <BuildFrame+0x30c>)
 8003f1c:	f7fd fc98 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4 - 3, 3, (int16_t) 13 * 4 + 3, 9, (int16_t) 13 * 4, 0);
 8003f20:	2300      	movs	r3, #0
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	2334      	movs	r3, #52	@ 0x34
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	2309      	movs	r3, #9
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2337      	movs	r3, #55	@ 0x37
 8003f2e:	2203      	movs	r2, #3
 8003f30:	2131      	movs	r1, #49	@ 0x31
 8003f32:	2003      	movs	r0, #3
 8003f34:	f7fd fd9a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Ytvtlktyyj", 12, 13 * 3, 0);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2227      	movs	r2, #39	@ 0x27
 8003f3c:	210c      	movs	r1, #12
 8003f3e:	484f      	ldr	r0, [pc, #316]	@ (800407c <BuildFrame+0x310>)
 8003f40:	f7fd fc86 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("pfdthibnm", 12, 13 * 4, 0);
 8003f44:	2300      	movs	r3, #0
 8003f46:	2234      	movs	r2, #52	@ 0x34
 8003f48:	210c      	movs	r1, #12
 8003f4a:	484d      	ldr	r0, [pc, #308]	@ (8004080 <BuildFrame+0x314>)
 8003f4c:	f7fd fc80 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbd", 12 + OLED_GetWidthStr("pfdthibnm") + 3, 13 * 4, 0);
 8003f50:	484b      	ldr	r0, [pc, #300]	@ (8004080 <BuildFrame+0x314>)
 8003f52:	f7fc fdbf 	bl	8000ad4 <OLED_GetWidthStr>
 8003f56:	4603      	mov	r3, r0
 8003f58:	330f      	adds	r3, #15
 8003f5a:	b2d9      	uxtb	r1, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2234      	movs	r2, #52	@ 0x34
 8003f60:	4848      	ldr	r0, [pc, #288]	@ (8004084 <BuildFrame+0x318>)
 8003f62:	f7fd fc75 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 8003f66:	e000      	b.n	8003f6a <BuildFrame+0x1fe>
					break;
 8003f68:	bf00      	nop
				}

		break;
 8003f6a:	f003 bc1f 	b.w	80077ac <BuildFrame+0x3a40>


		// 1. Текущие параметры полива
		case 1:

				switch(pos_cursor)
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800406c <BuildFrame+0x300>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d176      	bne.n	8004064 <BuildFrame+0x2f8>
						 *
						 *	 		Назад
						 *------------------------
						 */

						OLED_DrawCircleFill_Modified(6, 5, 2, 1);
 8003f76:	2301      	movs	r3, #1
 8003f78:	2202      	movs	r2, #2
 8003f7a:	2105      	movs	r1, #5
 8003f7c:	2006      	movs	r0, #6
 8003f7e:	f7fd ff3e 	bl	8001dfe <OLED_DrawCircleFill_Modified>
						OLED_DrawStr_RuModified("Dhtvz", 12, 0, 1);
 8003f82:	2301      	movs	r3, #1
 8003f84:	2200      	movs	r2, #0
 8003f86:	210c      	movs	r1, #12
 8003f88:	483f      	ldr	r0, [pc, #252]	@ (8004088 <BuildFrame+0x31c>)
 8003f8a:	f7fd fc61 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("Dhtvz");
 8003f8e:	483e      	ldr	r0, [pc, #248]	@ (8004088 <BuildFrame+0x31c>)
 8003f90:	f7fc fda0 	bl	8000ad4 <OLED_GetWidthStr>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b3c      	ldr	r3, [pc, #240]	@ (800408c <BuildFrame+0x320>)
 8003f9a:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("yfxfkf", 12 + str_lenght + 3, 0, 1);
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <BuildFrame+0x320>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	330f      	adds	r3, #15
 8003fa2:	b2d9      	uxtb	r1, r3
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4839      	ldr	r0, [pc, #228]	@ (8004090 <BuildFrame+0x324>)
 8003faa:	f7fd fc51 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbdf", 12, 13, 1);
 8003fae:	2301      	movs	r3, #1
 8003fb0:	220d      	movs	r2, #13
 8003fb2:	210c      	movs	r1, #12
 8003fb4:	4837      	ldr	r0, [pc, #220]	@ (8004094 <BuildFrame+0x328>)
 8003fb6:	f7fd fc4b 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("gjkbdf");
 8003fba:	4836      	ldr	r0, [pc, #216]	@ (8004094 <BuildFrame+0x328>)
 8003fbc:	f7fc fd8a 	bl	8000ad4 <OLED_GetWidthStr>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b31      	ldr	r3, [pc, #196]	@ (800408c <BuildFrame+0x320>)
 8003fc6:	701a      	strb	r2, [r3, #0]
						OLED_DrawChar_Modified(':', 12 + str_lenght + 1, 13, 1);
 8003fc8:	4b30      	ldr	r3, [pc, #192]	@ (800408c <BuildFrame+0x320>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	330d      	adds	r3, #13
 8003fce:	b2d9      	uxtb	r1, r3
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	220d      	movs	r2, #13
 8003fd4:	203a      	movs	r0, #58	@ 0x3a
 8003fd6:	f7fd fc73 	bl	80018c0 <OLED_DrawChar_Modified>

						OLED_DrawCircleFill_Modified(6, 13 * 2 + 5, 2, 1);
 8003fda:	2301      	movs	r3, #1
 8003fdc:	2202      	movs	r2, #2
 8003fde:	211f      	movs	r1, #31
 8003fe0:	2006      	movs	r0, #6
 8003fe2:	f7fd ff0c 	bl	8001dfe <OLED_DrawCircleFill_Modified>
						OLED_DrawStr_RuModified("Ghjljk;bntkm", 12, 13 * 2, 1);
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	221a      	movs	r2, #26
 8003fea:	210c      	movs	r1, #12
 8003fec:	482a      	ldr	r0, [pc, #168]	@ (8004098 <BuildFrame+0x32c>)
 8003fee:	f7fd fc2f 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("Ghjljk;bntkm");
 8003ff2:	4829      	ldr	r0, [pc, #164]	@ (8004098 <BuildFrame+0x32c>)
 8003ff4:	f7fc fd6e 	bl	8000ad4 <OLED_GetWidthStr>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b23      	ldr	r3, [pc, #140]	@ (800408c <BuildFrame+0x320>)
 8003ffe:	701a      	strb	r2, [r3, #0]
						OLED_DrawChar_Modified('-', 12 + str_lenght + 1, 13 * 2, 1);
 8004000:	4b22      	ldr	r3, [pc, #136]	@ (800408c <BuildFrame+0x320>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	330d      	adds	r3, #13
 8004006:	b2d9      	uxtb	r1, r3
 8004008:	2301      	movs	r3, #1
 800400a:	221a      	movs	r2, #26
 800400c:	202d      	movs	r0, #45	@ 0x2d
 800400e:	f7fd fc57 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawStr_RuModified("yjcnm", 12, 13 * 3, 1);
 8004012:	2301      	movs	r3, #1
 8004014:	2227      	movs	r2, #39	@ 0x27
 8004016:	210c      	movs	r1, #12
 8004018:	4820      	ldr	r0, [pc, #128]	@ (800409c <BuildFrame+0x330>)
 800401a:	f7fd fc19 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("yjcnm");
 800401e:	481f      	ldr	r0, [pc, #124]	@ (800409c <BuildFrame+0x330>)
 8004020:	f7fc fd58 	bl	8000ad4 <OLED_GetWidthStr>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	4b18      	ldr	r3, [pc, #96]	@ (800408c <BuildFrame+0x320>)
 800402a:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 3, 1);
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <BuildFrame+0x320>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	330f      	adds	r3, #15
 8004032:	b2d9      	uxtb	r1, r3
 8004034:	2301      	movs	r3, #1
 8004036:	2227      	movs	r2, #39	@ 0x27
 8004038:	4816      	ldr	r0, [pc, #88]	@ (8004094 <BuildFrame+0x328>)
 800403a:	f7fd fc09 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("yjcnmgjkbdf");
 800403e:	4818      	ldr	r0, [pc, #96]	@ (80040a0 <BuildFrame+0x334>)
 8004040:	f7fc fd48 	bl	8000ad4 <OLED_GetWidthStr>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	4b10      	ldr	r3, [pc, #64]	@ (800408c <BuildFrame+0x320>)
 800404a:	701a      	strb	r2, [r3, #0]
						OLED_DrawChar_Modified(':', 12 + str_lenght + 3 + 1, 13 * 3, 1);
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <BuildFrame+0x320>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	3310      	adds	r3, #16
 8004052:	b2d9      	uxtb	r1, r3
 8004054:	2301      	movs	r3, #1
 8004056:	2227      	movs	r2, #39	@ 0x27
 8004058:	203a      	movs	r0, #58	@ 0x3a
 800405a:	f7fd fc31 	bl	80018c0 <OLED_DrawChar_Modified>

						// Отрисовка времени начала
						// и продолжительности полива
						DrawWateringParamsPt1();
 800405e:	f7ff f8a3 	bl	80031a8 <DrawWateringParamsPt1>

					break;
 8004062:	e000      	b.n	8004066 <BuildFrame+0x2fa>


					default:
					break;
 8004064:	bf00      	nop
				}

		break;
 8004066:	f003 bba1 	b.w	80077ac <BuildFrame+0x3a40>
 800406a:	bf00      	nop
 800406c:	20000a3d 	.word	0x20000a3d
 8004070:	08014260 	.word	0x08014260
 8004074:	08014268 	.word	0x08014268
 8004078:	08014274 	.word	0x08014274
 800407c:	08014280 	.word	0x08014280
 8004080:	0801428c 	.word	0x0801428c
 8004084:	08014298 	.word	0x08014298
 8004088:	080142a0 	.word	0x080142a0
 800408c:	20000a3e 	.word	0x20000a3e
 8004090:	080142a8 	.word	0x080142a8
 8004094:	08014258 	.word	0x08014258
 8004098:	080142b0 	.word	0x080142b0
 800409c:	080142c0 	.word	0x080142c0
 80040a0:	080142c8 	.word	0x080142c8

		// 2. Продолжение кадра 1
		case 2:

				switch(pos_cursor)
 80040a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004388 <BuildFrame+0x61c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	f040 80e5 	bne.w	8004278 <BuildFrame+0x50c>
						 *
						 *	 	>	Назад
						 *------------------------
						 */

						OLED_DrawCircleFill_Modified(6, 5, 2, 1);
 80040ae:	2301      	movs	r3, #1
 80040b0:	2202      	movs	r2, #2
 80040b2:	2105      	movs	r1, #5
 80040b4:	2006      	movs	r0, #6
 80040b6:	f7fd fea2 	bl	8001dfe <OLED_DrawCircleFill_Modified>
						OLED_DrawStr_RuModified("Lyb", 12, 13 * 0, 1);
 80040ba:	2301      	movs	r3, #1
 80040bc:	2200      	movs	r2, #0
 80040be:	210c      	movs	r1, #12
 80040c0:	48b2      	ldr	r0, [pc, #712]	@ (800438c <BuildFrame+0x620>)
 80040c2:	f7fd fbc5 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("Lyb") + 3, 13 * 0, 1);
 80040c6:	48b1      	ldr	r0, [pc, #708]	@ (800438c <BuildFrame+0x620>)
 80040c8:	f7fc fd04 	bl	8000ad4 <OLED_GetWidthStr>
 80040cc:	4603      	mov	r3, r0
 80040ce:	330f      	adds	r3, #15
 80040d0:	b2d9      	uxtb	r1, r3
 80040d2:	2301      	movs	r3, #1
 80040d4:	2200      	movs	r2, #0
 80040d6:	48ae      	ldr	r0, [pc, #696]	@ (8004390 <BuildFrame+0x624>)
 80040d8:	f7fd fbba 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawChar_Modified(':', 12 + OLED_GetWidthStr("Lyb") + OLED_GetWidthStr("gjkbdf") + 4, 13 * 0, 1);
 80040dc:	48ab      	ldr	r0, [pc, #684]	@ (800438c <BuildFrame+0x620>)
 80040de:	f7fc fcf9 	bl	8000ad4 <OLED_GetWidthStr>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461c      	mov	r4, r3
 80040e6:	48aa      	ldr	r0, [pc, #680]	@ (8004390 <BuildFrame+0x624>)
 80040e8:	f7fc fcf4 	bl	8000ad4 <OLED_GetWidthStr>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4423      	add	r3, r4
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3310      	adds	r3, #16
 80040f4:	b2d9      	uxtb	r1, r3
 80040f6:	2301      	movs	r3, #1
 80040f8:	2200      	movs	r2, #0
 80040fa:	203a      	movs	r0, #58	@ 0x3a
 80040fc:	f7fd fbe0 	bl	80018c0 <OLED_DrawChar_Modified>

						OLED_DrawStr_RuModified("Gy", 12, 13 * 1, 1);
 8004100:	2301      	movs	r3, #1
 8004102:	220d      	movs	r2, #13
 8004104:	210c      	movs	r1, #12
 8004106:	48a3      	ldr	r0, [pc, #652]	@ (8004394 <BuildFrame+0x628>)
 8004108:	f7fd fba2 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dn", 12 + OLED_GetWidthStr("Gy") + 4, 13 * 1, 1);
 800410c:	48a1      	ldr	r0, [pc, #644]	@ (8004394 <BuildFrame+0x628>)
 800410e:	f7fc fce1 	bl	8000ad4 <OLED_GetWidthStr>
 8004112:	4603      	mov	r3, r0
 8004114:	3310      	adds	r3, #16
 8004116:	b2d9      	uxtb	r1, r3
 8004118:	2301      	movs	r3, #1
 800411a:	220d      	movs	r2, #13
 800411c:	489e      	ldr	r0, [pc, #632]	@ (8004398 <BuildFrame+0x62c>)
 800411e:	f7fd fb97 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Ch", 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 1, 1);
 8004122:	489c      	ldr	r0, [pc, #624]	@ (8004394 <BuildFrame+0x628>)
 8004124:	f7fc fcd6 	bl	8000ad4 <OLED_GetWidthStr>
 8004128:	4603      	mov	r3, r0
 800412a:	461c      	mov	r4, r3
 800412c:	489a      	ldr	r0, [pc, #616]	@ (8004398 <BuildFrame+0x62c>)
 800412e:	f7fc fcd1 	bl	8000ad4 <OLED_GetWidthStr>
 8004132:	4603      	mov	r3, r0
 8004134:	4423      	add	r3, r4
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3312      	adds	r3, #18
 800413a:	b2d9      	uxtb	r1, r3
 800413c:	2301      	movs	r3, #1
 800413e:	220d      	movs	r2, #13
 8004140:	4896      	ldr	r0, [pc, #600]	@ (800439c <BuildFrame+0x630>)
 8004142:	f7fd fb85 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Xn", 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 1, 1);
 8004146:	4893      	ldr	r0, [pc, #588]	@ (8004394 <BuildFrame+0x628>)
 8004148:	f7fc fcc4 	bl	8000ad4 <OLED_GetWidthStr>
 800414c:	4603      	mov	r3, r0
 800414e:	461c      	mov	r4, r3
 8004150:	4891      	ldr	r0, [pc, #580]	@ (8004398 <BuildFrame+0x62c>)
 8004152:	f7fc fcbf 	bl	8000ad4 <OLED_GetWidthStr>
 8004156:	4603      	mov	r3, r0
 8004158:	4423      	add	r3, r4
 800415a:	b2dc      	uxtb	r4, r3
 800415c:	488f      	ldr	r0, [pc, #572]	@ (800439c <BuildFrame+0x630>)
 800415e:	f7fc fcb9 	bl	8000ad4 <OLED_GetWidthStr>
 8004162:	4603      	mov	r3, r0
 8004164:	4423      	add	r3, r4
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3315      	adds	r3, #21
 800416a:	b2d9      	uxtb	r1, r3
 800416c:	2301      	movs	r3, #1
 800416e:	220d      	movs	r2, #13
 8004170:	488b      	ldr	r0, [pc, #556]	@ (80043a0 <BuildFrame+0x634>)
 8004172:	f7fd fb6d 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Gn", 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 1, 1);
 8004176:	4887      	ldr	r0, [pc, #540]	@ (8004394 <BuildFrame+0x628>)
 8004178:	f7fc fcac 	bl	8000ad4 <OLED_GetWidthStr>
 800417c:	4603      	mov	r3, r0
 800417e:	461c      	mov	r4, r3
 8004180:	4885      	ldr	r0, [pc, #532]	@ (8004398 <BuildFrame+0x62c>)
 8004182:	f7fc fca7 	bl	8000ad4 <OLED_GetWidthStr>
 8004186:	4603      	mov	r3, r0
 8004188:	4423      	add	r3, r4
 800418a:	b2dc      	uxtb	r4, r3
 800418c:	4883      	ldr	r0, [pc, #524]	@ (800439c <BuildFrame+0x630>)
 800418e:	f7fc fca1 	bl	8000ad4 <OLED_GetWidthStr>
 8004192:	4603      	mov	r3, r0
 8004194:	4423      	add	r3, r4
 8004196:	b2dc      	uxtb	r4, r3
 8004198:	4881      	ldr	r0, [pc, #516]	@ (80043a0 <BuildFrame+0x634>)
 800419a:	f7fc fc9b 	bl	8000ad4 <OLED_GetWidthStr>
 800419e:	4603      	mov	r3, r0
 80041a0:	4423      	add	r3, r4
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3318      	adds	r3, #24
 80041a6:	b2d9      	uxtb	r1, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	220d      	movs	r2, #13
 80041ac:	487d      	ldr	r0, [pc, #500]	@ (80043a4 <BuildFrame+0x638>)
 80041ae:	f7fd fb4f 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("C,", 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 1, 1);
 80041b2:	4878      	ldr	r0, [pc, #480]	@ (8004394 <BuildFrame+0x628>)
 80041b4:	f7fc fc8e 	bl	8000ad4 <OLED_GetWidthStr>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461c      	mov	r4, r3
 80041bc:	4876      	ldr	r0, [pc, #472]	@ (8004398 <BuildFrame+0x62c>)
 80041be:	f7fc fc89 	bl	8000ad4 <OLED_GetWidthStr>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4423      	add	r3, r4
 80041c6:	b2dc      	uxtb	r4, r3
 80041c8:	4874      	ldr	r0, [pc, #464]	@ (800439c <BuildFrame+0x630>)
 80041ca:	f7fc fc83 	bl	8000ad4 <OLED_GetWidthStr>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4423      	add	r3, r4
 80041d2:	b2dc      	uxtb	r4, r3
 80041d4:	4872      	ldr	r0, [pc, #456]	@ (80043a0 <BuildFrame+0x634>)
 80041d6:	f7fc fc7d 	bl	8000ad4 <OLED_GetWidthStr>
 80041da:	4603      	mov	r3, r0
 80041dc:	4423      	add	r3, r4
 80041de:	b2dc      	uxtb	r4, r3
 80041e0:	4870      	ldr	r0, [pc, #448]	@ (80043a4 <BuildFrame+0x638>)
 80041e2:	f7fc fc77 	bl	8000ad4 <OLED_GetWidthStr>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4423      	add	r3, r4
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	331b      	adds	r3, #27
 80041ee:	b2d9      	uxtb	r1, r3
 80041f0:	2301      	movs	r3, #1
 80041f2:	220d      	movs	r2, #13
 80041f4:	486c      	ldr	r0, [pc, #432]	@ (80043a8 <BuildFrame+0x63c>)
 80041f6:	f7fd fb2b 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dc", 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 1, 1);
 80041fa:	4866      	ldr	r0, [pc, #408]	@ (8004394 <BuildFrame+0x628>)
 80041fc:	f7fc fc6a 	bl	8000ad4 <OLED_GetWidthStr>
 8004200:	4603      	mov	r3, r0
 8004202:	461c      	mov	r4, r3
 8004204:	4864      	ldr	r0, [pc, #400]	@ (8004398 <BuildFrame+0x62c>)
 8004206:	f7fc fc65 	bl	8000ad4 <OLED_GetWidthStr>
 800420a:	4603      	mov	r3, r0
 800420c:	4423      	add	r3, r4
 800420e:	b2dc      	uxtb	r4, r3
 8004210:	4862      	ldr	r0, [pc, #392]	@ (800439c <BuildFrame+0x630>)
 8004212:	f7fc fc5f 	bl	8000ad4 <OLED_GetWidthStr>
 8004216:	4603      	mov	r3, r0
 8004218:	4423      	add	r3, r4
 800421a:	b2dc      	uxtb	r4, r3
 800421c:	4860      	ldr	r0, [pc, #384]	@ (80043a0 <BuildFrame+0x634>)
 800421e:	f7fc fc59 	bl	8000ad4 <OLED_GetWidthStr>
 8004222:	4603      	mov	r3, r0
 8004224:	4423      	add	r3, r4
 8004226:	b2dc      	uxtb	r4, r3
 8004228:	485e      	ldr	r0, [pc, #376]	@ (80043a4 <BuildFrame+0x638>)
 800422a:	f7fc fc53 	bl	8000ad4 <OLED_GetWidthStr>
 800422e:	4603      	mov	r3, r0
 8004230:	4423      	add	r3, r4
 8004232:	b2dc      	uxtb	r4, r3
 8004234:	485c      	ldr	r0, [pc, #368]	@ (80043a8 <BuildFrame+0x63c>)
 8004236:	f7fc fc4d 	bl	8000ad4 <OLED_GetWidthStr>
 800423a:	4603      	mov	r3, r0
 800423c:	4423      	add	r3, r4
 800423e:	b2db      	uxtb	r3, r3
 8004240:	331e      	adds	r3, #30
 8004242:	b2d9      	uxtb	r1, r3
 8004244:	2301      	movs	r3, #1
 8004246:	220d      	movs	r2, #13
 8004248:	4858      	ldr	r0, [pc, #352]	@ (80043ac <BuildFrame+0x640>)
 800424a:	f7fd fb01 	bl	8001850 <OLED_DrawStr_RuModified>

						// Отрисовка дней полива
						DrawWateringParamsPt2();
 800424e:	f7ff f943 	bl	80034d8 <DrawWateringParamsPt2>

						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8004252:	2300      	movs	r3, #0
 8004254:	9302      	str	r3, [sp, #8]
 8004256:	232d      	movs	r3, #45	@ 0x2d
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	2309      	movs	r3, #9
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2330      	movs	r3, #48	@ 0x30
 8004260:	2203      	movs	r2, #3
 8004262:	212a      	movs	r1, #42	@ 0x2a
 8004264:	2003      	movs	r0, #3
 8004266:	f7fd fc01 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 3, 0);
 800426a:	2300      	movs	r3, #0
 800426c:	2227      	movs	r2, #39	@ 0x27
 800426e:	210c      	movs	r1, #12
 8004270:	484f      	ldr	r0, [pc, #316]	@ (80043b0 <BuildFrame+0x644>)
 8004272:	f7fd faed 	bl	8001850 <OLED_DrawStr_RuModified>

					break;
 8004276:	e000      	b.n	800427a <BuildFrame+0x50e>

					default:
					break;
 8004278:	bf00      	nop
				}
		break;
 800427a:	f003 ba97 	b.w	80077ac <BuildFrame+0x3a40>


		// 3. Уровень воды в резервуаре
		case 3:
				switch(pos_cursor)
 800427e:	4b42      	ldr	r3, [pc, #264]	@ (8004388 <BuildFrame+0x61c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b03      	cmp	r3, #3
 8004284:	f040 8145 	bne.w	8004512 <BuildFrame+0x7a6>
						 *
						 *		> 	Назад
						 *------------------------
						 */

						OLED_DrawStr_RuModified("Htpthdefh", 12, 0, 1);
 8004288:	2301      	movs	r3, #1
 800428a:	2200      	movs	r2, #0
 800428c:	210c      	movs	r1, #12
 800428e:	4849      	ldr	r0, [pc, #292]	@ (80043b4 <BuildFrame+0x648>)
 8004290:	f7fd fade 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("pfgjkyty", 12, 13, 1);
 8004294:	2301      	movs	r3, #1
 8004296:	220d      	movs	r2, #13
 8004298:	210c      	movs	r1, #12
 800429a:	4847      	ldr	r0, [pc, #284]	@ (80043b8 <BuildFrame+0x64c>)
 800429c:	f7fd fad8 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("pfgjkyty");
 80042a0:	4845      	ldr	r0, [pc, #276]	@ (80043b8 <BuildFrame+0x64c>)
 80042a2:	f7fc fc17 	bl	8000ad4 <OLED_GetWidthStr>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b44      	ldr	r3, [pc, #272]	@ (80043bc <BuildFrame+0x650>)
 80042ac:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("yf", 12 + str_lenght + 3, 13, 1);
 80042ae:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <BuildFrame+0x650>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	330f      	adds	r3, #15
 80042b4:	b2d9      	uxtb	r1, r3
 80042b6:	2301      	movs	r3, #1
 80042b8:	220d      	movs	r2, #13
 80042ba:	4841      	ldr	r0, [pc, #260]	@ (80043c0 <BuildFrame+0x654>)
 80042bc:	f7fd fac8 	bl	8001850 <OLED_DrawStr_RuModified>

						// Если включена индикация
						// (если рассчитано значение mean_adc_value_ch0)
						if (f_StartAnalyzingAdcData)
 80042c0:	4b40      	ldr	r3, [pc, #256]	@ (80043c4 <BuildFrame+0x658>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80ff 	beq.w	80044c8 <BuildFrame+0x75c>
						{
							switch(WaterLevel)
 80042ca:	4b3f      	ldr	r3, [pc, #252]	@ (80043c8 <BuildFrame+0x65c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	f200 810b 	bhi.w	80044ea <BuildFrame+0x77e>
 80042d4:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <BuildFrame+0x570>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	08004311 	.word	0x08004311
 80042e4:	080043d9 	.word	0x080043d9
 80042e8:	08004451 	.word	0x08004451
							{
								case NoWater:

									OLED_DrawChar_Modified('0', 12, 13 * 2, 1);
 80042ec:	2301      	movs	r3, #1
 80042ee:	221a      	movs	r2, #26
 80042f0:	210c      	movs	r1, #12
 80042f2:	2030      	movs	r0, #48	@ 0x30
 80042f4:	f7fd fae4 	bl	80018c0 <OLED_DrawChar_Modified>
									OLED_DrawChar_Modified('%', 12 + OLED_GetWidthStr("0") + 1, 13 * 2, 1);
 80042f8:	4834      	ldr	r0, [pc, #208]	@ (80043cc <BuildFrame+0x660>)
 80042fa:	f7fc fbeb 	bl	8000ad4 <OLED_GetWidthStr>
 80042fe:	4603      	mov	r3, r0
 8004300:	330d      	adds	r3, #13
 8004302:	b2d9      	uxtb	r1, r3
 8004304:	2301      	movs	r3, #1
 8004306:	221a      	movs	r2, #26
 8004308:	2025      	movs	r0, #37	@ 0x25
 800430a:	f7fd fad9 	bl	80018c0 <OLED_DrawChar_Modified>

								break;
 800430e:	e0ed      	b.n	80044ec <BuildFrame+0x780>

								case LowLevel:

									OLED_DrawChar_Modified('0', 12, 13 * 2, 1);
 8004310:	2301      	movs	r3, #1
 8004312:	221a      	movs	r2, #26
 8004314:	210c      	movs	r1, #12
 8004316:	2030      	movs	r0, #48	@ 0x30
 8004318:	f7fd fad2 	bl	80018c0 <OLED_DrawChar_Modified>
									OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("0") + 1, 13 * 2, 1);
 800431c:	482b      	ldr	r0, [pc, #172]	@ (80043cc <BuildFrame+0x660>)
 800431e:	f7fc fbd9 	bl	8000ad4 <OLED_GetWidthStr>
 8004322:	4603      	mov	r3, r0
 8004324:	330d      	adds	r3, #13
 8004326:	b2d9      	uxtb	r1, r3
 8004328:	2301      	movs	r3, #1
 800432a:	221a      	movs	r2, #26
 800432c:	202d      	movs	r0, #45	@ 0x2d
 800432e:	f7fd fac7 	bl	80018c0 <OLED_DrawChar_Modified>
									OLED_DrawStr_EnModified("33", 12 + OLED_GetWidthStr("0") + 1 + OLED_GetWidthStr("-") + 1, 13 * 2, 1);
 8004332:	4826      	ldr	r0, [pc, #152]	@ (80043cc <BuildFrame+0x660>)
 8004334:	f7fc fbce 	bl	8000ad4 <OLED_GetWidthStr>
 8004338:	4603      	mov	r3, r0
 800433a:	461c      	mov	r4, r3
 800433c:	4824      	ldr	r0, [pc, #144]	@ (80043d0 <BuildFrame+0x664>)
 800433e:	f7fc fbc9 	bl	8000ad4 <OLED_GetWidthStr>
 8004342:	4603      	mov	r3, r0
 8004344:	4423      	add	r3, r4
 8004346:	b2db      	uxtb	r3, r3
 8004348:	330e      	adds	r3, #14
 800434a:	b2d9      	uxtb	r1, r3
 800434c:	2301      	movs	r3, #1
 800434e:	221a      	movs	r2, #26
 8004350:	4820      	ldr	r0, [pc, #128]	@ (80043d4 <BuildFrame+0x668>)
 8004352:	f7fd fa99 	bl	8001888 <OLED_DrawStr_EnModified>
									OLED_DrawChar_Modified('%', 12 + OLED_GetWidthStr("0") + 1 + OLED_GetWidthStr("-") + 1 + OLED_GetWidthStr("33") + 1, 13 * 2, 1);
 8004356:	481d      	ldr	r0, [pc, #116]	@ (80043cc <BuildFrame+0x660>)
 8004358:	f7fc fbbc 	bl	8000ad4 <OLED_GetWidthStr>
 800435c:	4603      	mov	r3, r0
 800435e:	461c      	mov	r4, r3
 8004360:	481b      	ldr	r0, [pc, #108]	@ (80043d0 <BuildFrame+0x664>)
 8004362:	f7fc fbb7 	bl	8000ad4 <OLED_GetWidthStr>
 8004366:	4603      	mov	r3, r0
 8004368:	4423      	add	r3, r4
 800436a:	b2dc      	uxtb	r4, r3
 800436c:	4819      	ldr	r0, [pc, #100]	@ (80043d4 <BuildFrame+0x668>)
 800436e:	f7fc fbb1 	bl	8000ad4 <OLED_GetWidthStr>
 8004372:	4603      	mov	r3, r0
 8004374:	4423      	add	r3, r4
 8004376:	b2db      	uxtb	r3, r3
 8004378:	330f      	adds	r3, #15
 800437a:	b2d9      	uxtb	r1, r3
 800437c:	2301      	movs	r3, #1
 800437e:	221a      	movs	r2, #26
 8004380:	2025      	movs	r0, #37	@ 0x25
 8004382:	f7fd fa9d 	bl	80018c0 <OLED_DrawChar_Modified>

								break;
 8004386:	e0b1      	b.n	80044ec <BuildFrame+0x780>
 8004388:	20000a3d 	.word	0x20000a3d
 800438c:	080142d4 	.word	0x080142d4
 8004390:	08014258 	.word	0x08014258
 8004394:	08014240 	.word	0x08014240
 8004398:	08014244 	.word	0x08014244
 800439c:	08014248 	.word	0x08014248
 80043a0:	0801424c 	.word	0x0801424c
 80043a4:	08014250 	.word	0x08014250
 80043a8:	08014254 	.word	0x08014254
 80043ac:	080142d8 	.word	0x080142d8
 80043b0:	080142dc 	.word	0x080142dc
 80043b4:	080142e4 	.word	0x080142e4
 80043b8:	080142f0 	.word	0x080142f0
 80043bc:	20000a3e 	.word	0x20000a3e
 80043c0:	080142fc 	.word	0x080142fc
 80043c4:	20000adb 	.word	0x20000adb
 80043c8:	20000134 	.word	0x20000134
 80043cc:	08014300 	.word	0x08014300
 80043d0:	08014304 	.word	0x08014304
 80043d4:	08014308 	.word	0x08014308

								case MidLevel:

									OLED_DrawStr_EnModified("34", 12, 13 * 2, 1);
 80043d8:	2301      	movs	r3, #1
 80043da:	221a      	movs	r2, #26
 80043dc:	210c      	movs	r1, #12
 80043de:	48a0      	ldr	r0, [pc, #640]	@ (8004660 <BuildFrame+0x8f4>)
 80043e0:	f7fd fa52 	bl	8001888 <OLED_DrawStr_EnModified>
									OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("34") + 1, 13 * 2, 1);
 80043e4:	489e      	ldr	r0, [pc, #632]	@ (8004660 <BuildFrame+0x8f4>)
 80043e6:	f7fc fb75 	bl	8000ad4 <OLED_GetWidthStr>
 80043ea:	4603      	mov	r3, r0
 80043ec:	330d      	adds	r3, #13
 80043ee:	b2d9      	uxtb	r1, r3
 80043f0:	2301      	movs	r3, #1
 80043f2:	221a      	movs	r2, #26
 80043f4:	202d      	movs	r0, #45	@ 0x2d
 80043f6:	f7fd fa63 	bl	80018c0 <OLED_DrawChar_Modified>
									OLED_DrawStr_EnModified("67", 12 + OLED_GetWidthStr("34") + 1 + OLED_GetWidthStr("-") + 1, 13 * 2, 1);
 80043fa:	4899      	ldr	r0, [pc, #612]	@ (8004660 <BuildFrame+0x8f4>)
 80043fc:	f7fc fb6a 	bl	8000ad4 <OLED_GetWidthStr>
 8004400:	4603      	mov	r3, r0
 8004402:	461c      	mov	r4, r3
 8004404:	4897      	ldr	r0, [pc, #604]	@ (8004664 <BuildFrame+0x8f8>)
 8004406:	f7fc fb65 	bl	8000ad4 <OLED_GetWidthStr>
 800440a:	4603      	mov	r3, r0
 800440c:	4423      	add	r3, r4
 800440e:	b2db      	uxtb	r3, r3
 8004410:	330e      	adds	r3, #14
 8004412:	b2d9      	uxtb	r1, r3
 8004414:	2301      	movs	r3, #1
 8004416:	221a      	movs	r2, #26
 8004418:	4893      	ldr	r0, [pc, #588]	@ (8004668 <BuildFrame+0x8fc>)
 800441a:	f7fd fa35 	bl	8001888 <OLED_DrawStr_EnModified>
									OLED_DrawChar_Modified('%', 12 + OLED_GetWidthStr("34") + 1 + OLED_GetWidthStr("-") + 1 + OLED_GetWidthStr("67") + 1, 13 * 2, 1);
 800441e:	4890      	ldr	r0, [pc, #576]	@ (8004660 <BuildFrame+0x8f4>)
 8004420:	f7fc fb58 	bl	8000ad4 <OLED_GetWidthStr>
 8004424:	4603      	mov	r3, r0
 8004426:	461c      	mov	r4, r3
 8004428:	488e      	ldr	r0, [pc, #568]	@ (8004664 <BuildFrame+0x8f8>)
 800442a:	f7fc fb53 	bl	8000ad4 <OLED_GetWidthStr>
 800442e:	4603      	mov	r3, r0
 8004430:	4423      	add	r3, r4
 8004432:	b2dc      	uxtb	r4, r3
 8004434:	488c      	ldr	r0, [pc, #560]	@ (8004668 <BuildFrame+0x8fc>)
 8004436:	f7fc fb4d 	bl	8000ad4 <OLED_GetWidthStr>
 800443a:	4603      	mov	r3, r0
 800443c:	4423      	add	r3, r4
 800443e:	b2db      	uxtb	r3, r3
 8004440:	330f      	adds	r3, #15
 8004442:	b2d9      	uxtb	r1, r3
 8004444:	2301      	movs	r3, #1
 8004446:	221a      	movs	r2, #26
 8004448:	2025      	movs	r0, #37	@ 0x25
 800444a:	f7fd fa39 	bl	80018c0 <OLED_DrawChar_Modified>

								break;
 800444e:	e04d      	b.n	80044ec <BuildFrame+0x780>

								case HighLevel:

									OLED_DrawStr_EnModified("68", 12, 13 * 2, 1);
 8004450:	2301      	movs	r3, #1
 8004452:	221a      	movs	r2, #26
 8004454:	210c      	movs	r1, #12
 8004456:	4885      	ldr	r0, [pc, #532]	@ (800466c <BuildFrame+0x900>)
 8004458:	f7fd fa16 	bl	8001888 <OLED_DrawStr_EnModified>
									OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("68") + 1, 13 * 2, 1);
 800445c:	4883      	ldr	r0, [pc, #524]	@ (800466c <BuildFrame+0x900>)
 800445e:	f7fc fb39 	bl	8000ad4 <OLED_GetWidthStr>
 8004462:	4603      	mov	r3, r0
 8004464:	330d      	adds	r3, #13
 8004466:	b2d9      	uxtb	r1, r3
 8004468:	2301      	movs	r3, #1
 800446a:	221a      	movs	r2, #26
 800446c:	202d      	movs	r0, #45	@ 0x2d
 800446e:	f7fd fa27 	bl	80018c0 <OLED_DrawChar_Modified>
									OLED_DrawStr_EnModified("100", 12 + OLED_GetWidthStr("68") + 1 + OLED_GetWidthStr("-") + 1, 13 * 2, 1);
 8004472:	487e      	ldr	r0, [pc, #504]	@ (800466c <BuildFrame+0x900>)
 8004474:	f7fc fb2e 	bl	8000ad4 <OLED_GetWidthStr>
 8004478:	4603      	mov	r3, r0
 800447a:	461c      	mov	r4, r3
 800447c:	4879      	ldr	r0, [pc, #484]	@ (8004664 <BuildFrame+0x8f8>)
 800447e:	f7fc fb29 	bl	8000ad4 <OLED_GetWidthStr>
 8004482:	4603      	mov	r3, r0
 8004484:	4423      	add	r3, r4
 8004486:	b2db      	uxtb	r3, r3
 8004488:	330e      	adds	r3, #14
 800448a:	b2d9      	uxtb	r1, r3
 800448c:	2301      	movs	r3, #1
 800448e:	221a      	movs	r2, #26
 8004490:	4877      	ldr	r0, [pc, #476]	@ (8004670 <BuildFrame+0x904>)
 8004492:	f7fd f9f9 	bl	8001888 <OLED_DrawStr_EnModified>
									OLED_DrawChar_Modified('%', 12 + OLED_GetWidthStr("68") + 1 + OLED_GetWidthStr("-") + 1 + OLED_GetWidthStr("100") + 1, 13 * 2, 1);
 8004496:	4875      	ldr	r0, [pc, #468]	@ (800466c <BuildFrame+0x900>)
 8004498:	f7fc fb1c 	bl	8000ad4 <OLED_GetWidthStr>
 800449c:	4603      	mov	r3, r0
 800449e:	461c      	mov	r4, r3
 80044a0:	4870      	ldr	r0, [pc, #448]	@ (8004664 <BuildFrame+0x8f8>)
 80044a2:	f7fc fb17 	bl	8000ad4 <OLED_GetWidthStr>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4423      	add	r3, r4
 80044aa:	b2dc      	uxtb	r4, r3
 80044ac:	4870      	ldr	r0, [pc, #448]	@ (8004670 <BuildFrame+0x904>)
 80044ae:	f7fc fb11 	bl	8000ad4 <OLED_GetWidthStr>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4423      	add	r3, r4
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	330f      	adds	r3, #15
 80044ba:	b2d9      	uxtb	r1, r3
 80044bc:	2301      	movs	r3, #1
 80044be:	221a      	movs	r2, #26
 80044c0:	2025      	movs	r0, #37	@ 0x25
 80044c2:	f7fd f9fd 	bl	80018c0 <OLED_DrawChar_Modified>

								break;
 80044c6:	e011      	b.n	80044ec <BuildFrame+0x780>
								break;
							}
						}

						else
							OLED_DrawStr_EnModified("---%", 12 + str_lenght + OLED_GetWidthStr("yf") + 3 * 2, 13, 1);
 80044c8:	486a      	ldr	r0, [pc, #424]	@ (8004674 <BuildFrame+0x908>)
 80044ca:	f7fc fb03 	bl	8000ad4 <OLED_GetWidthStr>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b69      	ldr	r3, [pc, #420]	@ (8004678 <BuildFrame+0x90c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	3312      	adds	r3, #18
 80044dc:	b2d9      	uxtb	r1, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	220d      	movs	r2, #13
 80044e2:	4866      	ldr	r0, [pc, #408]	@ (800467c <BuildFrame+0x910>)
 80044e4:	f7fd f9d0 	bl	8001888 <OLED_DrawStr_EnModified>
 80044e8:	e000      	b.n	80044ec <BuildFrame+0x780>
								break;
 80044ea:	bf00      	nop

						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 80044ec:	2300      	movs	r3, #0
 80044ee:	9302      	str	r3, [sp, #8]
 80044f0:	232d      	movs	r3, #45	@ 0x2d
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	2309      	movs	r3, #9
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2330      	movs	r3, #48	@ 0x30
 80044fa:	2203      	movs	r2, #3
 80044fc:	212a      	movs	r1, #42	@ 0x2a
 80044fe:	2003      	movs	r0, #3
 8004500:	f7fd fab4 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 3, 0);
 8004504:	2300      	movs	r3, #0
 8004506:	2227      	movs	r2, #39	@ 0x27
 8004508:	210c      	movs	r1, #12
 800450a:	485d      	ldr	r0, [pc, #372]	@ (8004680 <BuildFrame+0x914>)
 800450c:	f7fd f9a0 	bl	8001850 <OLED_DrawStr_RuModified>

					break;
 8004510:	e000      	b.n	8004514 <BuildFrame+0x7a8>

					default:
					break;
 8004512:	bf00      	nop
				}
		break;
 8004514:	f003 b94a 	b.w	80077ac <BuildFrame+0x3a40>


		// 4. Настройки
		case 4:
				switch(pos_cursor)
 8004518:	4b5a      	ldr	r3, [pc, #360]	@ (8004684 <BuildFrame+0x918>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b03      	cmp	r3, #3
 800451e:	f000 80bf 	beq.w	80046a0 <BuildFrame+0x934>
 8004522:	2b03      	cmp	r3, #3
 8004524:	f300 8107 	bgt.w	8004736 <BuildFrame+0x9ca>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <BuildFrame+0x7c6>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d04b      	beq.n	80045c8 <BuildFrame+0x85c>
						OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 4, 0);

					break;

					default:
					break;
 8004530:	e101      	b.n	8004736 <BuildFrame+0x9ca>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8004532:	2300      	movs	r3, #0
 8004534:	9302      	str	r3, [sp, #8]
 8004536:	230d      	movs	r3, #13
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2309      	movs	r3, #9
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2310      	movs	r3, #16
 8004540:	2203      	movs	r2, #3
 8004542:	210a      	movs	r1, #10
 8004544:	2003      	movs	r0, #3
 8004546:	f7fd fa91 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 0, 0);
 800454a:	2300      	movs	r3, #0
 800454c:	2200      	movs	r2, #0
 800454e:	210c      	movs	r1, #12
 8004550:	484d      	ldr	r0, [pc, #308]	@ (8004688 <BuildFrame+0x91c>)
 8004552:	f7fd f97d 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("ntreotuj", 12, 13, 0);
 8004556:	2300      	movs	r3, #0
 8004558:	220d      	movs	r2, #13
 800455a:	210c      	movs	r1, #12
 800455c:	484b      	ldr	r0, [pc, #300]	@ (800468c <BuildFrame+0x920>)
 800455e:	f7fd f977 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("ntreotuj");
 8004562:	484a      	ldr	r0, [pc, #296]	@ (800468c <BuildFrame+0x920>)
 8004564:	f7fc fab6 	bl	8000ad4 <OLED_GetWidthStr>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	4b42      	ldr	r3, [pc, #264]	@ (8004678 <BuildFrame+0x90c>)
 800456e:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("dhtvtyb", 12 + str_lenght + 3, 13, 0);
 8004570:	4b41      	ldr	r3, [pc, #260]	@ (8004678 <BuildFrame+0x90c>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	330f      	adds	r3, #15
 8004576:	b2d9      	uxtb	r1, r3
 8004578:	2300      	movs	r3, #0
 800457a:	220d      	movs	r2, #13
 800457c:	4844      	ldr	r0, [pc, #272]	@ (8004690 <BuildFrame+0x924>)
 800457e:	f7fd f967 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 13 * 2, 1);
 8004582:	2301      	movs	r3, #1
 8004584:	221a      	movs	r2, #26
 8004586:	210c      	movs	r1, #12
 8004588:	483f      	ldr	r0, [pc, #252]	@ (8004688 <BuildFrame+0x91c>)
 800458a:	f7fd f961 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("Yfcnhjqrf");
 800458e:	483e      	ldr	r0, [pc, #248]	@ (8004688 <BuildFrame+0x91c>)
 8004590:	f7fc faa0 	bl	8000ad4 <OLED_GetWidthStr>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	4b37      	ldr	r3, [pc, #220]	@ (8004678 <BuildFrame+0x90c>)
 800459a:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 2, 1);
 800459c:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <BuildFrame+0x90c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	330f      	adds	r3, #15
 80045a2:	b2d9      	uxtb	r1, r3
 80045a4:	2301      	movs	r3, #1
 80045a6:	221a      	movs	r2, #26
 80045a8:	483a      	ldr	r0, [pc, #232]	@ (8004694 <BuildFrame+0x928>)
 80045aa:	f7fd f951 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 3, 1);
 80045ae:	2301      	movs	r3, #1
 80045b0:	2227      	movs	r2, #39	@ 0x27
 80045b2:	210c      	movs	r1, #12
 80045b4:	4838      	ldr	r0, [pc, #224]	@ (8004698 <BuildFrame+0x92c>)
 80045b6:	f7fd f94b 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 4, 1);
 80045ba:	2301      	movs	r3, #1
 80045bc:	2234      	movs	r2, #52	@ 0x34
 80045be:	210c      	movs	r1, #12
 80045c0:	4836      	ldr	r0, [pc, #216]	@ (800469c <BuildFrame+0x930>)
 80045c2:	f7fd f945 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 80045c6:	e0b7      	b.n	8004738 <BuildFrame+0x9cc>
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 0, 1);
 80045c8:	2301      	movs	r3, #1
 80045ca:	2200      	movs	r2, #0
 80045cc:	210c      	movs	r1, #12
 80045ce:	482e      	ldr	r0, [pc, #184]	@ (8004688 <BuildFrame+0x91c>)
 80045d0:	f7fd f93e 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("ntreotuj", 12, 13, 1);
 80045d4:	2301      	movs	r3, #1
 80045d6:	220d      	movs	r2, #13
 80045d8:	210c      	movs	r1, #12
 80045da:	482c      	ldr	r0, [pc, #176]	@ (800468c <BuildFrame+0x920>)
 80045dc:	f7fd f938 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("ntreotuj");
 80045e0:	482a      	ldr	r0, [pc, #168]	@ (800468c <BuildFrame+0x920>)
 80045e2:	f7fc fa77 	bl	8000ad4 <OLED_GetWidthStr>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <BuildFrame+0x90c>)
 80045ec:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("dhtvtyb", 12 + str_lenght + 3, 13, 1);
 80045ee:	4b22      	ldr	r3, [pc, #136]	@ (8004678 <BuildFrame+0x90c>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	330f      	adds	r3, #15
 80045f4:	b2d9      	uxtb	r1, r3
 80045f6:	2301      	movs	r3, #1
 80045f8:	220d      	movs	r2, #13
 80045fa:	4825      	ldr	r0, [pc, #148]	@ (8004690 <BuildFrame+0x924>)
 80045fc:	f7fd f928 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004600:	2300      	movs	r3, #0
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	2320      	movs	r3, #32
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2309      	movs	r3, #9
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2323      	movs	r3, #35	@ 0x23
 800460e:	2203      	movs	r2, #3
 8004610:	211d      	movs	r1, #29
 8004612:	2003      	movs	r0, #3
 8004614:	f7fd fa2a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 13 * 2, 0);
 8004618:	2300      	movs	r3, #0
 800461a:	221a      	movs	r2, #26
 800461c:	210c      	movs	r1, #12
 800461e:	481a      	ldr	r0, [pc, #104]	@ (8004688 <BuildFrame+0x91c>)
 8004620:	f7fd f916 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("Yfcnhjqrf");
 8004624:	4818      	ldr	r0, [pc, #96]	@ (8004688 <BuildFrame+0x91c>)
 8004626:	f7fc fa55 	bl	8000ad4 <OLED_GetWidthStr>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <BuildFrame+0x90c>)
 8004630:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 2, 0);
 8004632:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <BuildFrame+0x90c>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	330f      	adds	r3, #15
 8004638:	b2d9      	uxtb	r1, r3
 800463a:	2300      	movs	r3, #0
 800463c:	221a      	movs	r2, #26
 800463e:	4815      	ldr	r0, [pc, #84]	@ (8004694 <BuildFrame+0x928>)
 8004640:	f7fd f906 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 3, 1);
 8004644:	2301      	movs	r3, #1
 8004646:	2227      	movs	r2, #39	@ 0x27
 8004648:	210c      	movs	r1, #12
 800464a:	4813      	ldr	r0, [pc, #76]	@ (8004698 <BuildFrame+0x92c>)
 800464c:	f7fd f900 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 4, 1);
 8004650:	2301      	movs	r3, #1
 8004652:	2234      	movs	r2, #52	@ 0x34
 8004654:	210c      	movs	r1, #12
 8004656:	4811      	ldr	r0, [pc, #68]	@ (800469c <BuildFrame+0x930>)
 8004658:	f7fd f8fa 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 800465c:	e06c      	b.n	8004738 <BuildFrame+0x9cc>
 800465e:	bf00      	nop
 8004660:	0801430c 	.word	0x0801430c
 8004664:	08014304 	.word	0x08014304
 8004668:	08014310 	.word	0x08014310
 800466c:	08014314 	.word	0x08014314
 8004670:	08014318 	.word	0x08014318
 8004674:	080142fc 	.word	0x080142fc
 8004678:	20000a3e 	.word	0x20000a3e
 800467c:	0801431c 	.word	0x0801431c
 8004680:	080142dc 	.word	0x080142dc
 8004684:	20000a3d 	.word	0x20000a3d
 8004688:	08014324 	.word	0x08014324
 800468c:	08014330 	.word	0x08014330
 8004690:	0801433c 	.word	0x0801433c
 8004694:	08014258 	.word	0x08014258
 8004698:	08014344 	.word	0x08014344
 800469c:	08014354 	.word	0x08014354
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 0, 1);
 80046a0:	2301      	movs	r3, #1
 80046a2:	2200      	movs	r2, #0
 80046a4:	210c      	movs	r1, #12
 80046a6:	48bd      	ldr	r0, [pc, #756]	@ (800499c <BuildFrame+0xc30>)
 80046a8:	f7fd f8d2 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("ntreotuj", 12, 13, 1);
 80046ac:	2301      	movs	r3, #1
 80046ae:	220d      	movs	r2, #13
 80046b0:	210c      	movs	r1, #12
 80046b2:	48bb      	ldr	r0, [pc, #748]	@ (80049a0 <BuildFrame+0xc34>)
 80046b4:	f7fd f8cc 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("ntreotuj");
 80046b8:	48b9      	ldr	r0, [pc, #740]	@ (80049a0 <BuildFrame+0xc34>)
 80046ba:	f7fc fa0b 	bl	8000ad4 <OLED_GetWidthStr>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	4bb8      	ldr	r3, [pc, #736]	@ (80049a4 <BuildFrame+0xc38>)
 80046c4:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("dhtvtyb", 12 + str_lenght + 3, 13, 1);
 80046c6:	4bb7      	ldr	r3, [pc, #732]	@ (80049a4 <BuildFrame+0xc38>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	330f      	adds	r3, #15
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	2301      	movs	r3, #1
 80046d0:	220d      	movs	r2, #13
 80046d2:	48b5      	ldr	r0, [pc, #724]	@ (80049a8 <BuildFrame+0xc3c>)
 80046d4:	f7fd f8bc 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Yfcnhjqrf", 12, 13 * 2, 1);
 80046d8:	2301      	movs	r3, #1
 80046da:	221a      	movs	r2, #26
 80046dc:	210c      	movs	r1, #12
 80046de:	48af      	ldr	r0, [pc, #700]	@ (800499c <BuildFrame+0xc30>)
 80046e0:	f7fd f8b6 	bl	8001850 <OLED_DrawStr_RuModified>
						str_lenght = OLED_GetWidthStr("Yfcnhjqrf");
 80046e4:	48ad      	ldr	r0, [pc, #692]	@ (800499c <BuildFrame+0xc30>)
 80046e6:	f7fc f9f5 	bl	8000ad4 <OLED_GetWidthStr>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	4bad      	ldr	r3, [pc, #692]	@ (80049a4 <BuildFrame+0xc38>)
 80046f0:	701a      	strb	r2, [r3, #0]
						OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 2, 1);
 80046f2:	4bac      	ldr	r3, [pc, #688]	@ (80049a4 <BuildFrame+0xc38>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	330f      	adds	r3, #15
 80046f8:	b2d9      	uxtb	r1, r3
 80046fa:	2301      	movs	r3, #1
 80046fc:	221a      	movs	r2, #26
 80046fe:	48ab      	ldr	r0, [pc, #684]	@ (80049ac <BuildFrame+0xc40>)
 8004700:	f7fd f8a6 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4 - 3, 3, (int16_t) 13 * 4 + 3, 9, (int16_t) 13 * 4, 0);
 8004704:	2300      	movs	r3, #0
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	2334      	movs	r3, #52	@ 0x34
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	2309      	movs	r3, #9
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2337      	movs	r3, #55	@ 0x37
 8004712:	2203      	movs	r2, #3
 8004714:	2131      	movs	r1, #49	@ 0x31
 8004716:	2003      	movs	r0, #3
 8004718:	f7fd f9a8 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 3, 0);
 800471c:	2300      	movs	r3, #0
 800471e:	2227      	movs	r2, #39	@ 0x27
 8004720:	210c      	movs	r1, #12
 8004722:	48a3      	ldr	r0, [pc, #652]	@ (80049b0 <BuildFrame+0xc44>)
 8004724:	f7fd f894 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 4, 0);
 8004728:	2300      	movs	r3, #0
 800472a:	2234      	movs	r2, #52	@ 0x34
 800472c:	210c      	movs	r1, #12
 800472e:	48a1      	ldr	r0, [pc, #644]	@ (80049b4 <BuildFrame+0xc48>)
 8004730:	f7fd f88e 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 8004734:	e000      	b.n	8004738 <BuildFrame+0x9cc>
					break;
 8004736:	bf00      	nop
				}

		break;
 8004738:	f003 b838 	b.w	80077ac <BuildFrame+0x3a40>


		// 5. Продолжение кадра 4
		case 5:

			switch(pos_cursor)
 800473c:	4b9e      	ldr	r3, [pc, #632]	@ (80049b8 <BuildFrame+0xc4c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b03      	cmp	r3, #3
 8004742:	f000 80c0 	beq.w	80048c6 <BuildFrame+0xb5a>
 8004746:	2b03      	cmp	r3, #3
 8004748:	f300 8119 	bgt.w	800497e <BuildFrame+0xc12>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <BuildFrame+0x9ea>
 8004750:	2b02      	cmp	r3, #2
 8004752:	d05c      	beq.n	800480e <BuildFrame+0xaa2>

				break;


				default:
				break;
 8004754:	e113      	b.n	800497e <BuildFrame+0xc12>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8004756:	2300      	movs	r3, #0
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	230d      	movs	r3, #13
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	2309      	movs	r3, #9
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2310      	movs	r3, #16
 8004764:	2203      	movs	r2, #3
 8004766:	210a      	movs	r1, #10
 8004768:	2003      	movs	r0, #3
 800476a:	f7fd f97f 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 800476e:	4b93      	ldr	r3, [pc, #588]	@ (80049bc <BuildFrame+0xc50>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d011      	beq.n	800479a <BuildFrame+0xa2e>
						OLED_DrawStr_RuModified("Jnrk.xbnm", 12, 13 * 0, 0);
 8004776:	2300      	movs	r3, #0
 8004778:	2200      	movs	r2, #0
 800477a:	210c      	movs	r1, #12
 800477c:	4890      	ldr	r0, [pc, #576]	@ (80049c0 <BuildFrame+0xc54>)
 800477e:	f7fd f867 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Jnrk.xbnm") + 3, 13 * 0, 0);
 8004782:	488f      	ldr	r0, [pc, #572]	@ (80049c0 <BuildFrame+0xc54>)
 8004784:	f7fc f9a6 	bl	8000ad4 <OLED_GetWidthStr>
 8004788:	4603      	mov	r3, r0
 800478a:	330f      	adds	r3, #15
 800478c:	b2d9      	uxtb	r1, r3
 800478e:	2300      	movs	r3, #0
 8004790:	2200      	movs	r2, #0
 8004792:	488c      	ldr	r0, [pc, #560]	@ (80049c4 <BuildFrame+0xc58>)
 8004794:	f7fd f85c 	bl	8001850 <OLED_DrawStr_RuModified>
 8004798:	e010      	b.n	80047bc <BuildFrame+0xa50>
						OLED_DrawStr_RuModified("Drk.xbnm", 12, 13 * 0, 0);
 800479a:	2300      	movs	r3, #0
 800479c:	2200      	movs	r2, #0
 800479e:	210c      	movs	r1, #12
 80047a0:	4889      	ldr	r0, [pc, #548]	@ (80049c8 <BuildFrame+0xc5c>)
 80047a2:	f7fd f855 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Drk.xbnm") + 3, 13 * 0, 0);
 80047a6:	4888      	ldr	r0, [pc, #544]	@ (80049c8 <BuildFrame+0xc5c>)
 80047a8:	f7fc f994 	bl	8000ad4 <OLED_GetWidthStr>
 80047ac:	4603      	mov	r3, r0
 80047ae:	330f      	adds	r3, #15
 80047b0:	b2d9      	uxtb	r1, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	2200      	movs	r2, #0
 80047b6:	4883      	ldr	r0, [pc, #524]	@ (80049c4 <BuildFrame+0xc58>)
 80047b8:	f7fd f84a 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 1, 0);
 80047bc:	2300      	movs	r3, #0
 80047be:	220d      	movs	r2, #13
 80047c0:	210c      	movs	r1, #12
 80047c2:	4882      	ldr	r0, [pc, #520]	@ (80049cc <BuildFrame+0xc60>)
 80047c4:	f7fd f844 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 1, 0);
 80047c8:	4880      	ldr	r0, [pc, #512]	@ (80049cc <BuildFrame+0xc60>)
 80047ca:	f7fc f983 	bl	8000ad4 <OLED_GetWidthStr>
 80047ce:	4603      	mov	r3, r0
 80047d0:	330f      	adds	r3, #15
 80047d2:	b2d9      	uxtb	r1, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	220d      	movs	r2, #13
 80047d8:	487d      	ldr	r0, [pc, #500]	@ (80049d0 <BuildFrame+0xc64>)
 80047da:	f7fd f839 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjc", 12, 13 * 2, 1);
 80047de:	2301      	movs	r3, #1
 80047e0:	221a      	movs	r2, #26
 80047e2:	210c      	movs	r1, #12
 80047e4:	487b      	ldr	r0, [pc, #492]	@ (80049d4 <BuildFrame+0xc68>)
 80047e6:	f7fd f833 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("yfcnhjtr", 12 + OLED_GetWidthStr("C,hjc") + 3, 13 * 2, 1);
 80047ea:	487a      	ldr	r0, [pc, #488]	@ (80049d4 <BuildFrame+0xc68>)
 80047ec:	f7fc f972 	bl	8000ad4 <OLED_GetWidthStr>
 80047f0:	4603      	mov	r3, r0
 80047f2:	330f      	adds	r3, #15
 80047f4:	b2d9      	uxtb	r1, r3
 80047f6:	2301      	movs	r3, #1
 80047f8:	221a      	movs	r2, #26
 80047fa:	4877      	ldr	r0, [pc, #476]	@ (80049d8 <BuildFrame+0xc6c>)
 80047fc:	f7fd f828 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 3, 1);
 8004800:	2301      	movs	r3, #1
 8004802:	2227      	movs	r2, #39	@ 0x27
 8004804:	210c      	movs	r1, #12
 8004806:	4875      	ldr	r0, [pc, #468]	@ (80049dc <BuildFrame+0xc70>)
 8004808:	f7fd f822 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 800480c:	e0b8      	b.n	8004980 <BuildFrame+0xc14>
					if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 800480e:	4b6b      	ldr	r3, [pc, #428]	@ (80049bc <BuildFrame+0xc50>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <BuildFrame+0xace>
						OLED_DrawStr_RuModified("Jnrk.xbnm", 12, 13 * 0, 1);
 8004816:	2301      	movs	r3, #1
 8004818:	2200      	movs	r2, #0
 800481a:	210c      	movs	r1, #12
 800481c:	4868      	ldr	r0, [pc, #416]	@ (80049c0 <BuildFrame+0xc54>)
 800481e:	f7fd f817 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Jnrk.xbnm") + 3, 13 * 0, 1);
 8004822:	4867      	ldr	r0, [pc, #412]	@ (80049c0 <BuildFrame+0xc54>)
 8004824:	f7fc f956 	bl	8000ad4 <OLED_GetWidthStr>
 8004828:	4603      	mov	r3, r0
 800482a:	330f      	adds	r3, #15
 800482c:	b2d9      	uxtb	r1, r3
 800482e:	2301      	movs	r3, #1
 8004830:	2200      	movs	r2, #0
 8004832:	4864      	ldr	r0, [pc, #400]	@ (80049c4 <BuildFrame+0xc58>)
 8004834:	f7fd f80c 	bl	8001850 <OLED_DrawStr_RuModified>
 8004838:	e010      	b.n	800485c <BuildFrame+0xaf0>
						OLED_DrawStr_RuModified("Drk.xbnm", 12, 13 * 0, 1);
 800483a:	2301      	movs	r3, #1
 800483c:	2200      	movs	r2, #0
 800483e:	210c      	movs	r1, #12
 8004840:	4861      	ldr	r0, [pc, #388]	@ (80049c8 <BuildFrame+0xc5c>)
 8004842:	f7fd f805 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Drk.xbnm") + 3, 13 * 0, 1);
 8004846:	4860      	ldr	r0, [pc, #384]	@ (80049c8 <BuildFrame+0xc5c>)
 8004848:	f7fc f944 	bl	8000ad4 <OLED_GetWidthStr>
 800484c:	4603      	mov	r3, r0
 800484e:	330f      	adds	r3, #15
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	2301      	movs	r3, #1
 8004854:	2200      	movs	r2, #0
 8004856:	485b      	ldr	r0, [pc, #364]	@ (80049c4 <BuildFrame+0xc58>)
 8004858:	f7fc fffa 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 1, 1);
 800485c:	2301      	movs	r3, #1
 800485e:	220d      	movs	r2, #13
 8004860:	210c      	movs	r1, #12
 8004862:	485a      	ldr	r0, [pc, #360]	@ (80049cc <BuildFrame+0xc60>)
 8004864:	f7fc fff4 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 1, 1);
 8004868:	4858      	ldr	r0, [pc, #352]	@ (80049cc <BuildFrame+0xc60>)
 800486a:	f7fc f933 	bl	8000ad4 <OLED_GetWidthStr>
 800486e:	4603      	mov	r3, r0
 8004870:	330f      	adds	r3, #15
 8004872:	b2d9      	uxtb	r1, r3
 8004874:	2301      	movs	r3, #1
 8004876:	220d      	movs	r2, #13
 8004878:	4855      	ldr	r0, [pc, #340]	@ (80049d0 <BuildFrame+0xc64>)
 800487a:	f7fc ffe9 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 800487e:	2300      	movs	r3, #0
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	2320      	movs	r3, #32
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	2309      	movs	r3, #9
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2323      	movs	r3, #35	@ 0x23
 800488c:	2203      	movs	r2, #3
 800488e:	211d      	movs	r1, #29
 8004890:	2003      	movs	r0, #3
 8004892:	f7fd f8eb 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("C,hjc", 12, 13 * 2, 0);
 8004896:	2300      	movs	r3, #0
 8004898:	221a      	movs	r2, #26
 800489a:	210c      	movs	r1, #12
 800489c:	484d      	ldr	r0, [pc, #308]	@ (80049d4 <BuildFrame+0xc68>)
 800489e:	f7fc ffd7 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("yfcnhjtr", 12 + OLED_GetWidthStr("C,hjc") + 3, 13 * 2, 0);
 80048a2:	484c      	ldr	r0, [pc, #304]	@ (80049d4 <BuildFrame+0xc68>)
 80048a4:	f7fc f916 	bl	8000ad4 <OLED_GetWidthStr>
 80048a8:	4603      	mov	r3, r0
 80048aa:	330f      	adds	r3, #15
 80048ac:	b2d9      	uxtb	r1, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	221a      	movs	r2, #26
 80048b2:	4849      	ldr	r0, [pc, #292]	@ (80049d8 <BuildFrame+0xc6c>)
 80048b4:	f7fc ffcc 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 3, 1);
 80048b8:	2301      	movs	r3, #1
 80048ba:	2227      	movs	r2, #39	@ 0x27
 80048bc:	210c      	movs	r1, #12
 80048be:	4847      	ldr	r0, [pc, #284]	@ (80049dc <BuildFrame+0xc70>)
 80048c0:	f7fc ffc6 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80048c4:	e05c      	b.n	8004980 <BuildFrame+0xc14>
					if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 80048c6:	4b3d      	ldr	r3, [pc, #244]	@ (80049bc <BuildFrame+0xc50>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d011      	beq.n	80048f2 <BuildFrame+0xb86>
						OLED_DrawStr_RuModified("Jnrk.xbnm", 12, 13 * 0, 1);
 80048ce:	2301      	movs	r3, #1
 80048d0:	2200      	movs	r2, #0
 80048d2:	210c      	movs	r1, #12
 80048d4:	483a      	ldr	r0, [pc, #232]	@ (80049c0 <BuildFrame+0xc54>)
 80048d6:	f7fc ffbb 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Jnrk.xbnm") + 3, 13 * 0, 1);
 80048da:	4839      	ldr	r0, [pc, #228]	@ (80049c0 <BuildFrame+0xc54>)
 80048dc:	f7fc f8fa 	bl	8000ad4 <OLED_GetWidthStr>
 80048e0:	4603      	mov	r3, r0
 80048e2:	330f      	adds	r3, #15
 80048e4:	b2d9      	uxtb	r1, r3
 80048e6:	2301      	movs	r3, #1
 80048e8:	2200      	movs	r2, #0
 80048ea:	4836      	ldr	r0, [pc, #216]	@ (80049c4 <BuildFrame+0xc58>)
 80048ec:	f7fc ffb0 	bl	8001850 <OLED_DrawStr_RuModified>
 80048f0:	e010      	b.n	8004914 <BuildFrame+0xba8>
						OLED_DrawStr_RuModified("Drk.xbnm", 12, 13 * 0, 1);
 80048f2:	2301      	movs	r3, #1
 80048f4:	2200      	movs	r2, #0
 80048f6:	210c      	movs	r1, #12
 80048f8:	4833      	ldr	r0, [pc, #204]	@ (80049c8 <BuildFrame+0xc5c>)
 80048fa:	f7fc ffa9 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("Drk.xbnm") + 3, 13 * 0, 1);
 80048fe:	4832      	ldr	r0, [pc, #200]	@ (80049c8 <BuildFrame+0xc5c>)
 8004900:	f7fc f8e8 	bl	8000ad4 <OLED_GetWidthStr>
 8004904:	4603      	mov	r3, r0
 8004906:	330f      	adds	r3, #15
 8004908:	b2d9      	uxtb	r1, r3
 800490a:	2301      	movs	r3, #1
 800490c:	2200      	movs	r2, #0
 800490e:	482d      	ldr	r0, [pc, #180]	@ (80049c4 <BuildFrame+0xc58>)
 8004910:	f7fc ff9e 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 1, 1);
 8004914:	2301      	movs	r3, #1
 8004916:	220d      	movs	r2, #13
 8004918:	210c      	movs	r1, #12
 800491a:	482c      	ldr	r0, [pc, #176]	@ (80049cc <BuildFrame+0xc60>)
 800491c:	f7fc ff98 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 1, 1);
 8004920:	482a      	ldr	r0, [pc, #168]	@ (80049cc <BuildFrame+0xc60>)
 8004922:	f7fc f8d7 	bl	8000ad4 <OLED_GetWidthStr>
 8004926:	4603      	mov	r3, r0
 8004928:	330f      	adds	r3, #15
 800492a:	b2d9      	uxtb	r1, r3
 800492c:	2301      	movs	r3, #1
 800492e:	220d      	movs	r2, #13
 8004930:	4827      	ldr	r0, [pc, #156]	@ (80049d0 <BuildFrame+0xc64>)
 8004932:	f7fc ff8d 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjc", 12, 13 * 2, 1);
 8004936:	2301      	movs	r3, #1
 8004938:	221a      	movs	r2, #26
 800493a:	210c      	movs	r1, #12
 800493c:	4825      	ldr	r0, [pc, #148]	@ (80049d4 <BuildFrame+0xc68>)
 800493e:	f7fc ff87 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("yfcnhjtr", 12 + OLED_GetWidthStr("C,hjc") + 3, 13 * 2, 1);
 8004942:	4824      	ldr	r0, [pc, #144]	@ (80049d4 <BuildFrame+0xc68>)
 8004944:	f7fc f8c6 	bl	8000ad4 <OLED_GetWidthStr>
 8004948:	4603      	mov	r3, r0
 800494a:	330f      	adds	r3, #15
 800494c:	b2d9      	uxtb	r1, r3
 800494e:	2301      	movs	r3, #1
 8004950:	221a      	movs	r2, #26
 8004952:	4821      	ldr	r0, [pc, #132]	@ (80049d8 <BuildFrame+0xc6c>)
 8004954:	f7fc ff7c 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8004958:	2300      	movs	r3, #0
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	232d      	movs	r3, #45	@ 0x2d
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	2309      	movs	r3, #9
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2330      	movs	r3, #48	@ 0x30
 8004966:	2203      	movs	r2, #3
 8004968:	212a      	movs	r1, #42	@ 0x2a
 800496a:	2003      	movs	r0, #3
 800496c:	f7fd f87e 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 3, 0);
 8004970:	2300      	movs	r3, #0
 8004972:	2227      	movs	r2, #39	@ 0x27
 8004974:	210c      	movs	r1, #12
 8004976:	4819      	ldr	r0, [pc, #100]	@ (80049dc <BuildFrame+0xc70>)
 8004978:	f7fc ff6a 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 800497c:	e000      	b.n	8004980 <BuildFrame+0xc14>
				break;
 800497e:	bf00      	nop
			}

		break;
 8004980:	f002 bf14 	b.w	80077ac <BuildFrame+0x3a40>


		// 6. Настройка текущего времени
		case 6:

			switch(pos_cursor)
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <BuildFrame+0xc4c>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d067      	beq.n	8004a5c <BuildFrame+0xcf0>
 800498c:	2b02      	cmp	r3, #2
 800498e:	f300 8084 	bgt.w	8004a9a <BuildFrame+0xd2e>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d024      	beq.n	80049e0 <BuildFrame+0xc74>
 8004996:	2b01      	cmp	r3, #1
 8004998:	d041      	beq.n	8004a1e <BuildFrame+0xcb2>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 0);

				break;

				default:
				break;
 800499a:	e07e      	b.n	8004a9a <BuildFrame+0xd2e>
 800499c:	08014324 	.word	0x08014324
 80049a0:	08014330 	.word	0x08014330
 80049a4:	20000a3e 	.word	0x20000a3e
 80049a8:	0801433c 	.word	0x0801433c
 80049ac:	08014258 	.word	0x08014258
 80049b0:	08014344 	.word	0x08014344
 80049b4:	08014354 	.word	0x08014354
 80049b8:	20000a3d 	.word	0x20000a3d
 80049bc:	20000a84 	.word	0x20000a84
 80049c0:	0801435c 	.word	0x0801435c
 80049c4:	08014368 	.word	0x08014368
 80049c8:	08014370 	.word	0x08014370
 80049cc:	0801437c 	.word	0x0801437c
 80049d0:	08014384 	.word	0x08014384
 80049d4:	0801438c 	.word	0x0801438c
 80049d8:	08014394 	.word	0x08014394
 80049dc:	080142dc 	.word	0x080142dc
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 0.5 - 3, 3, (int16_t) 13 * 0.5 + 3, 9, (int16_t) 13 * 0.5, 0);
 80049e0:	2300      	movs	r3, #0
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	2306      	movs	r3, #6
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	2309      	movs	r3, #9
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2309      	movs	r3, #9
 80049ee:	2203      	movs	r2, #3
 80049f0:	2103      	movs	r1, #3
 80049f2:	2003      	movs	r0, #3
 80049f4:	f7fd f83a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Lfnf", 12, 0, 0);
 80049f8:	2300      	movs	r3, #0
 80049fa:	2200      	movs	r2, #0
 80049fc:	210c      	movs	r1, #12
 80049fe:	48c0      	ldr	r0, [pc, #768]	@ (8004d00 <BuildFrame+0xf94>)
 8004a00:	f7fc ff26 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Dhtvz", 12, 13, 1);
 8004a04:	2301      	movs	r3, #1
 8004a06:	220d      	movs	r2, #13
 8004a08:	210c      	movs	r1, #12
 8004a0a:	48be      	ldr	r0, [pc, #760]	@ (8004d04 <BuildFrame+0xf98>)
 8004a0c:	f7fc ff20 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 1);
 8004a10:	2301      	movs	r3, #1
 8004a12:	221a      	movs	r2, #26
 8004a14:	210c      	movs	r1, #12
 8004a16:	48bc      	ldr	r0, [pc, #752]	@ (8004d08 <BuildFrame+0xf9c>)
 8004a18:	f7fc ff1a 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8004a1c:	e03e      	b.n	8004a9c <BuildFrame+0xd30>
					OLED_DrawStr_RuModified("Lfnf", 12, 0, 1);
 8004a1e:	2301      	movs	r3, #1
 8004a20:	2200      	movs	r2, #0
 8004a22:	210c      	movs	r1, #12
 8004a24:	48b6      	ldr	r0, [pc, #728]	@ (8004d00 <BuildFrame+0xf94>)
 8004a26:	f7fc ff13 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1.5 - 3, 3, (int16_t) 13 * 1.5 + 3, 9, (int16_t) 13 * 1.5, 0);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	2313      	movs	r3, #19
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	2309      	movs	r3, #9
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2316      	movs	r3, #22
 8004a38:	2203      	movs	r2, #3
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	f7fd f815 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Dhtvz", 12, 13, 0);
 8004a42:	2300      	movs	r3, #0
 8004a44:	220d      	movs	r2, #13
 8004a46:	210c      	movs	r1, #12
 8004a48:	48ae      	ldr	r0, [pc, #696]	@ (8004d04 <BuildFrame+0xf98>)
 8004a4a:	f7fc ff01 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 1);
 8004a4e:	2301      	movs	r3, #1
 8004a50:	221a      	movs	r2, #26
 8004a52:	210c      	movs	r1, #12
 8004a54:	48ac      	ldr	r0, [pc, #688]	@ (8004d08 <BuildFrame+0xf9c>)
 8004a56:	f7fc fefb 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8004a5a:	e01f      	b.n	8004a9c <BuildFrame+0xd30>
					OLED_DrawStr_RuModified("Lfnf", 12, 0, 1);
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	2200      	movs	r2, #0
 8004a60:	210c      	movs	r1, #12
 8004a62:	48a7      	ldr	r0, [pc, #668]	@ (8004d00 <BuildFrame+0xf94>)
 8004a64:	f7fc fef4 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Dhtvz", 12, 13, 1);
 8004a68:	2301      	movs	r3, #1
 8004a6a:	220d      	movs	r2, #13
 8004a6c:	210c      	movs	r1, #12
 8004a6e:	48a5      	ldr	r0, [pc, #660]	@ (8004d04 <BuildFrame+0xf98>)
 8004a70:	f7fc feee 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004a74:	2300      	movs	r3, #0
 8004a76:	9302      	str	r3, [sp, #8]
 8004a78:	2320      	movs	r3, #32
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	2309      	movs	r3, #9
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2323      	movs	r3, #35	@ 0x23
 8004a82:	2203      	movs	r2, #3
 8004a84:	211d      	movs	r1, #29
 8004a86:	2003      	movs	r0, #3
 8004a88:	f7fc fff0 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 0);
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	221a      	movs	r2, #26
 8004a90:	210c      	movs	r1, #12
 8004a92:	489d      	ldr	r0, [pc, #628]	@ (8004d08 <BuildFrame+0xf9c>)
 8004a94:	f7fc fedc 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8004a98:	e000      	b.n	8004a9c <BuildFrame+0xd30>
				break;
 8004a9a:	bf00      	nop
			}

		break;
 8004a9c:	f002 be86 	b.w	80077ac <BuildFrame+0x3a40>
		// 7. Настройка полива
		case 7:

			// Установите время
			// начала полива
			OLED_DrawStr_RuModified("Ecnfyjdbnt", 6, 13 * 0, 1);
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2106      	movs	r1, #6
 8004aa6:	4899      	ldr	r0, [pc, #612]	@ (8004d0c <BuildFrame+0xfa0>)
 8004aa8:	f7fc fed2 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dhtvz", 6 + OLED_GetWidthStr("Ecnfyjdbnt") + 3, 13 * 0, 1);
 8004aac:	4897      	ldr	r0, [pc, #604]	@ (8004d0c <BuildFrame+0xfa0>)
 8004aae:	f7fc f811 	bl	8000ad4 <OLED_GetWidthStr>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	3309      	adds	r3, #9
 8004ab6:	b2d9      	uxtb	r1, r3
 8004ab8:	2301      	movs	r3, #1
 8004aba:	2200      	movs	r2, #0
 8004abc:	4894      	ldr	r0, [pc, #592]	@ (8004d10 <BuildFrame+0xfa4>)
 8004abe:	f7fc fec7 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("yfxfkf", 6, 13 * 1, 1);
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	220d      	movs	r2, #13
 8004ac6:	2106      	movs	r1, #6
 8004ac8:	4892      	ldr	r0, [pc, #584]	@ (8004d14 <BuildFrame+0xfa8>)
 8004aca:	f7fc fec1 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbdf", 6 + OLED_GetWidthStr("yfxfkf") + 3, 13 * 1, 1);
 8004ace:	4891      	ldr	r0, [pc, #580]	@ (8004d14 <BuildFrame+0xfa8>)
 8004ad0:	f7fc f800 	bl	8000ad4 <OLED_GetWidthStr>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	3309      	adds	r3, #9
 8004ad8:	b2d9      	uxtb	r1, r3
 8004ada:	2301      	movs	r3, #1
 8004adc:	220d      	movs	r2, #13
 8004ade:	488e      	ldr	r0, [pc, #568]	@ (8004d18 <BuildFrame+0xfac>)
 8004ae0:	f7fc feb6 	bl	8001850 <OLED_DrawStr_RuModified>

			switch(pos_cursor)
 8004ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8004d1c <BuildFrame+0xfb0>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d002      	beq.n	8004af2 <BuildFrame+0xd86>
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d074      	beq.n	8004bda <BuildFrame+0xe6e>

				break;


				default:
				break;
 8004af0:	e0c8      	b.n	8004c84 <BuildFrame+0xf18>
					if (f_StSetTimeWater)
 8004af2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d20 <BuildFrame+0xfb4>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <BuildFrame+0xdac>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 1);
 8004afa:	2301      	movs	r3, #1
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	2320      	movs	r3, #32
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	2309      	movs	r3, #9
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2323      	movs	r3, #35	@ 0x23
 8004b08:	2203      	movs	r2, #3
 8004b0a:	211d      	movs	r1, #29
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	f7fc ffad 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						SetTimeSMH();
 8004b12:	f7fd ffc9 	bl	8002aa8 <SetTimeSMH>
 8004b16:	e057      	b.n	8004bc8 <BuildFrame+0xe5c>
						if (f_TimeIsSetWater)
 8004b18:	4b82      	ldr	r3, [pc, #520]	@ (8004d24 <BuildFrame+0xfb8>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <BuildFrame+0xdda>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004b20:	2300      	movs	r3, #0
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	2320      	movs	r3, #32
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2309      	movs	r3, #9
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2323      	movs	r3, #35	@ 0x23
 8004b2e:	2203      	movs	r2, #3
 8004b30:	211d      	movs	r1, #29
 8004b32:	2003      	movs	r0, #3
 8004b34:	f7fc ff9a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							DrawSetTime(ptr_WateringParamsSet, 0);
 8004b38:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <BuildFrame+0xfbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fe56 	bl	80027f0 <DrawSetTime>
 8004b44:	e040      	b.n	8004bc8 <BuildFrame+0xe5c>
							OLED_DrawStr_EnModified("--", 16, 13 * 2, 0);
 8004b46:	2300      	movs	r3, #0
 8004b48:	221a      	movs	r2, #26
 8004b4a:	2110      	movs	r1, #16
 8004b4c:	4877      	ldr	r0, [pc, #476]	@ (8004d2c <BuildFrame+0xfc0>)
 8004b4e:	f7fc fe9b 	bl	8001888 <OLED_DrawStr_EnModified>
							str_lenght = OLED_GetWidthStr("--");
 8004b52:	4876      	ldr	r0, [pc, #472]	@ (8004d2c <BuildFrame+0xfc0>)
 8004b54:	f7fb ffbe 	bl	8000ad4 <OLED_GetWidthStr>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b74      	ldr	r3, [pc, #464]	@ (8004d30 <BuildFrame+0xfc4>)
 8004b5e:	701a      	strb	r2, [r3, #0]
							OLED_DrawChar_Modified(':', 16 + str_lenght + 4 * 1, 13 * 2, 0);
 8004b60:	4b73      	ldr	r3, [pc, #460]	@ (8004d30 <BuildFrame+0xfc4>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	b2d9      	uxtb	r1, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	221a      	movs	r2, #26
 8004b6c:	203a      	movs	r0, #58	@ 0x3a
 8004b6e:	f7fc fea7 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght + 4 * 2, 13 * 2, 0);
 8004b72:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <BuildFrame+0xfc4>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3318      	adds	r3, #24
 8004b78:	b2d9      	uxtb	r1, r3
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	221a      	movs	r2, #26
 8004b7e:	486b      	ldr	r0, [pc, #428]	@ (8004d2c <BuildFrame+0xfc0>)
 8004b80:	f7fc fe82 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawChar_Modified(':', 16 + str_lenght * 2 + 4 * 3, 13 * 2, 0);
 8004b84:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <BuildFrame+0xfc4>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	330e      	adds	r3, #14
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	b2d9      	uxtb	r1, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	221a      	movs	r2, #26
 8004b94:	203a      	movs	r0, #58	@ 0x3a
 8004b96:	f7fc fe93 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght * 2 + 4 * 4, 13 * 2, 0);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <BuildFrame+0xfc4>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	b2d9      	uxtb	r1, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	221a      	movs	r2, #26
 8004baa:	4860      	ldr	r0, [pc, #384]	@ (8004d2c <BuildFrame+0xfc0>)
 8004bac:	f7fc fe6c 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	2309      	movs	r3, #9
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2323      	movs	r3, #35	@ 0x23
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	211d      	movs	r1, #29
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	f7fc ff52 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					IsSetTimeWaterFinished();
 8004bc8:	f7fe ff14 	bl	80039f4 <IsSetTimeWaterFinished>
					OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 1);
 8004bcc:	2301      	movs	r3, #1
 8004bce:	2227      	movs	r2, #39	@ 0x27
 8004bd0:	210c      	movs	r1, #12
 8004bd2:	4858      	ldr	r0, [pc, #352]	@ (8004d34 <BuildFrame+0xfc8>)
 8004bd4:	f7fc fe3c 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8004bd8:	e054      	b.n	8004c84 <BuildFrame+0xf18>
					IsSetTimeWaterFinished();
 8004bda:	f7fe ff0b 	bl	80039f4 <IsSetTimeWaterFinished>
					if (f_TimeIsSetWater)
 8004bde:	4b51      	ldr	r3, [pc, #324]	@ (8004d24 <BuildFrame+0xfb8>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <BuildFrame+0xe88>
						DrawSetTime(ptr_WateringParamsSet, 1);
 8004be6:	4b50      	ldr	r3, [pc, #320]	@ (8004d28 <BuildFrame+0xfbc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fdff 	bl	80027f0 <DrawSetTime>
 8004bf2:	e034      	b.n	8004c5e <BuildFrame+0xef2>
						OLED_DrawStr_EnModified("--", 16, 13 * 2, 1);
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	221a      	movs	r2, #26
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	484c      	ldr	r0, [pc, #304]	@ (8004d2c <BuildFrame+0xfc0>)
 8004bfc:	f7fc fe44 	bl	8001888 <OLED_DrawStr_EnModified>
						str_lenght = OLED_GetWidthStr("--");
 8004c00:	484a      	ldr	r0, [pc, #296]	@ (8004d2c <BuildFrame+0xfc0>)
 8004c02:	f7fb ff67 	bl	8000ad4 <OLED_GetWidthStr>
 8004c06:	4603      	mov	r3, r0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b49      	ldr	r3, [pc, #292]	@ (8004d30 <BuildFrame+0xfc4>)
 8004c0c:	701a      	strb	r2, [r3, #0]
						OLED_DrawChar_Modified(':', 16 + str_lenght + 4 * 1, 13 * 2, 1);
 8004c0e:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <BuildFrame+0xfc4>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	b2d9      	uxtb	r1, r3
 8004c16:	2301      	movs	r3, #1
 8004c18:	221a      	movs	r2, #26
 8004c1a:	203a      	movs	r0, #58	@ 0x3a
 8004c1c:	f7fc fe50 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawStr_EnModified("--", 16 + str_lenght + 4 * 2, 13 * 2, 1);
 8004c20:	4b43      	ldr	r3, [pc, #268]	@ (8004d30 <BuildFrame+0xfc4>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	3318      	adds	r3, #24
 8004c26:	b2d9      	uxtb	r1, r3
 8004c28:	2301      	movs	r3, #1
 8004c2a:	221a      	movs	r2, #26
 8004c2c:	483f      	ldr	r0, [pc, #252]	@ (8004d2c <BuildFrame+0xfc0>)
 8004c2e:	f7fc fe2b 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawChar_Modified(':', 16 + str_lenght * 2 + 4 * 3, 13 * 2, 1);
 8004c32:	4b3f      	ldr	r3, [pc, #252]	@ (8004d30 <BuildFrame+0xfc4>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	330e      	adds	r3, #14
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	b2d9      	uxtb	r1, r3
 8004c3e:	2301      	movs	r3, #1
 8004c40:	221a      	movs	r2, #26
 8004c42:	203a      	movs	r0, #58	@ 0x3a
 8004c44:	f7fc fe3c 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawStr_EnModified("--", 16 + str_lenght * 2 + 4 * 4, 13 * 2, 1);
 8004c48:	4b39      	ldr	r3, [pc, #228]	@ (8004d30 <BuildFrame+0xfc4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	b2d9      	uxtb	r1, r3
 8004c54:	2301      	movs	r3, #1
 8004c56:	221a      	movs	r2, #26
 8004c58:	4834      	ldr	r0, [pc, #208]	@ (8004d2c <BuildFrame+0xfc0>)
 8004c5a:	f7fc fe15 	bl	8001888 <OLED_DrawStr_EnModified>
					OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 0);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2227      	movs	r2, #39	@ 0x27
 8004c62:	210c      	movs	r1, #12
 8004c64:	4833      	ldr	r0, [pc, #204]	@ (8004d34 <BuildFrame+0xfc8>)
 8004c66:	f7fc fdf3 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	232d      	movs	r3, #45	@ 0x2d
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2309      	movs	r3, #9
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2330      	movs	r3, #48	@ 0x30
 8004c78:	2203      	movs	r2, #3
 8004c7a:	212a      	movs	r1, #42	@ 0x2a
 8004c7c:	2003      	movs	r0, #3
 8004c7e:	f7fc fef5 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
				break;
 8004c82:	bf00      	nop
			}

		break;
 8004c84:	f002 bd92 	b.w	80077ac <BuildFrame+0x3a40>


		// 8. Настройка продолжительности полива
		case 8:

			OLED_DrawStr_RuModified("Ecnfyjdbnt", 6, 13 * 0, 1);
 8004c88:	2301      	movs	r3, #1
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2106      	movs	r1, #6
 8004c8e:	481f      	ldr	r0, [pc, #124]	@ (8004d0c <BuildFrame+0xfa0>)
 8004c90:	f7fc fdde 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ghjljk", 6 + OLED_GetWidthStr("Ecnfyjdbnt") + 3, 13 * 0, 1);
 8004c94:	481d      	ldr	r0, [pc, #116]	@ (8004d0c <BuildFrame+0xfa0>)
 8004c96:	f7fb ff1d 	bl	8000ad4 <OLED_GetWidthStr>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	3309      	adds	r3, #9
 8004c9e:	b2d9      	uxtb	r1, r3
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4824      	ldr	r0, [pc, #144]	@ (8004d38 <BuildFrame+0xfcc>)
 8004ca6:	f7fc fdd3 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 6 + OLED_GetWidthStr("Ecnfyjdbnt") + OLED_GetWidthStr("ghjljk") + 3 + 1, 13 * 0, 1);
 8004caa:	4818      	ldr	r0, [pc, #96]	@ (8004d0c <BuildFrame+0xfa0>)
 8004cac:	f7fb ff12 	bl	8000ad4 <OLED_GetWidthStr>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	4820      	ldr	r0, [pc, #128]	@ (8004d38 <BuildFrame+0xfcc>)
 8004cb6:	f7fb ff0d 	bl	8000ad4 <OLED_GetWidthStr>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4423      	add	r3, r4
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	330a      	adds	r3, #10
 8004cc2:	b2d9      	uxtb	r1, r3
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	202d      	movs	r0, #45	@ 0x2d
 8004cca:	f7fc fdf9 	bl	80018c0 <OLED_DrawChar_Modified>

			OLED_DrawStr_RuModified(";bntkmyjcnm", 6, 13 * 1, 1);
 8004cce:	2301      	movs	r3, #1
 8004cd0:	220d      	movs	r2, #13
 8004cd2:	2106      	movs	r1, #6
 8004cd4:	4819      	ldr	r0, [pc, #100]	@ (8004d3c <BuildFrame+0xfd0>)
 8004cd6:	f7fc fdbb 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbdf", 6 + OLED_GetWidthStr(";bntkmyjcnm") + 3, 13 * 1, 1);
 8004cda:	4818      	ldr	r0, [pc, #96]	@ (8004d3c <BuildFrame+0xfd0>)
 8004cdc:	f7fb fefa 	bl	8000ad4 <OLED_GetWidthStr>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	3309      	adds	r3, #9
 8004ce4:	b2d9      	uxtb	r1, r3
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	220d      	movs	r2, #13
 8004cea:	480b      	ldr	r0, [pc, #44]	@ (8004d18 <BuildFrame+0xfac>)
 8004cec:	f7fc fdb0 	bl	8001850 <OLED_DrawStr_RuModified>

			switch(pos_cursor)
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <BuildFrame+0xfb0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d023      	beq.n	8004d40 <BuildFrame+0xfd4>
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	f000 8097 	beq.w	8004e2c <BuildFrame+0x10c0>

				break;


				default:
				break;
 8004cfe:	e0ec      	b.n	8004eda <BuildFrame+0x116e>
 8004d00:	080143a0 	.word	0x080143a0
 8004d04:	080142a0 	.word	0x080142a0
 8004d08:	080142dc 	.word	0x080142dc
 8004d0c:	080143a8 	.word	0x080143a8
 8004d10:	080143b4 	.word	0x080143b4
 8004d14:	080142a8 	.word	0x080142a8
 8004d18:	08014258 	.word	0x08014258
 8004d1c:	20000a3d 	.word	0x20000a3d
 8004d20:	20000a11 	.word	0x20000a11
 8004d24:	20000a16 	.word	0x20000a16
 8004d28:	20000124 	.word	0x20000124
 8004d2c:	080143bc 	.word	0x080143bc
 8004d30:	20000a3e 	.word	0x20000a3e
 8004d34:	080143c0 	.word	0x080143c0
 8004d38:	080143c8 	.word	0x080143c8
 8004d3c:	080143d0 	.word	0x080143d0
					if (f_StSetDurationWater)
 8004d40:	4bbb      	ldr	r3, [pc, #748]	@ (8005030 <BuildFrame+0x12c4>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <BuildFrame+0xffa>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 1);
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	2309      	movs	r3, #9
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2323      	movs	r3, #35	@ 0x23
 8004d56:	2203      	movs	r2, #3
 8004d58:	211d      	movs	r1, #29
 8004d5a:	2003      	movs	r0, #3
 8004d5c:	f7fc fe86 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						SetTimeSMH();
 8004d60:	f7fd fea2 	bl	8002aa8 <SetTimeSMH>
 8004d64:	e059      	b.n	8004e1a <BuildFrame+0x10ae>
						if (f_TimeIsSetDurationWater)
 8004d66:	4bb3      	ldr	r3, [pc, #716]	@ (8005034 <BuildFrame+0x12c8>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d013      	beq.n	8004d96 <BuildFrame+0x102a>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	2320      	movs	r3, #32
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	2309      	movs	r3, #9
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2323      	movs	r3, #35	@ 0x23
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	211d      	movs	r1, #29
 8004d80:	2003      	movs	r0, #3
 8004d82:	f7fc fe73 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							DrawSetDurationWater(ptr_WateringParamsSet + 3, 0);
 8004d86:	4bac      	ldr	r3, [pc, #688]	@ (8005038 <BuildFrame+0x12cc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3303      	adds	r3, #3
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fd fdfa 	bl	8002988 <DrawSetDurationWater>
 8004d94:	e041      	b.n	8004e1a <BuildFrame+0x10ae>
							OLED_DrawStr_EnModified("--", 16, 13 * 2, 0);
 8004d96:	2300      	movs	r3, #0
 8004d98:	221a      	movs	r2, #26
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	48a7      	ldr	r0, [pc, #668]	@ (800503c <BuildFrame+0x12d0>)
 8004d9e:	f7fc fd73 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawStr_RuModified("vby", 16 + OLED_GetWidthStr("--") + 2, 13 * 2, 0);
 8004da2:	48a6      	ldr	r0, [pc, #664]	@ (800503c <BuildFrame+0x12d0>)
 8004da4:	f7fb fe96 	bl	8000ad4 <OLED_GetWidthStr>
 8004da8:	4603      	mov	r3, r0
 8004daa:	3312      	adds	r3, #18
 8004dac:	b2d9      	uxtb	r1, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	221a      	movs	r2, #26
 8004db2:	48a3      	ldr	r0, [pc, #652]	@ (8005040 <BuildFrame+0x12d4>)
 8004db4:	f7fc fd4c 	bl	8001850 <OLED_DrawStr_RuModified>
							OLED_DrawStr_EnModified("--", 3 + 16 + OLED_GetWidthStr("--") + OLED_GetWidthStr("vby") + 2 * 2, 13 * 2, 0);
 8004db8:	48a0      	ldr	r0, [pc, #640]	@ (800503c <BuildFrame+0x12d0>)
 8004dba:	f7fb fe8b 	bl	8000ad4 <OLED_GetWidthStr>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461c      	mov	r4, r3
 8004dc2:	489f      	ldr	r0, [pc, #636]	@ (8005040 <BuildFrame+0x12d4>)
 8004dc4:	f7fb fe86 	bl	8000ad4 <OLED_GetWidthStr>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4423      	add	r3, r4
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	3317      	adds	r3, #23
 8004dd0:	b2d9      	uxtb	r1, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	221a      	movs	r2, #26
 8004dd6:	4899      	ldr	r0, [pc, #612]	@ (800503c <BuildFrame+0x12d0>)
 8004dd8:	f7fc fd56 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawStr_RuModified("ctr", 3 + 16 + OLED_GetWidthStr("--") * 2 + OLED_GetWidthStr("vby") + 2 * 3, 13 * 2, 0);
 8004ddc:	4897      	ldr	r0, [pc, #604]	@ (800503c <BuildFrame+0x12d0>)
 8004dde:	f7fb fe79 	bl	8000ad4 <OLED_GetWidthStr>
 8004de2:	4603      	mov	r3, r0
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	b2dc      	uxtb	r4, r3
 8004de8:	4895      	ldr	r0, [pc, #596]	@ (8005040 <BuildFrame+0x12d4>)
 8004dea:	f7fb fe73 	bl	8000ad4 <OLED_GetWidthStr>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4423      	add	r3, r4
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	3319      	adds	r3, #25
 8004df6:	b2d9      	uxtb	r1, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	221a      	movs	r2, #26
 8004dfc:	4891      	ldr	r0, [pc, #580]	@ (8005044 <BuildFrame+0x12d8>)
 8004dfe:	f7fc fd27 	bl	8001850 <OLED_DrawStr_RuModified>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004e02:	2300      	movs	r3, #0
 8004e04:	9302      	str	r3, [sp, #8]
 8004e06:	2320      	movs	r3, #32
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	2309      	movs	r3, #9
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2323      	movs	r3, #35	@ 0x23
 8004e10:	2203      	movs	r2, #3
 8004e12:	211d      	movs	r1, #29
 8004e14:	2003      	movs	r0, #3
 8004e16:	f7fc fe29 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					IsSetTimeDurationWaterFinished();
 8004e1a:	f7fe fe0d 	bl	8003a38 <IsSetTimeDurationWaterFinished>
					OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 1);
 8004e1e:	2301      	movs	r3, #1
 8004e20:	2227      	movs	r2, #39	@ 0x27
 8004e22:	210c      	movs	r1, #12
 8004e24:	4888      	ldr	r0, [pc, #544]	@ (8005048 <BuildFrame+0x12dc>)
 8004e26:	f7fc fd13 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8004e2a:	e056      	b.n	8004eda <BuildFrame+0x116e>
					IsSetTimeDurationWaterFinished();
 8004e2c:	f7fe fe04 	bl	8003a38 <IsSetTimeDurationWaterFinished>
					if (f_TimeIsSetDurationWater)
 8004e30:	4b80      	ldr	r3, [pc, #512]	@ (8005034 <BuildFrame+0x12c8>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <BuildFrame+0x10dc>
						DrawSetDurationWater(ptr_WateringParamsSet + 3, 1);
 8004e38:	4b7f      	ldr	r3, [pc, #508]	@ (8005038 <BuildFrame+0x12cc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd fda1 	bl	8002988 <DrawSetDurationWater>
 8004e46:	e035      	b.n	8004eb4 <BuildFrame+0x1148>
						OLED_DrawStr_EnModified("--", 16, 13 * 2, 1);
 8004e48:	2301      	movs	r3, #1
 8004e4a:	221a      	movs	r2, #26
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	487b      	ldr	r0, [pc, #492]	@ (800503c <BuildFrame+0x12d0>)
 8004e50:	f7fc fd1a 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("vby", 16 + OLED_GetWidthStr("--") + 2, 13 * 2, 1);
 8004e54:	4879      	ldr	r0, [pc, #484]	@ (800503c <BuildFrame+0x12d0>)
 8004e56:	f7fb fe3d 	bl	8000ad4 <OLED_GetWidthStr>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	3312      	adds	r3, #18
 8004e5e:	b2d9      	uxtb	r1, r3
 8004e60:	2301      	movs	r3, #1
 8004e62:	221a      	movs	r2, #26
 8004e64:	4876      	ldr	r0, [pc, #472]	@ (8005040 <BuildFrame+0x12d4>)
 8004e66:	f7fc fcf3 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_EnModified("--", 3 + 16 + OLED_GetWidthStr("--") + OLED_GetWidthStr("vby") + 2 * 2, 13 * 2, 1);
 8004e6a:	4874      	ldr	r0, [pc, #464]	@ (800503c <BuildFrame+0x12d0>)
 8004e6c:	f7fb fe32 	bl	8000ad4 <OLED_GetWidthStr>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461c      	mov	r4, r3
 8004e74:	4872      	ldr	r0, [pc, #456]	@ (8005040 <BuildFrame+0x12d4>)
 8004e76:	f7fb fe2d 	bl	8000ad4 <OLED_GetWidthStr>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4423      	add	r3, r4
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3317      	adds	r3, #23
 8004e82:	b2d9      	uxtb	r1, r3
 8004e84:	2301      	movs	r3, #1
 8004e86:	221a      	movs	r2, #26
 8004e88:	486c      	ldr	r0, [pc, #432]	@ (800503c <BuildFrame+0x12d0>)
 8004e8a:	f7fc fcfd 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("ctr", 3 + 16 + OLED_GetWidthStr("--") * 2 + OLED_GetWidthStr("vby") + 2 * 3, 13 * 2, 1);
 8004e8e:	486b      	ldr	r0, [pc, #428]	@ (800503c <BuildFrame+0x12d0>)
 8004e90:	f7fb fe20 	bl	8000ad4 <OLED_GetWidthStr>
 8004e94:	4603      	mov	r3, r0
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	b2dc      	uxtb	r4, r3
 8004e9a:	4869      	ldr	r0, [pc, #420]	@ (8005040 <BuildFrame+0x12d4>)
 8004e9c:	f7fb fe1a 	bl	8000ad4 <OLED_GetWidthStr>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4423      	add	r3, r4
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3319      	adds	r3, #25
 8004ea8:	b2d9      	uxtb	r1, r3
 8004eaa:	2301      	movs	r3, #1
 8004eac:	221a      	movs	r2, #26
 8004eae:	4865      	ldr	r0, [pc, #404]	@ (8005044 <BuildFrame+0x12d8>)
 8004eb0:	f7fc fcce 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 0);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2227      	movs	r2, #39	@ 0x27
 8004eb8:	210c      	movs	r1, #12
 8004eba:	4863      	ldr	r0, [pc, #396]	@ (8005048 <BuildFrame+0x12dc>)
 8004ebc:	f7fc fcc8 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	232d      	movs	r3, #45	@ 0x2d
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2309      	movs	r3, #9
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2330      	movs	r3, #48	@ 0x30
 8004ece:	2203      	movs	r2, #3
 8004ed0:	212a      	movs	r1, #42	@ 0x2a
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	f7fc fdca 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
				break;
 8004ed8:	bf00      	nop
			}

		break;
 8004eda:	f002 bc67 	b.w	80077ac <BuildFrame+0x3a40>


		// 10. Кадр сохранения данных
		case 10:

			OLED_DrawStr_RuModified("Gfhfvtnhs", 12, 13 * 0, 1);
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	210c      	movs	r1, #12
 8004ee4:	4859      	ldr	r0, [pc, #356]	@ (800504c <BuildFrame+0x12e0>)
 8004ee6:	f7fc fcb3 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ecgtiyj", 12, 13 * 1, 1);
 8004eea:	2301      	movs	r3, #1
 8004eec:	220d      	movs	r2, #13
 8004eee:	210c      	movs	r1, #12
 8004ef0:	4857      	ldr	r0, [pc, #348]	@ (8005050 <BuildFrame+0x12e4>)
 8004ef2:	f7fc fcad 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("cj[hfytys", 12 + OLED_GetWidthStr("ecgtiyj") + 3, 13 * 1, 1);
 8004ef6:	4856      	ldr	r0, [pc, #344]	@ (8005050 <BuildFrame+0x12e4>)
 8004ef8:	f7fb fdec 	bl	8000ad4 <OLED_GetWidthStr>
 8004efc:	4603      	mov	r3, r0
 8004efe:	330f      	adds	r3, #15
 8004f00:	b2d9      	uxtb	r1, r3
 8004f02:	2301      	movs	r3, #1
 8004f04:	220d      	movs	r2, #13
 8004f06:	4853      	ldr	r0, [pc, #332]	@ (8005054 <BuildFrame+0x12e8>)
 8004f08:	f7fc fca2 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('!', 12 + OLED_GetWidthStr("ecgtiyj") + 3 + OLED_GetWidthStr("cj[hfytys") + 1, 13 * 1, 1);
 8004f0c:	4850      	ldr	r0, [pc, #320]	@ (8005050 <BuildFrame+0x12e4>)
 8004f0e:	f7fb fde1 	bl	8000ad4 <OLED_GetWidthStr>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461c      	mov	r4, r3
 8004f16:	484f      	ldr	r0, [pc, #316]	@ (8005054 <BuildFrame+0x12e8>)
 8004f18:	f7fb fddc 	bl	8000ad4 <OLED_GetWidthStr>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4423      	add	r3, r4
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3310      	adds	r3, #16
 8004f24:	b2d9      	uxtb	r1, r3
 8004f26:	2301      	movs	r3, #1
 8004f28:	220d      	movs	r2, #13
 8004f2a:	2021      	movs	r0, #33	@ 0x21
 8004f2c:	f7fc fcc8 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8004f30:	4b49      	ldr	r3, [pc, #292]	@ (8005058 <BuildFrame+0x12ec>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f042 8420 	bne.w	800777a <BuildFrame+0x3a0e>
					*
					*	 	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	2320      	movs	r3, #32
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2309      	movs	r3, #9
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2323      	movs	r3, #35	@ 0x23
 8004f48:	2203      	movs	r2, #3
 8004f4a:	211d      	movs	r1, #29
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f7fc fd8d 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 2, 0);
 8004f52:	2300      	movs	r3, #0
 8004f54:	221a      	movs	r2, #26
 8004f56:	210c      	movs	r1, #12
 8004f58:	4840      	ldr	r0, [pc, #256]	@ (800505c <BuildFrame+0x12f0>)
 8004f5a:	f7fc fc79 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8004f5e:	bf00      	nop
			}

		break;
 8004f60:	f002 bc0b 	b.w	800777a <BuildFrame+0x3a0e>
			// Информационная часть - отрисовывается
			// независимо от положения курсора

			// Установите дату
			// в формате дд/мм/гг
			OLED_DrawStr_RuModified("Ecnfyjdbnt lfne d", 6, 13 * 0, 1);
 8004f64:	2301      	movs	r3, #1
 8004f66:	2200      	movs	r2, #0
 8004f68:	2106      	movs	r1, #6
 8004f6a:	483d      	ldr	r0, [pc, #244]	@ (8005060 <BuildFrame+0x12f4>)
 8004f6c:	f7fc fc70 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ajhvfnt ll", 6, 13 * 1, 1);
 8004f70:	2301      	movs	r3, #1
 8004f72:	220d      	movs	r2, #13
 8004f74:	2106      	movs	r1, #6
 8004f76:	483b      	ldr	r0, [pc, #236]	@ (8005064 <BuildFrame+0x12f8>)
 8004f78:	f7fc fc6a 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("ajhvfnt ll");
 8004f7c:	4839      	ldr	r0, [pc, #228]	@ (8005064 <BuildFrame+0x12f8>)
 8004f7e:	f7fb fda9 	bl	8000ad4 <OLED_GetWidthStr>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	4b38      	ldr	r3, [pc, #224]	@ (8005068 <BuildFrame+0x12fc>)
 8004f88:	701a      	strb	r2, [r3, #0]
			OLED_DrawChar_Modified('/', 6 + str_lenght + 3, 13 * 1, 1);
 8004f8a:	4b37      	ldr	r3, [pc, #220]	@ (8005068 <BuildFrame+0x12fc>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	3309      	adds	r3, #9
 8004f90:	b2d9      	uxtb	r1, r3
 8004f92:	2301      	movs	r3, #1
 8004f94:	220d      	movs	r2, #13
 8004f96:	202f      	movs	r0, #47	@ 0x2f
 8004f98:	f7fc fc92 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("vv", 6 + str_lenght + 8, 13 * 1, 1);
 8004f9c:	4b32      	ldr	r3, [pc, #200]	@ (8005068 <BuildFrame+0x12fc>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	330e      	adds	r3, #14
 8004fa2:	b2d9      	uxtb	r1, r3
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	220d      	movs	r2, #13
 8004fa8:	4830      	ldr	r0, [pc, #192]	@ (800506c <BuildFrame+0x1300>)
 8004faa:	f7fc fc51 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('/', 6 + str_lenght + 25, 13 * 1, 1);
 8004fae:	4b2e      	ldr	r3, [pc, #184]	@ (8005068 <BuildFrame+0x12fc>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	331f      	adds	r3, #31
 8004fb4:	b2d9      	uxtb	r1, r3
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	220d      	movs	r2, #13
 8004fba:	202f      	movs	r0, #47	@ 0x2f
 8004fbc:	f7fc fc80 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("uu", 6 + str_lenght + 30, 13 * 1, 1);
 8004fc0:	4b29      	ldr	r3, [pc, #164]	@ (8005068 <BuildFrame+0x12fc>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	3324      	adds	r3, #36	@ 0x24
 8004fc6:	b2d9      	uxtb	r1, r3
 8004fc8:	2301      	movs	r3, #1
 8004fca:	220d      	movs	r2, #13
 8004fcc:	4828      	ldr	r0, [pc, #160]	@ (8005070 <BuildFrame+0x1304>)
 8004fce:	f7fc fc3f 	bl	8001850 <OLED_DrawStr_RuModified>

			switch(pos_cursor)
 8004fd2:	4b21      	ldr	r3, [pc, #132]	@ (8005058 <BuildFrame+0x12ec>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d003      	beq.n	8004fe2 <BuildFrame+0x1276>
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d069      	beq.n	80050b2 <BuildFrame+0x1346>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
						OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 0);
				break;
			}

		break;
 8004fde:	f002 bbe5 	b.w	80077ac <BuildFrame+0x3a40>
						if (f_StSetDate)
 8004fe2:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <BuildFrame+0x1308>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00e      	beq.n	8005008 <BuildFrame+0x129c>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 1);
 8004fea:	2301      	movs	r3, #1
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	2320      	movs	r3, #32
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	2309      	movs	r3, #9
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2323      	movs	r3, #35	@ 0x23
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	211d      	movs	r1, #29
 8004ffc:	2003      	movs	r0, #3
 8004ffe:	f7fc fd35 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							SetDate();
 8005002:	f7fd fae5 	bl	80025d0 <SetDate>
 8005006:	e04b      	b.n	80050a0 <BuildFrame+0x1334>
							if (f_DateIsSet)
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <BuildFrame+0x130c>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d035      	beq.n	800507c <BuildFrame+0x1310>
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8005010:	2300      	movs	r3, #0
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	2320      	movs	r3, #32
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	2309      	movs	r3, #9
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2323      	movs	r3, #35	@ 0x23
 800501e:	2203      	movs	r2, #3
 8005020:	211d      	movs	r1, #29
 8005022:	2003      	movs	r0, #3
 8005024:	f7fc fd22 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
								DrawSetDate(0);
 8005028:	2000      	movs	r0, #0
 800502a:	f7fd fa07 	bl	800243c <DrawSetDate>
 800502e:	e037      	b.n	80050a0 <BuildFrame+0x1334>
 8005030:	20000a12 	.word	0x20000a12
 8005034:	20000a19 	.word	0x20000a19
 8005038:	20000124 	.word	0x20000124
 800503c:	080143bc 	.word	0x080143bc
 8005040:	08014238 	.word	0x08014238
 8005044:	0801423c 	.word	0x0801423c
 8005048:	080143c0 	.word	0x080143c0
 800504c:	080143dc 	.word	0x080143dc
 8005050:	080143e8 	.word	0x080143e8
 8005054:	080143f0 	.word	0x080143f0
 8005058:	20000a3d 	.word	0x20000a3d
 800505c:	080143fc 	.word	0x080143fc
 8005060:	08014400 	.word	0x08014400
 8005064:	08014414 	.word	0x08014414
 8005068:	20000a3e 	.word	0x20000a3e
 800506c:	08014420 	.word	0x08014420
 8005070:	08014424 	.word	0x08014424
 8005074:	200009ed 	.word	0x200009ed
 8005078:	200009f2 	.word	0x200009f2
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 800507c:	2300      	movs	r3, #0
 800507e:	9302      	str	r3, [sp, #8]
 8005080:	2320      	movs	r3, #32
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	2309      	movs	r3, #9
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2323      	movs	r3, #35	@ 0x23
 800508a:	2203      	movs	r2, #3
 800508c:	211d      	movs	r1, #29
 800508e:	2003      	movs	r0, #3
 8005090:	f7fc fcec 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
								OLED_DrawStr_EnModified("--/--/--", 16, 13 * 2, 0);
 8005094:	2300      	movs	r3, #0
 8005096:	221a      	movs	r2, #26
 8005098:	2110      	movs	r1, #16
 800509a:	48bd      	ldr	r0, [pc, #756]	@ (8005390 <BuildFrame+0x1624>)
 800509c:	f7fc fbf4 	bl	8001888 <OLED_DrawStr_EnModified>
						IsSetDateFinished();
 80050a0:	f7fe fc64 	bl	800396c <IsSetDateFinished>
						OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 1);
 80050a4:	2301      	movs	r3, #1
 80050a6:	2227      	movs	r2, #39	@ 0x27
 80050a8:	210c      	movs	r1, #12
 80050aa:	48ba      	ldr	r0, [pc, #744]	@ (8005394 <BuildFrame+0x1628>)
 80050ac:	f7fc fbd0 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80050b0:	e022      	b.n	80050f8 <BuildFrame+0x138c>
						IsSetDateFinished();
 80050b2:	f7fe fc5b 	bl	800396c <IsSetDateFinished>
						if (f_DateIsSet)
 80050b6:	4bb8      	ldr	r3, [pc, #736]	@ (8005398 <BuildFrame+0x162c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <BuildFrame+0x135a>
							DrawSetDate(1);
 80050be:	2001      	movs	r0, #1
 80050c0:	f7fd f9bc 	bl	800243c <DrawSetDate>
 80050c4:	e005      	b.n	80050d2 <BuildFrame+0x1366>
							OLED_DrawStr_EnModified("--/--/--", 16, 13 * 2, 1);
 80050c6:	2301      	movs	r3, #1
 80050c8:	221a      	movs	r2, #26
 80050ca:	2110      	movs	r1, #16
 80050cc:	48b0      	ldr	r0, [pc, #704]	@ (8005390 <BuildFrame+0x1624>)
 80050ce:	f7fc fbdb 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 80050d2:	2300      	movs	r3, #0
 80050d4:	9302      	str	r3, [sp, #8]
 80050d6:	232d      	movs	r3, #45	@ 0x2d
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	2309      	movs	r3, #9
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2330      	movs	r3, #48	@ 0x30
 80050e0:	2203      	movs	r2, #3
 80050e2:	212a      	movs	r1, #42	@ 0x2a
 80050e4:	2003      	movs	r0, #3
 80050e6:	f7fc fcc1 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Lfktt", 12, 13 * 3, 0);
 80050ea:	2300      	movs	r3, #0
 80050ec:	2227      	movs	r2, #39	@ 0x27
 80050ee:	210c      	movs	r1, #12
 80050f0:	48a8      	ldr	r0, [pc, #672]	@ (8005394 <BuildFrame+0x1628>)
 80050f2:	f7fc fbad 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80050f6:	bf00      	nop
		break;
 80050f8:	f002 bb58 	b.w	80077ac <BuildFrame+0x3a40>
			// Информационная часть - отрисовывается
			// независимо от положения курсора

			// Установите день
			// недели
			OLED_DrawStr_RuModified("Ecnfyjdbnt ltym", 12, 13 * 0, 1);
 80050fc:	2301      	movs	r3, #1
 80050fe:	2200      	movs	r2, #0
 8005100:	210c      	movs	r1, #12
 8005102:	48a6      	ldr	r0, [pc, #664]	@ (800539c <BuildFrame+0x1630>)
 8005104:	f7fc fba4 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ytltkb", 12, 13 * 1, 1);
 8005108:	2301      	movs	r3, #1
 800510a:	220d      	movs	r2, #13
 800510c:	210c      	movs	r1, #12
 800510e:	48a4      	ldr	r0, [pc, #656]	@ (80053a0 <BuildFrame+0x1634>)
 8005110:	f7fc fb9e 	bl	8001850 <OLED_DrawStr_RuModified>

			switch(pos_cursor)
 8005114:	4ba3      	ldr	r3, [pc, #652]	@ (80053a4 <BuildFrame+0x1638>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d078      	beq.n	800520e <BuildFrame+0x14a2>
 800511c:	2b04      	cmp	r3, #4
 800511e:	f300 809f 	bgt.w	8005260 <BuildFrame+0x14f4>
 8005122:	2b02      	cmp	r3, #2
 8005124:	d002      	beq.n	800512c <BuildFrame+0x13c0>
 8005126:	2b03      	cmp	r3, #3
 8005128:	d048      	beq.n	80051bc <BuildFrame+0x1450>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
				break;


				default:
				break;
 800512a:	e099      	b.n	8005260 <BuildFrame+0x14f4>
						if (f_StSetDayOfWeek)
 800512c:	4b9e      	ldr	r3, [pc, #632]	@ (80053a8 <BuildFrame+0x163c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <BuildFrame+0x13e6>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 1);
 8005134:	2301      	movs	r3, #1
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	2320      	movs	r3, #32
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2309      	movs	r3, #9
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2323      	movs	r3, #35	@ 0x23
 8005142:	2203      	movs	r2, #3
 8005144:	211d      	movs	r1, #29
 8005146:	2003      	movs	r0, #3
 8005148:	f7fc fc90 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							SetDayOfWeek();
 800514c:	f7fd fabc 	bl	80026c8 <SetDayOfWeek>
 8005150:	e025      	b.n	800519e <BuildFrame+0x1432>
							if (f_DayOfWeekIsSet)
 8005152:	4b96      	ldr	r3, [pc, #600]	@ (80053ac <BuildFrame+0x1640>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <BuildFrame+0x140e>
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 800515a:	2300      	movs	r3, #0
 800515c:	9302      	str	r3, [sp, #8]
 800515e:	2320      	movs	r3, #32
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	2309      	movs	r3, #9
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	2323      	movs	r3, #35	@ 0x23
 8005168:	2203      	movs	r2, #3
 800516a:	211d      	movs	r1, #29
 800516c:	2003      	movs	r0, #3
 800516e:	f7fc fc7d 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
								DrawSetDayOfWeek(0);
 8005172:	2000      	movs	r0, #0
 8005174:	f7fd fa46 	bl	8002604 <DrawSetDayOfWeek>
 8005178:	e011      	b.n	800519e <BuildFrame+0x1432>
								OLED_DrawStr_EnModified("----", 16, 13 * 2, 0);
 800517a:	2300      	movs	r3, #0
 800517c:	221a      	movs	r2, #26
 800517e:	2110      	movs	r1, #16
 8005180:	488b      	ldr	r0, [pc, #556]	@ (80053b0 <BuildFrame+0x1644>)
 8005182:	f7fc fb81 	bl	8001888 <OLED_DrawStr_EnModified>
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8005186:	2300      	movs	r3, #0
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	2320      	movs	r3, #32
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	2309      	movs	r3, #9
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2323      	movs	r3, #35	@ 0x23
 8005194:	2203      	movs	r2, #3
 8005196:	211d      	movs	r1, #29
 8005198:	2003      	movs	r0, #3
 800519a:	f7fc fc67 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						IsSetDayOfWeekFinished();
 800519e:	f7fe fc07 	bl	80039b0 <IsSetDayOfWeekFinished>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 1);
 80051a2:	2301      	movs	r3, #1
 80051a4:	2227      	movs	r2, #39	@ 0x27
 80051a6:	210c      	movs	r1, #12
 80051a8:	4882      	ldr	r0, [pc, #520]	@ (80053b4 <BuildFrame+0x1648>)
 80051aa:	f7fc fb51 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 1);
 80051ae:	2301      	movs	r3, #1
 80051b0:	2234      	movs	r2, #52	@ 0x34
 80051b2:	210c      	movs	r1, #12
 80051b4:	4880      	ldr	r0, [pc, #512]	@ (80053b8 <BuildFrame+0x164c>)
 80051b6:	f7fc fb4b 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80051ba:	e052      	b.n	8005262 <BuildFrame+0x14f6>
						IsSetDayOfWeekFinished();
 80051bc:	f7fe fbf8 	bl	80039b0 <IsSetDayOfWeekFinished>
						if (f_DayOfWeekIsSet)
 80051c0:	4b7a      	ldr	r3, [pc, #488]	@ (80053ac <BuildFrame+0x1640>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <BuildFrame+0x1464>
							DrawSetDayOfWeek(1);
 80051c8:	2001      	movs	r0, #1
 80051ca:	f7fd fa1b 	bl	8002604 <DrawSetDayOfWeek>
 80051ce:	e005      	b.n	80051dc <BuildFrame+0x1470>
							OLED_DrawStr_EnModified("----", 16, 13 * 2, 1);
 80051d0:	2301      	movs	r3, #1
 80051d2:	221a      	movs	r2, #26
 80051d4:	2110      	movs	r1, #16
 80051d6:	4876      	ldr	r0, [pc, #472]	@ (80053b0 <BuildFrame+0x1644>)
 80051d8:	f7fc fb56 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 0);
 80051dc:	2300      	movs	r3, #0
 80051de:	2227      	movs	r2, #39	@ 0x27
 80051e0:	210c      	movs	r1, #12
 80051e2:	4874      	ldr	r0, [pc, #464]	@ (80053b4 <BuildFrame+0x1648>)
 80051e4:	f7fc fb34 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 80051e8:	2300      	movs	r3, #0
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	232d      	movs	r3, #45	@ 0x2d
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	2309      	movs	r3, #9
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2330      	movs	r3, #48	@ 0x30
 80051f6:	2203      	movs	r2, #3
 80051f8:	212a      	movs	r1, #42	@ 0x2a
 80051fa:	2003      	movs	r0, #3
 80051fc:	f7fc fc36 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 1);
 8005200:	2301      	movs	r3, #1
 8005202:	2234      	movs	r2, #52	@ 0x34
 8005204:	210c      	movs	r1, #12
 8005206:	486c      	ldr	r0, [pc, #432]	@ (80053b8 <BuildFrame+0x164c>)
 8005208:	f7fc fb22 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 800520c:	e029      	b.n	8005262 <BuildFrame+0x14f6>
						IsSetDayOfWeekFinished();
 800520e:	f7fe fbcf 	bl	80039b0 <IsSetDayOfWeekFinished>
						if (f_DayOfWeekIsSet)
 8005212:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <BuildFrame+0x1640>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <BuildFrame+0x14b6>
							DrawSetDayOfWeek(1);
 800521a:	2001      	movs	r0, #1
 800521c:	f7fd f9f2 	bl	8002604 <DrawSetDayOfWeek>
 8005220:	e005      	b.n	800522e <BuildFrame+0x14c2>
							OLED_DrawStr_EnModified("----", 16, 13 * 2, 1);
 8005222:	2301      	movs	r3, #1
 8005224:	221a      	movs	r2, #26
 8005226:	2110      	movs	r1, #16
 8005228:	4861      	ldr	r0, [pc, #388]	@ (80053b0 <BuildFrame+0x1644>)
 800522a:	f7fc fb2d 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 1);
 800522e:	2301      	movs	r3, #1
 8005230:	2227      	movs	r2, #39	@ 0x27
 8005232:	210c      	movs	r1, #12
 8005234:	485f      	ldr	r0, [pc, #380]	@ (80053b4 <BuildFrame+0x1648>)
 8005236:	f7fc fb0b 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 0);
 800523a:	2300      	movs	r3, #0
 800523c:	2234      	movs	r2, #52	@ 0x34
 800523e:	210c      	movs	r1, #12
 8005240:	485d      	ldr	r0, [pc, #372]	@ (80053b8 <BuildFrame+0x164c>)
 8005242:	f7fc fb05 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8005246:	2300      	movs	r3, #0
 8005248:	9302      	str	r3, [sp, #8]
 800524a:	233a      	movs	r3, #58	@ 0x3a
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	2309      	movs	r3, #9
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	233d      	movs	r3, #61	@ 0x3d
 8005254:	2203      	movs	r2, #3
 8005256:	2137      	movs	r1, #55	@ 0x37
 8005258:	2003      	movs	r0, #3
 800525a:	f7fc fc07 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
				break;
 800525e:	e000      	b.n	8005262 <BuildFrame+0x14f6>
				break;
 8005260:	bf00      	nop
			}

		break;
 8005262:	f002 baa3 	b.w	80077ac <BuildFrame+0x3a40>
				// �?нформационная часть - отрисовывается
				// независимо от положения курсора

				// Установите
				// текущее время
				OLED_DrawStr_RuModified("Ecnfyjdbnt", 12, 13 * 0, 1);
 8005266:	2301      	movs	r3, #1
 8005268:	2200      	movs	r2, #0
 800526a:	210c      	movs	r1, #12
 800526c:	4853      	ldr	r0, [pc, #332]	@ (80053bc <BuildFrame+0x1650>)
 800526e:	f7fc faef 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified("ntreott dhtvz", 12, 13 * 1, 1);
 8005272:	2301      	movs	r3, #1
 8005274:	220d      	movs	r2, #13
 8005276:	210c      	movs	r1, #12
 8005278:	4851      	ldr	r0, [pc, #324]	@ (80053c0 <BuildFrame+0x1654>)
 800527a:	f7fc fae9 	bl	8001850 <OLED_DrawStr_RuModified>

				switch(pos_cursor)
 800527e:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <BuildFrame+0x1638>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	f000 8103 	beq.w	800548e <BuildFrame+0x1722>
 8005288:	2b04      	cmp	r3, #4
 800528a:	f300 815b 	bgt.w	8005544 <BuildFrame+0x17d8>
 800528e:	2b02      	cmp	r3, #2
 8005290:	d003      	beq.n	800529a <BuildFrame+0x152e>
 8005292:	2b03      	cmp	r3, #3
 8005294:	f000 80a0 	beq.w	80053d8 <BuildFrame+0x166c>

					break;


					default:
					break;
 8005298:	e154      	b.n	8005544 <BuildFrame+0x17d8>
						if (f_StSetTime)
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <BuildFrame+0x1658>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00e      	beq.n	80052c0 <BuildFrame+0x1554>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 1);
 80052a2:	2301      	movs	r3, #1
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	2320      	movs	r3, #32
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2309      	movs	r3, #9
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2323      	movs	r3, #35	@ 0x23
 80052b0:	2203      	movs	r2, #3
 80052b2:	211d      	movs	r1, #29
 80052b4:	2003      	movs	r0, #3
 80052b6:	f7fc fbd9 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							SetTimeSMH();
 80052ba:	f7fd fbf5 	bl	8002aa8 <SetTimeSMH>
 80052be:	e057      	b.n	8005370 <BuildFrame+0x1604>
							if (f_TimeIsSet)
 80052c0:	4b41      	ldr	r3, [pc, #260]	@ (80053c8 <BuildFrame+0x165c>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d012      	beq.n	80052ee <BuildFrame+0x1582>
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 80052c8:	2300      	movs	r3, #0
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	2320      	movs	r3, #32
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	2309      	movs	r3, #9
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2323      	movs	r3, #35	@ 0x23
 80052d6:	2203      	movs	r2, #3
 80052d8:	211d      	movs	r1, #29
 80052da:	2003      	movs	r0, #3
 80052dc:	f7fc fbc6 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
								DrawSetTime(ptr_timeSetDate, 0);
 80052e0:	4b3a      	ldr	r3, [pc, #232]	@ (80053cc <BuildFrame+0x1660>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd fa82 	bl	80027f0 <DrawSetTime>
 80052ec:	e040      	b.n	8005370 <BuildFrame+0x1604>
								OLED_DrawStr_EnModified("--", 16, 13 * 2, 0);
 80052ee:	2300      	movs	r3, #0
 80052f0:	221a      	movs	r2, #26
 80052f2:	2110      	movs	r1, #16
 80052f4:	4836      	ldr	r0, [pc, #216]	@ (80053d0 <BuildFrame+0x1664>)
 80052f6:	f7fc fac7 	bl	8001888 <OLED_DrawStr_EnModified>
								str_lenght = OLED_GetWidthStr("--");
 80052fa:	4835      	ldr	r0, [pc, #212]	@ (80053d0 <BuildFrame+0x1664>)
 80052fc:	f7fb fbea 	bl	8000ad4 <OLED_GetWidthStr>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	4b33      	ldr	r3, [pc, #204]	@ (80053d4 <BuildFrame+0x1668>)
 8005306:	701a      	strb	r2, [r3, #0]
								OLED_DrawChar_Modified(':', 16 + str_lenght + 4 * 1, 13 * 2, 0);
 8005308:	4b32      	ldr	r3, [pc, #200]	@ (80053d4 <BuildFrame+0x1668>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	b2d9      	uxtb	r1, r3
 8005310:	2300      	movs	r3, #0
 8005312:	221a      	movs	r2, #26
 8005314:	203a      	movs	r0, #58	@ 0x3a
 8005316:	f7fc fad3 	bl	80018c0 <OLED_DrawChar_Modified>
								OLED_DrawStr_EnModified("--", 16 + str_lenght + 4 * 2, 13 * 2, 0);
 800531a:	4b2e      	ldr	r3, [pc, #184]	@ (80053d4 <BuildFrame+0x1668>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	3318      	adds	r3, #24
 8005320:	b2d9      	uxtb	r1, r3
 8005322:	2300      	movs	r3, #0
 8005324:	221a      	movs	r2, #26
 8005326:	482a      	ldr	r0, [pc, #168]	@ (80053d0 <BuildFrame+0x1664>)
 8005328:	f7fc faae 	bl	8001888 <OLED_DrawStr_EnModified>
								OLED_DrawChar_Modified(':', 16 + str_lenght * 2 + 4 * 3, 13 * 2, 0);
 800532c:	4b29      	ldr	r3, [pc, #164]	@ (80053d4 <BuildFrame+0x1668>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	330e      	adds	r3, #14
 8005332:	b2db      	uxtb	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	b2d9      	uxtb	r1, r3
 8005338:	2300      	movs	r3, #0
 800533a:	221a      	movs	r2, #26
 800533c:	203a      	movs	r0, #58	@ 0x3a
 800533e:	f7fc fabf 	bl	80018c0 <OLED_DrawChar_Modified>
								OLED_DrawStr_EnModified("--", 16 + str_lenght * 2 + 4 * 4, 13 * 2, 0);
 8005342:	4b24      	ldr	r3, [pc, #144]	@ (80053d4 <BuildFrame+0x1668>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	3310      	adds	r3, #16
 8005348:	b2db      	uxtb	r3, r3
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	b2d9      	uxtb	r1, r3
 800534e:	2300      	movs	r3, #0
 8005350:	221a      	movs	r2, #26
 8005352:	481f      	ldr	r0, [pc, #124]	@ (80053d0 <BuildFrame+0x1664>)
 8005354:	f7fc fa98 	bl	8001888 <OLED_DrawStr_EnModified>
								OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8005358:	2300      	movs	r3, #0
 800535a:	9302      	str	r3, [sp, #8]
 800535c:	2320      	movs	r3, #32
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	2309      	movs	r3, #9
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2323      	movs	r3, #35	@ 0x23
 8005366:	2203      	movs	r2, #3
 8005368:	211d      	movs	r1, #29
 800536a:	2003      	movs	r0, #3
 800536c:	f7fc fb7e 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						IsSetTimeFinished();
 8005370:	f7fe fba6 	bl	8003ac0 <IsSetTimeFinished>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 1);
 8005374:	2301      	movs	r3, #1
 8005376:	2227      	movs	r2, #39	@ 0x27
 8005378:	210c      	movs	r1, #12
 800537a:	480e      	ldr	r0, [pc, #56]	@ (80053b4 <BuildFrame+0x1648>)
 800537c:	f7fc fa68 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 1);
 8005380:	2301      	movs	r3, #1
 8005382:	2234      	movs	r2, #52	@ 0x34
 8005384:	210c      	movs	r1, #12
 8005386:	480c      	ldr	r0, [pc, #48]	@ (80053b8 <BuildFrame+0x164c>)
 8005388:	f7fc fa62 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 800538c:	e0db      	b.n	8005546 <BuildFrame+0x17da>
 800538e:	bf00      	nop
 8005390:	08014428 	.word	0x08014428
 8005394:	080143c0 	.word	0x080143c0
 8005398:	200009f2 	.word	0x200009f2
 800539c:	08014434 	.word	0x08014434
 80053a0:	08014444 	.word	0x08014444
 80053a4:	20000a3d 	.word	0x20000a3d
 80053a8:	200009ee 	.word	0x200009ee
 80053ac:	200009f5 	.word	0x200009f5
 80053b0:	0801444c 	.word	0x0801444c
 80053b4:	08014454 	.word	0x08014454
 80053b8:	08014460 	.word	0x08014460
 80053bc:	080143a8 	.word	0x080143a8
 80053c0:	08014468 	.word	0x08014468
 80053c4:	200009ef 	.word	0x200009ef
 80053c8:	200009f8 	.word	0x200009f8
 80053cc:	2000011c 	.word	0x2000011c
 80053d0:	080143bc 	.word	0x080143bc
 80053d4:	20000a3e 	.word	0x20000a3e
						IsSetTimeFinished();
 80053d8:	f7fe fb72 	bl	8003ac0 <IsSetTimeFinished>
						if (f_TimeIsSet)
 80053dc:	4b94      	ldr	r3, [pc, #592]	@ (8005630 <BuildFrame+0x18c4>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <BuildFrame+0x1686>
							DrawSetTime(ptr_timeSetDate, 1);
 80053e4:	4b93      	ldr	r3, [pc, #588]	@ (8005634 <BuildFrame+0x18c8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd fa00 	bl	80027f0 <DrawSetTime>
 80053f0:	e034      	b.n	800545c <BuildFrame+0x16f0>
							OLED_DrawStr_EnModified("--", 16, 13 * 2, 1);
 80053f2:	2301      	movs	r3, #1
 80053f4:	221a      	movs	r2, #26
 80053f6:	2110      	movs	r1, #16
 80053f8:	488f      	ldr	r0, [pc, #572]	@ (8005638 <BuildFrame+0x18cc>)
 80053fa:	f7fc fa45 	bl	8001888 <OLED_DrawStr_EnModified>
							str_lenght = OLED_GetWidthStr("--");
 80053fe:	488e      	ldr	r0, [pc, #568]	@ (8005638 <BuildFrame+0x18cc>)
 8005400:	f7fb fb68 	bl	8000ad4 <OLED_GetWidthStr>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	4b8c      	ldr	r3, [pc, #560]	@ (800563c <BuildFrame+0x18d0>)
 800540a:	701a      	strb	r2, [r3, #0]
							OLED_DrawChar_Modified(':', 16 + str_lenght + 4 * 1, 13 * 2, 1);
 800540c:	4b8b      	ldr	r3, [pc, #556]	@ (800563c <BuildFrame+0x18d0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	b2d9      	uxtb	r1, r3
 8005414:	2301      	movs	r3, #1
 8005416:	221a      	movs	r2, #26
 8005418:	203a      	movs	r0, #58	@ 0x3a
 800541a:	f7fc fa51 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght + 4 * 2, 13 * 2, 1);
 800541e:	4b87      	ldr	r3, [pc, #540]	@ (800563c <BuildFrame+0x18d0>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3318      	adds	r3, #24
 8005424:	b2d9      	uxtb	r1, r3
 8005426:	2301      	movs	r3, #1
 8005428:	221a      	movs	r2, #26
 800542a:	4883      	ldr	r0, [pc, #524]	@ (8005638 <BuildFrame+0x18cc>)
 800542c:	f7fc fa2c 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawChar_Modified(':', 16 + str_lenght * 2 + 4 * 3, 13 * 2, 1);
 8005430:	4b82      	ldr	r3, [pc, #520]	@ (800563c <BuildFrame+0x18d0>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	330e      	adds	r3, #14
 8005436:	b2db      	uxtb	r3, r3
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	b2d9      	uxtb	r1, r3
 800543c:	2301      	movs	r3, #1
 800543e:	221a      	movs	r2, #26
 8005440:	203a      	movs	r0, #58	@ 0x3a
 8005442:	f7fc fa3d 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght * 2 + 4 * 4, 13 * 2, 1);
 8005446:	4b7d      	ldr	r3, [pc, #500]	@ (800563c <BuildFrame+0x18d0>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	3310      	adds	r3, #16
 800544c:	b2db      	uxtb	r3, r3
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	b2d9      	uxtb	r1, r3
 8005452:	2301      	movs	r3, #1
 8005454:	221a      	movs	r2, #26
 8005456:	4878      	ldr	r0, [pc, #480]	@ (8005638 <BuildFrame+0x18cc>)
 8005458:	f7fc fa16 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 0);
 800545c:	2300      	movs	r3, #0
 800545e:	2227      	movs	r2, #39	@ 0x27
 8005460:	210c      	movs	r1, #12
 8005462:	4877      	ldr	r0, [pc, #476]	@ (8005640 <BuildFrame+0x18d4>)
 8005464:	f7fc f9f4 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8005468:	2300      	movs	r3, #0
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	232d      	movs	r3, #45	@ 0x2d
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2309      	movs	r3, #9
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2330      	movs	r3, #48	@ 0x30
 8005476:	2203      	movs	r2, #3
 8005478:	212a      	movs	r1, #42	@ 0x2a
 800547a:	2003      	movs	r0, #3
 800547c:	f7fc faf6 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 1);
 8005480:	2301      	movs	r3, #1
 8005482:	2234      	movs	r2, #52	@ 0x34
 8005484:	210c      	movs	r1, #12
 8005486:	486f      	ldr	r0, [pc, #444]	@ (8005644 <BuildFrame+0x18d8>)
 8005488:	f7fc f9e2 	bl	8001850 <OLED_DrawStr_RuModified>
					break;
 800548c:	e05b      	b.n	8005546 <BuildFrame+0x17da>
						IsSetTimeFinished();
 800548e:	f7fe fb17 	bl	8003ac0 <IsSetTimeFinished>
						if (f_TimeIsSet)
 8005492:	4b67      	ldr	r3, [pc, #412]	@ (8005630 <BuildFrame+0x18c4>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <BuildFrame+0x173c>
							DrawSetTime(ptr_timeSetDate, 1);
 800549a:	4b66      	ldr	r3, [pc, #408]	@ (8005634 <BuildFrame+0x18c8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2101      	movs	r1, #1
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fd f9a5 	bl	80027f0 <DrawSetTime>
 80054a6:	e034      	b.n	8005512 <BuildFrame+0x17a6>
							OLED_DrawStr_EnModified("--", 16, 13 * 2, 1);
 80054a8:	2301      	movs	r3, #1
 80054aa:	221a      	movs	r2, #26
 80054ac:	2110      	movs	r1, #16
 80054ae:	4862      	ldr	r0, [pc, #392]	@ (8005638 <BuildFrame+0x18cc>)
 80054b0:	f7fc f9ea 	bl	8001888 <OLED_DrawStr_EnModified>
							str_lenght = OLED_GetWidthStr("--");
 80054b4:	4860      	ldr	r0, [pc, #384]	@ (8005638 <BuildFrame+0x18cc>)
 80054b6:	f7fb fb0d 	bl	8000ad4 <OLED_GetWidthStr>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	4b5f      	ldr	r3, [pc, #380]	@ (800563c <BuildFrame+0x18d0>)
 80054c0:	701a      	strb	r2, [r3, #0]
							OLED_DrawChar_Modified(':', 16 + str_lenght + 4 * 1, 13 * 2, 1);
 80054c2:	4b5e      	ldr	r3, [pc, #376]	@ (800563c <BuildFrame+0x18d0>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	b2d9      	uxtb	r1, r3
 80054ca:	2301      	movs	r3, #1
 80054cc:	221a      	movs	r2, #26
 80054ce:	203a      	movs	r0, #58	@ 0x3a
 80054d0:	f7fc f9f6 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght + 4 * 2, 13 * 2, 1);
 80054d4:	4b59      	ldr	r3, [pc, #356]	@ (800563c <BuildFrame+0x18d0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3318      	adds	r3, #24
 80054da:	b2d9      	uxtb	r1, r3
 80054dc:	2301      	movs	r3, #1
 80054de:	221a      	movs	r2, #26
 80054e0:	4855      	ldr	r0, [pc, #340]	@ (8005638 <BuildFrame+0x18cc>)
 80054e2:	f7fc f9d1 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawChar_Modified(':', 16 + str_lenght * 2 + 4 * 3, 13 * 2, 1);
 80054e6:	4b55      	ldr	r3, [pc, #340]	@ (800563c <BuildFrame+0x18d0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	330e      	adds	r3, #14
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	b2d9      	uxtb	r1, r3
 80054f2:	2301      	movs	r3, #1
 80054f4:	221a      	movs	r2, #26
 80054f6:	203a      	movs	r0, #58	@ 0x3a
 80054f8:	f7fc f9e2 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawStr_EnModified("--", 16 + str_lenght * 2 + 4 * 4, 13 * 2, 1);
 80054fc:	4b4f      	ldr	r3, [pc, #316]	@ (800563c <BuildFrame+0x18d0>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	3310      	adds	r3, #16
 8005502:	b2db      	uxtb	r3, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b2d9      	uxtb	r1, r3
 8005508:	2301      	movs	r3, #1
 800550a:	221a      	movs	r2, #26
 800550c:	484a      	ldr	r0, [pc, #296]	@ (8005638 <BuildFrame+0x18cc>)
 800550e:	f7fc f9bb 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 3, 1);
 8005512:	2301      	movs	r3, #1
 8005514:	2227      	movs	r2, #39	@ 0x27
 8005516:	210c      	movs	r1, #12
 8005518:	4849      	ldr	r0, [pc, #292]	@ (8005640 <BuildFrame+0x18d4>)
 800551a:	f7fc f999 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 0);
 800551e:	2300      	movs	r3, #0
 8005520:	2234      	movs	r2, #52	@ 0x34
 8005522:	210c      	movs	r1, #12
 8005524:	4847      	ldr	r0, [pc, #284]	@ (8005644 <BuildFrame+0x18d8>)
 8005526:	f7fc f993 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 800552a:	2300      	movs	r3, #0
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	233a      	movs	r3, #58	@ 0x3a
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	2309      	movs	r3, #9
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	233d      	movs	r3, #61	@ 0x3d
 8005538:	2203      	movs	r2, #3
 800553a:	2137      	movs	r1, #55	@ 0x37
 800553c:	2003      	movs	r0, #3
 800553e:	f7fc fa95 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					break;
 8005542:	e000      	b.n	8005546 <BuildFrame+0x17da>
					break;
 8005544:	bf00      	nop
				}

		break;
 8005546:	f002 b931 	b.w	80077ac <BuildFrame+0x3a40>


		// 15. Кадр текущие параметры
		case 15:

			switch(pos_cursor)
 800554a:	4b3f      	ldr	r3, [pc, #252]	@ (8005648 <BuildFrame+0x18dc>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b04      	cmp	r3, #4
 8005550:	f000 80f2 	beq.w	8005738 <BuildFrame+0x19cc>
 8005554:	2b04      	cmp	r3, #4
 8005556:	f302 8112 	bgt.w	800777e <BuildFrame+0x3a12>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <BuildFrame+0x17fc>
 800555e:	2b02      	cmp	r3, #2
 8005560:	f000 8086 	beq.w	8005670 <BuildFrame+0x1904>
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 4, 0);

				break;
			}

		break;
 8005564:	f002 b90b 	b.w	800777e <BuildFrame+0x3a12>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8005568:	2300      	movs	r3, #0
 800556a:	9302      	str	r3, [sp, #8]
 800556c:	230d      	movs	r3, #13
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	2309      	movs	r3, #9
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2310      	movs	r3, #16
 8005576:	2203      	movs	r2, #3
 8005578:	210a      	movs	r1, #10
 800557a:	2003      	movs	r0, #3
 800557c:	f7fc fa76 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Ntreofz", 12, 13 * 0, 0);
 8005580:	2300      	movs	r3, #0
 8005582:	2200      	movs	r2, #0
 8005584:	210c      	movs	r1, #12
 8005586:	4831      	ldr	r0, [pc, #196]	@ (800564c <BuildFrame+0x18e0>)
 8005588:	f7fc f962 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnf", 12, 13 * 1, 0);
 800558c:	2300      	movs	r3, #0
 800558e:	220d      	movs	r2, #13
 8005590:	210c      	movs	r1, #12
 8005592:	482f      	ldr	r0, [pc, #188]	@ (8005650 <BuildFrame+0x18e4>)
 8005594:	f7fc f95c 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("lfnf");
 8005598:	482d      	ldr	r0, [pc, #180]	@ (8005650 <BuildFrame+0x18e4>)
 800559a:	f7fb fa9b 	bl	8000ad4 <OLED_GetWidthStr>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b26      	ldr	r3, [pc, #152]	@ (800563c <BuildFrame+0x18d0>)
 80055a4:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("b", 12 + str_lenght + 3, 13 * 1, 0);
 80055a6:	4b25      	ldr	r3, [pc, #148]	@ (800563c <BuildFrame+0x18d0>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	330f      	adds	r3, #15
 80055ac:	b2d9      	uxtb	r1, r3
 80055ae:	2300      	movs	r3, #0
 80055b0:	220d      	movs	r2, #13
 80055b2:	4828      	ldr	r0, [pc, #160]	@ (8005654 <BuildFrame+0x18e8>)
 80055b4:	f7fc f94c 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("dhtvz", 12 + str_lenght + 3 + 9, 13 * 1, 0);
 80055b8:	4b20      	ldr	r3, [pc, #128]	@ (800563c <BuildFrame+0x18d0>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	3318      	adds	r3, #24
 80055be:	b2d9      	uxtb	r1, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	220d      	movs	r2, #13
 80055c4:	4824      	ldr	r0, [pc, #144]	@ (8005658 <BuildFrame+0x18ec>)
 80055c6:	f7fc f943 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Ntreobt", 12, 13 * 2, 1);
 80055ca:	2301      	movs	r3, #1
 80055cc:	221a      	movs	r2, #26
 80055ce:	210c      	movs	r1, #12
 80055d0:	4822      	ldr	r0, [pc, #136]	@ (800565c <BuildFrame+0x18f0>)
 80055d2:	f7fc f93d 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13 * 3, 1);
 80055d6:	2301      	movs	r3, #1
 80055d8:	2227      	movs	r2, #39	@ 0x27
 80055da:	210c      	movs	r1, #12
 80055dc:	4820      	ldr	r0, [pc, #128]	@ (8005660 <BuildFrame+0x18f4>)
 80055de:	f7fc f937 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("gfhfvtnhs");
 80055e2:	481f      	ldr	r0, [pc, #124]	@ (8005660 <BuildFrame+0x18f4>)
 80055e4:	f7fb fa76 	bl	8000ad4 <OLED_GetWidthStr>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b13      	ldr	r3, [pc, #76]	@ (800563c <BuildFrame+0x18d0>)
 80055ee:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 3, 1);
 80055f0:	4b12      	ldr	r3, [pc, #72]	@ (800563c <BuildFrame+0x18d0>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	330f      	adds	r3, #15
 80055f6:	b2d9      	uxtb	r1, r3
 80055f8:	2301      	movs	r3, #1
 80055fa:	2227      	movs	r2, #39	@ 0x27
 80055fc:	4819      	ldr	r0, [pc, #100]	@ (8005664 <BuildFrame+0x18f8>)
 80055fe:	f7fc f927 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 4, 1);
 8005602:	2301      	movs	r3, #1
 8005604:	2234      	movs	r2, #52	@ 0x34
 8005606:	210c      	movs	r1, #12
 8005608:	4817      	ldr	r0, [pc, #92]	@ (8005668 <BuildFrame+0x18fc>)
 800560a:	f7fc f921 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 800560e:	4816      	ldr	r0, [pc, #88]	@ (8005668 <BuildFrame+0x18fc>)
 8005610:	f7fb fa60 	bl	8000ad4 <OLED_GetWidthStr>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	4b08      	ldr	r3, [pc, #32]	@ (800563c <BuildFrame+0x18d0>)
 800561a:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 4, 1);
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <BuildFrame+0x18d0>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	330f      	adds	r3, #15
 8005622:	b2d9      	uxtb	r1, r3
 8005624:	2301      	movs	r3, #1
 8005626:	2234      	movs	r2, #52	@ 0x34
 8005628:	4810      	ldr	r0, [pc, #64]	@ (800566c <BuildFrame+0x1900>)
 800562a:	f7fc f911 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 800562e:	e0e7      	b.n	8005800 <BuildFrame+0x1a94>
 8005630:	200009f8 	.word	0x200009f8
 8005634:	2000011c 	.word	0x2000011c
 8005638:	080143bc 	.word	0x080143bc
 800563c:	20000a3e 	.word	0x20000a3e
 8005640:	08014454 	.word	0x08014454
 8005644:	08014460 	.word	0x08014460
 8005648:	20000a3d 	.word	0x20000a3d
 800564c:	08014478 	.word	0x08014478
 8005650:	08014480 	.word	0x08014480
 8005654:	08014488 	.word	0x08014488
 8005658:	080143b4 	.word	0x080143b4
 800565c:	08014260 	.word	0x08014260
 8005660:	08014268 	.word	0x08014268
 8005664:	08014258 	.word	0x08014258
 8005668:	0801448c 	.word	0x0801448c
 800566c:	08014384 	.word	0x08014384
					OLED_DrawStr_RuModified("Ntreofz", 12, 13 * 0, 1);
 8005670:	2301      	movs	r3, #1
 8005672:	2200      	movs	r2, #0
 8005674:	210c      	movs	r1, #12
 8005676:	48a3      	ldr	r0, [pc, #652]	@ (8005904 <BuildFrame+0x1b98>)
 8005678:	f7fc f8ea 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnf", 12, 13 * 1, 1);
 800567c:	2301      	movs	r3, #1
 800567e:	220d      	movs	r2, #13
 8005680:	210c      	movs	r1, #12
 8005682:	48a1      	ldr	r0, [pc, #644]	@ (8005908 <BuildFrame+0x1b9c>)
 8005684:	f7fc f8e4 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("lfnf");
 8005688:	489f      	ldr	r0, [pc, #636]	@ (8005908 <BuildFrame+0x1b9c>)
 800568a:	f7fb fa23 	bl	8000ad4 <OLED_GetWidthStr>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	4b9e      	ldr	r3, [pc, #632]	@ (800590c <BuildFrame+0x1ba0>)
 8005694:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("b", 12 + str_lenght + 3, 13 * 1, 1);
 8005696:	4b9d      	ldr	r3, [pc, #628]	@ (800590c <BuildFrame+0x1ba0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	330f      	adds	r3, #15
 800569c:	b2d9      	uxtb	r1, r3
 800569e:	2301      	movs	r3, #1
 80056a0:	220d      	movs	r2, #13
 80056a2:	489b      	ldr	r0, [pc, #620]	@ (8005910 <BuildFrame+0x1ba4>)
 80056a4:	f7fc f8d4 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("dhtvz", 12 + str_lenght + 3 + 9, 13 * 1, 1);
 80056a8:	4b98      	ldr	r3, [pc, #608]	@ (800590c <BuildFrame+0x1ba0>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	3318      	adds	r3, #24
 80056ae:	b2d9      	uxtb	r1, r3
 80056b0:	2301      	movs	r3, #1
 80056b2:	220d      	movs	r2, #13
 80056b4:	4897      	ldr	r0, [pc, #604]	@ (8005914 <BuildFrame+0x1ba8>)
 80056b6:	f7fc f8cb 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3 - 3, 3, (int16_t) 13 * 3 + 3, 9, (int16_t) 13 * 3, 0);
 80056ba:	2300      	movs	r3, #0
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	2327      	movs	r3, #39	@ 0x27
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	2309      	movs	r3, #9
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	232a      	movs	r3, #42	@ 0x2a
 80056c8:	2203      	movs	r2, #3
 80056ca:	2124      	movs	r1, #36	@ 0x24
 80056cc:	2003      	movs	r0, #3
 80056ce:	f7fc f9cd 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Ntreobt", 12, 13 * 2, 0);
 80056d2:	2300      	movs	r3, #0
 80056d4:	221a      	movs	r2, #26
 80056d6:	210c      	movs	r1, #12
 80056d8:	488f      	ldr	r0, [pc, #572]	@ (8005918 <BuildFrame+0x1bac>)
 80056da:	f7fc f8b9 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13 * 3, 0);
 80056de:	2300      	movs	r3, #0
 80056e0:	2227      	movs	r2, #39	@ 0x27
 80056e2:	210c      	movs	r1, #12
 80056e4:	488d      	ldr	r0, [pc, #564]	@ (800591c <BuildFrame+0x1bb0>)
 80056e6:	f7fc f8b3 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("gfhfvtnhs");
 80056ea:	488c      	ldr	r0, [pc, #560]	@ (800591c <BuildFrame+0x1bb0>)
 80056ec:	f7fb f9f2 	bl	8000ad4 <OLED_GetWidthStr>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b85      	ldr	r3, [pc, #532]	@ (800590c <BuildFrame+0x1ba0>)
 80056f6:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 3, 0);
 80056f8:	4b84      	ldr	r3, [pc, #528]	@ (800590c <BuildFrame+0x1ba0>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	330f      	adds	r3, #15
 80056fe:	b2d9      	uxtb	r1, r3
 8005700:	2300      	movs	r3, #0
 8005702:	2227      	movs	r2, #39	@ 0x27
 8005704:	4886      	ldr	r0, [pc, #536]	@ (8005920 <BuildFrame+0x1bb4>)
 8005706:	f7fc f8a3 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 4, 1);
 800570a:	2301      	movs	r3, #1
 800570c:	2234      	movs	r2, #52	@ 0x34
 800570e:	210c      	movs	r1, #12
 8005710:	4884      	ldr	r0, [pc, #528]	@ (8005924 <BuildFrame+0x1bb8>)
 8005712:	f7fc f89d 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 8005716:	4883      	ldr	r0, [pc, #524]	@ (8005924 <BuildFrame+0x1bb8>)
 8005718:	f7fb f9dc 	bl	8000ad4 <OLED_GetWidthStr>
 800571c:	4603      	mov	r3, r0
 800571e:	461a      	mov	r2, r3
 8005720:	4b7a      	ldr	r3, [pc, #488]	@ (800590c <BuildFrame+0x1ba0>)
 8005722:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 4, 1);
 8005724:	4b79      	ldr	r3, [pc, #484]	@ (800590c <BuildFrame+0x1ba0>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	330f      	adds	r3, #15
 800572a:	b2d9      	uxtb	r1, r3
 800572c:	2301      	movs	r3, #1
 800572e:	2234      	movs	r2, #52	@ 0x34
 8005730:	487d      	ldr	r0, [pc, #500]	@ (8005928 <BuildFrame+0x1bbc>)
 8005732:	f7fc f88d 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005736:	e063      	b.n	8005800 <BuildFrame+0x1a94>
					OLED_DrawStr_RuModified("Ntreofz", 12, 13 * 0, 1);
 8005738:	2301      	movs	r3, #1
 800573a:	2200      	movs	r2, #0
 800573c:	210c      	movs	r1, #12
 800573e:	4871      	ldr	r0, [pc, #452]	@ (8005904 <BuildFrame+0x1b98>)
 8005740:	f7fc f886 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnf", 12, 13 * 1, 1);
 8005744:	2301      	movs	r3, #1
 8005746:	220d      	movs	r2, #13
 8005748:	210c      	movs	r1, #12
 800574a:	486f      	ldr	r0, [pc, #444]	@ (8005908 <BuildFrame+0x1b9c>)
 800574c:	f7fc f880 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("lfnf");
 8005750:	486d      	ldr	r0, [pc, #436]	@ (8005908 <BuildFrame+0x1b9c>)
 8005752:	f7fb f9bf 	bl	8000ad4 <OLED_GetWidthStr>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	4b6c      	ldr	r3, [pc, #432]	@ (800590c <BuildFrame+0x1ba0>)
 800575c:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("b", 12 + str_lenght + 3, 13 * 1, 1);
 800575e:	4b6b      	ldr	r3, [pc, #428]	@ (800590c <BuildFrame+0x1ba0>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	330f      	adds	r3, #15
 8005764:	b2d9      	uxtb	r1, r3
 8005766:	2301      	movs	r3, #1
 8005768:	220d      	movs	r2, #13
 800576a:	4869      	ldr	r0, [pc, #420]	@ (8005910 <BuildFrame+0x1ba4>)
 800576c:	f7fc f870 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("dhtvz", 12 + str_lenght + 3 + 9, 13 * 1, 1);
 8005770:	4b66      	ldr	r3, [pc, #408]	@ (800590c <BuildFrame+0x1ba0>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	3318      	adds	r3, #24
 8005776:	b2d9      	uxtb	r1, r3
 8005778:	2301      	movs	r3, #1
 800577a:	220d      	movs	r2, #13
 800577c:	4865      	ldr	r0, [pc, #404]	@ (8005914 <BuildFrame+0x1ba8>)
 800577e:	f7fc f867 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Ntreobt", 12, 13 * 2, 1);
 8005782:	2301      	movs	r3, #1
 8005784:	221a      	movs	r2, #26
 8005786:	210c      	movs	r1, #12
 8005788:	4863      	ldr	r0, [pc, #396]	@ (8005918 <BuildFrame+0x1bac>)
 800578a:	f7fc f861 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("gfhfvtnhs", 12, 13 * 3, 1);
 800578e:	2301      	movs	r3, #1
 8005790:	2227      	movs	r2, #39	@ 0x27
 8005792:	210c      	movs	r1, #12
 8005794:	4861      	ldr	r0, [pc, #388]	@ (800591c <BuildFrame+0x1bb0>)
 8005796:	f7fc f85b 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("gfhfvtnhs");
 800579a:	4860      	ldr	r0, [pc, #384]	@ (800591c <BuildFrame+0x1bb0>)
 800579c:	f7fb f99a 	bl	8000ad4 <OLED_GetWidthStr>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b59      	ldr	r3, [pc, #356]	@ (800590c <BuildFrame+0x1ba0>)
 80057a6:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("gjkbdf", 12 + str_lenght + 3, 13 * 3, 1);
 80057a8:	4b58      	ldr	r3, [pc, #352]	@ (800590c <BuildFrame+0x1ba0>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	330f      	adds	r3, #15
 80057ae:	b2d9      	uxtb	r1, r3
 80057b0:	2301      	movs	r3, #1
 80057b2:	2227      	movs	r2, #39	@ 0x27
 80057b4:	485a      	ldr	r0, [pc, #360]	@ (8005920 <BuildFrame+0x1bb4>)
 80057b6:	f7fc f84b 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 80057ba:	2300      	movs	r3, #0
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	233a      	movs	r3, #58	@ 0x3a
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	2309      	movs	r3, #9
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	233d      	movs	r3, #61	@ 0x3d
 80057c8:	2203      	movs	r2, #3
 80057ca:	2137      	movs	r1, #55	@ 0x37
 80057cc:	2003      	movs	r0, #3
 80057ce:	f7fc f94d 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 4, 0);
 80057d2:	2300      	movs	r3, #0
 80057d4:	2234      	movs	r2, #52	@ 0x34
 80057d6:	210c      	movs	r1, #12
 80057d8:	4852      	ldr	r0, [pc, #328]	@ (8005924 <BuildFrame+0x1bb8>)
 80057da:	f7fc f839 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 80057de:	4851      	ldr	r0, [pc, #324]	@ (8005924 <BuildFrame+0x1bb8>)
 80057e0:	f7fb f978 	bl	8000ad4 <OLED_GetWidthStr>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	4b48      	ldr	r3, [pc, #288]	@ (800590c <BuildFrame+0x1ba0>)
 80057ea:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 4, 0);
 80057ec:	4b47      	ldr	r3, [pc, #284]	@ (800590c <BuildFrame+0x1ba0>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	330f      	adds	r3, #15
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	2300      	movs	r3, #0
 80057f6:	2234      	movs	r2, #52	@ 0x34
 80057f8:	484b      	ldr	r0, [pc, #300]	@ (8005928 <BuildFrame+0x1bbc>)
 80057fa:	f7fc f829 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80057fe:	bf00      	nop
		break;
 8005800:	f001 bfbd 	b.w	800777e <BuildFrame+0x3a12>

		// 16. Кадр текущая дата и время
		case 16:

			// Дата
			OLED_DrawCircleFill_Modified(6, 5, 2, 1);
 8005804:	2301      	movs	r3, #1
 8005806:	2202      	movs	r2, #2
 8005808:	2105      	movs	r1, #5
 800580a:	2006      	movs	r0, #6
 800580c:	f7fc faf7 	bl	8001dfe <OLED_DrawCircleFill_Modified>
			OLED_DrawStr_RuModified("Lfnf", 12, 13 * 0, 1);
 8005810:	2301      	movs	r3, #1
 8005812:	2200      	movs	r2, #0
 8005814:	210c      	movs	r1, #12
 8005816:	4845      	ldr	r0, [pc, #276]	@ (800592c <BuildFrame+0x1bc0>)
 8005818:	f7fc f81a 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("Lfnf");
 800581c:	4843      	ldr	r0, [pc, #268]	@ (800592c <BuildFrame+0x1bc0>)
 800581e:	f7fb f959 	bl	8000ad4 <OLED_GetWidthStr>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	4b39      	ldr	r3, [pc, #228]	@ (800590c <BuildFrame+0x1ba0>)
 8005828:	701a      	strb	r2, [r3, #0]
			OLED_DrawChar_Modified(':', 12 + str_lenght, 13 * 0, 1);
 800582a:	4b38      	ldr	r3, [pc, #224]	@ (800590c <BuildFrame+0x1ba0>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	b2d9      	uxtb	r1, r3
 8005832:	2301      	movs	r3, #1
 8005834:	2200      	movs	r2, #0
 8005836:	203a      	movs	r0, #58	@ 0x3a
 8005838:	f7fc f842 	bl	80018c0 <OLED_DrawChar_Modified>

			// Отрисовка текущей даты
			DrawDate(1);
 800583c:	2001      	movs	r0, #1
 800583e:	f7fc fd01 	bl	8002244 <DrawDate>


			// Время
			OLED_DrawCircleFill_Modified(6, 13 * 1 + 5, 2, 1);
 8005842:	2301      	movs	r3, #1
 8005844:	2202      	movs	r2, #2
 8005846:	2112      	movs	r1, #18
 8005848:	2006      	movs	r0, #6
 800584a:	f7fc fad8 	bl	8001dfe <OLED_DrawCircleFill_Modified>
			OLED_DrawStr_RuModified("Dhtvz", 12, 13 * 1, 1);
 800584e:	2301      	movs	r3, #1
 8005850:	220d      	movs	r2, #13
 8005852:	210c      	movs	r1, #12
 8005854:	4836      	ldr	r0, [pc, #216]	@ (8005930 <BuildFrame+0x1bc4>)
 8005856:	f7fb fffb 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("Dhtvz");
 800585a:	4835      	ldr	r0, [pc, #212]	@ (8005930 <BuildFrame+0x1bc4>)
 800585c:	f7fb f93a 	bl	8000ad4 <OLED_GetWidthStr>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	4b29      	ldr	r3, [pc, #164]	@ (800590c <BuildFrame+0x1ba0>)
 8005866:	701a      	strb	r2, [r3, #0]
			OLED_DrawChar_Modified(':', 12 + str_lenght, 13 * 1, 1);
 8005868:	4b28      	ldr	r3, [pc, #160]	@ (800590c <BuildFrame+0x1ba0>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	b2d9      	uxtb	r1, r3
 8005870:	2301      	movs	r3, #1
 8005872:	220d      	movs	r2, #13
 8005874:	203a      	movs	r0, #58	@ 0x3a
 8005876:	f7fc f823 	bl	80018c0 <OLED_DrawChar_Modified>

			// Отрисовка текущего времени
			DrawTime(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f7fc fc18 	bl	80020b0 <DrawTime>


			// День недели
			OLED_DrawCircleFill_Modified(6, 13 * 2 + 5, 2, 1);
 8005880:	2301      	movs	r3, #1
 8005882:	2202      	movs	r2, #2
 8005884:	211f      	movs	r1, #31
 8005886:	2006      	movs	r0, #6
 8005888:	f7fc fab9 	bl	8001dfe <OLED_DrawCircleFill_Modified>
			OLED_DrawStr_RuModified("Ltym", 12, 13 * 2, 1);
 800588c:	2301      	movs	r3, #1
 800588e:	221a      	movs	r2, #26
 8005890:	210c      	movs	r1, #12
 8005892:	4828      	ldr	r0, [pc, #160]	@ (8005934 <BuildFrame+0x1bc8>)
 8005894:	f7fb ffdc 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("Ltym");
 8005898:	4826      	ldr	r0, [pc, #152]	@ (8005934 <BuildFrame+0x1bc8>)
 800589a:	f7fb f91b 	bl	8000ad4 <OLED_GetWidthStr>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <BuildFrame+0x1ba0>)
 80058a4:	701a      	strb	r2, [r3, #0]
			OLED_DrawStr_RuModified("ytltkb", 12 + str_lenght + 3, 13 * 2, 1);
 80058a6:	4b19      	ldr	r3, [pc, #100]	@ (800590c <BuildFrame+0x1ba0>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	330f      	adds	r3, #15
 80058ac:	b2d9      	uxtb	r1, r3
 80058ae:	2301      	movs	r3, #1
 80058b0:	221a      	movs	r2, #26
 80058b2:	4821      	ldr	r0, [pc, #132]	@ (8005938 <BuildFrame+0x1bcc>)
 80058b4:	f7fb ffcc 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified(':', 12 + str_lenght + 40, 13 * 2, 1);
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <BuildFrame+0x1ba0>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	3334      	adds	r3, #52	@ 0x34
 80058be:	b2d9      	uxtb	r1, r3
 80058c0:	2301      	movs	r3, #1
 80058c2:	221a      	movs	r2, #26
 80058c4:	203a      	movs	r0, #58	@ 0x3a
 80058c6:	f7fb fffb 	bl	80018c0 <OLED_DrawChar_Modified>

			// Отрисовка текущего дня недели
			DrawDayOfWeek(1);
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fc fb8e 	bl	8001fec <DrawDayOfWeek>


			switch(pos_cursor)
 80058d0:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <BuildFrame+0x1bd0>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	f041 8754 	bne.w	8007782 <BuildFrame+0x3a16>
					* 	XXXX
					* 	Назад
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 80058da:	2300      	movs	r3, #0
 80058dc:	9302      	str	r3, [sp, #8]
 80058de:	233a      	movs	r3, #58	@ 0x3a
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	2309      	movs	r3, #9
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	233d      	movs	r3, #61	@ 0x3d
 80058e8:	2203      	movs	r2, #3
 80058ea:	2137      	movs	r1, #55	@ 0x37
 80058ec:	2003      	movs	r0, #3
 80058ee:	f7fc f8bd 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 0);
 80058f2:	2300      	movs	r3, #0
 80058f4:	2234      	movs	r2, #52	@ 0x34
 80058f6:	210c      	movs	r1, #12
 80058f8:	4811      	ldr	r0, [pc, #68]	@ (8005940 <BuildFrame+0x1bd4>)
 80058fa:	f7fb ffa9 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 80058fe:	bf00      	nop
			}

		break;
 8005900:	f001 bf3f 	b.w	8007782 <BuildFrame+0x3a16>
 8005904:	08014478 	.word	0x08014478
 8005908:	08014480 	.word	0x08014480
 800590c:	20000a3e 	.word	0x20000a3e
 8005910:	08014488 	.word	0x08014488
 8005914:	080143b4 	.word	0x080143b4
 8005918:	08014260 	.word	0x08014260
 800591c:	08014268 	.word	0x08014268
 8005920:	08014258 	.word	0x08014258
 8005924:	0801448c 	.word	0x0801448c
 8005928:	08014384 	.word	0x08014384
 800592c:	080143a0 	.word	0x080143a0
 8005930:	080142a0 	.word	0x080142a0
 8005934:	08014494 	.word	0x08014494
 8005938:	08014444 	.word	0x08014444
 800593c:	20000a3d 	.word	0x20000a3d
 8005940:	080142dc 	.word	0x080142dc

		// 17. Кадр ошибки введённых параметров
		case 17:

			// Информационная часть
			OLED_DrawStr_RuModified("Gfhfvtnhs", 3, 13 * 0, 1);
 8005944:	2301      	movs	r3, #1
 8005946:	2200      	movs	r2, #0
 8005948:	2103      	movs	r1, #3
 800594a:	48c0      	ldr	r0, [pc, #768]	@ (8005c4c <BuildFrame+0x1ee0>)
 800594c:	f7fb ff80 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("Gfhfvtnhs");
 8005950:	48be      	ldr	r0, [pc, #760]	@ (8005c4c <BuildFrame+0x1ee0>)
 8005952:	f7fb f8bf 	bl	8000ad4 <OLED_GetWidthStr>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	4bbd      	ldr	r3, [pc, #756]	@ (8005c50 <BuildFrame+0x1ee4>)
 800595c:	701a      	strb	r2, [r3, #0]
			OLED_DrawStr_RuModified(",skb", 3 + str_lenght + 3, 13 * 0, 1);
 800595e:	4bbc      	ldr	r3, [pc, #752]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	3306      	adds	r3, #6
 8005964:	b2d9      	uxtb	r1, r3
 8005966:	2301      	movs	r3, #1
 8005968:	2200      	movs	r2, #0
 800596a:	48ba      	ldr	r0, [pc, #744]	@ (8005c54 <BuildFrame+0x1ee8>)
 800596c:	f7fb ff70 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ddtltys", 3, 13 * 1, 1);
 8005970:	2301      	movs	r3, #1
 8005972:	220d      	movs	r2, #13
 8005974:	2103      	movs	r1, #3
 8005976:	48b8      	ldr	r0, [pc, #736]	@ (8005c58 <BuildFrame+0x1eec>)
 8005978:	f7fb ff6a 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("ddtltys");
 800597c:	48b6      	ldr	r0, [pc, #728]	@ (8005c58 <BuildFrame+0x1eec>)
 800597e:	f7fb f8a9 	bl	8000ad4 <OLED_GetWidthStr>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	4bb2      	ldr	r3, [pc, #712]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005988:	701a      	strb	r2, [r3, #0]
			OLED_DrawStr_RuModified("ytrjhhtrnyj", 3 + str_lenght + 3, 13 * 1, 1);
 800598a:	4bb1      	ldr	r3, [pc, #708]	@ (8005c50 <BuildFrame+0x1ee4>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	3306      	adds	r3, #6
 8005990:	b2d9      	uxtb	r1, r3
 8005992:	2301      	movs	r3, #1
 8005994:	220d      	movs	r2, #13
 8005996:	48b1      	ldr	r0, [pc, #708]	@ (8005c5c <BuildFrame+0x1ef0>)
 8005998:	f7fb ff5a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("b", 3, 13 * 2, 1);
 800599c:	2301      	movs	r3, #1
 800599e:	221a      	movs	r2, #26
 80059a0:	2103      	movs	r1, #3
 80059a2:	48af      	ldr	r0, [pc, #700]	@ (8005c60 <BuildFrame+0x1ef4>)
 80059a4:	f7fb ff54 	bl	8001850 <OLED_DrawStr_RuModified>
			str_lenght = OLED_GetWidthStr("b");
 80059a8:	48ad      	ldr	r0, [pc, #692]	@ (8005c60 <BuildFrame+0x1ef4>)
 80059aa:	f7fb f893 	bl	8000ad4 <OLED_GetWidthStr>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005c50 <BuildFrame+0x1ee4>)
 80059b4:	701a      	strb	r2, [r3, #0]
			OLED_DrawStr_RuModified("yt", 3 + str_lenght + 3, 13 * 2, 1);
 80059b6:	4ba6      	ldr	r3, [pc, #664]	@ (8005c50 <BuildFrame+0x1ee4>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	3306      	adds	r3, #6
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	2301      	movs	r3, #1
 80059c0:	221a      	movs	r2, #26
 80059c2:	48a8      	ldr	r0, [pc, #672]	@ (8005c64 <BuildFrame+0x1ef8>)
 80059c4:	f7fb ff44 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified(",elen", 3 + str_lenght + OLED_GetWidthStr("yt") + 3 * 2, 13 * 2, 1);
 80059c8:	48a6      	ldr	r0, [pc, #664]	@ (8005c64 <BuildFrame+0x1ef8>)
 80059ca:	f7fb f883 	bl	8000ad4 <OLED_GetWidthStr>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	4b9f      	ldr	r3, [pc, #636]	@ (8005c50 <BuildFrame+0x1ee4>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4413      	add	r3, r2
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3309      	adds	r3, #9
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	2301      	movs	r3, #1
 80059e0:	221a      	movs	r2, #26
 80059e2:	48a1      	ldr	r0, [pc, #644]	@ (8005c68 <BuildFrame+0x1efc>)
 80059e4:	f7fb ff34 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("cj[hfytys", 3 + str_lenght + OLED_GetWidthStr("yt") + OLED_GetWidthStr(",elen") + 3 * 3, 13 * 2, 1);
 80059e8:	489e      	ldr	r0, [pc, #632]	@ (8005c64 <BuildFrame+0x1ef8>)
 80059ea:	f7fb f873 	bl	8000ad4 <OLED_GetWidthStr>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b97      	ldr	r3, [pc, #604]	@ (8005c50 <BuildFrame+0x1ee4>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	b2dc      	uxtb	r4, r3
 80059fa:	489b      	ldr	r0, [pc, #620]	@ (8005c68 <BuildFrame+0x1efc>)
 80059fc:	f7fb f86a 	bl	8000ad4 <OLED_GetWidthStr>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4423      	add	r3, r4
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	330c      	adds	r3, #12
 8005a08:	b2d9      	uxtb	r1, r3
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	221a      	movs	r2, #26
 8005a0e:	4897      	ldr	r0, [pc, #604]	@ (8005c6c <BuildFrame+0x1f00>)
 8005a10:	f7fb ff1e 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('!', 3 + str_lenght + OLED_GetWidthStr("yt") + OLED_GetWidthStr(",elen") + OLED_GetWidthStr("cj[hfytys") + 3 * 4, 13 * 2, 1);
 8005a14:	4893      	ldr	r0, [pc, #588]	@ (8005c64 <BuildFrame+0x1ef8>)
 8005a16:	f7fb f85d 	bl	8000ad4 <OLED_GetWidthStr>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b8c      	ldr	r3, [pc, #560]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	4413      	add	r3, r2
 8005a24:	b2dc      	uxtb	r4, r3
 8005a26:	4890      	ldr	r0, [pc, #576]	@ (8005c68 <BuildFrame+0x1efc>)
 8005a28:	f7fb f854 	bl	8000ad4 <OLED_GetWidthStr>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4423      	add	r3, r4
 8005a30:	b2dc      	uxtb	r4, r3
 8005a32:	488e      	ldr	r0, [pc, #568]	@ (8005c6c <BuildFrame+0x1f00>)
 8005a34:	f7fb f84e 	bl	8000ad4 <OLED_GetWidthStr>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4423      	add	r3, r4
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	330f      	adds	r3, #15
 8005a40:	b2d9      	uxtb	r1, r3
 8005a42:	2301      	movs	r3, #1
 8005a44:	221a      	movs	r2, #26
 8005a46:	2021      	movs	r0, #33	@ 0x21
 8005a48:	f7fb ff3a 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8005a4c:	4b88      	ldr	r3, [pc, #544]	@ (8005c70 <BuildFrame+0x1f04>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d003      	beq.n	8005a5c <BuildFrame+0x1cf0>
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d02a      	beq.n	8005aae <BuildFrame+0x1d42>
					OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 0);

				break;
			}

		break;
 8005a58:	f001 bea8 	b.w	80077ac <BuildFrame+0x3a40>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	232d      	movs	r3, #45	@ 0x2d
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	2309      	movs	r3, #9
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2330      	movs	r3, #48	@ 0x30
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	212a      	movs	r1, #42	@ 0x2a
 8005a6e:	2003      	movs	r0, #3
 8005a70:	f7fb fffc 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfxfnm", 12, 13 * 3, 0);
 8005a74:	2300      	movs	r3, #0
 8005a76:	2227      	movs	r2, #39	@ 0x27
 8005a78:	210c      	movs	r1, #12
 8005a7a:	487e      	ldr	r0, [pc, #504]	@ (8005c74 <BuildFrame+0x1f08>)
 8005a7c:	f7fb fee8 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Yfxfnm");
 8005a80:	487c      	ldr	r0, [pc, #496]	@ (8005c74 <BuildFrame+0x1f08>)
 8005a82:	f7fb f827 	bl	8000ad4 <OLED_GetWidthStr>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b71      	ldr	r3, [pc, #452]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005a8c:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("pfyjdj", 12 + str_lenght + 3, 13 * 3, 0);
 8005a8e:	4b70      	ldr	r3, [pc, #448]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	330f      	adds	r3, #15
 8005a94:	b2d9      	uxtb	r1, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	2227      	movs	r2, #39	@ 0x27
 8005a9a:	4877      	ldr	r0, [pc, #476]	@ (8005c78 <BuildFrame+0x1f0c>)
 8005a9c:	f7fb fed8 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 1);
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	2234      	movs	r2, #52	@ 0x34
 8005aa4:	210c      	movs	r1, #12
 8005aa6:	4875      	ldr	r0, [pc, #468]	@ (8005c7c <BuildFrame+0x1f10>)
 8005aa8:	f7fb fed2 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005aac:	e028      	b.n	8005b00 <BuildFrame+0x1d94>
					OLED_DrawStr_RuModified("Yfxfnm", 12, 13 * 3, 1);
 8005aae:	2301      	movs	r3, #1
 8005ab0:	2227      	movs	r2, #39	@ 0x27
 8005ab2:	210c      	movs	r1, #12
 8005ab4:	486f      	ldr	r0, [pc, #444]	@ (8005c74 <BuildFrame+0x1f08>)
 8005ab6:	f7fb fecb 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Yfxfnm");
 8005aba:	486e      	ldr	r0, [pc, #440]	@ (8005c74 <BuildFrame+0x1f08>)
 8005abc:	f7fb f80a 	bl	8000ad4 <OLED_GetWidthStr>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4b62      	ldr	r3, [pc, #392]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005ac6:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("pfyjdj", 12 + str_lenght + 3, 13 * 3, 1);
 8005ac8:	4b61      	ldr	r3, [pc, #388]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	330f      	adds	r3, #15
 8005ace:	b2d9      	uxtb	r1, r3
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	2227      	movs	r2, #39	@ 0x27
 8005ad4:	4868      	ldr	r0, [pc, #416]	@ (8005c78 <BuildFrame+0x1f0c>)
 8005ad6:	f7fb febb 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8005ada:	2300      	movs	r3, #0
 8005adc:	9302      	str	r3, [sp, #8]
 8005ade:	233a      	movs	r3, #58	@ 0x3a
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2309      	movs	r3, #9
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	233d      	movs	r3, #61	@ 0x3d
 8005ae8:	2203      	movs	r2, #3
 8005aea:	2137      	movs	r1, #55	@ 0x37
 8005aec:	2003      	movs	r0, #3
 8005aee:	f7fb ffbd 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Dsqnb", 12, 13 * 4, 0);
 8005af2:	2300      	movs	r3, #0
 8005af4:	2234      	movs	r2, #52	@ 0x34
 8005af6:	210c      	movs	r1, #12
 8005af8:	4860      	ldr	r0, [pc, #384]	@ (8005c7c <BuildFrame+0x1f10>)
 8005afa:	f7fb fea9 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005afe:	bf00      	nop
		break;
 8005b00:	f001 be54 	b.w	80077ac <BuildFrame+0x3a40>


		// 18. Продолжение кадра 15
		case 18:

			switch(pos_cursor)
 8005b04:	4b5a      	ldr	r3, [pc, #360]	@ (8005c70 <BuildFrame+0x1f04>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	f000 80c7 	beq.w	8005c9c <BuildFrame+0x1f30>
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	f301 8639 	bgt.w	8007786 <BuildFrame+0x3a1a>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <BuildFrame+0x1db4>
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d04c      	beq.n	8005bb6 <BuildFrame+0x1e4a>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 0);

				break;
			}

		break;
 8005b1c:	f001 be33 	b.w	8007786 <BuildFrame+0x3a1a>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8005b20:	2300      	movs	r3, #0
 8005b22:	9302      	str	r3, [sp, #8]
 8005b24:	230d      	movs	r3, #13
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	2309      	movs	r3, #9
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	2203      	movs	r2, #3
 8005b30:	210a      	movs	r1, #10
 8005b32:	2003      	movs	r0, #3
 8005b34:	f7fb ff9a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 0, 0);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	210c      	movs	r1, #12
 8005b3e:	4850      	ldr	r0, [pc, #320]	@ (8005c80 <BuildFrame+0x1f14>)
 8005b40:	f7fb fe86 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 8005b44:	484e      	ldr	r0, [pc, #312]	@ (8005c80 <BuildFrame+0x1f14>)
 8005b46:	f7fa ffc5 	bl	8000ad4 <OLED_GetWidthStr>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005b50:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 0, 0);
 8005b52:	4b3f      	ldr	r3, [pc, #252]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	330f      	adds	r3, #15
 8005b58:	b2d9      	uxtb	r1, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4849      	ldr	r0, [pc, #292]	@ (8005c84 <BuildFrame+0x1f18>)
 8005b60:	f7fb fe76 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("d", 12, 13 * 1, 0);
 8005b64:	2300      	movs	r3, #0
 8005b66:	220d      	movs	r2, #13
 8005b68:	210c      	movs	r1, #12
 8005b6a:	4847      	ldr	r0, [pc, #284]	@ (8005c88 <BuildFrame+0x1f1c>)
 8005b6c:	f7fb fe70 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("d");
 8005b70:	4845      	ldr	r0, [pc, #276]	@ (8005c88 <BuildFrame+0x1f1c>)
 8005b72:	f7fa ffaf 	bl	8000ad4 <OLED_GetWidthStr>
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b35      	ldr	r3, [pc, #212]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005b7c:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("htpthdefht", 12 + str_lenght + 3, 13 * 1, 0);
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	330f      	adds	r3, #15
 8005b84:	b2d9      	uxtb	r1, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	220d      	movs	r2, #13
 8005b8a:	4840      	ldr	r0, [pc, #256]	@ (8005c8c <BuildFrame+0x1f20>)
 8005b8c:	f7fb fe60 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 2, 1);
 8005b90:	2301      	movs	r3, #1
 8005b92:	221a      	movs	r2, #26
 8005b94:	210c      	movs	r1, #12
 8005b96:	483e      	ldr	r0, [pc, #248]	@ (8005c90 <BuildFrame+0x1f24>)
 8005b98:	f7fb fe5a 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 3, 1);
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	2227      	movs	r2, #39	@ 0x27
 8005ba0:	210c      	movs	r1, #12
 8005ba2:	483c      	ldr	r0, [pc, #240]	@ (8005c94 <BuildFrame+0x1f28>)
 8005ba4:	f7fb fe54 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 1);
 8005ba8:	2301      	movs	r3, #1
 8005baa:	2234      	movs	r2, #52	@ 0x34
 8005bac:	210c      	movs	r1, #12
 8005bae:	483a      	ldr	r0, [pc, #232]	@ (8005c98 <BuildFrame+0x1f2c>)
 8005bb0:	f7fb fe4e 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005bb4:	e0bd      	b.n	8005d32 <BuildFrame+0x1fc6>
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 0, 1);
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	2200      	movs	r2, #0
 8005bba:	210c      	movs	r1, #12
 8005bbc:	4830      	ldr	r0, [pc, #192]	@ (8005c80 <BuildFrame+0x1f14>)
 8005bbe:	f7fb fe47 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 8005bc2:	482f      	ldr	r0, [pc, #188]	@ (8005c80 <BuildFrame+0x1f14>)
 8005bc4:	f7fa ff86 	bl	8000ad4 <OLED_GetWidthStr>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005bce:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 0, 1);
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	330f      	adds	r3, #15
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	2301      	movs	r3, #1
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4829      	ldr	r0, [pc, #164]	@ (8005c84 <BuildFrame+0x1f18>)
 8005bde:	f7fb fe37 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("d", 12, 13 * 1, 1);
 8005be2:	2301      	movs	r3, #1
 8005be4:	220d      	movs	r2, #13
 8005be6:	210c      	movs	r1, #12
 8005be8:	4827      	ldr	r0, [pc, #156]	@ (8005c88 <BuildFrame+0x1f1c>)
 8005bea:	f7fb fe31 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("d");
 8005bee:	4826      	ldr	r0, [pc, #152]	@ (8005c88 <BuildFrame+0x1f1c>)
 8005bf0:	f7fa ff70 	bl	8000ad4 <OLED_GetWidthStr>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005bfa:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("htpthdefht", 12 + str_lenght + 3, 13 * 1, 1);
 8005bfc:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <BuildFrame+0x1ee4>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	330f      	adds	r3, #15
 8005c02:	b2d9      	uxtb	r1, r3
 8005c04:	2301      	movs	r3, #1
 8005c06:	220d      	movs	r2, #13
 8005c08:	4820      	ldr	r0, [pc, #128]	@ (8005c8c <BuildFrame+0x1f20>)
 8005c0a:	f7fb fe21 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3 - 3, 3, (int16_t) 13 * 3 + 3, 9, (int16_t) 13 * 3, 0);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9302      	str	r3, [sp, #8]
 8005c12:	2327      	movs	r3, #39	@ 0x27
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	2309      	movs	r3, #9
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	232a      	movs	r3, #42	@ 0x2a
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	2124      	movs	r1, #36	@ 0x24
 8005c20:	2003      	movs	r0, #3
 8005c22:	f7fb ff23 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 2, 0);
 8005c26:	2300      	movs	r3, #0
 8005c28:	221a      	movs	r2, #26
 8005c2a:	210c      	movs	r1, #12
 8005c2c:	4818      	ldr	r0, [pc, #96]	@ (8005c90 <BuildFrame+0x1f24>)
 8005c2e:	f7fb fe0f 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 3, 0);
 8005c32:	2300      	movs	r3, #0
 8005c34:	2227      	movs	r2, #39	@ 0x27
 8005c36:	210c      	movs	r1, #12
 8005c38:	4816      	ldr	r0, [pc, #88]	@ (8005c94 <BuildFrame+0x1f28>)
 8005c3a:	f7fb fe09 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 1);
 8005c3e:	2301      	movs	r3, #1
 8005c40:	2234      	movs	r2, #52	@ 0x34
 8005c42:	210c      	movs	r1, #12
 8005c44:	4814      	ldr	r0, [pc, #80]	@ (8005c98 <BuildFrame+0x1f2c>)
 8005c46:	f7fb fe03 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005c4a:	e072      	b.n	8005d32 <BuildFrame+0x1fc6>
 8005c4c:	080143dc 	.word	0x080143dc
 8005c50:	20000a3e 	.word	0x20000a3e
 8005c54:	0801449c 	.word	0x0801449c
 8005c58:	080144a4 	.word	0x080144a4
 8005c5c:	080144ac 	.word	0x080144ac
 8005c60:	08014488 	.word	0x08014488
 8005c64:	080144b8 	.word	0x080144b8
 8005c68:	080144bc 	.word	0x080144bc
 8005c6c:	080143f0 	.word	0x080143f0
 8005c70:	20000a3d 	.word	0x20000a3d
 8005c74:	080144c4 	.word	0x080144c4
 8005c78:	080144cc 	.word	0x080144cc
 8005c7c:	08014460 	.word	0x08014460
 8005c80:	0801448c 	.word	0x0801448c
 8005c84:	08014384 	.word	0x08014384
 8005c88:	080144d4 	.word	0x080144d4
 8005c8c:	080144d8 	.word	0x080144d8
 8005c90:	08014344 	.word	0x08014344
 8005c94:	08014354 	.word	0x08014354
 8005c98:	080142dc 	.word	0x080142dc
					OLED_DrawStr_RuModified("Ehjdtym", 12, 13 * 0, 1);
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	210c      	movs	r1, #12
 8005ca2:	48a5      	ldr	r0, [pc, #660]	@ (8005f38 <BuildFrame+0x21cc>)
 8005ca4:	f7fb fdd4 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("Ehjdtym");
 8005ca8:	48a3      	ldr	r0, [pc, #652]	@ (8005f38 <BuildFrame+0x21cc>)
 8005caa:	f7fa ff13 	bl	8000ad4 <OLED_GetWidthStr>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8005f3c <BuildFrame+0x21d0>)
 8005cb4:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("djls", 12 + str_lenght + 3, 13 * 0, 1);
 8005cb6:	4ba1      	ldr	r3, [pc, #644]	@ (8005f3c <BuildFrame+0x21d0>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	330f      	adds	r3, #15
 8005cbc:	b2d9      	uxtb	r1, r3
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	489f      	ldr	r0, [pc, #636]	@ (8005f40 <BuildFrame+0x21d4>)
 8005cc4:	f7fb fdc4 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("d", 12, 13 * 1, 1);
 8005cc8:	2301      	movs	r3, #1
 8005cca:	220d      	movs	r2, #13
 8005ccc:	210c      	movs	r1, #12
 8005cce:	489d      	ldr	r0, [pc, #628]	@ (8005f44 <BuildFrame+0x21d8>)
 8005cd0:	f7fb fdbe 	bl	8001850 <OLED_DrawStr_RuModified>
					str_lenght = OLED_GetWidthStr("d");
 8005cd4:	489b      	ldr	r0, [pc, #620]	@ (8005f44 <BuildFrame+0x21d8>)
 8005cd6:	f7fa fefd 	bl	8000ad4 <OLED_GetWidthStr>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b97      	ldr	r3, [pc, #604]	@ (8005f3c <BuildFrame+0x21d0>)
 8005ce0:	701a      	strb	r2, [r3, #0]
					OLED_DrawStr_RuModified("htpthdefht", 12 + str_lenght + 3, 13 * 1, 1);
 8005ce2:	4b96      	ldr	r3, [pc, #600]	@ (8005f3c <BuildFrame+0x21d0>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	330f      	adds	r3, #15
 8005ce8:	b2d9      	uxtb	r1, r3
 8005cea:	2301      	movs	r3, #1
 8005cec:	220d      	movs	r2, #13
 8005cee:	4896      	ldr	r0, [pc, #600]	@ (8005f48 <BuildFrame+0x21dc>)
 8005cf0:	f7fb fdae 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Fdnjjnrk.xtybt", 12, 13 * 2, 1);
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	221a      	movs	r2, #26
 8005cf8:	210c      	movs	r1, #12
 8005cfa:	4894      	ldr	r0, [pc, #592]	@ (8005f4c <BuildFrame+0x21e0>)
 8005cfc:	f7fb fda8 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 3, 1);
 8005d00:	2301      	movs	r3, #1
 8005d02:	2227      	movs	r2, #39	@ 0x27
 8005d04:	210c      	movs	r1, #12
 8005d06:	4892      	ldr	r0, [pc, #584]	@ (8005f50 <BuildFrame+0x21e4>)
 8005d08:	f7fb fda2 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	233a      	movs	r3, #58	@ 0x3a
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	2309      	movs	r3, #9
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	233d      	movs	r3, #61	@ 0x3d
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	2137      	movs	r1, #55	@ 0x37
 8005d1e:	2003      	movs	r0, #3
 8005d20:	f7fb fea4 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 0);
 8005d24:	2300      	movs	r3, #0
 8005d26:	2234      	movs	r2, #52	@ 0x34
 8005d28:	210c      	movs	r1, #12
 8005d2a:	488a      	ldr	r0, [pc, #552]	@ (8005f54 <BuildFrame+0x21e8>)
 8005d2c:	f7fb fd90 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8005d30:	bf00      	nop
		break;
 8005d32:	f001 bd28 	b.w	8007786 <BuildFrame+0x3a1a>


		// 19. Настройка полива (3)
		case 19:

			OLED_DrawStr_RuModified("Ds,thbnt", 12, 13 * 0, 1);
 8005d36:	2301      	movs	r3, #1
 8005d38:	2200      	movs	r2, #0
 8005d3a:	210c      	movs	r1, #12
 8005d3c:	4886      	ldr	r0, [pc, #536]	@ (8005f58 <BuildFrame+0x21ec>)
 8005d3e:	f7fb fd87 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("lyb", 12, 13 * 1, 1);
 8005d42:	2301      	movs	r3, #1
 8005d44:	220d      	movs	r2, #13
 8005d46:	210c      	movs	r1, #12
 8005d48:	4884      	ldr	r0, [pc, #528]	@ (8005f5c <BuildFrame+0x21f0>)
 8005d4a:	f7fb fd81 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("lyb") + 3, 13 * 1, 1);
 8005d4e:	4883      	ldr	r0, [pc, #524]	@ (8005f5c <BuildFrame+0x21f0>)
 8005d50:	f7fa fec0 	bl	8000ad4 <OLED_GetWidthStr>
 8005d54:	4603      	mov	r3, r0
 8005d56:	330f      	adds	r3, #15
 8005d58:	b2d9      	uxtb	r1, r3
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	220d      	movs	r2, #13
 8005d5e:	4880      	ldr	r0, [pc, #512]	@ (8005f60 <BuildFrame+0x21f4>)
 8005d60:	f7fb fd76 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified(':', 12 + OLED_GetWidthStr("lyb") + OLED_GetWidthStr("gjkbdf") +  3 + 1, 13 * 1, 1);
 8005d64:	487d      	ldr	r0, [pc, #500]	@ (8005f5c <BuildFrame+0x21f0>)
 8005d66:	f7fa feb5 	bl	8000ad4 <OLED_GetWidthStr>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	487c      	ldr	r0, [pc, #496]	@ (8005f60 <BuildFrame+0x21f4>)
 8005d70:	f7fa feb0 	bl	8000ad4 <OLED_GetWidthStr>
 8005d74:	4603      	mov	r3, r0
 8005d76:	4423      	add	r3, r4
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	3310      	adds	r3, #16
 8005d7c:	b2d9      	uxtb	r1, r3
 8005d7e:	2301      	movs	r3, #1
 8005d80:	220d      	movs	r2, #13
 8005d82:	203a      	movs	r0, #58	@ 0x3a
 8005d84:	f7fb fd9c 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("Gy", 12, 13 * 2, 1);
 8005d88:	2301      	movs	r3, #1
 8005d8a:	221a      	movs	r2, #26
 8005d8c:	210c      	movs	r1, #12
 8005d8e:	4875      	ldr	r0, [pc, #468]	@ (8005f64 <BuildFrame+0x21f8>)
 8005d90:	f7fb fd5e 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("Dn", 12 + OLED_GetWidthStr("Gy") + 4, 13 * 2, 1);
 8005d94:	4873      	ldr	r0, [pc, #460]	@ (8005f64 <BuildFrame+0x21f8>)
 8005d96:	f7fa fe9d 	bl	8000ad4 <OLED_GetWidthStr>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	b2d9      	uxtb	r1, r3
 8005da0:	2301      	movs	r3, #1
 8005da2:	221a      	movs	r2, #26
 8005da4:	4870      	ldr	r0, [pc, #448]	@ (8005f68 <BuildFrame+0x21fc>)
 8005da6:	f7fb fd53 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("Ch", 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 2, 1);
 8005daa:	486e      	ldr	r0, [pc, #440]	@ (8005f64 <BuildFrame+0x21f8>)
 8005dac:	f7fa fe92 	bl	8000ad4 <OLED_GetWidthStr>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461c      	mov	r4, r3
 8005db4:	486c      	ldr	r0, [pc, #432]	@ (8005f68 <BuildFrame+0x21fc>)
 8005db6:	f7fa fe8d 	bl	8000ad4 <OLED_GetWidthStr>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4423      	add	r3, r4
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3312      	adds	r3, #18
 8005dc2:	b2d9      	uxtb	r1, r3
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	221a      	movs	r2, #26
 8005dc8:	4868      	ldr	r0, [pc, #416]	@ (8005f6c <BuildFrame+0x2200>)
 8005dca:	f7fb fd41 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("Xn", 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 2, 1);
 8005dce:	4865      	ldr	r0, [pc, #404]	@ (8005f64 <BuildFrame+0x21f8>)
 8005dd0:	f7fa fe80 	bl	8000ad4 <OLED_GetWidthStr>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461c      	mov	r4, r3
 8005dd8:	4863      	ldr	r0, [pc, #396]	@ (8005f68 <BuildFrame+0x21fc>)
 8005dda:	f7fa fe7b 	bl	8000ad4 <OLED_GetWidthStr>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4423      	add	r3, r4
 8005de2:	b2dc      	uxtb	r4, r3
 8005de4:	4861      	ldr	r0, [pc, #388]	@ (8005f6c <BuildFrame+0x2200>)
 8005de6:	f7fa fe75 	bl	8000ad4 <OLED_GetWidthStr>
 8005dea:	4603      	mov	r3, r0
 8005dec:	4423      	add	r3, r4
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	3315      	adds	r3, #21
 8005df2:	b2d9      	uxtb	r1, r3
 8005df4:	2301      	movs	r3, #1
 8005df6:	221a      	movs	r2, #26
 8005df8:	485d      	ldr	r0, [pc, #372]	@ (8005f70 <BuildFrame+0x2204>)
 8005dfa:	f7fb fd29 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("Gn", 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 2, 1);
 8005dfe:	4859      	ldr	r0, [pc, #356]	@ (8005f64 <BuildFrame+0x21f8>)
 8005e00:	f7fa fe68 	bl	8000ad4 <OLED_GetWidthStr>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461c      	mov	r4, r3
 8005e08:	4857      	ldr	r0, [pc, #348]	@ (8005f68 <BuildFrame+0x21fc>)
 8005e0a:	f7fa fe63 	bl	8000ad4 <OLED_GetWidthStr>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4423      	add	r3, r4
 8005e12:	b2dc      	uxtb	r4, r3
 8005e14:	4855      	ldr	r0, [pc, #340]	@ (8005f6c <BuildFrame+0x2200>)
 8005e16:	f7fa fe5d 	bl	8000ad4 <OLED_GetWidthStr>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4423      	add	r3, r4
 8005e1e:	b2dc      	uxtb	r4, r3
 8005e20:	4853      	ldr	r0, [pc, #332]	@ (8005f70 <BuildFrame+0x2204>)
 8005e22:	f7fa fe57 	bl	8000ad4 <OLED_GetWidthStr>
 8005e26:	4603      	mov	r3, r0
 8005e28:	4423      	add	r3, r4
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	b2d9      	uxtb	r1, r3
 8005e30:	2301      	movs	r3, #1
 8005e32:	221a      	movs	r2, #26
 8005e34:	484f      	ldr	r0, [pc, #316]	@ (8005f74 <BuildFrame+0x2208>)
 8005e36:	f7fb fd0b 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("C,", 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 2, 1);
 8005e3a:	484a      	ldr	r0, [pc, #296]	@ (8005f64 <BuildFrame+0x21f8>)
 8005e3c:	f7fa fe4a 	bl	8000ad4 <OLED_GetWidthStr>
 8005e40:	4603      	mov	r3, r0
 8005e42:	461c      	mov	r4, r3
 8005e44:	4848      	ldr	r0, [pc, #288]	@ (8005f68 <BuildFrame+0x21fc>)
 8005e46:	f7fa fe45 	bl	8000ad4 <OLED_GetWidthStr>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4423      	add	r3, r4
 8005e4e:	b2dc      	uxtb	r4, r3
 8005e50:	4846      	ldr	r0, [pc, #280]	@ (8005f6c <BuildFrame+0x2200>)
 8005e52:	f7fa fe3f 	bl	8000ad4 <OLED_GetWidthStr>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4423      	add	r3, r4
 8005e5a:	b2dc      	uxtb	r4, r3
 8005e5c:	4844      	ldr	r0, [pc, #272]	@ (8005f70 <BuildFrame+0x2204>)
 8005e5e:	f7fa fe39 	bl	8000ad4 <OLED_GetWidthStr>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4423      	add	r3, r4
 8005e66:	b2dc      	uxtb	r4, r3
 8005e68:	4842      	ldr	r0, [pc, #264]	@ (8005f74 <BuildFrame+0x2208>)
 8005e6a:	f7fa fe33 	bl	8000ad4 <OLED_GetWidthStr>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4423      	add	r3, r4
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	331b      	adds	r3, #27
 8005e76:	b2d9      	uxtb	r1, r3
 8005e78:	2301      	movs	r3, #1
 8005e7a:	221a      	movs	r2, #26
 8005e7c:	483e      	ldr	r0, [pc, #248]	@ (8005f78 <BuildFrame+0x220c>)
 8005e7e:	f7fb fce7 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("Dc", 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 2, 1);
 8005e82:	4838      	ldr	r0, [pc, #224]	@ (8005f64 <BuildFrame+0x21f8>)
 8005e84:	f7fa fe26 	bl	8000ad4 <OLED_GetWidthStr>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	4836      	ldr	r0, [pc, #216]	@ (8005f68 <BuildFrame+0x21fc>)
 8005e8e:	f7fa fe21 	bl	8000ad4 <OLED_GetWidthStr>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4423      	add	r3, r4
 8005e96:	b2dc      	uxtb	r4, r3
 8005e98:	4834      	ldr	r0, [pc, #208]	@ (8005f6c <BuildFrame+0x2200>)
 8005e9a:	f7fa fe1b 	bl	8000ad4 <OLED_GetWidthStr>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4423      	add	r3, r4
 8005ea2:	b2dc      	uxtb	r4, r3
 8005ea4:	4832      	ldr	r0, [pc, #200]	@ (8005f70 <BuildFrame+0x2204>)
 8005ea6:	f7fa fe15 	bl	8000ad4 <OLED_GetWidthStr>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4423      	add	r3, r4
 8005eae:	b2dc      	uxtb	r4, r3
 8005eb0:	4830      	ldr	r0, [pc, #192]	@ (8005f74 <BuildFrame+0x2208>)
 8005eb2:	f7fa fe0f 	bl	8000ad4 <OLED_GetWidthStr>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4423      	add	r3, r4
 8005eba:	b2dc      	uxtb	r4, r3
 8005ebc:	482e      	ldr	r0, [pc, #184]	@ (8005f78 <BuildFrame+0x220c>)
 8005ebe:	f7fa fe09 	bl	8000ad4 <OLED_GetWidthStr>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4423      	add	r3, r4
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	331e      	adds	r3, #30
 8005eca:	b2d9      	uxtb	r1, r3
 8005ecc:	2301      	movs	r3, #1
 8005ece:	221a      	movs	r2, #26
 8005ed0:	482a      	ldr	r0, [pc, #168]	@ (8005f7c <BuildFrame+0x2210>)
 8005ed2:	f7fb fcbd 	bl	8001850 <OLED_DrawStr_RuModified>

			switch(pos_cursor)
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f80 <BuildFrame+0x2214>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d004      	beq.n	8005ee8 <BuildFrame+0x217c>
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	f000 8110 	beq.w	8006104 <BuildFrame+0x2398>
					OLED_DrawStr_RuModified("Pfdthibnm", 12, 13 * 4, 0);

				break;
			}

		break;
 8005ee4:	f001 bc62 	b.w	80077ac <BuildFrame+0x3a40>
					if (f_StSetDaysWater)
 8005ee8:	4b26      	ldr	r3, [pc, #152]	@ (8005f84 <BuildFrame+0x2218>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <BuildFrame+0x21a2>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 1);
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	9302      	str	r3, [sp, #8]
 8005ef4:	232d      	movs	r3, #45	@ 0x2d
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	2309      	movs	r3, #9
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	2330      	movs	r3, #48	@ 0x30
 8005efe:	2203      	movs	r2, #3
 8005f00:	212a      	movs	r1, #42	@ 0x2a
 8005f02:	2003      	movs	r0, #3
 8005f04:	f7fb fdb2 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						SetDaysWater();
 8005f08:	f7fd f944 	bl	8003194 <SetDaysWater>
 8005f0c:	e0f1      	b.n	80060f2 <BuildFrame+0x2386>
						if (f_DaysWaterIsSet)
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f88 <BuildFrame+0x221c>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d03a      	beq.n	8005f8c <BuildFrame+0x2220>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8005f16:	2300      	movs	r3, #0
 8005f18:	9302      	str	r3, [sp, #8]
 8005f1a:	232d      	movs	r3, #45	@ 0x2d
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	2309      	movs	r3, #9
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2330      	movs	r3, #48	@ 0x30
 8005f24:	2203      	movs	r2, #3
 8005f26:	212a      	movs	r1, #42	@ 0x2a
 8005f28:	2003      	movs	r0, #3
 8005f2a:	f7fb fd9f 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							DrawSetDaysWater(0);
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f7fc fee4 	bl	8002cfc <DrawSetDaysWater>
 8005f34:	e0dd      	b.n	80060f2 <BuildFrame+0x2386>
 8005f36:	bf00      	nop
 8005f38:	0801448c 	.word	0x0801448c
 8005f3c:	20000a3e 	.word	0x20000a3e
 8005f40:	08014384 	.word	0x08014384
 8005f44:	080144d4 	.word	0x080144d4
 8005f48:	080144d8 	.word	0x080144d8
 8005f4c:	08014344 	.word	0x08014344
 8005f50:	08014354 	.word	0x08014354
 8005f54:	080142dc 	.word	0x080142dc
 8005f58:	080144e4 	.word	0x080144e4
 8005f5c:	080144f0 	.word	0x080144f0
 8005f60:	08014258 	.word	0x08014258
 8005f64:	08014240 	.word	0x08014240
 8005f68:	08014244 	.word	0x08014244
 8005f6c:	08014248 	.word	0x08014248
 8005f70:	0801424c 	.word	0x0801424c
 8005f74:	08014250 	.word	0x08014250
 8005f78:	08014254 	.word	0x08014254
 8005f7c:	080142d8 	.word	0x080142d8
 8005f80:	20000a3d 	.word	0x20000a3d
 8005f84:	20000a13 	.word	0x20000a13
 8005f88:	20000a1c 	.word	0x20000a1c
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	232d      	movs	r3, #45	@ 0x2d
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	2309      	movs	r3, #9
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	2330      	movs	r3, #48	@ 0x30
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	212a      	movs	r1, #42	@ 0x2a
 8005f9e:	2003      	movs	r0, #3
 8005fa0:	f7fb fd64 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							OLED_DrawChar_Modified('-', 5 + 12, 13 * 3, 0);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2227      	movs	r2, #39	@ 0x27
 8005fa8:	2111      	movs	r1, #17
 8005faa:	202d      	movs	r0, #45	@ 0x2d
 8005fac:	f7fb fc88 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 3 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 3, 0);
 8005fb0:	48be      	ldr	r0, [pc, #760]	@ (80062ac <BuildFrame+0x2540>)
 8005fb2:	f7fa fd8f 	bl	8000ad4 <OLED_GetWidthStr>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	3312      	adds	r3, #18
 8005fba:	b2d9      	uxtb	r1, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2227      	movs	r2, #39	@ 0x27
 8005fc0:	202d      	movs	r0, #45	@ 0x2d
 8005fc2:	f7fb fc7d 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 3, 0);
 8005fc6:	48b9      	ldr	r0, [pc, #740]	@ (80062ac <BuildFrame+0x2540>)
 8005fc8:	f7fa fd84 	bl	8000ad4 <OLED_GetWidthStr>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461c      	mov	r4, r3
 8005fd0:	48b7      	ldr	r0, [pc, #732]	@ (80062b0 <BuildFrame+0x2544>)
 8005fd2:	f7fa fd7f 	bl	8000ad4 <OLED_GetWidthStr>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4423      	add	r3, r4
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	3314      	adds	r3, #20
 8005fde:	b2d9      	uxtb	r1, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2227      	movs	r2, #39	@ 0x27
 8005fe4:	202d      	movs	r0, #45	@ 0x2d
 8005fe6:	f7fb fc6b 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 3 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 3, 0);
 8005fea:	48b0      	ldr	r0, [pc, #704]	@ (80062ac <BuildFrame+0x2540>)
 8005fec:	f7fa fd72 	bl	8000ad4 <OLED_GetWidthStr>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	461c      	mov	r4, r3
 8005ff4:	48ae      	ldr	r0, [pc, #696]	@ (80062b0 <BuildFrame+0x2544>)
 8005ff6:	f7fa fd6d 	bl	8000ad4 <OLED_GetWidthStr>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4423      	add	r3, r4
 8005ffe:	b2dc      	uxtb	r4, r3
 8006000:	48ac      	ldr	r0, [pc, #688]	@ (80062b4 <BuildFrame+0x2548>)
 8006002:	f7fa fd67 	bl	8000ad4 <OLED_GetWidthStr>
 8006006:	4603      	mov	r3, r0
 8006008:	4423      	add	r3, r4
 800600a:	b2db      	uxtb	r3, r3
 800600c:	3318      	adds	r3, #24
 800600e:	b2d9      	uxtb	r1, r3
 8006010:	2300      	movs	r3, #0
 8006012:	2227      	movs	r2, #39	@ 0x27
 8006014:	202d      	movs	r0, #45	@ 0x2d
 8006016:	f7fb fc53 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 3, 0);
 800601a:	48a4      	ldr	r0, [pc, #656]	@ (80062ac <BuildFrame+0x2540>)
 800601c:	f7fa fd5a 	bl	8000ad4 <OLED_GetWidthStr>
 8006020:	4603      	mov	r3, r0
 8006022:	461c      	mov	r4, r3
 8006024:	48a2      	ldr	r0, [pc, #648]	@ (80062b0 <BuildFrame+0x2544>)
 8006026:	f7fa fd55 	bl	8000ad4 <OLED_GetWidthStr>
 800602a:	4603      	mov	r3, r0
 800602c:	4423      	add	r3, r4
 800602e:	b2dc      	uxtb	r4, r3
 8006030:	48a0      	ldr	r0, [pc, #640]	@ (80062b4 <BuildFrame+0x2548>)
 8006032:	f7fa fd4f 	bl	8000ad4 <OLED_GetWidthStr>
 8006036:	4603      	mov	r3, r0
 8006038:	4423      	add	r3, r4
 800603a:	b2dc      	uxtb	r4, r3
 800603c:	489e      	ldr	r0, [pc, #632]	@ (80062b8 <BuildFrame+0x254c>)
 800603e:	f7fa fd49 	bl	8000ad4 <OLED_GetWidthStr>
 8006042:	4603      	mov	r3, r0
 8006044:	4423      	add	r3, r4
 8006046:	b2db      	uxtb	r3, r3
 8006048:	331a      	adds	r3, #26
 800604a:	b2d9      	uxtb	r1, r3
 800604c:	2300      	movs	r3, #0
 800604e:	2227      	movs	r2, #39	@ 0x27
 8006050:	202d      	movs	r0, #45	@ 0x2d
 8006052:	f7fb fc35 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 3, 0);
 8006056:	4895      	ldr	r0, [pc, #596]	@ (80062ac <BuildFrame+0x2540>)
 8006058:	f7fa fd3c 	bl	8000ad4 <OLED_GetWidthStr>
 800605c:	4603      	mov	r3, r0
 800605e:	461c      	mov	r4, r3
 8006060:	4893      	ldr	r0, [pc, #588]	@ (80062b0 <BuildFrame+0x2544>)
 8006062:	f7fa fd37 	bl	8000ad4 <OLED_GetWidthStr>
 8006066:	4603      	mov	r3, r0
 8006068:	4423      	add	r3, r4
 800606a:	b2dc      	uxtb	r4, r3
 800606c:	4891      	ldr	r0, [pc, #580]	@ (80062b4 <BuildFrame+0x2548>)
 800606e:	f7fa fd31 	bl	8000ad4 <OLED_GetWidthStr>
 8006072:	4603      	mov	r3, r0
 8006074:	4423      	add	r3, r4
 8006076:	b2dc      	uxtb	r4, r3
 8006078:	488f      	ldr	r0, [pc, #572]	@ (80062b8 <BuildFrame+0x254c>)
 800607a:	f7fa fd2b 	bl	8000ad4 <OLED_GetWidthStr>
 800607e:	4603      	mov	r3, r0
 8006080:	4423      	add	r3, r4
 8006082:	b2dc      	uxtb	r4, r3
 8006084:	488d      	ldr	r0, [pc, #564]	@ (80062bc <BuildFrame+0x2550>)
 8006086:	f7fa fd25 	bl	8000ad4 <OLED_GetWidthStr>
 800608a:	4603      	mov	r3, r0
 800608c:	4423      	add	r3, r4
 800608e:	b2db      	uxtb	r3, r3
 8006090:	331d      	adds	r3, #29
 8006092:	b2d9      	uxtb	r1, r3
 8006094:	2300      	movs	r3, #0
 8006096:	2227      	movs	r2, #39	@ 0x27
 8006098:	202d      	movs	r0, #45	@ 0x2d
 800609a:	f7fb fc11 	bl	80018c0 <OLED_DrawChar_Modified>
							OLED_DrawChar_Modified('-', 5 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 3, 0);
 800609e:	4883      	ldr	r0, [pc, #524]	@ (80062ac <BuildFrame+0x2540>)
 80060a0:	f7fa fd18 	bl	8000ad4 <OLED_GetWidthStr>
 80060a4:	4603      	mov	r3, r0
 80060a6:	461c      	mov	r4, r3
 80060a8:	4881      	ldr	r0, [pc, #516]	@ (80062b0 <BuildFrame+0x2544>)
 80060aa:	f7fa fd13 	bl	8000ad4 <OLED_GetWidthStr>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4423      	add	r3, r4
 80060b2:	b2dc      	uxtb	r4, r3
 80060b4:	487f      	ldr	r0, [pc, #508]	@ (80062b4 <BuildFrame+0x2548>)
 80060b6:	f7fa fd0d 	bl	8000ad4 <OLED_GetWidthStr>
 80060ba:	4603      	mov	r3, r0
 80060bc:	4423      	add	r3, r4
 80060be:	b2dc      	uxtb	r4, r3
 80060c0:	487d      	ldr	r0, [pc, #500]	@ (80062b8 <BuildFrame+0x254c>)
 80060c2:	f7fa fd07 	bl	8000ad4 <OLED_GetWidthStr>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4423      	add	r3, r4
 80060ca:	b2dc      	uxtb	r4, r3
 80060cc:	487b      	ldr	r0, [pc, #492]	@ (80062bc <BuildFrame+0x2550>)
 80060ce:	f7fa fd01 	bl	8000ad4 <OLED_GetWidthStr>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4423      	add	r3, r4
 80060d6:	b2dc      	uxtb	r4, r3
 80060d8:	4879      	ldr	r0, [pc, #484]	@ (80062c0 <BuildFrame+0x2554>)
 80060da:	f7fa fcfb 	bl	8000ad4 <OLED_GetWidthStr>
 80060de:	4603      	mov	r3, r0
 80060e0:	4423      	add	r3, r4
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	3323      	adds	r3, #35	@ 0x23
 80060e6:	b2d9      	uxtb	r1, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	2227      	movs	r2, #39	@ 0x27
 80060ec:	202d      	movs	r0, #45	@ 0x2d
 80060ee:	f7fb fbe7 	bl	80018c0 <OLED_DrawChar_Modified>
					IsSetTimeDaysWaterFinished();
 80060f2:	f7fd fcc3 	bl	8003a7c <IsSetTimeDaysWaterFinished>
					OLED_DrawStr_RuModified("Pfdthibnm", 12, 13 * 4, 1);
 80060f6:	2301      	movs	r3, #1
 80060f8:	2234      	movs	r2, #52	@ 0x34
 80060fa:	210c      	movs	r1, #12
 80060fc:	4871      	ldr	r0, [pc, #452]	@ (80062c4 <BuildFrame+0x2558>)
 80060fe:	f7fb fba7 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8006102:	e0c3      	b.n	800628c <BuildFrame+0x2520>
					IsSetTimeDaysWaterFinished();
 8006104:	f7fd fcba 	bl	8003a7c <IsSetTimeDaysWaterFinished>
					if (f_DaysWaterIsSet)
 8006108:	4b6f      	ldr	r3, [pc, #444]	@ (80062c8 <BuildFrame+0x255c>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <BuildFrame+0x23ac>
						DrawSetDaysWater(1);
 8006110:	2001      	movs	r0, #1
 8006112:	f7fc fdf3 	bl	8002cfc <DrawSetDaysWater>
 8006116:	e0a6      	b.n	8006266 <BuildFrame+0x24fa>
						OLED_DrawChar_Modified('-', 5 + 12, 13 * 3, 1);
 8006118:	2301      	movs	r3, #1
 800611a:	2227      	movs	r2, #39	@ 0x27
 800611c:	2111      	movs	r1, #17
 800611e:	202d      	movs	r0, #45	@ 0x2d
 8006120:	f7fb fbce 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 3 + 12 + OLED_GetWidthStr("Gy") + 3, 13 * 3, 1);
 8006124:	4861      	ldr	r0, [pc, #388]	@ (80062ac <BuildFrame+0x2540>)
 8006126:	f7fa fcd5 	bl	8000ad4 <OLED_GetWidthStr>
 800612a:	4603      	mov	r3, r0
 800612c:	3312      	adds	r3, #18
 800612e:	b2d9      	uxtb	r1, r3
 8006130:	2301      	movs	r3, #1
 8006132:	2227      	movs	r2, #39	@ 0x27
 8006134:	202d      	movs	r0, #45	@ 0x2d
 8006136:	f7fb fbc3 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 2 + OLED_GetWidthStr("Dn"), 13 * 3, 1);
 800613a:	485c      	ldr	r0, [pc, #368]	@ (80062ac <BuildFrame+0x2540>)
 800613c:	f7fa fcca 	bl	8000ad4 <OLED_GetWidthStr>
 8006140:	4603      	mov	r3, r0
 8006142:	461c      	mov	r4, r3
 8006144:	485a      	ldr	r0, [pc, #360]	@ (80062b0 <BuildFrame+0x2544>)
 8006146:	f7fa fcc5 	bl	8000ad4 <OLED_GetWidthStr>
 800614a:	4603      	mov	r3, r0
 800614c:	4423      	add	r3, r4
 800614e:	b2db      	uxtb	r3, r3
 8006150:	3314      	adds	r3, #20
 8006152:	b2d9      	uxtb	r1, r3
 8006154:	2301      	movs	r3, #1
 8006156:	2227      	movs	r2, #39	@ 0x27
 8006158:	202d      	movs	r0, #45	@ 0x2d
 800615a:	f7fb fbb1 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 3 + 12 + OLED_GetWidthStr("Gy") + 3 * 3 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch"), 13 * 3, 1);
 800615e:	4853      	ldr	r0, [pc, #332]	@ (80062ac <BuildFrame+0x2540>)
 8006160:	f7fa fcb8 	bl	8000ad4 <OLED_GetWidthStr>
 8006164:	4603      	mov	r3, r0
 8006166:	461c      	mov	r4, r3
 8006168:	4851      	ldr	r0, [pc, #324]	@ (80062b0 <BuildFrame+0x2544>)
 800616a:	f7fa fcb3 	bl	8000ad4 <OLED_GetWidthStr>
 800616e:	4603      	mov	r3, r0
 8006170:	4423      	add	r3, r4
 8006172:	b2dc      	uxtb	r4, r3
 8006174:	484f      	ldr	r0, [pc, #316]	@ (80062b4 <BuildFrame+0x2548>)
 8006176:	f7fa fcad 	bl	8000ad4 <OLED_GetWidthStr>
 800617a:	4603      	mov	r3, r0
 800617c:	4423      	add	r3, r4
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3318      	adds	r3, #24
 8006182:	b2d9      	uxtb	r1, r3
 8006184:	2301      	movs	r3, #1
 8006186:	2227      	movs	r2, #39	@ 0x27
 8006188:	202d      	movs	r0, #45	@ 0x2d
 800618a:	f7fb fb99 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 4 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn"), 13 * 3, 1);
 800618e:	4847      	ldr	r0, [pc, #284]	@ (80062ac <BuildFrame+0x2540>)
 8006190:	f7fa fca0 	bl	8000ad4 <OLED_GetWidthStr>
 8006194:	4603      	mov	r3, r0
 8006196:	461c      	mov	r4, r3
 8006198:	4845      	ldr	r0, [pc, #276]	@ (80062b0 <BuildFrame+0x2544>)
 800619a:	f7fa fc9b 	bl	8000ad4 <OLED_GetWidthStr>
 800619e:	4603      	mov	r3, r0
 80061a0:	4423      	add	r3, r4
 80061a2:	b2dc      	uxtb	r4, r3
 80061a4:	4843      	ldr	r0, [pc, #268]	@ (80062b4 <BuildFrame+0x2548>)
 80061a6:	f7fa fc95 	bl	8000ad4 <OLED_GetWidthStr>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4423      	add	r3, r4
 80061ae:	b2dc      	uxtb	r4, r3
 80061b0:	4841      	ldr	r0, [pc, #260]	@ (80062b8 <BuildFrame+0x254c>)
 80061b2:	f7fa fc8f 	bl	8000ad4 <OLED_GetWidthStr>
 80061b6:	4603      	mov	r3, r0
 80061b8:	4423      	add	r3, r4
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	331a      	adds	r3, #26
 80061be:	b2d9      	uxtb	r1, r3
 80061c0:	2301      	movs	r3, #1
 80061c2:	2227      	movs	r2, #39	@ 0x27
 80061c4:	202d      	movs	r0, #45	@ 0x2d
 80061c6:	f7fb fb7b 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 2 + 12 + OLED_GetWidthStr("Gy") + 3 * 5 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn"), 13 * 3, 1);
 80061ca:	4838      	ldr	r0, [pc, #224]	@ (80062ac <BuildFrame+0x2540>)
 80061cc:	f7fa fc82 	bl	8000ad4 <OLED_GetWidthStr>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461c      	mov	r4, r3
 80061d4:	4836      	ldr	r0, [pc, #216]	@ (80062b0 <BuildFrame+0x2544>)
 80061d6:	f7fa fc7d 	bl	8000ad4 <OLED_GetWidthStr>
 80061da:	4603      	mov	r3, r0
 80061dc:	4423      	add	r3, r4
 80061de:	b2dc      	uxtb	r4, r3
 80061e0:	4834      	ldr	r0, [pc, #208]	@ (80062b4 <BuildFrame+0x2548>)
 80061e2:	f7fa fc77 	bl	8000ad4 <OLED_GetWidthStr>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4423      	add	r3, r4
 80061ea:	b2dc      	uxtb	r4, r3
 80061ec:	4832      	ldr	r0, [pc, #200]	@ (80062b8 <BuildFrame+0x254c>)
 80061ee:	f7fa fc71 	bl	8000ad4 <OLED_GetWidthStr>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4423      	add	r3, r4
 80061f6:	b2dc      	uxtb	r4, r3
 80061f8:	4830      	ldr	r0, [pc, #192]	@ (80062bc <BuildFrame+0x2550>)
 80061fa:	f7fa fc6b 	bl	8000ad4 <OLED_GetWidthStr>
 80061fe:	4603      	mov	r3, r0
 8006200:	4423      	add	r3, r4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	331d      	adds	r3, #29
 8006206:	b2d9      	uxtb	r1, r3
 8006208:	2301      	movs	r3, #1
 800620a:	2227      	movs	r2, #39	@ 0x27
 800620c:	202d      	movs	r0, #45	@ 0x2d
 800620e:	f7fb fb57 	bl	80018c0 <OLED_DrawChar_Modified>
						OLED_DrawChar_Modified('-', 5 + 12 + OLED_GetWidthStr("Gy") + 3 * 6 + OLED_GetWidthStr("Dn") + OLED_GetWidthStr("Ch") + OLED_GetWidthStr("Xn") + OLED_GetWidthStr("Gn") + OLED_GetWidthStr("C,"), 13 * 3, 1);
 8006212:	4826      	ldr	r0, [pc, #152]	@ (80062ac <BuildFrame+0x2540>)
 8006214:	f7fa fc5e 	bl	8000ad4 <OLED_GetWidthStr>
 8006218:	4603      	mov	r3, r0
 800621a:	461c      	mov	r4, r3
 800621c:	4824      	ldr	r0, [pc, #144]	@ (80062b0 <BuildFrame+0x2544>)
 800621e:	f7fa fc59 	bl	8000ad4 <OLED_GetWidthStr>
 8006222:	4603      	mov	r3, r0
 8006224:	4423      	add	r3, r4
 8006226:	b2dc      	uxtb	r4, r3
 8006228:	4822      	ldr	r0, [pc, #136]	@ (80062b4 <BuildFrame+0x2548>)
 800622a:	f7fa fc53 	bl	8000ad4 <OLED_GetWidthStr>
 800622e:	4603      	mov	r3, r0
 8006230:	4423      	add	r3, r4
 8006232:	b2dc      	uxtb	r4, r3
 8006234:	4820      	ldr	r0, [pc, #128]	@ (80062b8 <BuildFrame+0x254c>)
 8006236:	f7fa fc4d 	bl	8000ad4 <OLED_GetWidthStr>
 800623a:	4603      	mov	r3, r0
 800623c:	4423      	add	r3, r4
 800623e:	b2dc      	uxtb	r4, r3
 8006240:	481e      	ldr	r0, [pc, #120]	@ (80062bc <BuildFrame+0x2550>)
 8006242:	f7fa fc47 	bl	8000ad4 <OLED_GetWidthStr>
 8006246:	4603      	mov	r3, r0
 8006248:	4423      	add	r3, r4
 800624a:	b2dc      	uxtb	r4, r3
 800624c:	481c      	ldr	r0, [pc, #112]	@ (80062c0 <BuildFrame+0x2554>)
 800624e:	f7fa fc41 	bl	8000ad4 <OLED_GetWidthStr>
 8006252:	4603      	mov	r3, r0
 8006254:	4423      	add	r3, r4
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3323      	adds	r3, #35	@ 0x23
 800625a:	b2d9      	uxtb	r1, r3
 800625c:	2301      	movs	r3, #1
 800625e:	2227      	movs	r2, #39	@ 0x27
 8006260:	202d      	movs	r0, #45	@ 0x2d
 8006262:	f7fb fb2d 	bl	80018c0 <OLED_DrawChar_Modified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8006266:	2300      	movs	r3, #0
 8006268:	9302      	str	r3, [sp, #8]
 800626a:	233a      	movs	r3, #58	@ 0x3a
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	2309      	movs	r3, #9
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	233d      	movs	r3, #61	@ 0x3d
 8006274:	2203      	movs	r2, #3
 8006276:	2137      	movs	r1, #55	@ 0x37
 8006278:	2003      	movs	r0, #3
 800627a:	f7fb fbf7 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Pfdthibnm", 12, 13 * 4, 0);
 800627e:	2300      	movs	r3, #0
 8006280:	2234      	movs	r2, #52	@ 0x34
 8006282:	210c      	movs	r1, #12
 8006284:	480f      	ldr	r0, [pc, #60]	@ (80062c4 <BuildFrame+0x2558>)
 8006286:	f7fb fae3 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 800628a:	bf00      	nop
		break;
 800628c:	f001 ba8e 	b.w	80077ac <BuildFrame+0x3a40>


		// 20. Кадр сброса настроек
		case 20:

			switch(pos_cursor)
 8006290:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <BuildFrame+0x2560>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b04      	cmp	r3, #4
 8006296:	f000 80d7 	beq.w	8006448 <BuildFrame+0x26dc>
 800629a:	2b04      	cmp	r3, #4
 800629c:	f301 8275 	bgt.w	800778a <BuildFrame+0x3a1e>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <BuildFrame+0x2564>
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d071      	beq.n	800638c <BuildFrame+0x2620>
						OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 4, 0);

				break;
			}

		break;
 80062a8:	f001 ba6f 	b.w	800778a <BuildFrame+0x3a1e>
 80062ac:	08014240 	.word	0x08014240
 80062b0:	08014244 	.word	0x08014244
 80062b4:	08014248 	.word	0x08014248
 80062b8:	0801424c 	.word	0x0801424c
 80062bc:	08014250 	.word	0x08014250
 80062c0:	08014254 	.word	0x08014254
 80062c4:	080144f4 	.word	0x080144f4
 80062c8:	20000a1c 	.word	0x20000a1c
 80062cc:	20000a3d 	.word	0x20000a3d
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 80062d0:	2300      	movs	r3, #0
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	230d      	movs	r3, #13
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	2309      	movs	r3, #9
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2310      	movs	r3, #16
 80062de:	2203      	movs	r2, #3
 80062e0:	210a      	movs	r1, #10
 80062e2:	2003      	movs	r0, #3
 80062e4:	f7fb fbc2 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 0);
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	210c      	movs	r1, #12
 80062ee:	48c2      	ldr	r0, [pc, #776]	@ (80065f8 <BuildFrame+0x288c>)
 80062f0:	f7fb faae 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 1, 0);
 80062f4:	2300      	movs	r3, #0
 80062f6:	220d      	movs	r2, #13
 80062f8:	210c      	movs	r1, #12
 80062fa:	48c0      	ldr	r0, [pc, #768]	@ (80065fc <BuildFrame+0x2890>)
 80062fc:	f7fb faa8 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("dhtvtyb", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 1, 0);
 8006300:	48be      	ldr	r0, [pc, #760]	@ (80065fc <BuildFrame+0x2890>)
 8006302:	f7fa fbe7 	bl	8000ad4 <OLED_GetWidthStr>
 8006306:	4603      	mov	r3, r0
 8006308:	330f      	adds	r3, #15
 800630a:	b2d9      	uxtb	r1, r3
 800630c:	2300      	movs	r3, #0
 800630e:	220d      	movs	r2, #13
 8006310:	48bb      	ldr	r0, [pc, #748]	@ (8006600 <BuildFrame+0x2894>)
 8006312:	f7fb fa9d 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 1);
 8006316:	2301      	movs	r3, #1
 8006318:	221a      	movs	r2, #26
 800631a:	210c      	movs	r1, #12
 800631c:	48b6      	ldr	r0, [pc, #728]	@ (80065f8 <BuildFrame+0x288c>)
 800631e:	f7fb fa97 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 3, 1);
 8006322:	2301      	movs	r3, #1
 8006324:	2227      	movs	r2, #39	@ 0x27
 8006326:	210c      	movs	r1, #12
 8006328:	48b4      	ldr	r0, [pc, #720]	@ (80065fc <BuildFrame+0x2890>)
 800632a:	f7fb fa91 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 3, 1);
 800632e:	48b3      	ldr	r0, [pc, #716]	@ (80065fc <BuildFrame+0x2890>)
 8006330:	f7fa fbd0 	bl	8000ad4 <OLED_GetWidthStr>
 8006334:	4603      	mov	r3, r0
 8006336:	330f      	adds	r3, #15
 8006338:	b2d9      	uxtb	r1, r3
 800633a:	2301      	movs	r3, #1
 800633c:	2227      	movs	r2, #39	@ 0x27
 800633e:	48b1      	ldr	r0, [pc, #708]	@ (8006604 <BuildFrame+0x2898>)
 8006340:	f7fb fa86 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 1);
 8006344:	2301      	movs	r3, #1
 8006346:	2234      	movs	r2, #52	@ 0x34
 8006348:	210c      	movs	r1, #12
 800634a:	48ab      	ldr	r0, [pc, #684]	@ (80065f8 <BuildFrame+0x288c>)
 800634c:	f7fb fa80 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 4, 1);
 8006350:	48a9      	ldr	r0, [pc, #676]	@ (80065f8 <BuildFrame+0x288c>)
 8006352:	f7fa fbbf 	bl	8000ad4 <OLED_GetWidthStr>
 8006356:	4603      	mov	r3, r0
 8006358:	330f      	adds	r3, #15
 800635a:	b2d9      	uxtb	r1, r3
 800635c:	2301      	movs	r3, #1
 800635e:	2234      	movs	r2, #52	@ 0x34
 8006360:	48a9      	ldr	r0, [pc, #676]	@ (8006608 <BuildFrame+0x289c>)
 8006362:	f7fb fa75 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 4, 1);
 8006366:	48a4      	ldr	r0, [pc, #656]	@ (80065f8 <BuildFrame+0x288c>)
 8006368:	f7fa fbb4 	bl	8000ad4 <OLED_GetWidthStr>
 800636c:	4603      	mov	r3, r0
 800636e:	461c      	mov	r4, r3
 8006370:	48a5      	ldr	r0, [pc, #660]	@ (8006608 <BuildFrame+0x289c>)
 8006372:	f7fa fbaf 	bl	8000ad4 <OLED_GetWidthStr>
 8006376:	4603      	mov	r3, r0
 8006378:	4423      	add	r3, r4
 800637a:	b2db      	uxtb	r3, r3
 800637c:	3310      	adds	r3, #16
 800637e:	b2d9      	uxtb	r1, r3
 8006380:	2301      	movs	r3, #1
 8006382:	2234      	movs	r2, #52	@ 0x34
 8006384:	202d      	movs	r0, #45	@ 0x2d
 8006386:	f7fb fa9b 	bl	80018c0 <OLED_DrawChar_Modified>
				break;
 800638a:	e0bb      	b.n	8006504 <BuildFrame+0x2798>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 1);
 800638c:	2301      	movs	r3, #1
 800638e:	2200      	movs	r2, #0
 8006390:	210c      	movs	r1, #12
 8006392:	4899      	ldr	r0, [pc, #612]	@ (80065f8 <BuildFrame+0x288c>)
 8006394:	f7fb fa5c 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 1, 1);
 8006398:	2301      	movs	r3, #1
 800639a:	220d      	movs	r2, #13
 800639c:	210c      	movs	r1, #12
 800639e:	4897      	ldr	r0, [pc, #604]	@ (80065fc <BuildFrame+0x2890>)
 80063a0:	f7fb fa56 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("dhtvtyb", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 1, 1);
 80063a4:	4895      	ldr	r0, [pc, #596]	@ (80065fc <BuildFrame+0x2890>)
 80063a6:	f7fa fb95 	bl	8000ad4 <OLED_GetWidthStr>
 80063aa:	4603      	mov	r3, r0
 80063ac:	330f      	adds	r3, #15
 80063ae:	b2d9      	uxtb	r1, r3
 80063b0:	2301      	movs	r3, #1
 80063b2:	220d      	movs	r2, #13
 80063b4:	4892      	ldr	r0, [pc, #584]	@ (8006600 <BuildFrame+0x2894>)
 80063b6:	f7fb fa4b 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3 - 3, 3, (int16_t) 13 * 3 + 3, 9, (int16_t) 13 * 3, 0);
 80063ba:	2300      	movs	r3, #0
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	2327      	movs	r3, #39	@ 0x27
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	2309      	movs	r3, #9
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	232a      	movs	r3, #42	@ 0x2a
 80063c8:	2203      	movs	r2, #3
 80063ca:	2124      	movs	r1, #36	@ 0x24
 80063cc:	2003      	movs	r0, #3
 80063ce:	f7fb fb4d 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 0);
 80063d2:	2300      	movs	r3, #0
 80063d4:	221a      	movs	r2, #26
 80063d6:	210c      	movs	r1, #12
 80063d8:	4887      	ldr	r0, [pc, #540]	@ (80065f8 <BuildFrame+0x288c>)
 80063da:	f7fb fa39 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 3, 0);
 80063de:	2300      	movs	r3, #0
 80063e0:	2227      	movs	r2, #39	@ 0x27
 80063e2:	210c      	movs	r1, #12
 80063e4:	4885      	ldr	r0, [pc, #532]	@ (80065fc <BuildFrame+0x2890>)
 80063e6:	f7fb fa33 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 3, 0);
 80063ea:	4884      	ldr	r0, [pc, #528]	@ (80065fc <BuildFrame+0x2890>)
 80063ec:	f7fa fb72 	bl	8000ad4 <OLED_GetWidthStr>
 80063f0:	4603      	mov	r3, r0
 80063f2:	330f      	adds	r3, #15
 80063f4:	b2d9      	uxtb	r1, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	2227      	movs	r2, #39	@ 0x27
 80063fa:	4882      	ldr	r0, [pc, #520]	@ (8006604 <BuildFrame+0x2898>)
 80063fc:	f7fb fa28 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 1);
 8006400:	2301      	movs	r3, #1
 8006402:	2234      	movs	r2, #52	@ 0x34
 8006404:	210c      	movs	r1, #12
 8006406:	487c      	ldr	r0, [pc, #496]	@ (80065f8 <BuildFrame+0x288c>)
 8006408:	f7fb fa22 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 4, 1);
 800640c:	487a      	ldr	r0, [pc, #488]	@ (80065f8 <BuildFrame+0x288c>)
 800640e:	f7fa fb61 	bl	8000ad4 <OLED_GetWidthStr>
 8006412:	4603      	mov	r3, r0
 8006414:	330f      	adds	r3, #15
 8006416:	b2d9      	uxtb	r1, r3
 8006418:	2301      	movs	r3, #1
 800641a:	2234      	movs	r2, #52	@ 0x34
 800641c:	487a      	ldr	r0, [pc, #488]	@ (8006608 <BuildFrame+0x289c>)
 800641e:	f7fb fa17 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 4, 1);
 8006422:	4875      	ldr	r0, [pc, #468]	@ (80065f8 <BuildFrame+0x288c>)
 8006424:	f7fa fb56 	bl	8000ad4 <OLED_GetWidthStr>
 8006428:	4603      	mov	r3, r0
 800642a:	461c      	mov	r4, r3
 800642c:	4876      	ldr	r0, [pc, #472]	@ (8006608 <BuildFrame+0x289c>)
 800642e:	f7fa fb51 	bl	8000ad4 <OLED_GetWidthStr>
 8006432:	4603      	mov	r3, r0
 8006434:	4423      	add	r3, r4
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3310      	adds	r3, #16
 800643a:	b2d9      	uxtb	r1, r3
 800643c:	2301      	movs	r3, #1
 800643e:	2234      	movs	r2, #52	@ 0x34
 8006440:	202d      	movs	r0, #45	@ 0x2d
 8006442:	f7fb fa3d 	bl	80018c0 <OLED_DrawChar_Modified>
				break;
 8006446:	e05d      	b.n	8006504 <BuildFrame+0x2798>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 1);
 8006448:	2301      	movs	r3, #1
 800644a:	2200      	movs	r2, #0
 800644c:	210c      	movs	r1, #12
 800644e:	486a      	ldr	r0, [pc, #424]	@ (80065f8 <BuildFrame+0x288c>)
 8006450:	f7fb f9fe 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 1, 1);
 8006454:	2301      	movs	r3, #1
 8006456:	220d      	movs	r2, #13
 8006458:	210c      	movs	r1, #12
 800645a:	4868      	ldr	r0, [pc, #416]	@ (80065fc <BuildFrame+0x2890>)
 800645c:	f7fb f9f8 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("dhtvtyb", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 1, 1);
 8006460:	4866      	ldr	r0, [pc, #408]	@ (80065fc <BuildFrame+0x2890>)
 8006462:	f7fa fb37 	bl	8000ad4 <OLED_GetWidthStr>
 8006466:	4603      	mov	r3, r0
 8006468:	330f      	adds	r3, #15
 800646a:	b2d9      	uxtb	r1, r3
 800646c:	2301      	movs	r3, #1
 800646e:	220d      	movs	r2, #13
 8006470:	4863      	ldr	r0, [pc, #396]	@ (8006600 <BuildFrame+0x2894>)
 8006472:	f7fb f9ed 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 1);
 8006476:	2301      	movs	r3, #1
 8006478:	221a      	movs	r2, #26
 800647a:	210c      	movs	r1, #12
 800647c:	485e      	ldr	r0, [pc, #376]	@ (80065f8 <BuildFrame+0x288c>)
 800647e:	f7fb f9e7 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("yfcnhjqrb", 12, 13 * 3, 1);
 8006482:	2301      	movs	r3, #1
 8006484:	2227      	movs	r2, #39	@ 0x27
 8006486:	210c      	movs	r1, #12
 8006488:	485c      	ldr	r0, [pc, #368]	@ (80065fc <BuildFrame+0x2890>)
 800648a:	f7fb f9e1 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("yfcnhjqrb") + 3, 13 * 3, 1);
 800648e:	485b      	ldr	r0, [pc, #364]	@ (80065fc <BuildFrame+0x2890>)
 8006490:	f7fa fb20 	bl	8000ad4 <OLED_GetWidthStr>
 8006494:	4603      	mov	r3, r0
 8006496:	330f      	adds	r3, #15
 8006498:	b2d9      	uxtb	r1, r3
 800649a:	2301      	movs	r3, #1
 800649c:	2227      	movs	r2, #39	@ 0x27
 800649e:	4859      	ldr	r0, [pc, #356]	@ (8006604 <BuildFrame+0x2898>)
 80064a0:	f7fb f9d6 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 80064a4:	2300      	movs	r3, #0
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	233a      	movs	r3, #58	@ 0x3a
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	2309      	movs	r3, #9
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	233d      	movs	r3, #61	@ 0x3d
 80064b2:	2203      	movs	r2, #3
 80064b4:	2137      	movs	r1, #55	@ 0x37
 80064b6:	2003      	movs	r0, #3
 80064b8:	f7fb fad8 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 0);
 80064bc:	2300      	movs	r3, #0
 80064be:	2234      	movs	r2, #52	@ 0x34
 80064c0:	210c      	movs	r1, #12
 80064c2:	484d      	ldr	r0, [pc, #308]	@ (80065f8 <BuildFrame+0x288c>)
 80064c4:	f7fb f9c4 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 4, 0);
 80064c8:	484b      	ldr	r0, [pc, #300]	@ (80065f8 <BuildFrame+0x288c>)
 80064ca:	f7fa fb03 	bl	8000ad4 <OLED_GetWidthStr>
 80064ce:	4603      	mov	r3, r0
 80064d0:	330f      	adds	r3, #15
 80064d2:	b2d9      	uxtb	r1, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	2234      	movs	r2, #52	@ 0x34
 80064d8:	484b      	ldr	r0, [pc, #300]	@ (8006608 <BuildFrame+0x289c>)
 80064da:	f7fb f9b9 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 4, 0);
 80064de:	4846      	ldr	r0, [pc, #280]	@ (80065f8 <BuildFrame+0x288c>)
 80064e0:	f7fa faf8 	bl	8000ad4 <OLED_GetWidthStr>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461c      	mov	r4, r3
 80064e8:	4847      	ldr	r0, [pc, #284]	@ (8006608 <BuildFrame+0x289c>)
 80064ea:	f7fa faf3 	bl	8000ad4 <OLED_GetWidthStr>
 80064ee:	4603      	mov	r3, r0
 80064f0:	4423      	add	r3, r4
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	3310      	adds	r3, #16
 80064f6:	b2d9      	uxtb	r1, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	2234      	movs	r2, #52	@ 0x34
 80064fc:	202d      	movs	r0, #45	@ 0x2d
 80064fe:	f7fb f9df 	bl	80018c0 <OLED_DrawChar_Modified>
				break;
 8006502:	bf00      	nop
		break;
 8006504:	f001 b941 	b.w	800778a <BuildFrame+0x3a1e>

		// 21. Сброс настроек (2)
		case 21:

			switch(pos_cursor)
 8006508:	4b40      	ldr	r3, [pc, #256]	@ (800660c <BuildFrame+0x28a0>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b04      	cmp	r3, #4
 800650e:	f000 80f2 	beq.w	80066f6 <BuildFrame+0x298a>
 8006512:	2b04      	cmp	r3, #4
 8006514:	f301 813b 	bgt.w	800778e <BuildFrame+0x3a22>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <BuildFrame+0x27ba>
 800651c:	2b02      	cmp	r3, #2
 800651e:	f000 8081 	beq.w	8006624 <BuildFrame+0x28b8>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 0);

				break;
			}

		break;
 8006522:	f001 b934 	b.w	800778e <BuildFrame+0x3a22>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 8006526:	2300      	movs	r3, #0
 8006528:	9302      	str	r3, [sp, #8]
 800652a:	230d      	movs	r3, #13
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2309      	movs	r3, #9
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2310      	movs	r3, #16
 8006534:	2203      	movs	r2, #3
 8006536:	210a      	movs	r1, #10
 8006538:	2003      	movs	r0, #3
 800653a:	f7fb fa97 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 0);
 800653e:	2300      	movs	r3, #0
 8006540:	2200      	movs	r2, #0
 8006542:	210c      	movs	r1, #12
 8006544:	482c      	ldr	r0, [pc, #176]	@ (80065f8 <BuildFrame+0x288c>)
 8006546:	f7fb f983 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 0, 0);
 800654a:	482b      	ldr	r0, [pc, #172]	@ (80065f8 <BuildFrame+0x288c>)
 800654c:	f7fa fac2 	bl	8000ad4 <OLED_GetWidthStr>
 8006550:	4603      	mov	r3, r0
 8006552:	330f      	adds	r3, #15
 8006554:	b2d9      	uxtb	r1, r3
 8006556:	2300      	movs	r3, #0
 8006558:	2200      	movs	r2, #0
 800655a:	482b      	ldr	r0, [pc, #172]	@ (8006608 <BuildFrame+0x289c>)
 800655c:	f7fb f978 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 0, 0);
 8006560:	4825      	ldr	r0, [pc, #148]	@ (80065f8 <BuildFrame+0x288c>)
 8006562:	f7fa fab7 	bl	8000ad4 <OLED_GetWidthStr>
 8006566:	4603      	mov	r3, r0
 8006568:	461c      	mov	r4, r3
 800656a:	4827      	ldr	r0, [pc, #156]	@ (8006608 <BuildFrame+0x289c>)
 800656c:	f7fa fab2 	bl	8000ad4 <OLED_GetWidthStr>
 8006570:	4603      	mov	r3, r0
 8006572:	4423      	add	r3, r4
 8006574:	b2db      	uxtb	r3, r3
 8006576:	3310      	adds	r3, #16
 8006578:	b2d9      	uxtb	r1, r3
 800657a:	2300      	movs	r3, #0
 800657c:	2200      	movs	r2, #0
 800657e:	202d      	movs	r0, #45	@ 0x2d
 8006580:	f7fb f99e 	bl	80018c0 <OLED_DrawChar_Modified>
					OLED_DrawStr_RuModified("jnrk.xtybt", 12, 13 * 1, 0);
 8006584:	2300      	movs	r3, #0
 8006586:	220d      	movs	r2, #13
 8006588:	210c      	movs	r1, #12
 800658a:	4821      	ldr	r0, [pc, #132]	@ (8006610 <BuildFrame+0x28a4>)
 800658c:	f7fb f960 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12 + OLED_GetWidthStr("jnrk.xtybt") + 3, 13 * 1, 0);
 8006590:	481f      	ldr	r0, [pc, #124]	@ (8006610 <BuildFrame+0x28a4>)
 8006592:	f7fa fa9f 	bl	8000ad4 <OLED_GetWidthStr>
 8006596:	4603      	mov	r3, r0
 8006598:	330f      	adds	r3, #15
 800659a:	b2d9      	uxtb	r1, r3
 800659c:	2300      	movs	r3, #0
 800659e:	220d      	movs	r2, #13
 80065a0:	481c      	ldr	r0, [pc, #112]	@ (8006614 <BuildFrame+0x28a8>)
 80065a2:	f7fb f955 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 1);
 80065a6:	2301      	movs	r3, #1
 80065a8:	221a      	movs	r2, #26
 80065aa:	210c      	movs	r1, #12
 80065ac:	4812      	ldr	r0, [pc, #72]	@ (80065f8 <BuildFrame+0x288c>)
 80065ae:	f7fb f94f 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 2, 1);
 80065b2:	4811      	ldr	r0, [pc, #68]	@ (80065f8 <BuildFrame+0x288c>)
 80065b4:	f7fa fa8e 	bl	8000ad4 <OLED_GetWidthStr>
 80065b8:	4603      	mov	r3, r0
 80065ba:	330f      	adds	r3, #15
 80065bc:	b2d9      	uxtb	r1, r3
 80065be:	2301      	movs	r3, #1
 80065c0:	221a      	movs	r2, #26
 80065c2:	4815      	ldr	r0, [pc, #84]	@ (8006618 <BuildFrame+0x28ac>)
 80065c4:	f7fb f944 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 3, 1);
 80065c8:	2301      	movs	r3, #1
 80065ca:	2227      	movs	r2, #39	@ 0x27
 80065cc:	210c      	movs	r1, #12
 80065ce:	4813      	ldr	r0, [pc, #76]	@ (800661c <BuildFrame+0x28b0>)
 80065d0:	f7fb f93e 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 3, 1);
 80065d4:	4811      	ldr	r0, [pc, #68]	@ (800661c <BuildFrame+0x28b0>)
 80065d6:	f7fa fa7d 	bl	8000ad4 <OLED_GetWidthStr>
 80065da:	4603      	mov	r3, r0
 80065dc:	330f      	adds	r3, #15
 80065de:	b2d9      	uxtb	r1, r3
 80065e0:	2301      	movs	r3, #1
 80065e2:	2227      	movs	r2, #39	@ 0x27
 80065e4:	480e      	ldr	r0, [pc, #56]	@ (8006620 <BuildFrame+0x28b4>)
 80065e6:	f7fb f933 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 1);
 80065ea:	2301      	movs	r3, #1
 80065ec:	2234      	movs	r2, #52	@ 0x34
 80065ee:	210c      	movs	r1, #12
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <BuildFrame+0x288c>)
 80065f2:	f7fb f92d 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80065f6:	e0e7      	b.n	80067c8 <BuildFrame+0x2a5c>
 80065f8:	08014500 	.word	0x08014500
 80065fc:	0801450c 	.word	0x0801450c
 8006600:	0801433c 	.word	0x0801433c
 8006604:	08014258 	.word	0x08014258
 8006608:	08014518 	.word	0x08014518
 800660c:	20000a3d 	.word	0x20000a3d
 8006610:	08014520 	.word	0x08014520
 8006614:	08014354 	.word	0x08014354
 8006618:	08014368 	.word	0x08014368
 800661c:	0801437c 	.word	0x0801437c
 8006620:	08014384 	.word	0x08014384
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 1);
 8006624:	2301      	movs	r3, #1
 8006626:	2200      	movs	r2, #0
 8006628:	210c      	movs	r1, #12
 800662a:	488a      	ldr	r0, [pc, #552]	@ (8006854 <BuildFrame+0x2ae8>)
 800662c:	f7fb f910 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 0, 1);
 8006630:	4888      	ldr	r0, [pc, #544]	@ (8006854 <BuildFrame+0x2ae8>)
 8006632:	f7fa fa4f 	bl	8000ad4 <OLED_GetWidthStr>
 8006636:	4603      	mov	r3, r0
 8006638:	330f      	adds	r3, #15
 800663a:	b2d9      	uxtb	r1, r3
 800663c:	2301      	movs	r3, #1
 800663e:	2200      	movs	r2, #0
 8006640:	4885      	ldr	r0, [pc, #532]	@ (8006858 <BuildFrame+0x2aec>)
 8006642:	f7fb f905 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 0, 1);
 8006646:	4883      	ldr	r0, [pc, #524]	@ (8006854 <BuildFrame+0x2ae8>)
 8006648:	f7fa fa44 	bl	8000ad4 <OLED_GetWidthStr>
 800664c:	4603      	mov	r3, r0
 800664e:	461c      	mov	r4, r3
 8006650:	4881      	ldr	r0, [pc, #516]	@ (8006858 <BuildFrame+0x2aec>)
 8006652:	f7fa fa3f 	bl	8000ad4 <OLED_GetWidthStr>
 8006656:	4603      	mov	r3, r0
 8006658:	4423      	add	r3, r4
 800665a:	b2db      	uxtb	r3, r3
 800665c:	3310      	adds	r3, #16
 800665e:	b2d9      	uxtb	r1, r3
 8006660:	2301      	movs	r3, #1
 8006662:	2200      	movs	r2, #0
 8006664:	202d      	movs	r0, #45	@ 0x2d
 8006666:	f7fb f92b 	bl	80018c0 <OLED_DrawChar_Modified>
					OLED_DrawStr_RuModified("jnrk.xtybt", 12, 13 * 1, 1);
 800666a:	2301      	movs	r3, #1
 800666c:	220d      	movs	r2, #13
 800666e:	210c      	movs	r1, #12
 8006670:	487a      	ldr	r0, [pc, #488]	@ (800685c <BuildFrame+0x2af0>)
 8006672:	f7fb f8ed 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12 + OLED_GetWidthStr("jnrk.xtybt") + 3, 13 * 1, 1);
 8006676:	4879      	ldr	r0, [pc, #484]	@ (800685c <BuildFrame+0x2af0>)
 8006678:	f7fa fa2c 	bl	8000ad4 <OLED_GetWidthStr>
 800667c:	4603      	mov	r3, r0
 800667e:	330f      	adds	r3, #15
 8006680:	b2d9      	uxtb	r1, r3
 8006682:	2301      	movs	r3, #1
 8006684:	220d      	movs	r2, #13
 8006686:	4876      	ldr	r0, [pc, #472]	@ (8006860 <BuildFrame+0x2af4>)
 8006688:	f7fb f8e2 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3 - 3, 3, (int16_t) 13 * 3 + 3, 9, (int16_t) 13 * 3, 0);
 800668c:	2300      	movs	r3, #0
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	2327      	movs	r3, #39	@ 0x27
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	2309      	movs	r3, #9
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	232a      	movs	r3, #42	@ 0x2a
 800669a:	2203      	movs	r2, #3
 800669c:	2124      	movs	r1, #36	@ 0x24
 800669e:	2003      	movs	r0, #3
 80066a0:	f7fb f9e4 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 0);
 80066a4:	2300      	movs	r3, #0
 80066a6:	221a      	movs	r2, #26
 80066a8:	210c      	movs	r1, #12
 80066aa:	486a      	ldr	r0, [pc, #424]	@ (8006854 <BuildFrame+0x2ae8>)
 80066ac:	f7fb f8d0 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 2, 0);
 80066b0:	4868      	ldr	r0, [pc, #416]	@ (8006854 <BuildFrame+0x2ae8>)
 80066b2:	f7fa fa0f 	bl	8000ad4 <OLED_GetWidthStr>
 80066b6:	4603      	mov	r3, r0
 80066b8:	330f      	adds	r3, #15
 80066ba:	b2d9      	uxtb	r1, r3
 80066bc:	2300      	movs	r3, #0
 80066be:	221a      	movs	r2, #26
 80066c0:	4868      	ldr	r0, [pc, #416]	@ (8006864 <BuildFrame+0x2af8>)
 80066c2:	f7fb f8c5 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 3, 0);
 80066c6:	2300      	movs	r3, #0
 80066c8:	2227      	movs	r2, #39	@ 0x27
 80066ca:	210c      	movs	r1, #12
 80066cc:	4866      	ldr	r0, [pc, #408]	@ (8006868 <BuildFrame+0x2afc>)
 80066ce:	f7fb f8bf 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 3, 0);
 80066d2:	4865      	ldr	r0, [pc, #404]	@ (8006868 <BuildFrame+0x2afc>)
 80066d4:	f7fa f9fe 	bl	8000ad4 <OLED_GetWidthStr>
 80066d8:	4603      	mov	r3, r0
 80066da:	330f      	adds	r3, #15
 80066dc:	b2d9      	uxtb	r1, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	2227      	movs	r2, #39	@ 0x27
 80066e2:	4862      	ldr	r0, [pc, #392]	@ (800686c <BuildFrame+0x2b00>)
 80066e4:	f7fb f8b4 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 1);
 80066e8:	2301      	movs	r3, #1
 80066ea:	2234      	movs	r2, #52	@ 0x34
 80066ec:	210c      	movs	r1, #12
 80066ee:	4859      	ldr	r0, [pc, #356]	@ (8006854 <BuildFrame+0x2ae8>)
 80066f0:	f7fb f8ae 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80066f4:	e068      	b.n	80067c8 <BuildFrame+0x2a5c>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 1);
 80066f6:	2301      	movs	r3, #1
 80066f8:	2200      	movs	r2, #0
 80066fa:	210c      	movs	r1, #12
 80066fc:	4855      	ldr	r0, [pc, #340]	@ (8006854 <BuildFrame+0x2ae8>)
 80066fe:	f7fb f8a7 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("fdnj", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 0, 1);
 8006702:	4854      	ldr	r0, [pc, #336]	@ (8006854 <BuildFrame+0x2ae8>)
 8006704:	f7fa f9e6 	bl	8000ad4 <OLED_GetWidthStr>
 8006708:	4603      	mov	r3, r0
 800670a:	330f      	adds	r3, #15
 800670c:	b2d9      	uxtb	r1, r3
 800670e:	2301      	movs	r3, #1
 8006710:	2200      	movs	r2, #0
 8006712:	4851      	ldr	r0, [pc, #324]	@ (8006858 <BuildFrame+0x2aec>)
 8006714:	f7fb f89c 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("C,hjcbnm") + 3 + OLED_GetWidthStr("fdnj") + 1, 13 * 0, 1);
 8006718:	484e      	ldr	r0, [pc, #312]	@ (8006854 <BuildFrame+0x2ae8>)
 800671a:	f7fa f9db 	bl	8000ad4 <OLED_GetWidthStr>
 800671e:	4603      	mov	r3, r0
 8006720:	461c      	mov	r4, r3
 8006722:	484d      	ldr	r0, [pc, #308]	@ (8006858 <BuildFrame+0x2aec>)
 8006724:	f7fa f9d6 	bl	8000ad4 <OLED_GetWidthStr>
 8006728:	4603      	mov	r3, r0
 800672a:	4423      	add	r3, r4
 800672c:	b2db      	uxtb	r3, r3
 800672e:	3310      	adds	r3, #16
 8006730:	b2d9      	uxtb	r1, r3
 8006732:	2301      	movs	r3, #1
 8006734:	2200      	movs	r2, #0
 8006736:	202d      	movs	r0, #45	@ 0x2d
 8006738:	f7fb f8c2 	bl	80018c0 <OLED_DrawChar_Modified>
					OLED_DrawStr_RuModified("jnrk.xtybt", 12, 13 * 1, 1);
 800673c:	2301      	movs	r3, #1
 800673e:	220d      	movs	r2, #13
 8006740:	210c      	movs	r1, #12
 8006742:	4846      	ldr	r0, [pc, #280]	@ (800685c <BuildFrame+0x2af0>)
 8006744:	f7fb f884 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("'rhfyf", 12 + OLED_GetWidthStr("jnrk.xtybt") + 3, 13 * 1, 1);
 8006748:	4844      	ldr	r0, [pc, #272]	@ (800685c <BuildFrame+0x2af0>)
 800674a:	f7fa f9c3 	bl	8000ad4 <OLED_GetWidthStr>
 800674e:	4603      	mov	r3, r0
 8006750:	330f      	adds	r3, #15
 8006752:	b2d9      	uxtb	r1, r3
 8006754:	2301      	movs	r3, #1
 8006756:	220d      	movs	r2, #13
 8006758:	4841      	ldr	r0, [pc, #260]	@ (8006860 <BuildFrame+0x2af4>)
 800675a:	f7fb f879 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 2, 1);
 800675e:	2301      	movs	r3, #1
 8006760:	221a      	movs	r2, #26
 8006762:	210c      	movs	r1, #12
 8006764:	483b      	ldr	r0, [pc, #236]	@ (8006854 <BuildFrame+0x2ae8>)
 8006766:	f7fb f873 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("lfnxbr", 12 + OLED_GetWidthStr("C,hjcbnm") + 3, 13 * 2, 1);
 800676a:	483a      	ldr	r0, [pc, #232]	@ (8006854 <BuildFrame+0x2ae8>)
 800676c:	f7fa f9b2 	bl	8000ad4 <OLED_GetWidthStr>
 8006770:	4603      	mov	r3, r0
 8006772:	330f      	adds	r3, #15
 8006774:	b2d9      	uxtb	r1, r3
 8006776:	2301      	movs	r3, #1
 8006778:	221a      	movs	r2, #26
 800677a:	483a      	ldr	r0, [pc, #232]	@ (8006864 <BuildFrame+0x2af8>)
 800677c:	f7fb f868 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 3, 1);
 8006780:	2301      	movs	r3, #1
 8006782:	2227      	movs	r2, #39	@ 0x27
 8006784:	210c      	movs	r1, #12
 8006786:	4838      	ldr	r0, [pc, #224]	@ (8006868 <BuildFrame+0x2afc>)
 8006788:	f7fb f862 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 3, 1);
 800678c:	4836      	ldr	r0, [pc, #216]	@ (8006868 <BuildFrame+0x2afc>)
 800678e:	f7fa f9a1 	bl	8000ad4 <OLED_GetWidthStr>
 8006792:	4603      	mov	r3, r0
 8006794:	330f      	adds	r3, #15
 8006796:	b2d9      	uxtb	r1, r3
 8006798:	2301      	movs	r3, #1
 800679a:	2227      	movs	r2, #39	@ 0x27
 800679c:	4833      	ldr	r0, [pc, #204]	@ (800686c <BuildFrame+0x2b00>)
 800679e:	f7fb f857 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 80067a2:	2300      	movs	r3, #0
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	233a      	movs	r3, #58	@ 0x3a
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	2309      	movs	r3, #9
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	233d      	movs	r3, #61	@ 0x3d
 80067b0:	2203      	movs	r2, #3
 80067b2:	2137      	movs	r1, #55	@ 0x37
 80067b4:	2003      	movs	r0, #3
 80067b6:	f7fb f959 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 4, 0);
 80067ba:	2300      	movs	r3, #0
 80067bc:	2234      	movs	r2, #52	@ 0x34
 80067be:	210c      	movs	r1, #12
 80067c0:	4824      	ldr	r0, [pc, #144]	@ (8006854 <BuildFrame+0x2ae8>)
 80067c2:	f7fb f845 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80067c6:	bf00      	nop
		break;
 80067c8:	f000 bfe1 	b.w	800778e <BuildFrame+0x3a22>

		// 22. Сообщение об успешном
		// 	   сбросе текущих настроек
		case 22:

			OLED_DrawStr_RuModified("Gfhfvtnhs", 12, 13 * 0, 1);
 80067cc:	2301      	movs	r3, #1
 80067ce:	2200      	movs	r2, #0
 80067d0:	210c      	movs	r1, #12
 80067d2:	4827      	ldr	r0, [pc, #156]	@ (8006870 <BuildFrame+0x2b04>)
 80067d4:	f7fb f83c 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ecgtiyj", 12, 13 * 1, 1);
 80067d8:	2301      	movs	r3, #1
 80067da:	220d      	movs	r2, #13
 80067dc:	210c      	movs	r1, #12
 80067de:	4825      	ldr	r0, [pc, #148]	@ (8006874 <BuildFrame+0x2b08>)
 80067e0:	f7fb f836 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("c,hjitys", 12 + OLED_GetWidthStr("ecgtiyj") + 3, 13 * 1, 1);
 80067e4:	4823      	ldr	r0, [pc, #140]	@ (8006874 <BuildFrame+0x2b08>)
 80067e6:	f7fa f975 	bl	8000ad4 <OLED_GetWidthStr>
 80067ea:	4603      	mov	r3, r0
 80067ec:	330f      	adds	r3, #15
 80067ee:	b2d9      	uxtb	r1, r3
 80067f0:	2301      	movs	r3, #1
 80067f2:	220d      	movs	r2, #13
 80067f4:	4820      	ldr	r0, [pc, #128]	@ (8006878 <BuildFrame+0x2b0c>)
 80067f6:	f7fb f82b 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('!', 12 + OLED_GetWidthStr("ecgtiyj") + 3 + OLED_GetWidthStr("c,hjitys") + 1, 13 * 1, 1);
 80067fa:	481e      	ldr	r0, [pc, #120]	@ (8006874 <BuildFrame+0x2b08>)
 80067fc:	f7fa f96a 	bl	8000ad4 <OLED_GetWidthStr>
 8006800:	4603      	mov	r3, r0
 8006802:	461c      	mov	r4, r3
 8006804:	481c      	ldr	r0, [pc, #112]	@ (8006878 <BuildFrame+0x2b0c>)
 8006806:	f7fa f965 	bl	8000ad4 <OLED_GetWidthStr>
 800680a:	4603      	mov	r3, r0
 800680c:	4423      	add	r3, r4
 800680e:	b2db      	uxtb	r3, r3
 8006810:	3310      	adds	r3, #16
 8006812:	b2d9      	uxtb	r1, r3
 8006814:	2301      	movs	r3, #1
 8006816:	220d      	movs	r2, #13
 8006818:	2021      	movs	r0, #33	@ 0x21
 800681a:	f7fb f851 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 800681e:	4b17      	ldr	r3, [pc, #92]	@ (800687c <BuildFrame+0x2b10>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	f040 87b5 	bne.w	8007792 <BuildFrame+0x3a26>
					*
					*	> 	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8006828:	2300      	movs	r3, #0
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	2320      	movs	r3, #32
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	2309      	movs	r3, #9
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2323      	movs	r3, #35	@ 0x23
 8006836:	2203      	movs	r2, #3
 8006838:	211d      	movs	r1, #29
 800683a:	2003      	movs	r0, #3
 800683c:	f7fb f916 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 2, 0);
 8006840:	2300      	movs	r3, #0
 8006842:	221a      	movs	r2, #26
 8006844:	210c      	movs	r1, #12
 8006846:	480e      	ldr	r0, [pc, #56]	@ (8006880 <BuildFrame+0x2b14>)
 8006848:	f7fb f802 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 800684c:	bf00      	nop
			}

		break;
 800684e:	f000 bfa0 	b.w	8007792 <BuildFrame+0x3a26>
 8006852:	bf00      	nop
 8006854:	08014500 	.word	0x08014500
 8006858:	08014518 	.word	0x08014518
 800685c:	08014520 	.word	0x08014520
 8006860:	08014354 	.word	0x08014354
 8006864:	08014368 	.word	0x08014368
 8006868:	0801437c 	.word	0x0801437c
 800686c:	08014384 	.word	0x08014384
 8006870:	080143dc 	.word	0x080143dc
 8006874:	080143e8 	.word	0x080143e8
 8006878:	0801452c 	.word	0x0801452c
 800687c:	20000a3d 	.word	0x20000a3d
 8006880:	080143fc 	.word	0x080143fc


		// 23. Настройка времени автоотключения экрана (1)
		case 23:

			OLED_DrawStr_RuModified("Ecnfyjdbnt", 12, 13 * 0, 1);
 8006884:	2301      	movs	r3, #1
 8006886:	2200      	movs	r2, #0
 8006888:	210c      	movs	r1, #12
 800688a:	48b8      	ldr	r0, [pc, #736]	@ (8006b6c <BuildFrame+0x2e00>)
 800688c:	f7fa ffe0 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dhtvz", 12 + OLED_GetWidthStr("Ecnfyjdbnt") + 3, 13 * 0, 1);
 8006890:	48b6      	ldr	r0, [pc, #728]	@ (8006b6c <BuildFrame+0x2e00>)
 8006892:	f7fa f91f 	bl	8000ad4 <OLED_GetWidthStr>
 8006896:	4603      	mov	r3, r0
 8006898:	330f      	adds	r3, #15
 800689a:	b2d9      	uxtb	r1, r3
 800689c:	2301      	movs	r3, #1
 800689e:	2200      	movs	r2, #0
 80068a0:	48b3      	ldr	r0, [pc, #716]	@ (8006b70 <BuildFrame+0x2e04>)
 80068a2:	f7fa ffd5 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("fdnjjnrk", 12, 13 * 1, 1);
 80068a6:	2301      	movs	r3, #1
 80068a8:	220d      	movs	r2, #13
 80068aa:	210c      	movs	r1, #12
 80068ac:	48b1      	ldr	r0, [pc, #708]	@ (8006b74 <BuildFrame+0x2e08>)
 80068ae:	f7fa ffcf 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("fdnjjnrk") + 1, 13 * 1, 1);
 80068b2:	48b0      	ldr	r0, [pc, #704]	@ (8006b74 <BuildFrame+0x2e08>)
 80068b4:	f7fa f90e 	bl	8000ad4 <OLED_GetWidthStr>
 80068b8:	4603      	mov	r3, r0
 80068ba:	330d      	adds	r3, #13
 80068bc:	b2d9      	uxtb	r1, r3
 80068be:	2301      	movs	r3, #1
 80068c0:	220d      	movs	r2, #13
 80068c2:	202e      	movs	r0, #46	@ 0x2e
 80068c4:	f7fa fffc 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("'rhfyf", 12 + OLED_GetWidthStr("fdnjjnrk") + 1 + OLED_GetWidthStr(".") + 3 + 10, 13 * 1, 1);
 80068c8:	48aa      	ldr	r0, [pc, #680]	@ (8006b74 <BuildFrame+0x2e08>)
 80068ca:	f7fa f903 	bl	8000ad4 <OLED_GetWidthStr>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461c      	mov	r4, r3
 80068d2:	48a9      	ldr	r0, [pc, #676]	@ (8006b78 <BuildFrame+0x2e0c>)
 80068d4:	f7fa f8fe 	bl	8000ad4 <OLED_GetWidthStr>
 80068d8:	4603      	mov	r3, r0
 80068da:	4423      	add	r3, r4
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	331a      	adds	r3, #26
 80068e0:	b2d9      	uxtb	r1, r3
 80068e2:	2301      	movs	r3, #1
 80068e4:	220d      	movs	r2, #13
 80068e6:	48a5      	ldr	r0, [pc, #660]	@ (8006b7c <BuildFrame+0x2e10>)
 80068e8:	f7fa ffb2 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('(', 12, 13 * 2, 1);
 80068ec:	2301      	movs	r3, #1
 80068ee:	221a      	movs	r2, #26
 80068f0:	210c      	movs	r1, #12
 80068f2:	2028      	movs	r0, #40	@ 0x28
 80068f4:	f7fa ffe4 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_EnModified("30", 12 + OLED_GetWidthStr("(") + 2, 13 * 2, 1);
 80068f8:	48a1      	ldr	r0, [pc, #644]	@ (8006b80 <BuildFrame+0x2e14>)
 80068fa:	f7fa f8eb 	bl	8000ad4 <OLED_GetWidthStr>
 80068fe:	4603      	mov	r3, r0
 8006900:	330e      	adds	r3, #14
 8006902:	b2d9      	uxtb	r1, r3
 8006904:	2301      	movs	r3, #1
 8006906:	221a      	movs	r2, #26
 8006908:	489e      	ldr	r0, [pc, #632]	@ (8006b84 <BuildFrame+0x2e18>)
 800690a:	f7fa ffbd 	bl	8001888 <OLED_DrawStr_EnModified>
			OLED_DrawStr_RuModified("vby", 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3, 13 * 2, 1);
 800690e:	489c      	ldr	r0, [pc, #624]	@ (8006b80 <BuildFrame+0x2e14>)
 8006910:	f7fa f8e0 	bl	8000ad4 <OLED_GetWidthStr>
 8006914:	4603      	mov	r3, r0
 8006916:	461c      	mov	r4, r3
 8006918:	489a      	ldr	r0, [pc, #616]	@ (8006b84 <BuildFrame+0x2e18>)
 800691a:	f7fa f8db 	bl	8000ad4 <OLED_GetWidthStr>
 800691e:	4603      	mov	r3, r0
 8006920:	4423      	add	r3, r4
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3311      	adds	r3, #17
 8006926:	b2d9      	uxtb	r1, r3
 8006928:	2301      	movs	r3, #1
 800692a:	221a      	movs	r2, #26
 800692c:	4896      	ldr	r0, [pc, #600]	@ (8006b88 <BuildFrame+0x2e1c>)
 800692e:	f7fa ff8f 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('>', 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3, 13 * 2, 1);
 8006932:	4893      	ldr	r0, [pc, #588]	@ (8006b80 <BuildFrame+0x2e14>)
 8006934:	f7fa f8ce 	bl	8000ad4 <OLED_GetWidthStr>
 8006938:	4603      	mov	r3, r0
 800693a:	461c      	mov	r4, r3
 800693c:	4891      	ldr	r0, [pc, #580]	@ (8006b84 <BuildFrame+0x2e18>)
 800693e:	f7fa f8c9 	bl	8000ad4 <OLED_GetWidthStr>
 8006942:	4603      	mov	r3, r0
 8006944:	4423      	add	r3, r4
 8006946:	b2dc      	uxtb	r4, r3
 8006948:	488f      	ldr	r0, [pc, #572]	@ (8006b88 <BuildFrame+0x2e1c>)
 800694a:	f7fa f8c3 	bl	8000ad4 <OLED_GetWidthStr>
 800694e:	4603      	mov	r3, r0
 8006950:	4423      	add	r3, r4
 8006952:	b2db      	uxtb	r3, r3
 8006954:	3314      	adds	r3, #20
 8006956:	b2d9      	uxtb	r1, r3
 8006958:	2301      	movs	r3, #1
 800695a:	221a      	movs	r2, #26
 800695c:	203e      	movs	r0, #62	@ 0x3e
 800695e:	f7fa ffaf 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawChar_Modified('t', 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3 + OLED_GetWidthStr(">") + 4, 13 * 2, 1);
 8006962:	4887      	ldr	r0, [pc, #540]	@ (8006b80 <BuildFrame+0x2e14>)
 8006964:	f7fa f8b6 	bl	8000ad4 <OLED_GetWidthStr>
 8006968:	4603      	mov	r3, r0
 800696a:	461c      	mov	r4, r3
 800696c:	4885      	ldr	r0, [pc, #532]	@ (8006b84 <BuildFrame+0x2e18>)
 800696e:	f7fa f8b1 	bl	8000ad4 <OLED_GetWidthStr>
 8006972:	4603      	mov	r3, r0
 8006974:	4423      	add	r3, r4
 8006976:	b2dc      	uxtb	r4, r3
 8006978:	4883      	ldr	r0, [pc, #524]	@ (8006b88 <BuildFrame+0x2e1c>)
 800697a:	f7fa f8ab 	bl	8000ad4 <OLED_GetWidthStr>
 800697e:	4603      	mov	r3, r0
 8006980:	4423      	add	r3, r4
 8006982:	b2dc      	uxtb	r4, r3
 8006984:	4881      	ldr	r0, [pc, #516]	@ (8006b8c <BuildFrame+0x2e20>)
 8006986:	f7fa f8a5 	bl	8000ad4 <OLED_GetWidthStr>
 800698a:	4603      	mov	r3, r0
 800698c:	4423      	add	r3, r4
 800698e:	b2db      	uxtb	r3, r3
 8006990:	3318      	adds	r3, #24
 8006992:	b2d9      	uxtb	r1, r3
 8006994:	2301      	movs	r3, #1
 8006996:	221a      	movs	r2, #26
 8006998:	2074      	movs	r0, #116	@ 0x74
 800699a:	f7fa ff91 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawChar_Modified('>', 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("t") + 3, 13 * 2, 1);
 800699e:	4878      	ldr	r0, [pc, #480]	@ (8006b80 <BuildFrame+0x2e14>)
 80069a0:	f7fa f898 	bl	8000ad4 <OLED_GetWidthStr>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461c      	mov	r4, r3
 80069a8:	4876      	ldr	r0, [pc, #472]	@ (8006b84 <BuildFrame+0x2e18>)
 80069aa:	f7fa f893 	bl	8000ad4 <OLED_GetWidthStr>
 80069ae:	4603      	mov	r3, r0
 80069b0:	4423      	add	r3, r4
 80069b2:	b2dc      	uxtb	r4, r3
 80069b4:	4874      	ldr	r0, [pc, #464]	@ (8006b88 <BuildFrame+0x2e1c>)
 80069b6:	f7fa f88d 	bl	8000ad4 <OLED_GetWidthStr>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4423      	add	r3, r4
 80069be:	b2dc      	uxtb	r4, r3
 80069c0:	4872      	ldr	r0, [pc, #456]	@ (8006b8c <BuildFrame+0x2e20>)
 80069c2:	f7fa f887 	bl	8000ad4 <OLED_GetWidthStr>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4423      	add	r3, r4
 80069ca:	b2dc      	uxtb	r4, r3
 80069cc:	4870      	ldr	r0, [pc, #448]	@ (8006b90 <BuildFrame+0x2e24>)
 80069ce:	f7fa f881 	bl	8000ad4 <OLED_GetWidthStr>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4423      	add	r3, r4
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	331a      	adds	r3, #26
 80069da:	b2d9      	uxtb	r1, r3
 80069dc:	2301      	movs	r3, #1
 80069de:	221a      	movs	r2, #26
 80069e0:	203e      	movs	r0, #62	@ 0x3e
 80069e2:	f7fa ff6d 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_EnModified("30", 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("t") + 3 + OLED_GetWidthStr(">") + 3, 13 * 2, 1);
 80069e6:	4866      	ldr	r0, [pc, #408]	@ (8006b80 <BuildFrame+0x2e14>)
 80069e8:	f7fa f874 	bl	8000ad4 <OLED_GetWidthStr>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461c      	mov	r4, r3
 80069f0:	4864      	ldr	r0, [pc, #400]	@ (8006b84 <BuildFrame+0x2e18>)
 80069f2:	f7fa f86f 	bl	8000ad4 <OLED_GetWidthStr>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4423      	add	r3, r4
 80069fa:	b2dc      	uxtb	r4, r3
 80069fc:	4862      	ldr	r0, [pc, #392]	@ (8006b88 <BuildFrame+0x2e1c>)
 80069fe:	f7fa f869 	bl	8000ad4 <OLED_GetWidthStr>
 8006a02:	4603      	mov	r3, r0
 8006a04:	4423      	add	r3, r4
 8006a06:	b2dc      	uxtb	r4, r3
 8006a08:	4860      	ldr	r0, [pc, #384]	@ (8006b8c <BuildFrame+0x2e20>)
 8006a0a:	f7fa f863 	bl	8000ad4 <OLED_GetWidthStr>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4423      	add	r3, r4
 8006a12:	b2dc      	uxtb	r4, r3
 8006a14:	485e      	ldr	r0, [pc, #376]	@ (8006b90 <BuildFrame+0x2e24>)
 8006a16:	f7fa f85d 	bl	8000ad4 <OLED_GetWidthStr>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4423      	add	r3, r4
 8006a1e:	b2dc      	uxtb	r4, r3
 8006a20:	485a      	ldr	r0, [pc, #360]	@ (8006b8c <BuildFrame+0x2e20>)
 8006a22:	f7fa f857 	bl	8000ad4 <OLED_GetWidthStr>
 8006a26:	4603      	mov	r3, r0
 8006a28:	4423      	add	r3, r4
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	331d      	adds	r3, #29
 8006a2e:	b2d9      	uxtb	r1, r3
 8006a30:	2301      	movs	r3, #1
 8006a32:	221a      	movs	r2, #26
 8006a34:	4853      	ldr	r0, [pc, #332]	@ (8006b84 <BuildFrame+0x2e18>)
 8006a36:	f7fa ff27 	bl	8001888 <OLED_DrawStr_EnModified>
			OLED_DrawStr_RuModified("ctr", 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("t") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("30") + 3, 13 * 2, 1);
 8006a3a:	4851      	ldr	r0, [pc, #324]	@ (8006b80 <BuildFrame+0x2e14>)
 8006a3c:	f7fa f84a 	bl	8000ad4 <OLED_GetWidthStr>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461c      	mov	r4, r3
 8006a44:	484f      	ldr	r0, [pc, #316]	@ (8006b84 <BuildFrame+0x2e18>)
 8006a46:	f7fa f845 	bl	8000ad4 <OLED_GetWidthStr>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4423      	add	r3, r4
 8006a4e:	b2dc      	uxtb	r4, r3
 8006a50:	484d      	ldr	r0, [pc, #308]	@ (8006b88 <BuildFrame+0x2e1c>)
 8006a52:	f7fa f83f 	bl	8000ad4 <OLED_GetWidthStr>
 8006a56:	4603      	mov	r3, r0
 8006a58:	4423      	add	r3, r4
 8006a5a:	b2dc      	uxtb	r4, r3
 8006a5c:	484b      	ldr	r0, [pc, #300]	@ (8006b8c <BuildFrame+0x2e20>)
 8006a5e:	f7fa f839 	bl	8000ad4 <OLED_GetWidthStr>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4423      	add	r3, r4
 8006a66:	b2dc      	uxtb	r4, r3
 8006a68:	4849      	ldr	r0, [pc, #292]	@ (8006b90 <BuildFrame+0x2e24>)
 8006a6a:	f7fa f833 	bl	8000ad4 <OLED_GetWidthStr>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4423      	add	r3, r4
 8006a72:	b2dc      	uxtb	r4, r3
 8006a74:	4845      	ldr	r0, [pc, #276]	@ (8006b8c <BuildFrame+0x2e20>)
 8006a76:	f7fa f82d 	bl	8000ad4 <OLED_GetWidthStr>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4423      	add	r3, r4
 8006a7e:	b2dc      	uxtb	r4, r3
 8006a80:	4840      	ldr	r0, [pc, #256]	@ (8006b84 <BuildFrame+0x2e18>)
 8006a82:	f7fa f827 	bl	8000ad4 <OLED_GetWidthStr>
 8006a86:	4603      	mov	r3, r0
 8006a88:	4423      	add	r3, r4
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	3320      	adds	r3, #32
 8006a8e:	b2d9      	uxtb	r1, r3
 8006a90:	2301      	movs	r3, #1
 8006a92:	221a      	movs	r2, #26
 8006a94:	483f      	ldr	r0, [pc, #252]	@ (8006b94 <BuildFrame+0x2e28>)
 8006a96:	f7fa fedb 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified(')', 12 + OLED_GetWidthStr("(") + 2 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("vby") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("t") + 3 + OLED_GetWidthStr(">") + 3 + OLED_GetWidthStr("30") + 3 + OLED_GetWidthStr("ctr") - 10, 13 * 2, 1);
 8006a9a:	4839      	ldr	r0, [pc, #228]	@ (8006b80 <BuildFrame+0x2e14>)
 8006a9c:	f7fa f81a 	bl	8000ad4 <OLED_GetWidthStr>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	4837      	ldr	r0, [pc, #220]	@ (8006b84 <BuildFrame+0x2e18>)
 8006aa6:	f7fa f815 	bl	8000ad4 <OLED_GetWidthStr>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4423      	add	r3, r4
 8006aae:	b2dc      	uxtb	r4, r3
 8006ab0:	4835      	ldr	r0, [pc, #212]	@ (8006b88 <BuildFrame+0x2e1c>)
 8006ab2:	f7fa f80f 	bl	8000ad4 <OLED_GetWidthStr>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4423      	add	r3, r4
 8006aba:	b2dc      	uxtb	r4, r3
 8006abc:	4833      	ldr	r0, [pc, #204]	@ (8006b8c <BuildFrame+0x2e20>)
 8006abe:	f7fa f809 	bl	8000ad4 <OLED_GetWidthStr>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4423      	add	r3, r4
 8006ac6:	b2dc      	uxtb	r4, r3
 8006ac8:	4831      	ldr	r0, [pc, #196]	@ (8006b90 <BuildFrame+0x2e24>)
 8006aca:	f7fa f803 	bl	8000ad4 <OLED_GetWidthStr>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4423      	add	r3, r4
 8006ad2:	b2dc      	uxtb	r4, r3
 8006ad4:	482d      	ldr	r0, [pc, #180]	@ (8006b8c <BuildFrame+0x2e20>)
 8006ad6:	f7f9 fffd 	bl	8000ad4 <OLED_GetWidthStr>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4423      	add	r3, r4
 8006ade:	b2dc      	uxtb	r4, r3
 8006ae0:	4828      	ldr	r0, [pc, #160]	@ (8006b84 <BuildFrame+0x2e18>)
 8006ae2:	f7f9 fff7 	bl	8000ad4 <OLED_GetWidthStr>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4423      	add	r3, r4
 8006aea:	b2dc      	uxtb	r4, r3
 8006aec:	4829      	ldr	r0, [pc, #164]	@ (8006b94 <BuildFrame+0x2e28>)
 8006aee:	f7f9 fff1 	bl	8000ad4 <OLED_GetWidthStr>
 8006af2:	4603      	mov	r3, r0
 8006af4:	4423      	add	r3, r4
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3316      	adds	r3, #22
 8006afa:	b2d9      	uxtb	r1, r3
 8006afc:	2301      	movs	r3, #1
 8006afe:	221a      	movs	r2, #26
 8006b00:	2029      	movs	r0, #41	@ 0x29
 8006b02:	f7fa fedd 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8006b06:	4b24      	ldr	r3, [pc, #144]	@ (8006b98 <BuildFrame+0x2e2c>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d004      	beq.n	8006b18 <BuildFrame+0x2dac>
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	f000 8095 	beq.w	8006c3e <BuildFrame+0x2ed2>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);

				break;
			}

		break;
 8006b14:	f000 be4a 	b.w	80077ac <BuildFrame+0x3a40>
					if (f_StSetScreenOff)
 8006b18:	4b20      	ldr	r3, [pc, #128]	@ (8006b9c <BuildFrame+0x2e30>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00e      	beq.n	8006b3e <BuildFrame+0x2dd2>
						OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 1);
 8006b20:	2301      	movs	r3, #1
 8006b22:	9302      	str	r3, [sp, #8]
 8006b24:	232d      	movs	r3, #45	@ 0x2d
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2309      	movs	r3, #9
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2330      	movs	r3, #48	@ 0x30
 8006b2e:	2203      	movs	r2, #3
 8006b30:	212a      	movs	r1, #42	@ 0x2a
 8006b32:	2003      	movs	r0, #3
 8006b34:	f7fa ff9a 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
						SetScreenOff();
 8006b38:	f7fc f89a 	bl	8002c70 <SetScreenOff>
 8006b3c:	e076      	b.n	8006c2c <BuildFrame+0x2ec0>
						if (f_ScreenOffIsSet)
 8006b3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ba0 <BuildFrame+0x2e34>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d030      	beq.n	8006ba8 <BuildFrame+0x2e3c>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8006b46:	2300      	movs	r3, #0
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	232d      	movs	r3, #45	@ 0x2d
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	2309      	movs	r3, #9
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	2330      	movs	r3, #48	@ 0x30
 8006b54:	2203      	movs	r2, #3
 8006b56:	212a      	movs	r1, #42	@ 0x2a
 8006b58:	2003      	movs	r0, #3
 8006b5a:	f7fa ff87 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
							DrawSetScreenOff(ptr_ScreenOffSet, 0);
 8006b5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <BuildFrame+0x2e38>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fb fff3 	bl	8002b50 <DrawSetScreenOff>
 8006b6a:	e05f      	b.n	8006c2c <BuildFrame+0x2ec0>
 8006b6c:	080143a8 	.word	0x080143a8
 8006b70:	080143b4 	.word	0x080143b4
 8006b74:	08014538 	.word	0x08014538
 8006b78:	08014544 	.word	0x08014544
 8006b7c:	08014354 	.word	0x08014354
 8006b80:	08014548 	.word	0x08014548
 8006b84:	0801454c 	.word	0x0801454c
 8006b88:	08014238 	.word	0x08014238
 8006b8c:	08014550 	.word	0x08014550
 8006b90:	08014554 	.word	0x08014554
 8006b94:	0801423c 	.word	0x0801423c
 8006b98:	20000a3d 	.word	0x20000a3d
 8006b9c:	20000a2b 	.word	0x20000a2b
 8006ba0:	20000a2e 	.word	0x20000a2e
 8006ba4:	2000012c 	.word	0x2000012c
							OLED_DrawStr_EnModified("--", 16, 13 * 3, 0);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2227      	movs	r2, #39	@ 0x27
 8006bac:	2110      	movs	r1, #16
 8006bae:	48af      	ldr	r0, [pc, #700]	@ (8006e6c <BuildFrame+0x3100>)
 8006bb0:	f7fa fe6a 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawStr_RuModified("vby", 16 + OLED_GetWidthStr("--") + 2, 13 * 3, 0);
 8006bb4:	48ad      	ldr	r0, [pc, #692]	@ (8006e6c <BuildFrame+0x3100>)
 8006bb6:	f7f9 ff8d 	bl	8000ad4 <OLED_GetWidthStr>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	3312      	adds	r3, #18
 8006bbe:	b2d9      	uxtb	r1, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2227      	movs	r2, #39	@ 0x27
 8006bc4:	48aa      	ldr	r0, [pc, #680]	@ (8006e70 <BuildFrame+0x3104>)
 8006bc6:	f7fa fe43 	bl	8001850 <OLED_DrawStr_RuModified>
							OLED_DrawStr_EnModified("--", 3 + 16 + OLED_GetWidthStr("--") + OLED_GetWidthStr("vby") + 2 * 2, 13 * 3, 0);
 8006bca:	48a8      	ldr	r0, [pc, #672]	@ (8006e6c <BuildFrame+0x3100>)
 8006bcc:	f7f9 ff82 	bl	8000ad4 <OLED_GetWidthStr>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	48a6      	ldr	r0, [pc, #664]	@ (8006e70 <BuildFrame+0x3104>)
 8006bd6:	f7f9 ff7d 	bl	8000ad4 <OLED_GetWidthStr>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4423      	add	r3, r4
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	3317      	adds	r3, #23
 8006be2:	b2d9      	uxtb	r1, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	2227      	movs	r2, #39	@ 0x27
 8006be8:	48a0      	ldr	r0, [pc, #640]	@ (8006e6c <BuildFrame+0x3100>)
 8006bea:	f7fa fe4d 	bl	8001888 <OLED_DrawStr_EnModified>
							OLED_DrawStr_RuModified("ctr", 3 + 16 + OLED_GetWidthStr("--") * 2 + OLED_GetWidthStr("vby") + 2 * 3, 13 * 3, 0);
 8006bee:	489f      	ldr	r0, [pc, #636]	@ (8006e6c <BuildFrame+0x3100>)
 8006bf0:	f7f9 ff70 	bl	8000ad4 <OLED_GetWidthStr>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	b2dc      	uxtb	r4, r3
 8006bfa:	489d      	ldr	r0, [pc, #628]	@ (8006e70 <BuildFrame+0x3104>)
 8006bfc:	f7f9 ff6a 	bl	8000ad4 <OLED_GetWidthStr>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4423      	add	r3, r4
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	3319      	adds	r3, #25
 8006c08:	b2d9      	uxtb	r1, r3
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2227      	movs	r2, #39	@ 0x27
 8006c0e:	4899      	ldr	r0, [pc, #612]	@ (8006e74 <BuildFrame+0x3108>)
 8006c10:	f7fa fe1e 	bl	8001850 <OLED_DrawStr_RuModified>
							OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 3.5 - 3, 3, (int16_t) 13 * 3.5 + 3, 9, (int16_t) 13 * 3.5, 0);
 8006c14:	2300      	movs	r3, #0
 8006c16:	9302      	str	r3, [sp, #8]
 8006c18:	232d      	movs	r3, #45	@ 0x2d
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	2309      	movs	r3, #9
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2330      	movs	r3, #48	@ 0x30
 8006c22:	2203      	movs	r2, #3
 8006c24:	212a      	movs	r1, #42	@ 0x2a
 8006c26:	2003      	movs	r0, #3
 8006c28:	f7fa ff20 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					IsSetScreenOffFinished();
 8006c2c:	f7fc ff6a 	bl	8003b04 <IsSetScreenOffFinished>
					OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 4, 1);
 8006c30:	2301      	movs	r3, #1
 8006c32:	2234      	movs	r2, #52	@ 0x34
 8006c34:	210c      	movs	r1, #12
 8006c36:	4890      	ldr	r0, [pc, #576]	@ (8006e78 <BuildFrame+0x310c>)
 8006c38:	f7fa fe0a 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8006c3c:	e055      	b.n	8006cea <BuildFrame+0x2f7e>
					IsSetScreenOffFinished();
 8006c3e:	f7fc ff61 	bl	8003b04 <IsSetScreenOffFinished>
					if (f_ScreenOffIsSet)
 8006c42:	4b8e      	ldr	r3, [pc, #568]	@ (8006e7c <BuildFrame+0x3110>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <BuildFrame+0x2eec>
						DrawSetScreenOff(ptr_ScreenOffSet, 1);
 8006c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006e80 <BuildFrame+0x3114>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fb ff7d 	bl	8002b50 <DrawSetScreenOff>
 8006c56:	e035      	b.n	8006cc4 <BuildFrame+0x2f58>
						OLED_DrawStr_EnModified("--", 16, 13 * 3, 1);
 8006c58:	2301      	movs	r3, #1
 8006c5a:	2227      	movs	r2, #39	@ 0x27
 8006c5c:	2110      	movs	r1, #16
 8006c5e:	4883      	ldr	r0, [pc, #524]	@ (8006e6c <BuildFrame+0x3100>)
 8006c60:	f7fa fe12 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("vby", 16 + OLED_GetWidthStr("--") + 2, 13 * 3, 1);
 8006c64:	4881      	ldr	r0, [pc, #516]	@ (8006e6c <BuildFrame+0x3100>)
 8006c66:	f7f9 ff35 	bl	8000ad4 <OLED_GetWidthStr>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	3312      	adds	r3, #18
 8006c6e:	b2d9      	uxtb	r1, r3
 8006c70:	2301      	movs	r3, #1
 8006c72:	2227      	movs	r2, #39	@ 0x27
 8006c74:	487e      	ldr	r0, [pc, #504]	@ (8006e70 <BuildFrame+0x3104>)
 8006c76:	f7fa fdeb 	bl	8001850 <OLED_DrawStr_RuModified>
						OLED_DrawStr_EnModified("--", 3 + 16 + OLED_GetWidthStr("--") + OLED_GetWidthStr("vby") + 2 * 2, 13 * 3, 1);
 8006c7a:	487c      	ldr	r0, [pc, #496]	@ (8006e6c <BuildFrame+0x3100>)
 8006c7c:	f7f9 ff2a 	bl	8000ad4 <OLED_GetWidthStr>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461c      	mov	r4, r3
 8006c84:	487a      	ldr	r0, [pc, #488]	@ (8006e70 <BuildFrame+0x3104>)
 8006c86:	f7f9 ff25 	bl	8000ad4 <OLED_GetWidthStr>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4423      	add	r3, r4
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	3317      	adds	r3, #23
 8006c92:	b2d9      	uxtb	r1, r3
 8006c94:	2301      	movs	r3, #1
 8006c96:	2227      	movs	r2, #39	@ 0x27
 8006c98:	4874      	ldr	r0, [pc, #464]	@ (8006e6c <BuildFrame+0x3100>)
 8006c9a:	f7fa fdf5 	bl	8001888 <OLED_DrawStr_EnModified>
						OLED_DrawStr_RuModified("ctr", 3 + 16 + OLED_GetWidthStr("--") * 2 + OLED_GetWidthStr("vby") + 2 * 3, 13 * 3, 1);
 8006c9e:	4873      	ldr	r0, [pc, #460]	@ (8006e6c <BuildFrame+0x3100>)
 8006ca0:	f7f9 ff18 	bl	8000ad4 <OLED_GetWidthStr>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	b2dc      	uxtb	r4, r3
 8006caa:	4871      	ldr	r0, [pc, #452]	@ (8006e70 <BuildFrame+0x3104>)
 8006cac:	f7f9 ff12 	bl	8000ad4 <OLED_GetWidthStr>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4423      	add	r3, r4
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	3319      	adds	r3, #25
 8006cb8:	b2d9      	uxtb	r1, r3
 8006cba:	2301      	movs	r3, #1
 8006cbc:	2227      	movs	r2, #39	@ 0x27
 8006cbe:	486d      	ldr	r0, [pc, #436]	@ (8006e74 <BuildFrame+0x3108>)
 8006cc0:	f7fa fdc6 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Cj[hfybnm", 12, 13 * 4, 0);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2234      	movs	r2, #52	@ 0x34
 8006cc8:	210c      	movs	r1, #12
 8006cca:	486b      	ldr	r0, [pc, #428]	@ (8006e78 <BuildFrame+0x310c>)
 8006ccc:	f7fa fdc0 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	233a      	movs	r3, #58	@ 0x3a
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	2309      	movs	r3, #9
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	233d      	movs	r3, #61	@ 0x3d
 8006cde:	2203      	movs	r2, #3
 8006ce0:	2137      	movs	r1, #55	@ 0x37
 8006ce2:	2003      	movs	r0, #3
 8006ce4:	f7fa fec2 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
				break;
 8006ce8:	bf00      	nop
		break;
 8006cea:	f000 bd5f 	b.w	80077ac <BuildFrame+0x3a40>


		// 24. Настройка времени автоотключения экрана (2)
		case 24:

			switch(pos_cursor)
 8006cee:	4b65      	ldr	r3, [pc, #404]	@ (8006e84 <BuildFrame+0x3118>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 854f 	bne.w	8007796 <BuildFrame+0x3a2a>
					*========================
					*	>	Назад
					*------------------------
					*/

					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 0, 0);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	210c      	movs	r1, #12
 8006cfe:	4862      	ldr	r0, [pc, #392]	@ (8006e88 <BuildFrame+0x311c>)
 8006d00:	f7fa fda6 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 0.5 - 3, 3, (int16_t) 13 * 0.5 + 3, 9, (int16_t) 13 * 0.5, 0);
 8006d04:	2300      	movs	r3, #0
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	2306      	movs	r3, #6
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2309      	movs	r3, #9
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2309      	movs	r3, #9
 8006d12:	2203      	movs	r2, #3
 8006d14:	2103      	movs	r1, #3
 8006d16:	2003      	movs	r0, #3
 8006d18:	f7fa fea8 	bl	8001a6c <OLED_DrawTriangleFill_Modified>

				break;
 8006d1c:	bf00      	nop
			}

		break;
 8006d1e:	f000 bd3a 	b.w	8007796 <BuildFrame+0x3a2a>


		// 25. Текущее время автоотключения экрана
		case 25:

			OLED_DrawStr_RuModified("Ntreott", 12, 13 * 0, 1);
 8006d22:	2301      	movs	r3, #1
 8006d24:	2200      	movs	r2, #0
 8006d26:	210c      	movs	r1, #12
 8006d28:	4858      	ldr	r0, [pc, #352]	@ (8006e8c <BuildFrame+0x3120>)
 8006d2a:	f7fa fd91 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dhtvz", 12 + OLED_GetWidthStr("Ntreott") + 3, 13 * 0, 1);
 8006d2e:	4857      	ldr	r0, [pc, #348]	@ (8006e8c <BuildFrame+0x3120>)
 8006d30:	f7f9 fed0 	bl	8000ad4 <OLED_GetWidthStr>
 8006d34:	4603      	mov	r3, r0
 8006d36:	330f      	adds	r3, #15
 8006d38:	b2d9      	uxtb	r1, r3
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4854      	ldr	r0, [pc, #336]	@ (8006e90 <BuildFrame+0x3124>)
 8006d40:	f7fa fd86 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("fdnjjnrk.xtybz", 12, 13 * 1, 1);
 8006d44:	2301      	movs	r3, #1
 8006d46:	220d      	movs	r2, #13
 8006d48:	210c      	movs	r1, #12
 8006d4a:	4852      	ldr	r0, [pc, #328]	@ (8006e94 <BuildFrame+0x3128>)
 8006d4c:	f7fa fd80 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("'rhfyf", 12, 13 * 2, 1);
 8006d50:	2301      	movs	r3, #1
 8006d52:	221a      	movs	r2, #26
 8006d54:	210c      	movs	r1, #12
 8006d56:	4850      	ldr	r0, [pc, #320]	@ (8006e98 <BuildFrame+0x312c>)
 8006d58:	f7fa fd7a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified(':', 12 + OLED_GetWidthStr("'rhfyf") + 1, 13 * 2, 1);
 8006d5c:	484e      	ldr	r0, [pc, #312]	@ (8006e98 <BuildFrame+0x312c>)
 8006d5e:	f7f9 feb9 	bl	8000ad4 <OLED_GetWidthStr>
 8006d62:	4603      	mov	r3, r0
 8006d64:	330d      	adds	r3, #13
 8006d66:	b2d9      	uxtb	r1, r3
 8006d68:	2301      	movs	r3, #1
 8006d6a:	221a      	movs	r2, #26
 8006d6c:	203a      	movs	r0, #58	@ 0x3a
 8006d6e:	f7fa fda7 	bl	80018c0 <OLED_DrawChar_Modified>

			if ((!ScreenOff.minutes_screen_off) &&
 8006d72:	4b4a      	ldr	r3, [pc, #296]	@ (8006e9c <BuildFrame+0x3130>)
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <BuildFrame+0x3024>
				(!ScreenOff.seconds_screen_off))
 8006d7a:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <BuildFrame+0x3130>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
			if ((!ScreenOff.minutes_screen_off) &&
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <BuildFrame+0x3024>
			{
				OLED_DrawStr_RuModified("Jnrk.xtyj", 12, 13 * 3, 1);
 8006d82:	2301      	movs	r3, #1
 8006d84:	2227      	movs	r2, #39	@ 0x27
 8006d86:	210c      	movs	r1, #12
 8006d88:	4845      	ldr	r0, [pc, #276]	@ (8006ea0 <BuildFrame+0x3134>)
 8006d8a:	f7fa fd61 	bl	8001850 <OLED_DrawStr_RuModified>
 8006d8e:	e005      	b.n	8006d9c <BuildFrame+0x3030>
			}

			else
				DrawSetScreenOff(ptr_ScreenOff, 1);
 8006d90:	4b44      	ldr	r3, [pc, #272]	@ (8006ea4 <BuildFrame+0x3138>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2101      	movs	r1, #1
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fb feda 	bl	8002b50 <DrawSetScreenOff>

			switch(pos_cursor)
 8006d9c:	4b39      	ldr	r3, [pc, #228]	@ (8006e84 <BuildFrame+0x3118>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	f040 84fa 	bne.w	800779a <BuildFrame+0x3a2e>
					*		-- мин -- сек / отключено
					*	>	Назад
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8006da6:	2300      	movs	r3, #0
 8006da8:	9302      	str	r3, [sp, #8]
 8006daa:	233a      	movs	r3, #58	@ 0x3a
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2309      	movs	r3, #9
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	233d      	movs	r3, #61	@ 0x3d
 8006db4:	2203      	movs	r2, #3
 8006db6:	2137      	movs	r1, #55	@ 0x37
 8006db8:	2003      	movs	r0, #3
 8006dba:	f7fa fe57 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 4, 0);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2234      	movs	r2, #52	@ 0x34
 8006dc2:	210c      	movs	r1, #12
 8006dc4:	4830      	ldr	r0, [pc, #192]	@ (8006e88 <BuildFrame+0x311c>)
 8006dc6:	f7fa fd43 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8006dca:	bf00      	nop
			}

		break;
 8006dcc:	f000 bce5 	b.w	800779a <BuildFrame+0x3a2e>

		// 26. Сообщение успешного
		// экстренного завершения полива
		case 26:

			OLED_DrawStr_RuModified("Ntreobq", 12, 13 * 0, 1);
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	210c      	movs	r1, #12
 8006dd6:	4834      	ldr	r0, [pc, #208]	@ (8006ea8 <BuildFrame+0x313c>)
 8006dd8:	f7fa fd3a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbd", 12 + OLED_GetWidthStr("Ntreobq") + 3, 13 * 0, 1);
 8006ddc:	4832      	ldr	r0, [pc, #200]	@ (8006ea8 <BuildFrame+0x313c>)
 8006dde:	f7f9 fe79 	bl	8000ad4 <OLED_GetWidthStr>
 8006de2:	4603      	mov	r3, r0
 8006de4:	330f      	adds	r3, #15
 8006de6:	b2d9      	uxtb	r1, r3
 8006de8:	2301      	movs	r3, #1
 8006dea:	2200      	movs	r2, #0
 8006dec:	482f      	ldr	r0, [pc, #188]	@ (8006eac <BuildFrame+0x3140>)
 8006dee:	f7fa fd2f 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ecgtiyj", 12, 13 * 1, 1);
 8006df2:	2301      	movs	r3, #1
 8006df4:	220d      	movs	r2, #13
 8006df6:	210c      	movs	r1, #12
 8006df8:	482d      	ldr	r0, [pc, #180]	@ (8006eb0 <BuildFrame+0x3144>)
 8006dfa:	f7fa fd29 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("pfdthity", 12 + OLED_GetWidthStr("ecgtiyj") + 3, 13 * 1, 1);
 8006dfe:	482c      	ldr	r0, [pc, #176]	@ (8006eb0 <BuildFrame+0x3144>)
 8006e00:	f7f9 fe68 	bl	8000ad4 <OLED_GetWidthStr>
 8006e04:	4603      	mov	r3, r0
 8006e06:	330f      	adds	r3, #15
 8006e08:	b2d9      	uxtb	r1, r3
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	220d      	movs	r2, #13
 8006e0e:	4829      	ldr	r0, [pc, #164]	@ (8006eb4 <BuildFrame+0x3148>)
 8006e10:	f7fa fd1e 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("ecgtiyj") + 3 + OLED_GetWidthStr("pfdthity") + 1, 13 * 1, 1);
 8006e14:	4826      	ldr	r0, [pc, #152]	@ (8006eb0 <BuildFrame+0x3144>)
 8006e16:	f7f9 fe5d 	bl	8000ad4 <OLED_GetWidthStr>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	4825      	ldr	r0, [pc, #148]	@ (8006eb4 <BuildFrame+0x3148>)
 8006e20:	f7f9 fe58 	bl	8000ad4 <OLED_GetWidthStr>
 8006e24:	4603      	mov	r3, r0
 8006e26:	4423      	add	r3, r4
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3310      	adds	r3, #16
 8006e2c:	b2d9      	uxtb	r1, r3
 8006e2e:	2301      	movs	r3, #1
 8006e30:	220d      	movs	r2, #13
 8006e32:	202e      	movs	r0, #46	@ 0x2e
 8006e34:	f7fa fd44 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8006e38:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <BuildFrame+0x3118>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f040 84ae 	bne.w	800779e <BuildFrame+0x3a32>
					*
					*	>	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8006e42:	2300      	movs	r3, #0
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	2320      	movs	r3, #32
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	2323      	movs	r3, #35	@ 0x23
 8006e50:	2203      	movs	r2, #3
 8006e52:	211d      	movs	r1, #29
 8006e54:	2003      	movs	r0, #3
 8006e56:	f7fa fe09 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 2, 0);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	221a      	movs	r2, #26
 8006e5e:	210c      	movs	r1, #12
 8006e60:	4815      	ldr	r0, [pc, #84]	@ (8006eb8 <BuildFrame+0x314c>)
 8006e62:	f7fa fcf5 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8006e66:	bf00      	nop
			}

		break;
 8006e68:	f000 bc99 	b.w	800779e <BuildFrame+0x3a32>
 8006e6c:	080143bc 	.word	0x080143bc
 8006e70:	08014238 	.word	0x08014238
 8006e74:	0801423c 	.word	0x0801423c
 8006e78:	08014454 	.word	0x08014454
 8006e7c:	20000a2e 	.word	0x20000a2e
 8006e80:	2000012c 	.word	0x2000012c
 8006e84:	20000a3d 	.word	0x20000a3d
 8006e88:	080142dc 	.word	0x080142dc
 8006e8c:	08014558 	.word	0x08014558
 8006e90:	080143b4 	.word	0x080143b4
 8006e94:	08014560 	.word	0x08014560
 8006e98:	08014354 	.word	0x08014354
 8006e9c:	20000a74 	.word	0x20000a74
 8006ea0:	08014570 	.word	0x08014570
 8006ea4:	20000128 	.word	0x20000128
 8006ea8:	0801457c 	.word	0x0801457c
 8006eac:	08014298 	.word	0x08014298
 8006eb0:	080143e8 	.word	0x080143e8
 8006eb4:	08014584 	.word	0x08014584
 8006eb8:	080143fc 	.word	0x080143fc

		// 27. Сообщение о том,
		// что полив не выполняется
		case 27:

			OLED_DrawStr_RuModified("Gjkbd", 12, 13 * 0, 1);
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	210c      	movs	r1, #12
 8006ec2:	4875      	ldr	r0, [pc, #468]	@ (8007098 <BuildFrame+0x332c>)
 8006ec4:	f7fa fcc4 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ctqxfc", 12 + OLED_GetWidthStr("Gjkbd") + 3, 13 * 0, 1);
 8006ec8:	4873      	ldr	r0, [pc, #460]	@ (8007098 <BuildFrame+0x332c>)
 8006eca:	f7f9 fe03 	bl	8000ad4 <OLED_GetWidthStr>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	330f      	adds	r3, #15
 8006ed2:	b2d9      	uxtb	r1, r3
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4870      	ldr	r0, [pc, #448]	@ (800709c <BuildFrame+0x3330>)
 8006eda:	f7fa fcb9 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("yt", 12, 13 * 1, 1);
 8006ede:	2301      	movs	r3, #1
 8006ee0:	220d      	movs	r2, #13
 8006ee2:	210c      	movs	r1, #12
 8006ee4:	486e      	ldr	r0, [pc, #440]	@ (80070a0 <BuildFrame+0x3334>)
 8006ee6:	f7fa fcb3 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dsgjkyztncz", 12 + OLED_GetWidthStr("yt") + 3, 13 * 1, 1);
 8006eea:	486d      	ldr	r0, [pc, #436]	@ (80070a0 <BuildFrame+0x3334>)
 8006eec:	f7f9 fdf2 	bl	8000ad4 <OLED_GetWidthStr>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	330f      	adds	r3, #15
 8006ef4:	b2d9      	uxtb	r1, r3
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	220d      	movs	r2, #13
 8006efa:	486a      	ldr	r0, [pc, #424]	@ (80070a4 <BuildFrame+0x3338>)
 8006efc:	f7fa fca8 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('!', 12 + OLED_GetWidthStr("yt") + 3 + OLED_GetWidthStr("dsgjkyztncz") + 2, 13 * 1, 1);
 8006f00:	4867      	ldr	r0, [pc, #412]	@ (80070a0 <BuildFrame+0x3334>)
 8006f02:	f7f9 fde7 	bl	8000ad4 <OLED_GetWidthStr>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461c      	mov	r4, r3
 8006f0a:	4866      	ldr	r0, [pc, #408]	@ (80070a4 <BuildFrame+0x3338>)
 8006f0c:	f7f9 fde2 	bl	8000ad4 <OLED_GetWidthStr>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4423      	add	r3, r4
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	3311      	adds	r3, #17
 8006f18:	b2d9      	uxtb	r1, r3
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	220d      	movs	r2, #13
 8006f1e:	2021      	movs	r0, #33	@ 0x21
 8006f20:	f7fa fcce 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8006f24:	4b60      	ldr	r3, [pc, #384]	@ (80070a8 <BuildFrame+0x333c>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f040 843a 	bne.w	80077a2 <BuildFrame+0x3a36>
					*
					*	>	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	2320      	movs	r3, #32
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	2309      	movs	r3, #9
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2323      	movs	r3, #35	@ 0x23
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	211d      	movs	r1, #29
 8006f40:	2003      	movs	r0, #3
 8006f42:	f7fa fd93 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 2, 0);
 8006f46:	2300      	movs	r3, #0
 8006f48:	221a      	movs	r2, #26
 8006f4a:	210c      	movs	r1, #12
 8006f4c:	4857      	ldr	r0, [pc, #348]	@ (80070ac <BuildFrame+0x3340>)
 8006f4e:	f7fa fc7f 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8006f52:	bf00      	nop
			}

		break;
 8006f54:	f000 bc25 	b.w	80077a2 <BuildFrame+0x3a36>

		// 28. Уведомление о необходимости
		// пополнить резервуар
		case 28:

			OLED_DrawStr_RuModified("Ytljcnfnjxyj", 12, 13 * 0, 1);
 8006f58:	2301      	movs	r3, #1
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	210c      	movs	r1, #12
 8006f5e:	4854      	ldr	r0, [pc, #336]	@ (80070b0 <BuildFrame+0x3344>)
 8006f60:	f7fa fc76 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("Ytljcnfnjxyj") + 3, 13 * 0, 1);
 8006f64:	4852      	ldr	r0, [pc, #328]	@ (80070b0 <BuildFrame+0x3344>)
 8006f66:	f7f9 fdb5 	bl	8000ad4 <OLED_GetWidthStr>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	330f      	adds	r3, #15
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	2301      	movs	r3, #1
 8006f72:	2200      	movs	r2, #0
 8006f74:	484f      	ldr	r0, [pc, #316]	@ (80070b4 <BuildFrame+0x3348>)
 8006f76:	f7fa fc6b 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("lkz", 12, 13 * 1, 1);
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	220d      	movs	r2, #13
 8006f7e:	210c      	movs	r1, #12
 8006f80:	484d      	ldr	r0, [pc, #308]	@ (80070b8 <BuildFrame+0x334c>)
 8006f82:	f7fa fc65 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbdf", 12 + OLED_GetWidthStr("lkz") + 3, 13 * 1, 1);
 8006f86:	484c      	ldr	r0, [pc, #304]	@ (80070b8 <BuildFrame+0x334c>)
 8006f88:	f7f9 fda4 	bl	8000ad4 <OLED_GetWidthStr>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	330f      	adds	r3, #15
 8006f90:	b2d9      	uxtb	r1, r3
 8006f92:	2301      	movs	r3, #1
 8006f94:	220d      	movs	r2, #13
 8006f96:	4849      	ldr	r0, [pc, #292]	@ (80070bc <BuildFrame+0x3350>)
 8006f98:	f7fa fc5a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("lkz") + 3 + OLED_GetWidthStr("gjkbdf") + 1, 13 * 1, 1);
 8006f9c:	4846      	ldr	r0, [pc, #280]	@ (80070b8 <BuildFrame+0x334c>)
 8006f9e:	f7f9 fd99 	bl	8000ad4 <OLED_GetWidthStr>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	4845      	ldr	r0, [pc, #276]	@ (80070bc <BuildFrame+0x3350>)
 8006fa8:	f7f9 fd94 	bl	8000ad4 <OLED_GetWidthStr>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4423      	add	r3, r4
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	3310      	adds	r3, #16
 8006fb4:	b2d9      	uxtb	r1, r3
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	220d      	movs	r2, #13
 8006fba:	202e      	movs	r0, #46	@ 0x2e
 8006fbc:	f7fa fc80 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("Nht,e", 12 + OLED_GetWidthStr("lkz") + 3 + OLED_GetWidthStr("gjkbdf") + 1 + OLED_GetWidthStr(".") + 2 + 9, 13 * 1, 1);
 8006fc0:	483d      	ldr	r0, [pc, #244]	@ (80070b8 <BuildFrame+0x334c>)
 8006fc2:	f7f9 fd87 	bl	8000ad4 <OLED_GetWidthStr>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461c      	mov	r4, r3
 8006fca:	483c      	ldr	r0, [pc, #240]	@ (80070bc <BuildFrame+0x3350>)
 8006fcc:	f7f9 fd82 	bl	8000ad4 <OLED_GetWidthStr>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4423      	add	r3, r4
 8006fd4:	b2dc      	uxtb	r4, r3
 8006fd6:	483a      	ldr	r0, [pc, #232]	@ (80070c0 <BuildFrame+0x3354>)
 8006fd8:	f7f9 fd7c 	bl	8000ad4 <OLED_GetWidthStr>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4423      	add	r3, r4
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	331b      	adds	r3, #27
 8006fe4:	b2d9      	uxtb	r1, r3
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	220d      	movs	r2, #13
 8006fea:	4836      	ldr	r0, [pc, #216]	@ (80070c4 <BuildFrame+0x3358>)
 8006fec:	f7fa fc30 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("lkz") + 3 + OLED_GetWidthStr("gjkbdf") + 1 + OLED_GetWidthStr(".") + 2 + 9 + 16, 13 * 1, 1);
 8006ff0:	4831      	ldr	r0, [pc, #196]	@ (80070b8 <BuildFrame+0x334c>)
 8006ff2:	f7f9 fd6f 	bl	8000ad4 <OLED_GetWidthStr>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	461c      	mov	r4, r3
 8006ffa:	4830      	ldr	r0, [pc, #192]	@ (80070bc <BuildFrame+0x3350>)
 8006ffc:	f7f9 fd6a 	bl	8000ad4 <OLED_GetWidthStr>
 8007000:	4603      	mov	r3, r0
 8007002:	4423      	add	r3, r4
 8007004:	b2dc      	uxtb	r4, r3
 8007006:	482e      	ldr	r0, [pc, #184]	@ (80070c0 <BuildFrame+0x3354>)
 8007008:	f7f9 fd64 	bl	8000ad4 <OLED_GetWidthStr>
 800700c:	4603      	mov	r3, r0
 800700e:	4423      	add	r3, r4
 8007010:	b2db      	uxtb	r3, r3
 8007012:	332b      	adds	r3, #43	@ 0x2b
 8007014:	b2d9      	uxtb	r1, r3
 8007016:	2301      	movs	r3, #1
 8007018:	220d      	movs	r2, #13
 800701a:	202d      	movs	r0, #45	@ 0x2d
 800701c:	f7fa fc50 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("tncz", 12, 13 * 2, 1);
 8007020:	2301      	movs	r3, #1
 8007022:	221a      	movs	r2, #26
 8007024:	210c      	movs	r1, #12
 8007026:	4828      	ldr	r0, [pc, #160]	@ (80070c8 <BuildFrame+0x335c>)
 8007028:	f7fa fc12 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("yfgjkybnm", 12 + OLED_GetWidthStr("tncz") + 3, 13 * 2, 1);
 800702c:	4826      	ldr	r0, [pc, #152]	@ (80070c8 <BuildFrame+0x335c>)
 800702e:	f7f9 fd51 	bl	8000ad4 <OLED_GetWidthStr>
 8007032:	4603      	mov	r3, r0
 8007034:	330f      	adds	r3, #15
 8007036:	b2d9      	uxtb	r1, r3
 8007038:	2301      	movs	r3, #1
 800703a:	221a      	movs	r2, #26
 800703c:	4823      	ldr	r0, [pc, #140]	@ (80070cc <BuildFrame+0x3360>)
 800703e:	f7fa fc07 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("htpthdefh", 12, 13 * 3, 1);
 8007042:	2301      	movs	r3, #1
 8007044:	2227      	movs	r2, #39	@ 0x27
 8007046:	210c      	movs	r1, #12
 8007048:	4821      	ldr	r0, [pc, #132]	@ (80070d0 <BuildFrame+0x3364>)
 800704a:	f7fa fc01 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("htpthdefh") + 1, 13 * 3, 1);
 800704e:	4820      	ldr	r0, [pc, #128]	@ (80070d0 <BuildFrame+0x3364>)
 8007050:	f7f9 fd40 	bl	8000ad4 <OLED_GetWidthStr>
 8007054:	4603      	mov	r3, r0
 8007056:	330d      	adds	r3, #13
 8007058:	b2d9      	uxtb	r1, r3
 800705a:	2301      	movs	r3, #1
 800705c:	2227      	movs	r2, #39	@ 0x27
 800705e:	202e      	movs	r0, #46	@ 0x2e
 8007060:	f7fa fc2e 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 8007064:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <BuildFrame+0x333c>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b04      	cmp	r3, #4
 800706a:	f040 839c 	bne.w	80077a6 <BuildFrame+0x3a3a>
					*
					*	>	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 800706e:	2300      	movs	r3, #0
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	233a      	movs	r3, #58	@ 0x3a
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	2309      	movs	r3, #9
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	233d      	movs	r3, #61	@ 0x3d
 800707c:	2203      	movs	r2, #3
 800707e:	2137      	movs	r1, #55	@ 0x37
 8007080:	2003      	movs	r0, #3
 8007082:	f7fa fcf3 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 4, 0);
 8007086:	2300      	movs	r3, #0
 8007088:	2234      	movs	r2, #52	@ 0x34
 800708a:	210c      	movs	r1, #12
 800708c:	4807      	ldr	r0, [pc, #28]	@ (80070ac <BuildFrame+0x3340>)
 800708e:	f7fa fbdf 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8007092:	bf00      	nop
			}

		break;
 8007094:	e387      	b.n	80077a6 <BuildFrame+0x3a3a>
 8007096:	bf00      	nop
 8007098:	08014590 	.word	0x08014590
 800709c:	08014598 	.word	0x08014598
 80070a0:	080144b8 	.word	0x080144b8
 80070a4:	080145a0 	.word	0x080145a0
 80070a8:	20000a3d 	.word	0x20000a3d
 80070ac:	080143fc 	.word	0x080143fc
 80070b0:	080145ac 	.word	0x080145ac
 80070b4:	08014384 	.word	0x08014384
 80070b8:	080145bc 	.word	0x080145bc
 80070bc:	08014258 	.word	0x08014258
 80070c0:	08014544 	.word	0x08014544
 80070c4:	080145c0 	.word	0x080145c0
 80070c8:	080145c8 	.word	0x080145c8
 80070cc:	080145d0 	.word	0x080145d0
 80070d0:	080145dc 	.word	0x080145dc
			*
			*		Ок
			*------------------------
			*/

			OLED_DrawStr_RuModified("Ntreobq", 12, 13 * 0, 1);
 80070d4:	2301      	movs	r3, #1
 80070d6:	2200      	movs	r2, #0
 80070d8:	210c      	movs	r1, #12
 80070da:	48a0      	ldr	r0, [pc, #640]	@ (800735c <BuildFrame+0x35f0>)
 80070dc:	f7fa fbb8 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjkbd", 12 + OLED_GetWidthStr("Ntreobq") + 3, 13 * 0, 1);
 80070e0:	489e      	ldr	r0, [pc, #632]	@ (800735c <BuildFrame+0x35f0>)
 80070e2:	f7f9 fcf7 	bl	8000ad4 <OLED_GetWidthStr>
 80070e6:	4603      	mov	r3, r0
 80070e8:	330f      	adds	r3, #15
 80070ea:	b2d9      	uxtb	r1, r3
 80070ec:	2301      	movs	r3, #1
 80070ee:	2200      	movs	r2, #0
 80070f0:	489b      	ldr	r0, [pc, #620]	@ (8007360 <BuildFrame+0x35f4>)
 80070f2:	f7fa fbad 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("yt", 12 + OLED_GetWidthStr("Ntreobq") + 3 + OLED_GetWidthStr("gjkbd") + 3, 13 * 0, 1);
 80070f6:	4899      	ldr	r0, [pc, #612]	@ (800735c <BuildFrame+0x35f0>)
 80070f8:	f7f9 fcec 	bl	8000ad4 <OLED_GetWidthStr>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461c      	mov	r4, r3
 8007100:	4897      	ldr	r0, [pc, #604]	@ (8007360 <BuildFrame+0x35f4>)
 8007102:	f7f9 fce7 	bl	8000ad4 <OLED_GetWidthStr>
 8007106:	4603      	mov	r3, r0
 8007108:	4423      	add	r3, r4
 800710a:	b2db      	uxtb	r3, r3
 800710c:	3312      	adds	r3, #18
 800710e:	b2d9      	uxtb	r1, r3
 8007110:	2301      	movs	r3, #1
 8007112:	2200      	movs	r2, #0
 8007114:	4893      	ldr	r0, [pc, #588]	@ (8007364 <BuildFrame+0x35f8>)
 8007116:	f7fa fb9b 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified(",eltn", 12, 13 * 1, 1);
 800711a:	2301      	movs	r3, #1
 800711c:	220d      	movs	r2, #13
 800711e:	210c      	movs	r1, #12
 8007120:	4891      	ldr	r0, [pc, #580]	@ (8007368 <BuildFrame+0x35fc>)
 8007122:	f7fa fb95 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dsgjkyty", 12 + OLED_GetWidthStr(",eltn") + 3, 13 * 1, 1);
 8007126:	4890      	ldr	r0, [pc, #576]	@ (8007368 <BuildFrame+0x35fc>)
 8007128:	f7f9 fcd4 	bl	8000ad4 <OLED_GetWidthStr>
 800712c:	4603      	mov	r3, r0
 800712e:	330f      	adds	r3, #15
 8007130:	b2d9      	uxtb	r1, r3
 8007132:	2301      	movs	r3, #1
 8007134:	220d      	movs	r2, #13
 8007136:	488d      	ldr	r0, [pc, #564]	@ (800736c <BuildFrame+0x3600>)
 8007138:	f7fa fb8a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("bp", 12, 13 * 2, 1);
 800713c:	2301      	movs	r3, #1
 800713e:	221a      	movs	r2, #26
 8007140:	210c      	movs	r1, #12
 8007142:	488b      	ldr	r0, [pc, #556]	@ (8007370 <BuildFrame+0x3604>)
 8007144:	f7fa fb84 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("bp") + 1, 13 * 2, 1);
 8007148:	4889      	ldr	r0, [pc, #548]	@ (8007370 <BuildFrame+0x3604>)
 800714a:	f7f9 fcc3 	bl	8000ad4 <OLED_GetWidthStr>
 800714e:	4603      	mov	r3, r0
 8007150:	330d      	adds	r3, #13
 8007152:	b2d9      	uxtb	r1, r3
 8007154:	2301      	movs	r3, #1
 8007156:	221a      	movs	r2, #26
 8007158:	202d      	movs	r0, #45	@ 0x2d
 800715a:	f7fa fbb1 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("pf", 12 + OLED_GetWidthStr("bp") + 1 + OLED_GetWidthStr("-") + 1 - 2, 13 * 2, 1);
 800715e:	4884      	ldr	r0, [pc, #528]	@ (8007370 <BuildFrame+0x3604>)
 8007160:	f7f9 fcb8 	bl	8000ad4 <OLED_GetWidthStr>
 8007164:	4603      	mov	r3, r0
 8007166:	461c      	mov	r4, r3
 8007168:	4882      	ldr	r0, [pc, #520]	@ (8007374 <BuildFrame+0x3608>)
 800716a:	f7f9 fcb3 	bl	8000ad4 <OLED_GetWidthStr>
 800716e:	4603      	mov	r3, r0
 8007170:	4423      	add	r3, r4
 8007172:	b2db      	uxtb	r3, r3
 8007174:	330c      	adds	r3, #12
 8007176:	b2d9      	uxtb	r1, r3
 8007178:	2301      	movs	r3, #1
 800717a:	221a      	movs	r2, #26
 800717c:	487e      	ldr	r0, [pc, #504]	@ (8007378 <BuildFrame+0x360c>)
 800717e:	f7fa fb67 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ytljcnfnrf", 12 + OLED_GetWidthStr("bp") + 1 + OLED_GetWidthStr("-") + 1 + OLED_GetWidthStr("pf") + 3, 13 * 2, 1);
 8007182:	487b      	ldr	r0, [pc, #492]	@ (8007370 <BuildFrame+0x3604>)
 8007184:	f7f9 fca6 	bl	8000ad4 <OLED_GetWidthStr>
 8007188:	4603      	mov	r3, r0
 800718a:	461c      	mov	r4, r3
 800718c:	4879      	ldr	r0, [pc, #484]	@ (8007374 <BuildFrame+0x3608>)
 800718e:	f7f9 fca1 	bl	8000ad4 <OLED_GetWidthStr>
 8007192:	4603      	mov	r3, r0
 8007194:	4423      	add	r3, r4
 8007196:	b2dc      	uxtb	r4, r3
 8007198:	4877      	ldr	r0, [pc, #476]	@ (8007378 <BuildFrame+0x360c>)
 800719a:	f7f9 fc9b 	bl	8000ad4 <OLED_GetWidthStr>
 800719e:	4603      	mov	r3, r0
 80071a0:	4423      	add	r3, r4
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	3311      	adds	r3, #17
 80071a6:	b2d9      	uxtb	r1, r3
 80071a8:	2301      	movs	r3, #1
 80071aa:	221a      	movs	r2, #26
 80071ac:	4873      	ldr	r0, [pc, #460]	@ (800737c <BuildFrame+0x3610>)
 80071ae:	f7fa fb4f 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("djls", 12, 13 * 3, 1);
 80071b2:	2301      	movs	r3, #1
 80071b4:	2227      	movs	r2, #39	@ 0x27
 80071b6:	210c      	movs	r1, #12
 80071b8:	4871      	ldr	r0, [pc, #452]	@ (8007380 <BuildFrame+0x3614>)
 80071ba:	f7fa fb49 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("d", 12 + OLED_GetWidthStr("djls") + 3, 13 * 3, 1);
 80071be:	4870      	ldr	r0, [pc, #448]	@ (8007380 <BuildFrame+0x3614>)
 80071c0:	f7f9 fc88 	bl	8000ad4 <OLED_GetWidthStr>
 80071c4:	4603      	mov	r3, r0
 80071c6:	330f      	adds	r3, #15
 80071c8:	b2d9      	uxtb	r1, r3
 80071ca:	2301      	movs	r3, #1
 80071cc:	2227      	movs	r2, #39	@ 0x27
 80071ce:	486d      	ldr	r0, [pc, #436]	@ (8007384 <BuildFrame+0x3618>)
 80071d0:	f7fa fb3e 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("htpthdef", 12 + OLED_GetWidthStr("djls") + 3 + OLED_GetWidthStr("d") + 3, 13 * 3, 1);
 80071d4:	486a      	ldr	r0, [pc, #424]	@ (8007380 <BuildFrame+0x3614>)
 80071d6:	f7f9 fc7d 	bl	8000ad4 <OLED_GetWidthStr>
 80071da:	4603      	mov	r3, r0
 80071dc:	461c      	mov	r4, r3
 80071de:	4869      	ldr	r0, [pc, #420]	@ (8007384 <BuildFrame+0x3618>)
 80071e0:	f7f9 fc78 	bl	8000ad4 <OLED_GetWidthStr>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4423      	add	r3, r4
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	3312      	adds	r3, #18
 80071ec:	b2d9      	uxtb	r1, r3
 80071ee:	2301      	movs	r3, #1
 80071f0:	2227      	movs	r2, #39	@ 0x27
 80071f2:	4865      	ldr	r0, [pc, #404]	@ (8007388 <BuildFrame+0x361c>)
 80071f4:	f7fa fb2c 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("djls") + 3 + OLED_GetWidthStr("d") + 3 + OLED_GetWidthStr("htpthdef") + 1, 13 * 3, 1);
 80071f8:	4861      	ldr	r0, [pc, #388]	@ (8007380 <BuildFrame+0x3614>)
 80071fa:	f7f9 fc6b 	bl	8000ad4 <OLED_GetWidthStr>
 80071fe:	4603      	mov	r3, r0
 8007200:	461c      	mov	r4, r3
 8007202:	4860      	ldr	r0, [pc, #384]	@ (8007384 <BuildFrame+0x3618>)
 8007204:	f7f9 fc66 	bl	8000ad4 <OLED_GetWidthStr>
 8007208:	4603      	mov	r3, r0
 800720a:	4423      	add	r3, r4
 800720c:	b2dc      	uxtb	r4, r3
 800720e:	485e      	ldr	r0, [pc, #376]	@ (8007388 <BuildFrame+0x361c>)
 8007210:	f7f9 fc60 	bl	8000ad4 <OLED_GetWidthStr>
 8007214:	4603      	mov	r3, r0
 8007216:	4423      	add	r3, r4
 8007218:	b2db      	uxtb	r3, r3
 800721a:	3313      	adds	r3, #19
 800721c:	b2d9      	uxtb	r1, r3
 800721e:	2301      	movs	r3, #1
 8007220:	2227      	movs	r2, #39	@ 0x27
 8007222:	202d      	movs	r0, #45	@ 0x2d
 8007224:	f7fa fb4c 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("ht", 12, 13 * 4, 1);
 8007228:	2301      	movs	r3, #1
 800722a:	2234      	movs	r2, #52	@ 0x34
 800722c:	210c      	movs	r1, #12
 800722e:	4857      	ldr	r0, [pc, #348]	@ (800738c <BuildFrame+0x3620>)
 8007230:	f7fa fb0e 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("ht") + 1, 13 * 4, 1);
 8007234:	4855      	ldr	r0, [pc, #340]	@ (800738c <BuildFrame+0x3620>)
 8007236:	f7f9 fc4d 	bl	8000ad4 <OLED_GetWidthStr>
 800723a:	4603      	mov	r3, r0
 800723c:	330d      	adds	r3, #13
 800723e:	b2d9      	uxtb	r1, r3
 8007240:	2301      	movs	r3, #1
 8007242:	2234      	movs	r2, #52	@ 0x34
 8007244:	202e      	movs	r0, #46	@ 0x2e
 8007246:	f7fa fb3b 	bl	80018c0 <OLED_DrawChar_Modified>

		break;
 800724a:	e2af      	b.n	80077ac <BuildFrame+0x3a40>

		// 30. Сообщение о том, что полив не будет
		// выполнен из-за недостатка воды (2)
		case 30:

			OLED_DrawStr_RuModified("Ytj,[jlbvj", 12, 13 * 0, 1);
 800724c:	2301      	movs	r3, #1
 800724e:	2200      	movs	r2, #0
 8007250:	210c      	movs	r1, #12
 8007252:	484f      	ldr	r0, [pc, #316]	@ (8007390 <BuildFrame+0x3624>)
 8007254:	f7fa fafc 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gjgjk", 12 + OLED_GetWidthStr("Ytj,[jlbvj") + 3, 13 * 0, 1);
 8007258:	484d      	ldr	r0, [pc, #308]	@ (8007390 <BuildFrame+0x3624>)
 800725a:	f7f9 fc3b 	bl	8000ad4 <OLED_GetWidthStr>
 800725e:	4603      	mov	r3, r0
 8007260:	330f      	adds	r3, #15
 8007262:	b2d9      	uxtb	r1, r3
 8007264:	2301      	movs	r3, #1
 8007266:	2200      	movs	r2, #0
 8007268:	484a      	ldr	r0, [pc, #296]	@ (8007394 <BuildFrame+0x3628>)
 800726a:	f7fa faf1 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("Ytj,[jlbvj") + 3 + OLED_GetWidthStr("gjgjk") + 1, 13 * 0, 1);
 800726e:	4848      	ldr	r0, [pc, #288]	@ (8007390 <BuildFrame+0x3624>)
 8007270:	f7f9 fc30 	bl	8000ad4 <OLED_GetWidthStr>
 8007274:	4603      	mov	r3, r0
 8007276:	461c      	mov	r4, r3
 8007278:	4846      	ldr	r0, [pc, #280]	@ (8007394 <BuildFrame+0x3628>)
 800727a:	f7f9 fc2b 	bl	8000ad4 <OLED_GetWidthStr>
 800727e:	4603      	mov	r3, r0
 8007280:	4423      	add	r3, r4
 8007282:	b2db      	uxtb	r3, r3
 8007284:	3310      	adds	r3, #16
 8007286:	b2d9      	uxtb	r1, r3
 8007288:	2301      	movs	r3, #1
 800728a:	2200      	movs	r2, #0
 800728c:	202d      	movs	r0, #45	@ 0x2d
 800728e:	f7fa fb17 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("ybnm", 12, 13 * 1, 1);
 8007292:	2301      	movs	r3, #1
 8007294:	220d      	movs	r2, #13
 8007296:	210c      	movs	r1, #12
 8007298:	483f      	ldr	r0, [pc, #252]	@ (8007398 <BuildFrame+0x362c>)
 800729a:	f7fa fad9 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("htpthdefh", 12 + OLED_GetWidthStr("ybnm") + 3, 13 * 1, 1);
 800729e:	483e      	ldr	r0, [pc, #248]	@ (8007398 <BuildFrame+0x362c>)
 80072a0:	f7f9 fc18 	bl	8000ad4 <OLED_GetWidthStr>
 80072a4:	4603      	mov	r3, r0
 80072a6:	330f      	adds	r3, #15
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	2301      	movs	r3, #1
 80072ac:	220d      	movs	r2, #13
 80072ae:	483b      	ldr	r0, [pc, #236]	@ (800739c <BuildFrame+0x3630>)
 80072b0:	f7fa face 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("ybnm") + 3 + OLED_GetWidthStr("htpthdefh") + 1, 13 * 1, 1);
 80072b4:	4838      	ldr	r0, [pc, #224]	@ (8007398 <BuildFrame+0x362c>)
 80072b6:	f7f9 fc0d 	bl	8000ad4 <OLED_GetWidthStr>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461c      	mov	r4, r3
 80072be:	4837      	ldr	r0, [pc, #220]	@ (800739c <BuildFrame+0x3630>)
 80072c0:	f7f9 fc08 	bl	8000ad4 <OLED_GetWidthStr>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4423      	add	r3, r4
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	3310      	adds	r3, #16
 80072cc:	b2d9      	uxtb	r1, r3
 80072ce:	2301      	movs	r3, #1
 80072d0:	220d      	movs	r2, #13
 80072d2:	202e      	movs	r0, #46	@ 0x2e
 80072d4:	f7fa faf4 	bl	80018c0 <OLED_DrawChar_Modified>

			switch(pos_cursor)
 80072d8:	4b31      	ldr	r3, [pc, #196]	@ (80073a0 <BuildFrame+0x3634>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f040 8264 	bne.w	80077aa <BuildFrame+0x3a3e>
					*
					*	>	Ок
					*------------------------
					*/

					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 80072e2:	2300      	movs	r3, #0
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	2320      	movs	r3, #32
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	2309      	movs	r3, #9
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2323      	movs	r3, #35	@ 0x23
 80072f0:	2203      	movs	r2, #3
 80072f2:	211d      	movs	r1, #29
 80072f4:	2003      	movs	r0, #3
 80072f6:	f7fa fbb9 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Jr", 12, 13 * 2, 0);
 80072fa:	2300      	movs	r3, #0
 80072fc:	221a      	movs	r2, #26
 80072fe:	210c      	movs	r1, #12
 8007300:	4828      	ldr	r0, [pc, #160]	@ (80073a4 <BuildFrame+0x3638>)
 8007302:	f7fa faa5 	bl	8001850 <OLED_DrawStr_RuModified>

				break;
 8007306:	bf00      	nop
			}

		break;
 8007308:	e24f      	b.n	80077aa <BuildFrame+0x3a3e>
			*		Ок
			*------------------------
			*/

			// Если датчик воды стал включен
			if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 800730a:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <BuildFrame+0x363c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d056      	beq.n	80073c0 <BuildFrame+0x3654>
			{
				OLED_DrawStr_RuModified("Jnrk.xtybt", 12, 13 * 0, 1);
 8007312:	2301      	movs	r3, #1
 8007314:	2200      	movs	r2, #0
 8007316:	210c      	movs	r1, #12
 8007318:	4824      	ldr	r0, [pc, #144]	@ (80073ac <BuildFrame+0x3640>)
 800731a:	f7fa fa99 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified("lfnxbrf", 12 + OLED_GetWidthStr("Jnrk.xtybt") + 3, 13 * 0, 1);
 800731e:	4823      	ldr	r0, [pc, #140]	@ (80073ac <BuildFrame+0x3640>)
 8007320:	f7f9 fbd8 	bl	8000ad4 <OLED_GetWidthStr>
 8007324:	4603      	mov	r3, r0
 8007326:	330f      	adds	r3, #15
 8007328:	b2d9      	uxtb	r1, r3
 800732a:	2301      	movs	r3, #1
 800732c:	2200      	movs	r2, #0
 800732e:	4820      	ldr	r0, [pc, #128]	@ (80073b0 <BuildFrame+0x3644>)
 8007330:	f7fa fa8e 	bl	8001850 <OLED_DrawStr_RuModified>

				OLED_DrawStr_RuModified("jnrk.xtyb.", 12 + OLED_GetWidthStr("ltn") + 3 + OLED_GetWidthStr("r") + 3, 13 * 2, 1);
 8007334:	481f      	ldr	r0, [pc, #124]	@ (80073b4 <BuildFrame+0x3648>)
 8007336:	f7f9 fbcd 	bl	8000ad4 <OLED_GetWidthStr>
 800733a:	4603      	mov	r3, r0
 800733c:	461c      	mov	r4, r3
 800733e:	481e      	ldr	r0, [pc, #120]	@ (80073b8 <BuildFrame+0x364c>)
 8007340:	f7f9 fbc8 	bl	8000ad4 <OLED_GetWidthStr>
 8007344:	4603      	mov	r3, r0
 8007346:	4423      	add	r3, r4
 8007348:	b2db      	uxtb	r3, r3
 800734a:	3312      	adds	r3, #18
 800734c:	b2d9      	uxtb	r1, r3
 800734e:	2301      	movs	r3, #1
 8007350:	221a      	movs	r2, #26
 8007352:	481a      	ldr	r0, [pc, #104]	@ (80073bc <BuildFrame+0x3650>)
 8007354:	f7fa fa7c 	bl	8001850 <OLED_DrawStr_RuModified>
 8007358:	e055      	b.n	8007406 <BuildFrame+0x369a>
 800735a:	bf00      	nop
 800735c:	0801457c 	.word	0x0801457c
 8007360:	08014298 	.word	0x08014298
 8007364:	080144b8 	.word	0x080144b8
 8007368:	080145e8 	.word	0x080145e8
 800736c:	080145f0 	.word	0x080145f0
 8007370:	080145fc 	.word	0x080145fc
 8007374:	08014304 	.word	0x08014304
 8007378:	08014600 	.word	0x08014600
 800737c:	08014604 	.word	0x08014604
 8007380:	08014384 	.word	0x08014384
 8007384:	080144d4 	.word	0x080144d4
 8007388:	08014610 	.word	0x08014610
 800738c:	0801461c 	.word	0x0801461c
 8007390:	08014620 	.word	0x08014620
 8007394:	0801462c 	.word	0x0801462c
 8007398:	08014634 	.word	0x08014634
 800739c:	080145dc 	.word	0x080145dc
 80073a0:	20000a3d 	.word	0x20000a3d
 80073a4:	080143fc 	.word	0x080143fc
 80073a8:	20000a84 	.word	0x20000a84
 80073ac:	0801463c 	.word	0x0801463c
 80073b0:	08014648 	.word	0x08014648
 80073b4:	08014650 	.word	0x08014650
 80073b8:	08014654 	.word	0x08014654
 80073bc:	08014658 	.word	0x08014658
			}

			// Если датчик воды стал отключен
			else
			{
				OLED_DrawStr_RuModified("Drk.xtybt", 12, 13 * 0, 1);
 80073c0:	2301      	movs	r3, #1
 80073c2:	2200      	movs	r2, #0
 80073c4:	210c      	movs	r1, #12
 80073c6:	48ba      	ldr	r0, [pc, #744]	@ (80076b0 <BuildFrame+0x3944>)
 80073c8:	f7fa fa42 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified("lfnxbrf", 12 + OLED_GetWidthStr("Drk.xtybt") + 3, 13 * 0, 1);
 80073cc:	48b8      	ldr	r0, [pc, #736]	@ (80076b0 <BuildFrame+0x3944>)
 80073ce:	f7f9 fb81 	bl	8000ad4 <OLED_GetWidthStr>
 80073d2:	4603      	mov	r3, r0
 80073d4:	330f      	adds	r3, #15
 80073d6:	b2d9      	uxtb	r1, r3
 80073d8:	2301      	movs	r3, #1
 80073da:	2200      	movs	r2, #0
 80073dc:	48b5      	ldr	r0, [pc, #724]	@ (80076b4 <BuildFrame+0x3948>)
 80073de:	f7fa fa37 	bl	8001850 <OLED_DrawStr_RuModified>

				OLED_DrawStr_RuModified("drk.xtyb.", 12 + OLED_GetWidthStr("ltn") + 3 + OLED_GetWidthStr("r") + 3, 13 * 2, 1);
 80073e2:	48b5      	ldr	r0, [pc, #724]	@ (80076b8 <BuildFrame+0x394c>)
 80073e4:	f7f9 fb76 	bl	8000ad4 <OLED_GetWidthStr>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461c      	mov	r4, r3
 80073ec:	48b3      	ldr	r0, [pc, #716]	@ (80076bc <BuildFrame+0x3950>)
 80073ee:	f7f9 fb71 	bl	8000ad4 <OLED_GetWidthStr>
 80073f2:	4603      	mov	r3, r0
 80073f4:	4423      	add	r3, r4
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	3312      	adds	r3, #18
 80073fa:	b2d9      	uxtb	r1, r3
 80073fc:	2301      	movs	r3, #1
 80073fe:	221a      	movs	r2, #26
 8007400:	48af      	ldr	r0, [pc, #700]	@ (80076c0 <BuildFrame+0x3954>)
 8007402:	f7fa fa25 	bl	8001850 <OLED_DrawStr_RuModified>
			}

			OLED_DrawStr_RuModified("ehjdyz", 12, 13 * 1, 1);
 8007406:	2301      	movs	r3, #1
 8007408:	220d      	movs	r2, #13
 800740a:	210c      	movs	r1, #12
 800740c:	48ad      	ldr	r0, [pc, #692]	@ (80076c4 <BuildFrame+0x3958>)
 800740e:	f7fa fa1f 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("djls", 12 + OLED_GetWidthStr("ehjdyz") + 3, 13 * 1, 1);
 8007412:	48ac      	ldr	r0, [pc, #688]	@ (80076c4 <BuildFrame+0x3958>)
 8007414:	f7f9 fb5e 	bl	8000ad4 <OLED_GetWidthStr>
 8007418:	4603      	mov	r3, r0
 800741a:	330f      	adds	r3, #15
 800741c:	b2d9      	uxtb	r1, r3
 800741e:	2301      	movs	r3, #1
 8007420:	220d      	movs	r2, #13
 8007422:	48a9      	ldr	r0, [pc, #676]	@ (80076c8 <BuildFrame+0x395c>)
 8007424:	f7fa fa14 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ghbdt", 12 + OLED_GetWidthStr("ehjdyz") + 3 + OLED_GetWidthStr("djls") + 3, 13 * 1, 1);
 8007428:	48a6      	ldr	r0, [pc, #664]	@ (80076c4 <BuildFrame+0x3958>)
 800742a:	f7f9 fb53 	bl	8000ad4 <OLED_GetWidthStr>
 800742e:	4603      	mov	r3, r0
 8007430:	461c      	mov	r4, r3
 8007432:	48a5      	ldr	r0, [pc, #660]	@ (80076c8 <BuildFrame+0x395c>)
 8007434:	f7f9 fb4e 	bl	8000ad4 <OLED_GetWidthStr>
 8007438:	4603      	mov	r3, r0
 800743a:	4423      	add	r3, r4
 800743c:	b2db      	uxtb	r3, r3
 800743e:	3312      	adds	r3, #18
 8007440:	b2d9      	uxtb	r1, r3
 8007442:	2301      	movs	r3, #1
 8007444:	220d      	movs	r2, #13
 8007446:	48a1      	ldr	r0, [pc, #644]	@ (80076cc <BuildFrame+0x3960>)
 8007448:	f7fa fa02 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('-', 12 + OLED_GetWidthStr("ehjdyz") + 3 + OLED_GetWidthStr("djls") + 3 + OLED_GetWidthStr("ghbdt") + 1, 13 * 1, 1);
 800744c:	489d      	ldr	r0, [pc, #628]	@ (80076c4 <BuildFrame+0x3958>)
 800744e:	f7f9 fb41 	bl	8000ad4 <OLED_GetWidthStr>
 8007452:	4603      	mov	r3, r0
 8007454:	461c      	mov	r4, r3
 8007456:	489c      	ldr	r0, [pc, #624]	@ (80076c8 <BuildFrame+0x395c>)
 8007458:	f7f9 fb3c 	bl	8000ad4 <OLED_GetWidthStr>
 800745c:	4603      	mov	r3, r0
 800745e:	4423      	add	r3, r4
 8007460:	b2dc      	uxtb	r4, r3
 8007462:	489a      	ldr	r0, [pc, #616]	@ (80076cc <BuildFrame+0x3960>)
 8007464:	f7f9 fb36 	bl	8000ad4 <OLED_GetWidthStr>
 8007468:	4603      	mov	r3, r0
 800746a:	4423      	add	r3, r4
 800746c:	b2db      	uxtb	r3, r3
 800746e:	3313      	adds	r3, #19
 8007470:	b2d9      	uxtb	r1, r3
 8007472:	2301      	movs	r3, #1
 8007474:	220d      	movs	r2, #13
 8007476:	202d      	movs	r0, #45	@ 0x2d
 8007478:	f7fa fa22 	bl	80018c0 <OLED_DrawChar_Modified>
			OLED_DrawStr_RuModified("ltn", 12, 13 * 2, 1);
 800747c:	2301      	movs	r3, #1
 800747e:	221a      	movs	r2, #26
 8007480:	210c      	movs	r1, #12
 8007482:	488d      	ldr	r0, [pc, #564]	@ (80076b8 <BuildFrame+0x394c>)
 8007484:	f7fa f9e4 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("r", 12 + OLED_GetWidthStr("ltn") + 3, 13 * 2, 1);
 8007488:	488b      	ldr	r0, [pc, #556]	@ (80076b8 <BuildFrame+0x394c>)
 800748a:	f7f9 fb23 	bl	8000ad4 <OLED_GetWidthStr>
 800748e:	4603      	mov	r3, r0
 8007490:	330f      	adds	r3, #15
 8007492:	b2d9      	uxtb	r1, r3
 8007494:	2301      	movs	r3, #1
 8007496:	221a      	movs	r2, #26
 8007498:	4888      	ldr	r0, [pc, #544]	@ (80076bc <BuildFrame+0x3950>)
 800749a:	f7fa f9d9 	bl	8001850 <OLED_DrawStr_RuModified>

			OLED_DrawStr_RuModified("kfvgjxtr", 12, 13 * 3, 1);
 800749e:	2301      	movs	r3, #1
 80074a0:	2227      	movs	r2, #39	@ 0x27
 80074a2:	210c      	movs	r1, #12
 80074a4:	488a      	ldr	r0, [pc, #552]	@ (80076d0 <BuildFrame+0x3964>)
 80074a6:	f7fa f9d3 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("yf", 12 + OLED_GetWidthStr("kfvgjxtr") + 3, 13 * 3, 1);
 80074aa:	4889      	ldr	r0, [pc, #548]	@ (80076d0 <BuildFrame+0x3964>)
 80074ac:	f7f9 fb12 	bl	8000ad4 <OLED_GetWidthStr>
 80074b0:	4603      	mov	r3, r0
 80074b2:	330f      	adds	r3, #15
 80074b4:	b2d9      	uxtb	r1, r3
 80074b6:	2301      	movs	r3, #1
 80074b8:	2227      	movs	r2, #39	@ 0x27
 80074ba:	4886      	ldr	r0, [pc, #536]	@ (80076d4 <BuildFrame+0x3968>)
 80074bc:	f7fa f9c8 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("gfytkb", 12 + OLED_GetWidthStr("kfvgjxtr") + 3 + OLED_GetWidthStr("yf") + 3, 13 * 3, 1);
 80074c0:	4883      	ldr	r0, [pc, #524]	@ (80076d0 <BuildFrame+0x3964>)
 80074c2:	f7f9 fb07 	bl	8000ad4 <OLED_GetWidthStr>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461c      	mov	r4, r3
 80074ca:	4882      	ldr	r0, [pc, #520]	@ (80076d4 <BuildFrame+0x3968>)
 80074cc:	f7f9 fb02 	bl	8000ad4 <OLED_GetWidthStr>
 80074d0:	4603      	mov	r3, r0
 80074d2:	4423      	add	r3, r4
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3312      	adds	r3, #18
 80074d8:	b2d9      	uxtb	r1, r3
 80074da:	2301      	movs	r3, #1
 80074dc:	2227      	movs	r2, #39	@ 0x27
 80074de:	487e      	ldr	r0, [pc, #504]	@ (80076d8 <BuildFrame+0x396c>)
 80074e0:	f7fa f9b6 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("eghfdktybz", 12, 13 * 4, 1);
 80074e4:	2301      	movs	r3, #1
 80074e6:	2234      	movs	r2, #52	@ 0x34
 80074e8:	210c      	movs	r1, #12
 80074ea:	487c      	ldr	r0, [pc, #496]	@ (80076dc <BuildFrame+0x3970>)
 80074ec:	f7fa f9b0 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("eghfdktybz") + 1, 13 * 4, 1);
 80074f0:	487a      	ldr	r0, [pc, #488]	@ (80076dc <BuildFrame+0x3970>)
 80074f2:	f7f9 faef 	bl	8000ad4 <OLED_GetWidthStr>
 80074f6:	4603      	mov	r3, r0
 80074f8:	330d      	adds	r3, #13
 80074fa:	b2d9      	uxtb	r1, r3
 80074fc:	2301      	movs	r3, #1
 80074fe:	2234      	movs	r2, #52	@ 0x34
 8007500:	202e      	movs	r0, #46	@ 0x2e
 8007502:	f7fa f9dd 	bl	80018c0 <OLED_DrawChar_Modified>

		break;
 8007506:	e151      	b.n	80077ac <BuildFrame+0x3a40>
			*	>	Ок
			*------------------------
			*/

			// Если датчик уровня воды стал включен
			if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 8007508:	4b75      	ldr	r3, [pc, #468]	@ (80076e0 <BuildFrame+0x3974>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d011      	beq.n	8007534 <BuildFrame+0x37c8>
			{
				OLED_DrawStr_RuModified("ye;yj", 12, 13 * 2, 1);
 8007510:	2301      	movs	r3, #1
 8007512:	221a      	movs	r2, #26
 8007514:	210c      	movs	r1, #12
 8007516:	4873      	ldr	r0, [pc, #460]	@ (80076e4 <BuildFrame+0x3978>)
 8007518:	f7fa f99a 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified(",eltn", 12 + OLED_GetWidthStr("ye;yj") + 3, 13 * 2, 1);
 800751c:	4871      	ldr	r0, [pc, #452]	@ (80076e4 <BuildFrame+0x3978>)
 800751e:	f7f9 fad9 	bl	8000ad4 <OLED_GetWidthStr>
 8007522:	4603      	mov	r3, r0
 8007524:	330f      	adds	r3, #15
 8007526:	b2d9      	uxtb	r1, r3
 8007528:	2301      	movs	r3, #1
 800752a:	221a      	movs	r2, #26
 800752c:	486e      	ldr	r0, [pc, #440]	@ (80076e8 <BuildFrame+0x397c>)
 800752e:	f7fa f98f 	bl	8001850 <OLED_DrawStr_RuModified>
 8007532:	e022      	b.n	800757a <BuildFrame+0x380e>
			}

			// Если датчик уровня воды стал отключен
			else
			{
				OLED_DrawStr_RuModified("yt", 12, 13 * 2, 1);
 8007534:	2301      	movs	r3, #1
 8007536:	221a      	movs	r2, #26
 8007538:	210c      	movs	r1, #12
 800753a:	486c      	ldr	r0, [pc, #432]	@ (80076ec <BuildFrame+0x3980>)
 800753c:	f7fa f988 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified("ye;yj", 12 + OLED_GetWidthStr("yt") + 3, 13 * 2, 1);
 8007540:	486a      	ldr	r0, [pc, #424]	@ (80076ec <BuildFrame+0x3980>)
 8007542:	f7f9 fac7 	bl	8000ad4 <OLED_GetWidthStr>
 8007546:	4603      	mov	r3, r0
 8007548:	330f      	adds	r3, #15
 800754a:	b2d9      	uxtb	r1, r3
 800754c:	2301      	movs	r3, #1
 800754e:	221a      	movs	r2, #26
 8007550:	4864      	ldr	r0, [pc, #400]	@ (80076e4 <BuildFrame+0x3978>)
 8007552:	f7fa f97d 	bl	8001850 <OLED_DrawStr_RuModified>
				OLED_DrawStr_RuModified(",eltn", 12 + OLED_GetWidthStr("yt") + 3 + OLED_GetWidthStr("ye;yj") + 3, 13 * 2, 1);
 8007556:	4865      	ldr	r0, [pc, #404]	@ (80076ec <BuildFrame+0x3980>)
 8007558:	f7f9 fabc 	bl	8000ad4 <OLED_GetWidthStr>
 800755c:	4603      	mov	r3, r0
 800755e:	461c      	mov	r4, r3
 8007560:	4860      	ldr	r0, [pc, #384]	@ (80076e4 <BuildFrame+0x3978>)
 8007562:	f7f9 fab7 	bl	8000ad4 <OLED_GetWidthStr>
 8007566:	4603      	mov	r3, r0
 8007568:	4423      	add	r3, r4
 800756a:	b2db      	uxtb	r3, r3
 800756c:	3312      	adds	r3, #18
 800756e:	b2d9      	uxtb	r1, r3
 8007570:	2301      	movs	r3, #1
 8007572:	221a      	movs	r2, #26
 8007574:	485c      	ldr	r0, [pc, #368]	@ (80076e8 <BuildFrame+0x397c>)
 8007576:	f7fa f96b 	bl	8001850 <OLED_DrawStr_RuModified>
			}

			OLED_DrawStr_RuModified("Cktlbnm", 12, 13 * 0, 1);
 800757a:	2301      	movs	r3, #1
 800757c:	2200      	movs	r2, #0
 800757e:	210c      	movs	r1, #12
 8007580:	485b      	ldr	r0, [pc, #364]	@ (80076f0 <BuildFrame+0x3984>)
 8007582:	f7fa f965 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("pf", 12 + OLED_GetWidthStr("Cktlbnm") + 3, 13 * 0, 1);
 8007586:	485a      	ldr	r0, [pc, #360]	@ (80076f0 <BuildFrame+0x3984>)
 8007588:	f7f9 faa4 	bl	8000ad4 <OLED_GetWidthStr>
 800758c:	4603      	mov	r3, r0
 800758e:	330f      	adds	r3, #15
 8007590:	b2d9      	uxtb	r1, r3
 8007592:	2301      	movs	r3, #1
 8007594:	2200      	movs	r2, #0
 8007596:	4857      	ldr	r0, [pc, #348]	@ (80076f4 <BuildFrame+0x3988>)
 8007598:	f7fa f95a 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("ehjdytv", 12 + OLED_GetWidthStr("Cktlbnm") + 3 + OLED_GetWidthStr("pf") + 3, 13 * 0, 1);
 800759c:	4854      	ldr	r0, [pc, #336]	@ (80076f0 <BuildFrame+0x3984>)
 800759e:	f7f9 fa99 	bl	8000ad4 <OLED_GetWidthStr>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461c      	mov	r4, r3
 80075a6:	4853      	ldr	r0, [pc, #332]	@ (80076f4 <BuildFrame+0x3988>)
 80075a8:	f7f9 fa94 	bl	8000ad4 <OLED_GetWidthStr>
 80075ac:	4603      	mov	r3, r0
 80075ae:	4423      	add	r3, r4
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3312      	adds	r3, #18
 80075b4:	b2d9      	uxtb	r1, r3
 80075b6:	2301      	movs	r3, #1
 80075b8:	2200      	movs	r2, #0
 80075ba:	484f      	ldr	r0, [pc, #316]	@ (80076f8 <BuildFrame+0x398c>)
 80075bc:	f7fa f948 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("djls", 12, 13 * 1, 1);
 80075c0:	2301      	movs	r3, #1
 80075c2:	220d      	movs	r2, #13
 80075c4:	210c      	movs	r1, #12
 80075c6:	4840      	ldr	r0, [pc, #256]	@ (80076c8 <BuildFrame+0x395c>)
 80075c8:	f7fa f942 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("d", 12 + OLED_GetWidthStr("djls") + 3, 13 * 1, 1);
 80075cc:	483e      	ldr	r0, [pc, #248]	@ (80076c8 <BuildFrame+0x395c>)
 80075ce:	f7f9 fa81 	bl	8000ad4 <OLED_GetWidthStr>
 80075d2:	4603      	mov	r3, r0
 80075d4:	330f      	adds	r3, #15
 80075d6:	b2d9      	uxtb	r1, r3
 80075d8:	2301      	movs	r3, #1
 80075da:	220d      	movs	r2, #13
 80075dc:	4847      	ldr	r0, [pc, #284]	@ (80076fc <BuildFrame+0x3990>)
 80075de:	f7fa f937 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("htpthdefht", 12 + OLED_GetWidthStr("djls") + 3 + OLED_GetWidthStr("d") + 3, 13 * 1, 1);
 80075e2:	4839      	ldr	r0, [pc, #228]	@ (80076c8 <BuildFrame+0x395c>)
 80075e4:	f7f9 fa76 	bl	8000ad4 <OLED_GetWidthStr>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461c      	mov	r4, r3
 80075ec:	4843      	ldr	r0, [pc, #268]	@ (80076fc <BuildFrame+0x3990>)
 80075ee:	f7f9 fa71 	bl	8000ad4 <OLED_GetWidthStr>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4423      	add	r3, r4
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	3312      	adds	r3, #18
 80075fa:	b2d9      	uxtb	r1, r3
 80075fc:	2301      	movs	r3, #1
 80075fe:	220d      	movs	r2, #13
 8007600:	483f      	ldr	r0, [pc, #252]	@ (8007700 <BuildFrame+0x3994>)
 8007602:	f7fa f925 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawStr_RuModified("dhexye.", 12, 13 * 3, 1);
 8007606:	2301      	movs	r3, #1
 8007608:	2227      	movs	r2, #39	@ 0x27
 800760a:	210c      	movs	r1, #12
 800760c:	483d      	ldr	r0, [pc, #244]	@ (8007704 <BuildFrame+0x3998>)
 800760e:	f7fa f91f 	bl	8001850 <OLED_DrawStr_RuModified>
			OLED_DrawChar_Modified('.', 12 + OLED_GetWidthStr("dhexye.") + 1, 13 * 3, 1);
 8007612:	483c      	ldr	r0, [pc, #240]	@ (8007704 <BuildFrame+0x3998>)
 8007614:	f7f9 fa5e 	bl	8000ad4 <OLED_GetWidthStr>
 8007618:	4603      	mov	r3, r0
 800761a:	330d      	adds	r3, #13
 800761c:	b2d9      	uxtb	r1, r3
 800761e:	2301      	movs	r3, #1
 8007620:	2227      	movs	r2, #39	@ 0x27
 8007622:	202e      	movs	r0, #46	@ 0x2e
 8007624:	f7fa f94c 	bl	80018c0 <OLED_DrawChar_Modified>

			OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 4.5 - 3, 3, (int16_t) 13 * 4.5 + 3, 9, (int16_t) 13 * 4.5, 0);
 8007628:	2300      	movs	r3, #0
 800762a:	9302      	str	r3, [sp, #8]
 800762c:	233a      	movs	r3, #58	@ 0x3a
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	2309      	movs	r3, #9
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	233d      	movs	r3, #61	@ 0x3d
 8007636:	2203      	movs	r2, #3
 8007638:	2137      	movs	r1, #55	@ 0x37
 800763a:	2003      	movs	r0, #3
 800763c:	f7fa fa16 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
			OLED_DrawStr_RuModified("Jr", 12, 13 * 4, 0);
 8007640:	2300      	movs	r3, #0
 8007642:	2234      	movs	r2, #52	@ 0x34
 8007644:	210c      	movs	r1, #12
 8007646:	4830      	ldr	r0, [pc, #192]	@ (8007708 <BuildFrame+0x399c>)
 8007648:	f7fa f902 	bl	8001850 <OLED_DrawStr_RuModified>

		break;
 800764c:	e0ae      	b.n	80077ac <BuildFrame+0x3a40>


		// 33. Сброс настроек (3)
		case 33:

			switch(pos_cursor)
 800764e:	4b2f      	ldr	r3, [pc, #188]	@ (800770c <BuildFrame+0x39a0>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <BuildFrame+0x38f0>
 8007656:	2b02      	cmp	r3, #2
 8007658:	d062      	beq.n	8007720 <BuildFrame+0x39b4>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 0);

				break;
			}

		break;
 800765a:	e0a7      	b.n	80077ac <BuildFrame+0x3a40>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 1 - 3, 3, (int16_t) 13 * 1 + 3, 9, (int16_t) 13 * 1, 0);
 800765c:	2300      	movs	r3, #0
 800765e:	9302      	str	r3, [sp, #8]
 8007660:	230d      	movs	r3, #13
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	2309      	movs	r3, #9
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2310      	movs	r3, #16
 800766a:	2203      	movs	r2, #3
 800766c:	210a      	movs	r1, #10
 800766e:	2003      	movs	r0, #3
 8007670:	f7fa f9fc 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 0);
 8007674:	2300      	movs	r3, #0
 8007676:	2200      	movs	r2, #0
 8007678:	210c      	movs	r1, #12
 800767a:	4825      	ldr	r0, [pc, #148]	@ (8007710 <BuildFrame+0x39a4>)
 800767c:	f7fa f8e8 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("dct", 12, 13 * 1, 0);
 8007680:	2300      	movs	r3, #0
 8007682:	220d      	movs	r2, #13
 8007684:	210c      	movs	r1, #12
 8007686:	4823      	ldr	r0, [pc, #140]	@ (8007714 <BuildFrame+0x39a8>)
 8007688:	f7fa f8e2 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("yfcnhjqrb", 12 + OLED_GetWidthStr("dct") + 3, 13 * 1, 0);
 800768c:	4821      	ldr	r0, [pc, #132]	@ (8007714 <BuildFrame+0x39a8>)
 800768e:	f7f9 fa21 	bl	8000ad4 <OLED_GetWidthStr>
 8007692:	4603      	mov	r3, r0
 8007694:	330f      	adds	r3, #15
 8007696:	b2d9      	uxtb	r1, r3
 8007698:	2300      	movs	r3, #0
 800769a:	220d      	movs	r2, #13
 800769c:	481e      	ldr	r0, [pc, #120]	@ (8007718 <BuildFrame+0x39ac>)
 800769e:	f7fa f8d7 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 1);
 80076a2:	2301      	movs	r3, #1
 80076a4:	221a      	movs	r2, #26
 80076a6:	210c      	movs	r1, #12
 80076a8:	481c      	ldr	r0, [pc, #112]	@ (800771c <BuildFrame+0x39b0>)
 80076aa:	f7fa f8d1 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 80076ae:	e061      	b.n	8007774 <BuildFrame+0x3a08>
 80076b0:	08014664 	.word	0x08014664
 80076b4:	08014648 	.word	0x08014648
 80076b8:	08014650 	.word	0x08014650
 80076bc:	08014654 	.word	0x08014654
 80076c0:	08014670 	.word	0x08014670
 80076c4:	0801437c 	.word	0x0801437c
 80076c8:	08014384 	.word	0x08014384
 80076cc:	0801467c 	.word	0x0801467c
 80076d0:	08014684 	.word	0x08014684
 80076d4:	080142fc 	.word	0x080142fc
 80076d8:	08014690 	.word	0x08014690
 80076dc:	08014698 	.word	0x08014698
 80076e0:	20000a84 	.word	0x20000a84
 80076e4:	080146a4 	.word	0x080146a4
 80076e8:	080145e8 	.word	0x080145e8
 80076ec:	080144b8 	.word	0x080144b8
 80076f0:	080146ac 	.word	0x080146ac
 80076f4:	08014600 	.word	0x08014600
 80076f8:	080146b4 	.word	0x080146b4
 80076fc:	080144d4 	.word	0x080144d4
 8007700:	080144d8 	.word	0x080144d8
 8007704:	080146bc 	.word	0x080146bc
 8007708:	080143fc 	.word	0x080143fc
 800770c:	20000a3d 	.word	0x20000a3d
 8007710:	08014500 	.word	0x08014500
 8007714:	080146c4 	.word	0x080146c4
 8007718:	0801450c 	.word	0x0801450c
 800771c:	080142dc 	.word	0x080142dc
					OLED_DrawStr_RuModified("C,hjcbnm", 12, 13 * 0, 1);
 8007720:	2301      	movs	r3, #1
 8007722:	2200      	movs	r2, #0
 8007724:	210c      	movs	r1, #12
 8007726:	4823      	ldr	r0, [pc, #140]	@ (80077b4 <BuildFrame+0x3a48>)
 8007728:	f7fa f892 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("dct", 12, 13 * 1, 1);
 800772c:	2301      	movs	r3, #1
 800772e:	220d      	movs	r2, #13
 8007730:	210c      	movs	r1, #12
 8007732:	4821      	ldr	r0, [pc, #132]	@ (80077b8 <BuildFrame+0x3a4c>)
 8007734:	f7fa f88c 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawStr_RuModified("yfcnhjqrb", 12 + OLED_GetWidthStr("dct") + 3, 13 * 1, 1);
 8007738:	481f      	ldr	r0, [pc, #124]	@ (80077b8 <BuildFrame+0x3a4c>)
 800773a:	f7f9 f9cb 	bl	8000ad4 <OLED_GetWidthStr>
 800773e:	4603      	mov	r3, r0
 8007740:	330f      	adds	r3, #15
 8007742:	b2d9      	uxtb	r1, r3
 8007744:	2301      	movs	r3, #1
 8007746:	220d      	movs	r2, #13
 8007748:	481c      	ldr	r0, [pc, #112]	@ (80077bc <BuildFrame+0x3a50>)
 800774a:	f7fa f881 	bl	8001850 <OLED_DrawStr_RuModified>
					OLED_DrawTriangleFill_Modified(3, (int16_t) 13 * 2.5 - 3, 3, (int16_t) 13 * 2.5 + 3, 9, (int16_t) 13 * 2.5, 0);
 800774e:	2300      	movs	r3, #0
 8007750:	9302      	str	r3, [sp, #8]
 8007752:	2320      	movs	r3, #32
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	2309      	movs	r3, #9
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	2323      	movs	r3, #35	@ 0x23
 800775c:	2203      	movs	r2, #3
 800775e:	211d      	movs	r1, #29
 8007760:	2003      	movs	r0, #3
 8007762:	f7fa f983 	bl	8001a6c <OLED_DrawTriangleFill_Modified>
					OLED_DrawStr_RuModified("Yfpfl", 12, 13 * 2, 0);
 8007766:	2300      	movs	r3, #0
 8007768:	221a      	movs	r2, #26
 800776a:	210c      	movs	r1, #12
 800776c:	4814      	ldr	r0, [pc, #80]	@ (80077c0 <BuildFrame+0x3a54>)
 800776e:	f7fa f86f 	bl	8001850 <OLED_DrawStr_RuModified>
				break;
 8007772:	bf00      	nop
		break;
 8007774:	e01a      	b.n	80077ac <BuildFrame+0x3a40>


		default:
		break;
 8007776:	bf00      	nop
 8007778:	e018      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800777a:	bf00      	nop
 800777c:	e016      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800777e:	bf00      	nop
 8007780:	e014      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 8007782:	bf00      	nop
 8007784:	e012      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 8007786:	bf00      	nop
 8007788:	e010      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800778a:	bf00      	nop
 800778c:	e00e      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800778e:	bf00      	nop
 8007790:	e00c      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 8007792:	bf00      	nop
 8007794:	e00a      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 8007796:	bf00      	nop
 8007798:	e008      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800779a:	bf00      	nop
 800779c:	e006      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <BuildFrame+0x3a40>
		break;
 80077aa:	bf00      	nop
	}
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd90      	pop	{r4, r7, pc}
 80077b4:	08014500 	.word	0x08014500
 80077b8:	080146c4 	.word	0x080146c4
 80077bc:	0801450c 	.word	0x0801450c
 80077c0:	080142dc 	.word	0x080142dc

080077c4 <IsFrameChanged>:


// Проверка смены кадра
void IsFrameChanged(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
	new_frame = current_frame;
 80077c8:	4b0c      	ldr	r3, [pc, #48]	@ (80077fc <IsFrameChanged+0x38>)
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <IsFrameChanged+0x3c>)
 80077ce:	701a      	strb	r2, [r3, #0]

	if (new_frame != old_frame)
 80077d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <IsFrameChanged+0x3c>)
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <IsFrameChanged+0x40>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d003      	beq.n	80077e4 <IsFrameChanged+0x20>
		f_FrameChanged = 1;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <IsFrameChanged+0x44>)
 80077de:	2201      	movs	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e002      	b.n	80077ea <IsFrameChanged+0x26>
	else
		f_FrameChanged = 0;
 80077e4:	4b08      	ldr	r3, [pc, #32]	@ (8007808 <IsFrameChanged+0x44>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]

	old_frame = new_frame;
 80077ea:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <IsFrameChanged+0x3c>)
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	4b05      	ldr	r3, [pc, #20]	@ (8007804 <IsFrameChanged+0x40>)
 80077f0:	701a      	strb	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	20000a3c 	.word	0x20000a3c
 8007800:	20000a49 	.word	0x20000a49
 8007804:	20000a4a 	.word	0x20000a4a
 8007808:	20000a4b 	.word	0x20000a4b

0800780c <BlockDrawCursor>:
//	Процедуры курсора
//============================================================================

// Проверка запрета на отрисовку курсора
void BlockDrawCursor(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
	switch(current_frame)
 8007810:	4b98      	ldr	r3, [pc, #608]	@ (8007a74 <BlockDrawCursor+0x268>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	3b01      	subs	r3, #1
 8007816:	2b1e      	cmp	r3, #30
 8007818:	f200 8115 	bhi.w	8007a46 <BlockDrawCursor+0x23a>
 800781c:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <BlockDrawCursor+0x18>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	080078a1 	.word	0x080078a1
 8007828:	08007a47 	.word	0x08007a47
 800782c:	08007a47 	.word	0x08007a47
 8007830:	08007a47 	.word	0x08007a47
 8007834:	08007a47 	.word	0x08007a47
 8007838:	08007a47 	.word	0x08007a47
 800783c:	080078a9 	.word	0x080078a9
 8007840:	080078e3 	.word	0x080078e3
 8007844:	08007a47 	.word	0x08007a47
 8007848:	08007a47 	.word	0x08007a47
 800784c:	08007a47 	.word	0x08007a47
 8007850:	0800791d 	.word	0x0800791d
 8007854:	08007957 	.word	0x08007957
 8007858:	0800798f 	.word	0x0800798f
 800785c:	08007a47 	.word	0x08007a47
 8007860:	08007a47 	.word	0x08007a47
 8007864:	08007a47 	.word	0x08007a47
 8007868:	08007a47 	.word	0x08007a47
 800786c:	080079c7 	.word	0x080079c7
 8007870:	08007a47 	.word	0x08007a47
 8007874:	08007a47 	.word	0x08007a47
 8007878:	08007a47 	.word	0x08007a47
 800787c:	080079ff 	.word	0x080079ff
 8007880:	08007a47 	.word	0x08007a47
 8007884:	08007a47 	.word	0x08007a47
 8007888:	08007a47 	.word	0x08007a47
 800788c:	08007a47 	.word	0x08007a47
 8007890:	08007a47 	.word	0x08007a47
 8007894:	08007a37 	.word	0x08007a37
 8007898:	08007a47 	.word	0x08007a47
 800789c:	08007a3f 	.word	0x08007a3f
	{
		case 1:
				f_NoDrawCursor = 1;
 80078a0:	4b75      	ldr	r3, [pc, #468]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]
		break;
 80078a6:	e0df      	b.n	8007a68 <BlockDrawCursor+0x25c>


		case 7:
				if (pos_cursor == 2)
 80078a8:	4b74      	ldr	r3, [pc, #464]	@ (8007a7c <BlockDrawCursor+0x270>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	f040 80ce 	bne.w	8007a4e <BlockDrawCursor+0x242>
				{
					// В процессе настройки времени
					// курсор не должен отрисовываться
					if (f_StSetTimeWater)
 80078b2:	4b73      	ldr	r3, [pc, #460]	@ (8007a80 <BlockDrawCursor+0x274>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <BlockDrawCursor+0xb6>
						f_NoDrawCursor = 1;
 80078ba:	4b6f      	ldr	r3, [pc, #444]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
					// Если настройка дня недели не началась,
					// то курсор отрисовывается
					else
						f_NoDrawCursor = 0;
				}
		break;
 80078c0:	e0c5      	b.n	8007a4e <BlockDrawCursor+0x242>
					if ((!f_StSetTimeWater) && (f_TimeIsSetWater))
 80078c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007a80 <BlockDrawCursor+0x274>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <BlockDrawCursor+0xce>
 80078ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007a84 <BlockDrawCursor+0x278>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <BlockDrawCursor+0xce>
						f_NoDrawCursor = 0;
 80078d2:	4b69      	ldr	r3, [pc, #420]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	701a      	strb	r2, [r3, #0]
		break;
 80078d8:	e0b9      	b.n	8007a4e <BlockDrawCursor+0x242>
						f_NoDrawCursor = 0;
 80078da:	4b67      	ldr	r3, [pc, #412]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
		break;
 80078e0:	e0b5      	b.n	8007a4e <BlockDrawCursor+0x242>


		case 8:
				if (pos_cursor == 2)
 80078e2:	4b66      	ldr	r3, [pc, #408]	@ (8007a7c <BlockDrawCursor+0x270>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	f040 80b3 	bne.w	8007a52 <BlockDrawCursor+0x246>
				{
					// В процессе настройки времени
					// курсор не должен отрисовываться
					if (f_StSetDurationWater)
 80078ec:	4b66      	ldr	r3, [pc, #408]	@ (8007a88 <BlockDrawCursor+0x27c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <BlockDrawCursor+0xf0>
						f_NoDrawCursor = 1;
 80078f4:	4b60      	ldr	r3, [pc, #384]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
					// Если настройка дня недели не началась,
					// то курсор отрисовывается
					else
						f_NoDrawCursor = 0;
				}
		break;
 80078fa:	e0aa      	b.n	8007a52 <BlockDrawCursor+0x246>
					if ((!f_StSetDurationWater) && (f_TimeIsSetDurationWater))
 80078fc:	4b62      	ldr	r3, [pc, #392]	@ (8007a88 <BlockDrawCursor+0x27c>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d107      	bne.n	8007914 <BlockDrawCursor+0x108>
 8007904:	4b61      	ldr	r3, [pc, #388]	@ (8007a8c <BlockDrawCursor+0x280>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <BlockDrawCursor+0x108>
						f_NoDrawCursor = 0;
 800790c:	4b5a      	ldr	r3, [pc, #360]	@ (8007a78 <BlockDrawCursor+0x26c>)
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
		break;
 8007912:	e09e      	b.n	8007a52 <BlockDrawCursor+0x246>
						f_NoDrawCursor = 0;
 8007914:	4b58      	ldr	r3, [pc, #352]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
		break;
 800791a:	e09a      	b.n	8007a52 <BlockDrawCursor+0x246>


		case 12:

				if (pos_cursor == 2)
 800791c:	4b57      	ldr	r3, [pc, #348]	@ (8007a7c <BlockDrawCursor+0x270>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	f040 8098 	bne.w	8007a56 <BlockDrawCursor+0x24a>
				{
					// В процессе настройки даты
					// курсор не должен отрисовываться
					if (f_StSetDate)
 8007926:	4b5a      	ldr	r3, [pc, #360]	@ (8007a90 <BlockDrawCursor+0x284>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <BlockDrawCursor+0x12a>
						f_NoDrawCursor = 1;
 800792e:	4b52      	ldr	r3, [pc, #328]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
					// то курсор отрисовывается
					else
						f_NoDrawCursor = 0;
				}

		break;
 8007934:	e08f      	b.n	8007a56 <BlockDrawCursor+0x24a>
					if ((!f_StSetDate) && (f_DateIsSet))
 8007936:	4b56      	ldr	r3, [pc, #344]	@ (8007a90 <BlockDrawCursor+0x284>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d107      	bne.n	800794e <BlockDrawCursor+0x142>
 800793e:	4b55      	ldr	r3, [pc, #340]	@ (8007a94 <BlockDrawCursor+0x288>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <BlockDrawCursor+0x142>
						f_NoDrawCursor = 0;
 8007946:	4b4c      	ldr	r3, [pc, #304]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
		break;
 800794c:	e083      	b.n	8007a56 <BlockDrawCursor+0x24a>
						f_NoDrawCursor = 0;
 800794e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
		break;
 8007954:	e07f      	b.n	8007a56 <BlockDrawCursor+0x24a>


		case 13:
				if (pos_cursor == 2)
 8007956:	4b49      	ldr	r3, [pc, #292]	@ (8007a7c <BlockDrawCursor+0x270>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d17d      	bne.n	8007a5a <BlockDrawCursor+0x24e>
				{
					// В процессе настройки дня недели
					// курсор не должен отрисовываться
					if (f_StSetDayOfWeek)
 800795e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a98 <BlockDrawCursor+0x28c>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <BlockDrawCursor+0x162>
						f_NoDrawCursor = 1;
 8007966:	4b44      	ldr	r3, [pc, #272]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
					// Если настройка дня недели не началась,
					// то курсор отрисовывается
					else
						f_NoDrawCursor = 0;
				}
		break;
 800796c:	e075      	b.n	8007a5a <BlockDrawCursor+0x24e>
					if ((!f_StSetDayOfWeek) && (f_DayOfWeekIsSet))
 800796e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a98 <BlockDrawCursor+0x28c>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d107      	bne.n	8007986 <BlockDrawCursor+0x17a>
 8007976:	4b49      	ldr	r3, [pc, #292]	@ (8007a9c <BlockDrawCursor+0x290>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <BlockDrawCursor+0x17a>
						f_NoDrawCursor = 0;
 800797e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
		break;
 8007984:	e069      	b.n	8007a5a <BlockDrawCursor+0x24e>
						f_NoDrawCursor = 0;
 8007986:	4b3c      	ldr	r3, [pc, #240]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
		break;
 800798c:	e065      	b.n	8007a5a <BlockDrawCursor+0x24e>


		case 14:
				if (pos_cursor == 2)
 800798e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a7c <BlockDrawCursor+0x270>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d163      	bne.n	8007a5e <BlockDrawCursor+0x252>
				{
					// В процессе настройки времени
					// курсор не должен отрисовываться
					if (f_StSetTime)
 8007996:	4b42      	ldr	r3, [pc, #264]	@ (8007aa0 <BlockDrawCursor+0x294>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <BlockDrawCursor+0x19a>
						f_NoDrawCursor = 1;
 800799e:	4b36      	ldr	r3, [pc, #216]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	701a      	strb	r2, [r3, #0]
					// Если настройка дня недели не началась,
					// то курсор отрисовывается
					else
						f_NoDrawCursor = 0;
				}
		break;
 80079a4:	e05b      	b.n	8007a5e <BlockDrawCursor+0x252>
					if ((!f_StSetTime) && (f_TimeIsSet))
 80079a6:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa0 <BlockDrawCursor+0x294>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d107      	bne.n	80079be <BlockDrawCursor+0x1b2>
 80079ae:	4b3d      	ldr	r3, [pc, #244]	@ (8007aa4 <BlockDrawCursor+0x298>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <BlockDrawCursor+0x1b2>
						f_NoDrawCursor = 0;
 80079b6:	4b30      	ldr	r3, [pc, #192]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
		break;
 80079bc:	e04f      	b.n	8007a5e <BlockDrawCursor+0x252>
						f_NoDrawCursor = 0;
 80079be:	4b2e      	ldr	r3, [pc, #184]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
		break;
 80079c4:	e04b      	b.n	8007a5e <BlockDrawCursor+0x252>


		case 19:
				if (pos_cursor == 3)
 80079c6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a7c <BlockDrawCursor+0x270>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d149      	bne.n	8007a62 <BlockDrawCursor+0x256>
				{
					if (f_StSetDaysWater)
 80079ce:	4b36      	ldr	r3, [pc, #216]	@ (8007aa8 <BlockDrawCursor+0x29c>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <BlockDrawCursor+0x1d2>
						f_NoDrawCursor = 1;
 80079d6:	4b28      	ldr	r3, [pc, #160]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
					if ((!f_StSetDaysWater) && (f_DaysWaterIsSet))
						f_NoDrawCursor = 0;
					else
						f_NoDrawCursor = 0;
				}
		break;
 80079dc:	e041      	b.n	8007a62 <BlockDrawCursor+0x256>
					if ((!f_StSetDaysWater) && (f_DaysWaterIsSet))
 80079de:	4b32      	ldr	r3, [pc, #200]	@ (8007aa8 <BlockDrawCursor+0x29c>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <BlockDrawCursor+0x1ea>
 80079e6:	4b31      	ldr	r3, [pc, #196]	@ (8007aac <BlockDrawCursor+0x2a0>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <BlockDrawCursor+0x1ea>
						f_NoDrawCursor = 0;
 80079ee:	4b22      	ldr	r3, [pc, #136]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
		break;
 80079f4:	e035      	b.n	8007a62 <BlockDrawCursor+0x256>
						f_NoDrawCursor = 0;
 80079f6:	4b20      	ldr	r3, [pc, #128]	@ (8007a78 <BlockDrawCursor+0x26c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
		break;
 80079fc:	e031      	b.n	8007a62 <BlockDrawCursor+0x256>


		case 23:
				if (pos_cursor == 3)
 80079fe:	4b1f      	ldr	r3, [pc, #124]	@ (8007a7c <BlockDrawCursor+0x270>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d12f      	bne.n	8007a66 <BlockDrawCursor+0x25a>
				{
					if (f_StSetScreenOff)
 8007a06:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab0 <BlockDrawCursor+0x2a4>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <BlockDrawCursor+0x20a>
						f_NoDrawCursor = 1;
 8007a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	701a      	strb	r2, [r3, #0]
					if ((!f_StSetScreenOff) && (f_ScreenOffIsSet))
						f_NoDrawCursor = 0;
					else
						f_NoDrawCursor = 0;
				}
		break;
 8007a14:	e027      	b.n	8007a66 <BlockDrawCursor+0x25a>
					if ((!f_StSetScreenOff) && (f_ScreenOffIsSet))
 8007a16:	4b26      	ldr	r3, [pc, #152]	@ (8007ab0 <BlockDrawCursor+0x2a4>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d107      	bne.n	8007a2e <BlockDrawCursor+0x222>
 8007a1e:	4b25      	ldr	r3, [pc, #148]	@ (8007ab4 <BlockDrawCursor+0x2a8>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <BlockDrawCursor+0x222>
						f_NoDrawCursor = 0;
 8007a26:	4b14      	ldr	r3, [pc, #80]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
		break;
 8007a2c:	e01b      	b.n	8007a66 <BlockDrawCursor+0x25a>
						f_NoDrawCursor = 0;
 8007a2e:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
		break;
 8007a34:	e017      	b.n	8007a66 <BlockDrawCursor+0x25a>


		case 29:
				f_NoDrawCursor = 1;
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	701a      	strb	r2, [r3, #0]
		break;
 8007a3c:	e014      	b.n	8007a68 <BlockDrawCursor+0x25c>


		case 31:
				f_NoDrawCursor = 1;
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
		break;
 8007a44:	e010      	b.n	8007a68 <BlockDrawCursor+0x25c>


		default:
				f_NoDrawCursor = 0;
 8007a46:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <BlockDrawCursor+0x26c>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
		break;
 8007a4c:	e00c      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a4e:	bf00      	nop
 8007a50:	e00a      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a52:	bf00      	nop
 8007a54:	e008      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a56:	bf00      	nop
 8007a58:	e006      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a5a:	bf00      	nop
 8007a5c:	e004      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <BlockDrawCursor+0x25c>
		break;
 8007a66:	bf00      	nop
	}
}
 8007a68:	bf00      	nop
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000a3c 	.word	0x20000a3c
 8007a78:	20000a41 	.word	0x20000a41
 8007a7c:	20000a3d 	.word	0x20000a3d
 8007a80:	20000a11 	.word	0x20000a11
 8007a84:	20000a16 	.word	0x20000a16
 8007a88:	20000a12 	.word	0x20000a12
 8007a8c:	20000a19 	.word	0x20000a19
 8007a90:	200009ed 	.word	0x200009ed
 8007a94:	200009f2 	.word	0x200009f2
 8007a98:	200009ee 	.word	0x200009ee
 8007a9c:	200009f5 	.word	0x200009f5
 8007aa0:	200009ef 	.word	0x200009ef
 8007aa4:	200009f8 	.word	0x200009f8
 8007aa8:	20000a13 	.word	0x20000a13
 8007aac:	20000a1c 	.word	0x20000a1c
 8007ab0:	20000a2b 	.word	0x20000a2b
 8007ab4:	20000a2e 	.word	0x20000a2e

08007ab8 <DrawCursor>:


// Отрисовка курсора на дисплее
void DrawCursor(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af02      	add	r7, sp, #8
	// Проверка запрета на отрисовку курсора
	BlockDrawCursor();
 8007abe:	f7ff fea5 	bl	800780c <BlockDrawCursor>

	if (!f_NoDrawCursor)
 8007ac2:	4b28      	ldr	r3, [pc, #160]	@ (8007b64 <DrawCursor+0xac>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d149      	bne.n	8007b5e <DrawCursor+0xa6>
	{
		// Отрисовка курсора на дисплее с учётом ширины курсора
		// (курсор становится уже, если достигает последней строчки.
		//  иначе одна из сторон прямоугольного курсора не видна)
		if ((pos_cursor + poss_ix[pos_cursor]) == 5)
 8007aca:	4b27      	ldr	r3, [pc, #156]	@ (8007b68 <DrawCursor+0xb0>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b25      	ldr	r3, [pc, #148]	@ (8007b68 <DrawCursor+0xb0>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <DrawCursor+0xb4>)
 8007ad8:	5c5b      	ldrb	r3, [r3, r1]
 8007ada:	4413      	add	r3, r2
 8007adc:	2b05      	cmp	r3, #5
 8007ade:	d11f      	bne.n	8007b20 <DrawCursor+0x68>
			OLED_DrawRectangleFill(0, pos_cursor * 13, 125, (pos_cursor + poss_ix[pos_cursor]) * 13 - 2, 1);
 8007ae0:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <DrawCursor+0xb0>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	0052      	lsls	r2, r2, #1
 8007ae8:	441a      	add	r2, r3
 8007aea:	0092      	lsls	r2, r2, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	b2d9      	uxtb	r1, r3
 8007af0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <DrawCursor+0xb0>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <DrawCursor+0xb4>)
 8007af8:	5c9a      	ldrb	r2, [r3, r2]
 8007afa:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <DrawCursor+0xb0>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	4413      	add	r3, r2
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	0052      	lsls	r2, r2, #1
 8007b06:	441a      	add	r2, r3
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3b02      	subs	r3, #2
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2201      	movs	r2, #1
 8007b14:	9200      	str	r2, [sp, #0]
 8007b16:	227d      	movs	r2, #125	@ 0x7d
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7f8 fedf 	bl	80008dc <OLED_DrawRectangleFill>
		else
			OLED_DrawRectangleFill(0, pos_cursor * 13, 125, (pos_cursor + poss_ix[pos_cursor]) * 13 - 1, 1);
	}
}
 8007b1e:	e01e      	b.n	8007b5e <DrawCursor+0xa6>
			OLED_DrawRectangleFill(0, pos_cursor * 13, 125, (pos_cursor + poss_ix[pos_cursor]) * 13 - 1, 1);
 8007b20:	4b11      	ldr	r3, [pc, #68]	@ (8007b68 <DrawCursor+0xb0>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	0052      	lsls	r2, r2, #1
 8007b28:	441a      	add	r2, r3
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	b2d9      	uxtb	r1, r3
 8007b30:	4b0d      	ldr	r3, [pc, #52]	@ (8007b68 <DrawCursor+0xb0>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <DrawCursor+0xb4>)
 8007b38:	5c9a      	ldrb	r2, [r3, r2]
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <DrawCursor+0xb0>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	4413      	add	r3, r2
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	441a      	add	r2, r3
 8007b48:	0092      	lsls	r2, r2, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2201      	movs	r2, #1
 8007b54:	9200      	str	r2, [sp, #0]
 8007b56:	227d      	movs	r2, #125	@ 0x7d
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f7f8 febf 	bl	80008dc <OLED_DrawRectangleFill>
}
 8007b5e:	bf00      	nop
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000a41 	.word	0x20000a41
 8007b68:	20000a3d 	.word	0x20000a3d
 8007b6c:	20000a44 	.word	0x20000a44

08007b70 <CursorPossiblePositions>:


// Определение возможных позиций
// курсора в текущем кадре
void CursorPossiblePositions(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	71fb      	strb	r3, [r7, #7]

	switch(current_frame)
 8007b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007db0 <CursorPossiblePositions+0x240>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b21      	cmp	r3, #33	@ 0x21
 8007b80:	f200 8111 	bhi.w	8007da6 <CursorPossiblePositions+0x236>
 8007b84:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <CursorPossiblePositions+0x1c>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007c15 	.word	0x08007c15
 8007b90:	08007c21 	.word	0x08007c21
 8007b94:	08007c3f 	.word	0x08007c3f
 8007b98:	08007c4b 	.word	0x08007c4b
 8007b9c:	08007c57 	.word	0x08007c57
 8007ba0:	08007c63 	.word	0x08007c63
 8007ba4:	08007c6f 	.word	0x08007c6f
 8007ba8:	08007c7b 	.word	0x08007c7b
 8007bac:	08007c87 	.word	0x08007c87
 8007bb0:	08007da7 	.word	0x08007da7
 8007bb4:	08007c93 	.word	0x08007c93
 8007bb8:	08007da7 	.word	0x08007da7
 8007bbc:	08007c9f 	.word	0x08007c9f
 8007bc0:	08007cab 	.word	0x08007cab
 8007bc4:	08007cb7 	.word	0x08007cb7
 8007bc8:	08007cc3 	.word	0x08007cc3
 8007bcc:	08007ccf 	.word	0x08007ccf
 8007bd0:	08007cdb 	.word	0x08007cdb
 8007bd4:	08007ce7 	.word	0x08007ce7
 8007bd8:	08007cf3 	.word	0x08007cf3
 8007bdc:	08007cff 	.word	0x08007cff
 8007be0:	08007d0b 	.word	0x08007d0b
 8007be4:	08007d17 	.word	0x08007d17
 8007be8:	08007d23 	.word	0x08007d23
 8007bec:	08007d2f 	.word	0x08007d2f
 8007bf0:	08007d3b 	.word	0x08007d3b
 8007bf4:	08007d47 	.word	0x08007d47
 8007bf8:	08007d53 	.word	0x08007d53
 8007bfc:	08007d5f 	.word	0x08007d5f
 8007c00:	08007d6b 	.word	0x08007d6b
 8007c04:	08007d77 	.word	0x08007d77
 8007c08:	08007d83 	.word	0x08007d83
 8007c0c:	08007d8f 	.word	0x08007d8f
 8007c10:	08007d9b 	.word	0x08007d9b
	{
		case 0:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_0[0], sizeof(poss_ix));
 8007c14:	2205      	movs	r2, #5
 8007c16:	4967      	ldr	r1, [pc, #412]	@ (8007db4 <CursorPossiblePositions+0x244>)
 8007c18:	4867      	ldr	r0, [pc, #412]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c1a:	f00b fe9d 	bl	8013958 <memcpy>
		break;
 8007c1e:	e0c3      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 1:
				for (i = 0; i < 5; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	71fb      	strb	r3, [r7, #7]
 8007c24:	e007      	b.n	8007c36 <CursorPossiblePositions+0xc6>
					poss_ix[i] = info_frame_0[4];
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	4a64      	ldr	r2, [pc, #400]	@ (8007dbc <CursorPossiblePositions+0x24c>)
 8007c2a:	7911      	ldrb	r1, [r2, #4]
 8007c2c:	4a62      	ldr	r2, [pc, #392]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c2e:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 5; i++)
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	3301      	adds	r3, #1
 8007c34:	71fb      	strb	r3, [r7, #7]
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d9f4      	bls.n	8007c26 <CursorPossiblePositions+0xb6>
		break;
 8007c3c:	e0b4      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 2:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_2[0], sizeof(poss_ix));
 8007c3e:	2205      	movs	r2, #5
 8007c40:	495f      	ldr	r1, [pc, #380]	@ (8007dc0 <CursorPossiblePositions+0x250>)
 8007c42:	485d      	ldr	r0, [pc, #372]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c44:	f00b fe88 	bl	8013958 <memcpy>
		break;
 8007c48:	e0ae      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 3:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_3[0], sizeof(poss_ix));
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	495d      	ldr	r1, [pc, #372]	@ (8007dc4 <CursorPossiblePositions+0x254>)
 8007c4e:	485a      	ldr	r0, [pc, #360]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c50:	f00b fe82 	bl	8013958 <memcpy>
		break;
 8007c54:	e0a8      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 4:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_4[0], sizeof(poss_ix));
 8007c56:	2205      	movs	r2, #5
 8007c58:	495b      	ldr	r1, [pc, #364]	@ (8007dc8 <CursorPossiblePositions+0x258>)
 8007c5a:	4857      	ldr	r0, [pc, #348]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c5c:	f00b fe7c 	bl	8013958 <memcpy>
		break;
 8007c60:	e0a2      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 5:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_5[0], sizeof(poss_ix));
 8007c62:	2205      	movs	r2, #5
 8007c64:	4959      	ldr	r1, [pc, #356]	@ (8007dcc <CursorPossiblePositions+0x25c>)
 8007c66:	4854      	ldr	r0, [pc, #336]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c68:	f00b fe76 	bl	8013958 <memcpy>
		break;
 8007c6c:	e09c      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 6:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_6[0], sizeof(poss_ix));
 8007c6e:	2205      	movs	r2, #5
 8007c70:	4957      	ldr	r1, [pc, #348]	@ (8007dd0 <CursorPossiblePositions+0x260>)
 8007c72:	4851      	ldr	r0, [pc, #324]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c74:	f00b fe70 	bl	8013958 <memcpy>
		break;
 8007c78:	e096      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 7:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_7[0], sizeof(poss_ix));
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	4955      	ldr	r1, [pc, #340]	@ (8007dd4 <CursorPossiblePositions+0x264>)
 8007c7e:	484e      	ldr	r0, [pc, #312]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c80:	f00b fe6a 	bl	8013958 <memcpy>
		break;
 8007c84:	e090      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 8:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_8[0], sizeof(poss_ix));
 8007c86:	2205      	movs	r2, #5
 8007c88:	4953      	ldr	r1, [pc, #332]	@ (8007dd8 <CursorPossiblePositions+0x268>)
 8007c8a:	484b      	ldr	r0, [pc, #300]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c8c:	f00b fe64 	bl	8013958 <memcpy>
		break;
 8007c90:	e08a      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 10:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_10[0], sizeof(poss_ix));
 8007c92:	2205      	movs	r2, #5
 8007c94:	4951      	ldr	r1, [pc, #324]	@ (8007ddc <CursorPossiblePositions+0x26c>)
 8007c96:	4848      	ldr	r0, [pc, #288]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007c98:	f00b fe5e 	bl	8013958 <memcpy>
		break;
 8007c9c:	e084      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 12:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_12[0], sizeof(poss_ix));
 8007c9e:	2205      	movs	r2, #5
 8007ca0:	494f      	ldr	r1, [pc, #316]	@ (8007de0 <CursorPossiblePositions+0x270>)
 8007ca2:	4845      	ldr	r0, [pc, #276]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007ca4:	f00b fe58 	bl	8013958 <memcpy>
		break;
 8007ca8:	e07e      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 13:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_13[0], sizeof(poss_ix));
 8007caa:	2205      	movs	r2, #5
 8007cac:	494d      	ldr	r1, [pc, #308]	@ (8007de4 <CursorPossiblePositions+0x274>)
 8007cae:	4842      	ldr	r0, [pc, #264]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cb0:	f00b fe52 	bl	8013958 <memcpy>
		break;
 8007cb4:	e078      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 14:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_14[0], sizeof(poss_ix));
 8007cb6:	2205      	movs	r2, #5
 8007cb8:	494b      	ldr	r1, [pc, #300]	@ (8007de8 <CursorPossiblePositions+0x278>)
 8007cba:	483f      	ldr	r0, [pc, #252]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cbc:	f00b fe4c 	bl	8013958 <memcpy>
		break;
 8007cc0:	e072      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 15:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_15[0], sizeof(poss_ix));
 8007cc2:	2205      	movs	r2, #5
 8007cc4:	4949      	ldr	r1, [pc, #292]	@ (8007dec <CursorPossiblePositions+0x27c>)
 8007cc6:	483c      	ldr	r0, [pc, #240]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cc8:	f00b fe46 	bl	8013958 <memcpy>
		break;
 8007ccc:	e06c      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 16:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_16[0], sizeof(poss_ix));
 8007cce:	2205      	movs	r2, #5
 8007cd0:	4947      	ldr	r1, [pc, #284]	@ (8007df0 <CursorPossiblePositions+0x280>)
 8007cd2:	4839      	ldr	r0, [pc, #228]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cd4:	f00b fe40 	bl	8013958 <memcpy>
		break;
 8007cd8:	e066      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 17:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_17[0], sizeof(poss_ix));
 8007cda:	2205      	movs	r2, #5
 8007cdc:	4945      	ldr	r1, [pc, #276]	@ (8007df4 <CursorPossiblePositions+0x284>)
 8007cde:	4836      	ldr	r0, [pc, #216]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007ce0:	f00b fe3a 	bl	8013958 <memcpy>
		break;
 8007ce4:	e060      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 18:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_18[0], sizeof(poss_ix));
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	4943      	ldr	r1, [pc, #268]	@ (8007df8 <CursorPossiblePositions+0x288>)
 8007cea:	4833      	ldr	r0, [pc, #204]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cec:	f00b fe34 	bl	8013958 <memcpy>
		break;
 8007cf0:	e05a      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 19:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_19[0], sizeof(poss_ix));
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	4941      	ldr	r1, [pc, #260]	@ (8007dfc <CursorPossiblePositions+0x28c>)
 8007cf6:	4830      	ldr	r0, [pc, #192]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007cf8:	f00b fe2e 	bl	8013958 <memcpy>
		break;
 8007cfc:	e054      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 20:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_20[0], sizeof(poss_ix));
 8007cfe:	2205      	movs	r2, #5
 8007d00:	493f      	ldr	r1, [pc, #252]	@ (8007e00 <CursorPossiblePositions+0x290>)
 8007d02:	482d      	ldr	r0, [pc, #180]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d04:	f00b fe28 	bl	8013958 <memcpy>
		break;
 8007d08:	e04e      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 21:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_21[0], sizeof(poss_ix));
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	493d      	ldr	r1, [pc, #244]	@ (8007e04 <CursorPossiblePositions+0x294>)
 8007d0e:	482a      	ldr	r0, [pc, #168]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d10:	f00b fe22 	bl	8013958 <memcpy>
		break;
 8007d14:	e048      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 22:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_22[0], sizeof(poss_ix));
 8007d16:	2205      	movs	r2, #5
 8007d18:	493b      	ldr	r1, [pc, #236]	@ (8007e08 <CursorPossiblePositions+0x298>)
 8007d1a:	4827      	ldr	r0, [pc, #156]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d1c:	f00b fe1c 	bl	8013958 <memcpy>
		break;
 8007d20:	e042      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 23:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_23[0], sizeof(poss_ix));
 8007d22:	2205      	movs	r2, #5
 8007d24:	4939      	ldr	r1, [pc, #228]	@ (8007e0c <CursorPossiblePositions+0x29c>)
 8007d26:	4824      	ldr	r0, [pc, #144]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d28:	f00b fe16 	bl	8013958 <memcpy>
		break;
 8007d2c:	e03c      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 24:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_24[0], sizeof(poss_ix));
 8007d2e:	2205      	movs	r2, #5
 8007d30:	4937      	ldr	r1, [pc, #220]	@ (8007e10 <CursorPossiblePositions+0x2a0>)
 8007d32:	4821      	ldr	r0, [pc, #132]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d34:	f00b fe10 	bl	8013958 <memcpy>
		break;
 8007d38:	e036      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 25:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_25[0], sizeof(poss_ix));
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	4935      	ldr	r1, [pc, #212]	@ (8007e14 <CursorPossiblePositions+0x2a4>)
 8007d3e:	481e      	ldr	r0, [pc, #120]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d40:	f00b fe0a 	bl	8013958 <memcpy>
		break;
 8007d44:	e030      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 26:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_26[0], sizeof(poss_ix));
 8007d46:	2205      	movs	r2, #5
 8007d48:	4933      	ldr	r1, [pc, #204]	@ (8007e18 <CursorPossiblePositions+0x2a8>)
 8007d4a:	481b      	ldr	r0, [pc, #108]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d4c:	f00b fe04 	bl	8013958 <memcpy>
		break;
 8007d50:	e02a      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 27:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_27[0], sizeof(poss_ix));
 8007d52:	2205      	movs	r2, #5
 8007d54:	4931      	ldr	r1, [pc, #196]	@ (8007e1c <CursorPossiblePositions+0x2ac>)
 8007d56:	4818      	ldr	r0, [pc, #96]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d58:	f00b fdfe 	bl	8013958 <memcpy>
		break;
 8007d5c:	e024      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 28:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_28[0], sizeof(poss_ix));
 8007d5e:	2205      	movs	r2, #5
 8007d60:	492f      	ldr	r1, [pc, #188]	@ (8007e20 <CursorPossiblePositions+0x2b0>)
 8007d62:	4815      	ldr	r0, [pc, #84]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d64:	f00b fdf8 	bl	8013958 <memcpy>
		break;
 8007d68:	e01e      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 29:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_29[0], sizeof(poss_ix));
 8007d6a:	2205      	movs	r2, #5
 8007d6c:	492d      	ldr	r1, [pc, #180]	@ (8007e24 <CursorPossiblePositions+0x2b4>)
 8007d6e:	4812      	ldr	r0, [pc, #72]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d70:	f00b fdf2 	bl	8013958 <memcpy>
		break;
 8007d74:	e018      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 30:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_30[0], sizeof(poss_ix));
 8007d76:	2205      	movs	r2, #5
 8007d78:	492b      	ldr	r1, [pc, #172]	@ (8007e28 <CursorPossiblePositions+0x2b8>)
 8007d7a:	480f      	ldr	r0, [pc, #60]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d7c:	f00b fdec 	bl	8013958 <memcpy>
		break;
 8007d80:	e012      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 31:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_31[0], sizeof(poss_ix));
 8007d82:	2205      	movs	r2, #5
 8007d84:	4929      	ldr	r1, [pc, #164]	@ (8007e2c <CursorPossiblePositions+0x2bc>)
 8007d86:	480c      	ldr	r0, [pc, #48]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d88:	f00b fde6 	bl	8013958 <memcpy>
		break;
 8007d8c:	e00c      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 32:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_32[0], sizeof(poss_ix));
 8007d8e:	2205      	movs	r2, #5
 8007d90:	4927      	ldr	r1, [pc, #156]	@ (8007e30 <CursorPossiblePositions+0x2c0>)
 8007d92:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007d94:	f00b fde0 	bl	8013958 <memcpy>
		break;
 8007d98:	e006      	b.n	8007da8 <CursorPossiblePositions+0x238>


		case 33:
				memcpy((char*) &poss_ix[0], (char*) &poss_ix_33[0], sizeof(poss_ix));
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	4925      	ldr	r1, [pc, #148]	@ (8007e34 <CursorPossiblePositions+0x2c4>)
 8007d9e:	4806      	ldr	r0, [pc, #24]	@ (8007db8 <CursorPossiblePositions+0x248>)
 8007da0:	f00b fdda 	bl	8013958 <memcpy>
		break;
 8007da4:	e000      	b.n	8007da8 <CursorPossiblePositions+0x238>


		default:
		break;
 8007da6:	bf00      	nop
	}
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000a3c 	.word	0x20000a3c
 8007db4:	20000024 	.word	0x20000024
 8007db8:	20000a44 	.word	0x20000a44
 8007dbc:	2000001c 	.word	0x2000001c
 8007dc0:	2000002c 	.word	0x2000002c
 8007dc4:	20000034 	.word	0x20000034
 8007dc8:	2000003c 	.word	0x2000003c
 8007dcc:	20000044 	.word	0x20000044
 8007dd0:	2000004c 	.word	0x2000004c
 8007dd4:	20000054 	.word	0x20000054
 8007dd8:	2000005c 	.word	0x2000005c
 8007ddc:	20000064 	.word	0x20000064
 8007de0:	2000006c 	.word	0x2000006c
 8007de4:	20000074 	.word	0x20000074
 8007de8:	2000007c 	.word	0x2000007c
 8007dec:	20000084 	.word	0x20000084
 8007df0:	2000008c 	.word	0x2000008c
 8007df4:	20000094 	.word	0x20000094
 8007df8:	2000009c 	.word	0x2000009c
 8007dfc:	200000a4 	.word	0x200000a4
 8007e00:	200000ac 	.word	0x200000ac
 8007e04:	200000b4 	.word	0x200000b4
 8007e08:	200000bc 	.word	0x200000bc
 8007e0c:	200000c4 	.word	0x200000c4
 8007e10:	200000cc 	.word	0x200000cc
 8007e14:	200000d4 	.word	0x200000d4
 8007e18:	200000dc 	.word	0x200000dc
 8007e1c:	200000e4 	.word	0x200000e4
 8007e20:	200000ec 	.word	0x200000ec
 8007e24:	200000f4 	.word	0x200000f4
 8007e28:	200000fc 	.word	0x200000fc
 8007e2c:	20000104 	.word	0x20000104
 8007e30:	2000010c 	.word	0x2000010c
 8007e34:	20000114 	.word	0x20000114

08007e38 <DefaultCursorPositions>:


// Установка начальных возможных
// позиций курсора (кадр №0)
void DefaultCursorPositions(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
	short i = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	80fb      	strh	r3, [r7, #6]
	uint8_t start_ix = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	717b      	strb	r3, [r7, #5]

	for (i = 4; i >= 0; i--)
 8007e46:	2304      	movs	r3, #4
 8007e48:	80fb      	strh	r3, [r7, #6]
 8007e4a:	e015      	b.n	8007e78 <DefaultCursorPositions+0x40>
	{
		poss_ix[i] = poss_ix_0[i];
 8007e4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e54:	490f      	ldr	r1, [pc, #60]	@ (8007e94 <DefaultCursorPositions+0x5c>)
 8007e56:	5c89      	ldrb	r1, [r1, r2]
 8007e58:	4a0f      	ldr	r2, [pc, #60]	@ (8007e98 <DefaultCursorPositions+0x60>)
 8007e5a:	54d1      	strb	r1, [r2, r3]

		if (poss_ix[i])
 8007e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e60:	4a0d      	ldr	r2, [pc, #52]	@ (8007e98 <DefaultCursorPositions+0x60>)
 8007e62:	5cd3      	ldrb	r3, [r2, r3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <DefaultCursorPositions+0x34>
			start_ix = i;
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	717b      	strb	r3, [r7, #5]
	for (i = 4; i >= 0; i--)
 8007e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	80fb      	strh	r3, [r7, #6]
 8007e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dae5      	bge.n	8007e4c <DefaultCursorPositions+0x14>
	}

	pos_cursor = start_ix;
 8007e80:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <DefaultCursorPositions+0x64>)
 8007e82:	797b      	ldrb	r3, [r7, #5]
 8007e84:	7013      	strb	r3, [r2, #0]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000024 	.word	0x20000024
 8007e98:	20000a44 	.word	0x20000a44
 8007e9c:	20000a3d 	.word	0x20000a3d

08007ea0 <SetCursorPositions>:


// Установка новых возможных позиций курсора
void SetCursorPositions(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
	// Проверка смены кадра
	IsFrameChanged();
 8007ea4:	f7ff fc8e 	bl	80077c4 <IsFrameChanged>

	// Если кадр сменился,
	// то устанавливаются новые позиции курсора
	if (f_FrameChanged)
 8007ea8:	4b03      	ldr	r3, [pc, #12]	@ (8007eb8 <SetCursorPositions+0x18>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <SetCursorPositions+0x14>
		CursorPossiblePositions();
 8007eb0:	f7ff fe5e 	bl	8007b70 <CursorPossiblePositions>
}
 8007eb4:	bf00      	nop
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000a4b 	.word	0x20000a4b

08007ebc <BlockCursorMoveDown>:

// Проверка необходимости запрета
// перемещения курсора вниз
void BlockCursorMoveDown(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
	switch(current_frame)
 8007ec0:	4b58      	ldr	r3, [pc, #352]	@ (8008024 <BlockCursorMoveDown+0x168>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b21      	cmp	r3, #33	@ 0x21
 8007ec6:	f200 80a3 	bhi.w	8008010 <BlockCursorMoveDown+0x154>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <BlockCursorMoveDown+0x14>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f59 	.word	0x08007f59
 8007ed4:	08008011 	.word	0x08008011
 8007ed8:	08007f71 	.word	0x08007f71
 8007edc:	08007f89 	.word	0x08007f89
 8007ee0:	08008011 	.word	0x08008011
 8007ee4:	08007f91 	.word	0x08007f91
 8007ee8:	08008011 	.word	0x08008011
 8007eec:	08008011 	.word	0x08008011
 8007ef0:	08008011 	.word	0x08008011
 8007ef4:	08008011 	.word	0x08008011
 8007ef8:	08008011 	.word	0x08008011
 8007efc:	08008011 	.word	0x08008011
 8007f00:	08008011 	.word	0x08008011
 8007f04:	08008011 	.word	0x08008011
 8007f08:	08008011 	.word	0x08008011
 8007f0c:	08008011 	.word	0x08008011
 8007f10:	08008011 	.word	0x08008011
 8007f14:	08008011 	.word	0x08008011
 8007f18:	08007fa9 	.word	0x08007fa9
 8007f1c:	08008011 	.word	0x08008011
 8007f20:	08008011 	.word	0x08008011
 8007f24:	08008011 	.word	0x08008011
 8007f28:	08007fc1 	.word	0x08007fc1
 8007f2c:	08008011 	.word	0x08008011
 8007f30:	08007fc9 	.word	0x08007fc9
 8007f34:	08007fe1 	.word	0x08007fe1
 8007f38:	08007fe9 	.word	0x08007fe9
 8007f3c:	08007ff1 	.word	0x08007ff1
 8007f40:	08008011 	.word	0x08008011
 8007f44:	08008011 	.word	0x08008011
 8007f48:	08008011 	.word	0x08008011
 8007f4c:	08008011 	.word	0x08008011
 8007f50:	08008011 	.word	0x08008011
 8007f54:	08007ff9 	.word	0x08007ff9
	{
		case 0:
				if (pos_cursor == 3)
 8007f58:	4b33      	ldr	r3, [pc, #204]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d103      	bne.n	8007f68 <BlockCursorMoveDown+0xac>
					f_BlockDown = 1;
 8007f60:	4b32      	ldr	r3, [pc, #200]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
				else
					f_BlockDown = 0;
		break;
 8007f66:	e057      	b.n	8008018 <BlockCursorMoveDown+0x15c>
					f_BlockDown = 0;
 8007f68:	4b30      	ldr	r3, [pc, #192]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
		break;
 8007f6e:	e053      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 2:
				if (pos_cursor == 2)
 8007f70:	4b2d      	ldr	r3, [pc, #180]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d103      	bne.n	8007f80 <BlockCursorMoveDown+0xc4>
					f_BlockDown = 1;
 8007f78:	4b2c      	ldr	r3, [pc, #176]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	701a      	strb	r2, [r3, #0]
				else
					f_BlockDown = 0;
		break;
 8007f7e:	e04b      	b.n	8008018 <BlockCursorMoveDown+0x15c>
					f_BlockDown = 0;
 8007f80:	4b2a      	ldr	r3, [pc, #168]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
		break;
 8007f86:	e047      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 3:
				f_BlockDown = 1;
 8007f88:	4b28      	ldr	r3, [pc, #160]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
		break;
 8007f8e:	e043      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 5:
				if (pos_cursor == 3)
 8007f90:	4b25      	ldr	r3, [pc, #148]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d103      	bne.n	8007fa0 <BlockCursorMoveDown+0xe4>
					f_BlockDown = 1;
 8007f98:	4b24      	ldr	r3, [pc, #144]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
				else
					f_BlockDown = 0;
		break;
 8007f9e:	e03b      	b.n	8008018 <BlockCursorMoveDown+0x15c>
					f_BlockDown = 0;
 8007fa0:	4b22      	ldr	r3, [pc, #136]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
		break;
 8007fa6:	e037      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 18:
				if (pos_cursor == 4)
 8007fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d103      	bne.n	8007fb8 <BlockCursorMoveDown+0xfc>
					f_BlockDown = 1;
 8007fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	701a      	strb	r2, [r3, #0]
				else
					f_BlockDown = 0;
		break;
 8007fb6:	e02f      	b.n	8008018 <BlockCursorMoveDown+0x15c>
					f_BlockDown = 0;
 8007fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
		break;
 8007fbe:	e02b      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 22:
				f_BlockDown = 1;
 8007fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	701a      	strb	r2, [r3, #0]
		break;
 8007fc6:	e027      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 24:
				if (pos_cursor == 0)
 8007fc8:	4b17      	ldr	r3, [pc, #92]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d103      	bne.n	8007fd8 <BlockCursorMoveDown+0x11c>
					f_BlockDown = 1;
 8007fd0:	4b16      	ldr	r3, [pc, #88]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
				else
					f_BlockDown = 0;
		break;
 8007fd6:	e01f      	b.n	8008018 <BlockCursorMoveDown+0x15c>
					f_BlockDown = 0;
 8007fd8:	4b14      	ldr	r3, [pc, #80]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
		break;
 8007fde:	e01b      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 25:
				f_BlockDown = 1;
 8007fe0:	4b12      	ldr	r3, [pc, #72]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
		break;
 8007fe6:	e017      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 26:
				f_BlockDown = 1;
 8007fe8:	4b10      	ldr	r3, [pc, #64]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
		break;
 8007fee:	e013      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 27:
				f_BlockDown = 1;
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800802c <BlockCursorMoveDown+0x170>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
		break;
 8007ff6:	e00f      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		case 33:

			if (pos_cursor == 2)
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8008028 <BlockCursorMoveDown+0x16c>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d103      	bne.n	8008008 <BlockCursorMoveDown+0x14c>
				f_BlockDown = 1;
 8008000:	4b0a      	ldr	r3, [pc, #40]	@ (800802c <BlockCursorMoveDown+0x170>)
 8008002:	2201      	movs	r2, #1
 8008004:	701a      	strb	r2, [r3, #0]
			else
				f_BlockDown = 0;

		break;
 8008006:	e007      	b.n	8008018 <BlockCursorMoveDown+0x15c>
				f_BlockDown = 0;
 8008008:	4b08      	ldr	r3, [pc, #32]	@ (800802c <BlockCursorMoveDown+0x170>)
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
		break;
 800800e:	e003      	b.n	8008018 <BlockCursorMoveDown+0x15c>


		default:
				f_BlockDown = 0;
 8008010:	4b06      	ldr	r3, [pc, #24]	@ (800802c <BlockCursorMoveDown+0x170>)
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
		break;
 8008016:	bf00      	nop
	}
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000a3c 	.word	0x20000a3c
 8008028:	20000a3d 	.word	0x20000a3d
 800802c:	20000a3f 	.word	0x20000a3f

08008030 <BlockCursorMoveUp>:


// Проверка необходимости запрета
// перемещения курсора вверх
void BlockCursorMoveUp(void)
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
	switch(current_frame)
 8008034:	4b52      	ldr	r3, [pc, #328]	@ (8008180 <BlockCursorMoveUp+0x150>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b1b      	cmp	r3, #27
 800803a:	f200 8097 	bhi.w	800816c <BlockCursorMoveUp+0x13c>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <BlockCursorMoveUp+0x14>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	080080b5 	.word	0x080080b5
 8008048:	080080cd 	.word	0x080080cd
 800804c:	0800816d 	.word	0x0800816d
 8008050:	080080e5 	.word	0x080080e5
 8008054:	080080ed 	.word	0x080080ed
 8008058:	0800816d 	.word	0x0800816d
 800805c:	0800816d 	.word	0x0800816d
 8008060:	0800816d 	.word	0x0800816d
 8008064:	0800816d 	.word	0x0800816d
 8008068:	0800816d 	.word	0x0800816d
 800806c:	0800816d 	.word	0x0800816d
 8008070:	0800816d 	.word	0x0800816d
 8008074:	0800816d 	.word	0x0800816d
 8008078:	0800816d 	.word	0x0800816d
 800807c:	0800816d 	.word	0x0800816d
 8008080:	08008105 	.word	0x08008105
 8008084:	0800816d 	.word	0x0800816d
 8008088:	0800816d 	.word	0x0800816d
 800808c:	0800816d 	.word	0x0800816d
 8008090:	0800816d 	.word	0x0800816d
 8008094:	0800811d 	.word	0x0800811d
 8008098:	0800816d 	.word	0x0800816d
 800809c:	08008135 	.word	0x08008135
 80080a0:	0800813d 	.word	0x0800813d
 80080a4:	0800816d 	.word	0x0800816d
 80080a8:	08008155 	.word	0x08008155
 80080ac:	0800815d 	.word	0x0800815d
 80080b0:	08008165 	.word	0x08008165
	{
		case 0:
				if (pos_cursor == 0)
 80080b4:	4b33      	ldr	r3, [pc, #204]	@ (8008184 <BlockCursorMoveUp+0x154>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <BlockCursorMoveUp+0x94>
					f_BlockUp = 1;
 80080bc:	4b32      	ldr	r3, [pc, #200]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080be:	2201      	movs	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 80080c2:	e057      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 80080c4:	4b30      	ldr	r3, [pc, #192]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
		break;
 80080ca:	e053      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 1:
				if (pos_cursor == 4)
 80080cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008184 <BlockCursorMoveUp+0x154>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d103      	bne.n	80080dc <BlockCursorMoveUp+0xac>
					f_BlockUp = 1;
 80080d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 80080da:	e04b      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 80080dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
		break;
 80080e2:	e047      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 3:
				f_BlockUp = 1;
 80080e4:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	701a      	strb	r2, [r3, #0]
		break;
 80080ea:	e043      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 4:
				if (pos_cursor == 0)
 80080ec:	4b25      	ldr	r3, [pc, #148]	@ (8008184 <BlockCursorMoveUp+0x154>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <BlockCursorMoveUp+0xcc>
					f_BlockUp = 1;
 80080f4:	4b24      	ldr	r3, [pc, #144]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 80080fa:	e03b      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 80080fc:	4b22      	ldr	r3, [pc, #136]	@ (8008188 <BlockCursorMoveUp+0x158>)
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
		break;
 8008102:	e037      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 15:
				if (pos_cursor == 0)
 8008104:	4b1f      	ldr	r3, [pc, #124]	@ (8008184 <BlockCursorMoveUp+0x154>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <BlockCursorMoveUp+0xe4>
					f_BlockUp = 1;
 800810c:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <BlockCursorMoveUp+0x158>)
 800810e:	2201      	movs	r2, #1
 8008110:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 8008112:	e02f      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 8008114:	4b1c      	ldr	r3, [pc, #112]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
		break;
 800811a:	e02b      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 20:
				if (pos_cursor == 0)
 800811c:	4b19      	ldr	r3, [pc, #100]	@ (8008184 <BlockCursorMoveUp+0x154>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <BlockCursorMoveUp+0xfc>
					f_BlockUp = 1;
 8008124:	4b18      	ldr	r3, [pc, #96]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008126:	2201      	movs	r2, #1
 8008128:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 800812a:	e023      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 800812c:	4b16      	ldr	r3, [pc, #88]	@ (8008188 <BlockCursorMoveUp+0x158>)
 800812e:	2200      	movs	r2, #0
 8008130:	701a      	strb	r2, [r3, #0]
		break;
 8008132:	e01f      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 22:
				f_BlockUp = 1;
 8008134:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008136:	2201      	movs	r2, #1
 8008138:	701a      	strb	r2, [r3, #0]
		break;
 800813a:	e01b      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 23:
				if (pos_cursor == 3)
 800813c:	4b11      	ldr	r3, [pc, #68]	@ (8008184 <BlockCursorMoveUp+0x154>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d103      	bne.n	800814c <BlockCursorMoveUp+0x11c>
					f_BlockUp = 1;
 8008144:	4b10      	ldr	r3, [pc, #64]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008146:	2201      	movs	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]
				else
					f_BlockUp = 0;
		break;
 800814a:	e013      	b.n	8008174 <BlockCursorMoveUp+0x144>
					f_BlockUp = 0;
 800814c:	4b0e      	ldr	r3, [pc, #56]	@ (8008188 <BlockCursorMoveUp+0x158>)
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
		break;
 8008152:	e00f      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 25:
				f_BlockUp = 1;
 8008154:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
		break;
 800815a:	e00b      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 26:
				f_BlockUp = 1;
 800815c:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <BlockCursorMoveUp+0x158>)
 800815e:	2201      	movs	r2, #1
 8008160:	701a      	strb	r2, [r3, #0]
		break;
 8008162:	e007      	b.n	8008174 <BlockCursorMoveUp+0x144>


		case 27:
				f_BlockUp = 1;
 8008164:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <BlockCursorMoveUp+0x158>)
 8008166:	2201      	movs	r2, #1
 8008168:	701a      	strb	r2, [r3, #0]
		break;
 800816a:	e003      	b.n	8008174 <BlockCursorMoveUp+0x144>


		default:
				f_BlockUp = 0;
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <BlockCursorMoveUp+0x158>)
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
		break;
 8008172:	bf00      	nop
	}
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000a3c 	.word	0x20000a3c
 8008184:	20000a3d 	.word	0x20000a3d
 8008188:	20000a40 	.word	0x20000a40

0800818c <ButtonsPress>:
//	Обработка кнопок
//============================================================================

// Обработка нажатий на кнопки
void ButtonsPress(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
	// Для циклов
	// (обязательно знаковое число)
	short i = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	80fb      	strh	r3, [r7, #6]

	// Флаг остановки поиска
	// строки для курсора
	uint8_t f_stop_search = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	717b      	strb	r3, [r7, #5]


	// Проверка состояния кнопок
	keys = KEYB_Inkeys();
 800819a:	f7f8 feab 	bl	8000ef4 <KEYB_Inkeys>
 800819e:	4603      	mov	r3, r0
 80081a0:	4a87      	ldr	r2, [pc, #540]	@ (80083c0 <ButtonsPress+0x234>)
 80081a2:	6013      	str	r3, [r2, #0]


	// Если произошло нажатие на любую кнопку
	if ((keys & (1 << KEYB_DOWN)) ||
 80081a4:	4b86      	ldr	r3, [pc, #536]	@ (80083c0 <ButtonsPress+0x234>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d117      	bne.n	80081e0 <ButtonsPress+0x54>
		(keys & (1 << KEYB_UP))	||
 80081b0:	4b83      	ldr	r3, [pc, #524]	@ (80083c0 <ButtonsPress+0x234>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0301 	and.w	r3, r3, #1
	if ((keys & (1 << KEYB_DOWN)) ||
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d111      	bne.n	80081e0 <ButtonsPress+0x54>
		(keys & (1 << KEYB_LEFT)) ||
 80081bc:	4b80      	ldr	r3, [pc, #512]	@ (80083c0 <ButtonsPress+0x234>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0304 	and.w	r3, r3, #4
		(keys & (1 << KEYB_UP))	||
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <ButtonsPress+0x54>
		(keys & (1 << KEYB_RIGHT)) ||
 80081c8:	4b7d      	ldr	r3, [pc, #500]	@ (80083c0 <ButtonsPress+0x234>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0308 	and.w	r3, r3, #8
		(keys & (1 << KEYB_LEFT)) ||
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <ButtonsPress+0x54>
		(keys & (1 << KEYB_OK)))
 80081d4:	4b7a      	ldr	r3, [pc, #488]	@ (80083c0 <ButtonsPress+0x234>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0310 	and.w	r3, r3, #16
		(keys & (1 << KEYB_RIGHT)) ||
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <ButtonsPress+0x96>
	{
		if (f_WaitSecondPress)
 80081e0:	4b78      	ldr	r3, [pc, #480]	@ (80083c4 <ButtonsPress+0x238>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <ButtonsPress+0x62>
			f_SecondPress = 1;
 80081e8:	4b77      	ldr	r3, [pc, #476]	@ (80083c8 <ButtonsPress+0x23c>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]

		if (f_SleepMode)
 80081ee:	4b77      	ldr	r3, [pc, #476]	@ (80083cc <ButtonsPress+0x240>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00e      	beq.n	8008216 <ButtonsPress+0x8a>
		{
			// Сброс "спящего" режима
			f_SleepMode = 0;
 80081f8:	4b74      	ldr	r3, [pc, #464]	@ (80083cc <ButtonsPress+0x240>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]

			// Сброс отрисовки кадра со смайликом
			f_DrawFrameSleepMode = 0;
 80081fe:	4b74      	ldr	r3, [pc, #464]	@ (80083d0 <ButtonsPress+0x244>)
 8008200:	2200      	movs	r2, #0
 8008202:	701a      	strb	r2, [r3, #0]
			SecondsStartSleepMode_CNT = 0;
 8008204:	4b73      	ldr	r3, [pc, #460]	@ (80083d4 <ButtonsPress+0x248>)
 8008206:	2200      	movs	r2, #0
 8008208:	801a      	strh	r2, [r3, #0]

			// Флаг выхода из "спящего" режима
			f_SleepModeExit = 1;
 800820a:	4b73      	ldr	r3, [pc, #460]	@ (80083d8 <ButtonsPress+0x24c>)
 800820c:	2201      	movs	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]

			// Ожидание второго нажатия
			// для разблокировки кнопок
			// при выходе из "спящего" режима
			f_WaitSecondPress = 1;
 8008210:	4b6c      	ldr	r3, [pc, #432]	@ (80083c4 <ButtonsPress+0x238>)
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
		}

		// Сброс отсчёта секунд
		// бездействия пользователя
		SecondsSleepMode_CNT = 0;
 8008216:	4b71      	ldr	r3, [pc, #452]	@ (80083dc <ButtonsPress+0x250>)
 8008218:	2200      	movs	r2, #0
 800821a:	801a      	strh	r2, [r3, #0]
		TIM3->CNT = 0;
 800821c:	4b70      	ldr	r3, [pc, #448]	@ (80083e0 <ButtonsPress+0x254>)
 800821e:	2200      	movs	r2, #0
 8008220:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	// Если был выход из "спящего" режима
	if (f_SleepModeExit)
 8008222:	4b6d      	ldr	r3, [pc, #436]	@ (80083d8 <ButtonsPress+0x24c>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <ButtonsPress+0xc6>
	{
		// Произошло второе нажатие
		if (f_SecondPress)
 800822a:	4b67      	ldr	r3, [pc, #412]	@ (80083c8 <ButtonsPress+0x23c>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <ButtonsPress+0xc0>
		{
			// Разблокировка кнопок
			f_BlockButtons = 0;
 8008232:	4b6c      	ldr	r3, [pc, #432]	@ (80083e4 <ButtonsPress+0x258>)
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]

			// Сброс флагов
			f_SleepModeExit = 0;
 8008238:	4b67      	ldr	r3, [pc, #412]	@ (80083d8 <ButtonsPress+0x24c>)
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
			f_SecondPress = 0;
 800823e:	4b62      	ldr	r3, [pc, #392]	@ (80083c8 <ButtonsPress+0x23c>)
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
			f_WaitSecondPress = 0;
 8008244:	4b5f      	ldr	r3, [pc, #380]	@ (80083c4 <ButtonsPress+0x238>)
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	e002      	b.n	8008252 <ButtonsPress+0xc6>
		}

		// Произошло первое нажатие
		else
			// Блокировка кнопок
			f_BlockButtons = 1;
 800824c:	4b65      	ldr	r3, [pc, #404]	@ (80083e4 <ButtonsPress+0x258>)
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
	}


	// Если нажата кнопка вниз
	if (keys & (1 << KEYB_DOWN))
 8008252:	4b5b      	ldr	r3, [pc, #364]	@ (80083c0 <ButtonsPress+0x234>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8201 	beq.w	8008662 <ButtonsPress+0x4d6>
	{
		if (!f_BlockButtons)
 8008260:	4b60      	ldr	r3, [pc, #384]	@ (80083e4 <ButtonsPress+0x258>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 81fc 	bne.w	8008662 <ButtonsPress+0x4d6>
		{
			// Проверка необходимости запрета
			// перемещения курсора вниз
			BlockCursorMoveDown();
 800826a:	f7ff fe27 	bl	8007ebc <BlockCursorMoveDown>

			// Переключение с кадра 1 на 2
			// (с переносом курсора)
			if ((current_frame == 1) && (pos_cursor == 4))
 800826e:	4b5e      	ldr	r3, [pc, #376]	@ (80083e8 <ButtonsPress+0x25c>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d10a      	bne.n	800828c <ButtonsPress+0x100>
 8008276:	4b5d      	ldr	r3, [pc, #372]	@ (80083ec <ButtonsPress+0x260>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d106      	bne.n	800828c <ButtonsPress+0x100>
			{
				current_frame = 2;
 800827e:	4b5a      	ldr	r3, [pc, #360]	@ (80083e8 <ButtonsPress+0x25c>)
 8008280:	2202      	movs	r2, #2
 8008282:	701a      	strb	r2, [r3, #0]
				pos_cursor = 3;
 8008284:	4b59      	ldr	r3, [pc, #356]	@ (80083ec <ButtonsPress+0x260>)
 8008286:	2203      	movs	r2, #3
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	e1ea      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 4 на 5
			else
			if ((current_frame == 4) && (pos_cursor == 3))
 800828c:	4b56      	ldr	r3, [pc, #344]	@ (80083e8 <ButtonsPress+0x25c>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b04      	cmp	r3, #4
 8008292:	d10a      	bne.n	80082aa <ButtonsPress+0x11e>
 8008294:	4b55      	ldr	r3, [pc, #340]	@ (80083ec <ButtonsPress+0x260>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d106      	bne.n	80082aa <ButtonsPress+0x11e>
			{
				current_frame = 5;
 800829c:	4b52      	ldr	r3, [pc, #328]	@ (80083e8 <ButtonsPress+0x25c>)
 800829e:	2205      	movs	r2, #5
 80082a0:	701a      	strb	r2, [r3, #0]
				pos_cursor = 0;
 80082a2:	4b52      	ldr	r3, [pc, #328]	@ (80083ec <ButtonsPress+0x260>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
 80082a8:	e1db      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры при установке
			// времени начала полива
			else
			if ((current_frame == 7) && (f_StSetTimeWater))
 80082aa:	4b4f      	ldr	r3, [pc, #316]	@ (80083e8 <ButtonsPress+0x25c>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b07      	cmp	r3, #7
 80082b0:	d115      	bne.n	80082de <ButtonsPress+0x152>
 80082b2:	4b4f      	ldr	r3, [pc, #316]	@ (80083f0 <ButtonsPress+0x264>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d011      	beq.n	80082de <ButtonsPress+0x152>
			{
				if (CurrentNumberSetTimeWater > 0)
 80082ba:	4b4e      	ldr	r3, [pc, #312]	@ (80083f4 <ButtonsPress+0x268>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <ButtonsPress+0x142>
					CurrentNumberSetTimeWater--;
 80082c2:	4b4c      	ldr	r3, [pc, #304]	@ (80083f4 <ButtonsPress+0x268>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b4a      	ldr	r3, [pc, #296]	@ (80083f4 <ButtonsPress+0x268>)
 80082cc:	701a      	strb	r2, [r3, #0]

				NumberSetTimeWater[CurrentDigitSetTimeWater] = CurrentNumberSetTimeWater;
 80082ce:	4b4a      	ldr	r3, [pc, #296]	@ (80083f8 <ButtonsPress+0x26c>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	4b47      	ldr	r3, [pc, #284]	@ (80083f4 <ButtonsPress+0x268>)
 80082d6:	7819      	ldrb	r1, [r3, #0]
 80082d8:	4b48      	ldr	r3, [pc, #288]	@ (80083fc <ButtonsPress+0x270>)
 80082da:	5499      	strb	r1, [r3, r2]
 80082dc:	e1c1      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры при установке
			// продолжительности полива
			else
			if ((current_frame == 8) && (f_StSetDurationWater))
 80082de:	4b42      	ldr	r3, [pc, #264]	@ (80083e8 <ButtonsPress+0x25c>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d115      	bne.n	8008312 <ButtonsPress+0x186>
 80082e6:	4b46      	ldr	r3, [pc, #280]	@ (8008400 <ButtonsPress+0x274>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d011      	beq.n	8008312 <ButtonsPress+0x186>
			{
				if (CurrentNumberSetDurationWater > 0)
 80082ee:	4b45      	ldr	r3, [pc, #276]	@ (8008404 <ButtonsPress+0x278>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <ButtonsPress+0x176>
					CurrentNumberSetDurationWater--;
 80082f6:	4b43      	ldr	r3, [pc, #268]	@ (8008404 <ButtonsPress+0x278>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b41      	ldr	r3, [pc, #260]	@ (8008404 <ButtonsPress+0x278>)
 8008300:	701a      	strb	r2, [r3, #0]

				NumberSetDurationWater[CurrentDigitSetDurationWater] = CurrentNumberSetDurationWater;
 8008302:	4b41      	ldr	r3, [pc, #260]	@ (8008408 <ButtonsPress+0x27c>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	4b3e      	ldr	r3, [pc, #248]	@ (8008404 <ButtonsPress+0x278>)
 800830a:	7819      	ldrb	r1, [r3, #0]
 800830c:	4b3f      	ldr	r3, [pc, #252]	@ (800840c <ButtonsPress+0x280>)
 800830e:	5499      	strb	r1, [r3, r2]
 8008310:	e1a7      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры при установке даты
			else
			if ((current_frame == 12) && (f_StSetDate))
 8008312:	4b35      	ldr	r3, [pc, #212]	@ (80083e8 <ButtonsPress+0x25c>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b0c      	cmp	r3, #12
 8008318:	d115      	bne.n	8008346 <ButtonsPress+0x1ba>
 800831a:	4b3d      	ldr	r3, [pc, #244]	@ (8008410 <ButtonsPress+0x284>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d011      	beq.n	8008346 <ButtonsPress+0x1ba>
			{
				if (CurrentNumberSetDate > 0)
 8008322:	4b3c      	ldr	r3, [pc, #240]	@ (8008414 <ButtonsPress+0x288>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <ButtonsPress+0x1aa>
					CurrentNumberSetDate--;
 800832a:	4b3a      	ldr	r3, [pc, #232]	@ (8008414 <ButtonsPress+0x288>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	3b01      	subs	r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4b38      	ldr	r3, [pc, #224]	@ (8008414 <ButtonsPress+0x288>)
 8008334:	701a      	strb	r2, [r3, #0]

				NumberSetDate[CurrentDigitSetDate] = CurrentNumberSetDate;
 8008336:	4b38      	ldr	r3, [pc, #224]	@ (8008418 <ButtonsPress+0x28c>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	4b35      	ldr	r3, [pc, #212]	@ (8008414 <ButtonsPress+0x288>)
 800833e:	7819      	ldrb	r1, [r3, #0]
 8008340:	4b36      	ldr	r3, [pc, #216]	@ (800841c <ButtonsPress+0x290>)
 8008342:	5499      	strb	r1, [r3, r2]
 8008344:	e18d      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры (дня недели)
			// при установке дня недели
			else
			if ((current_frame == 13) && (f_StSetDayOfWeek))
 8008346:	4b28      	ldr	r3, [pc, #160]	@ (80083e8 <ButtonsPress+0x25c>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b0d      	cmp	r3, #13
 800834c:	d10f      	bne.n	800836e <ButtonsPress+0x1e2>
 800834e:	4b34      	ldr	r3, [pc, #208]	@ (8008420 <ButtonsPress+0x294>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <ButtonsPress+0x1e2>
			{
				if (NumberSetDayOfWeek > 1)
 8008356:	4b33      	ldr	r3, [pc, #204]	@ (8008424 <ButtonsPress+0x298>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b01      	cmp	r3, #1
 800835c:	f240 8181 	bls.w	8008662 <ButtonsPress+0x4d6>
					NumberSetDayOfWeek--;
 8008360:	4b30      	ldr	r3, [pc, #192]	@ (8008424 <ButtonsPress+0x298>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	4b2e      	ldr	r3, [pc, #184]	@ (8008424 <ButtonsPress+0x298>)
 800836a:	701a      	strb	r2, [r3, #0]
				if (NumberSetDayOfWeek > 1)
 800836c:	e179      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры при установке времени
			else
			if ((current_frame == 14) && (f_StSetTime))
 800836e:	4b1e      	ldr	r3, [pc, #120]	@ (80083e8 <ButtonsPress+0x25c>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b0e      	cmp	r3, #14
 8008374:	d115      	bne.n	80083a2 <ButtonsPress+0x216>
 8008376:	4b2c      	ldr	r3, [pc, #176]	@ (8008428 <ButtonsPress+0x29c>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d011      	beq.n	80083a2 <ButtonsPress+0x216>
			{
				if (CurrentNumberSetTime > 0)
 800837e:	4b2b      	ldr	r3, [pc, #172]	@ (800842c <ButtonsPress+0x2a0>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <ButtonsPress+0x206>
					CurrentNumberSetTime--;
 8008386:	4b29      	ldr	r3, [pc, #164]	@ (800842c <ButtonsPress+0x2a0>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	3b01      	subs	r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	4b27      	ldr	r3, [pc, #156]	@ (800842c <ButtonsPress+0x2a0>)
 8008390:	701a      	strb	r2, [r3, #0]

				NumberSetTime[CurrentDigitSetTime] = CurrentNumberSetTime;
 8008392:	4b27      	ldr	r3, [pc, #156]	@ (8008430 <ButtonsPress+0x2a4>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	4b24      	ldr	r3, [pc, #144]	@ (800842c <ButtonsPress+0x2a0>)
 800839a:	7819      	ldrb	r1, [r3, #0]
 800839c:	4b25      	ldr	r3, [pc, #148]	@ (8008434 <ButtonsPress+0x2a8>)
 800839e:	5499      	strb	r1, [r3, r2]
 80083a0:	e15f      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 15 на 18
			else
			if ((current_frame == 15) && (pos_cursor == 4))
 80083a2:	4b11      	ldr	r3, [pc, #68]	@ (80083e8 <ButtonsPress+0x25c>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d146      	bne.n	8008438 <ButtonsPress+0x2ac>
 80083aa:	4b10      	ldr	r3, [pc, #64]	@ (80083ec <ButtonsPress+0x260>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d142      	bne.n	8008438 <ButtonsPress+0x2ac>
			{
				current_frame = 18;
 80083b2:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <ButtonsPress+0x25c>)
 80083b4:	2212      	movs	r2, #18
 80083b6:	701a      	strb	r2, [r3, #0]
				pos_cursor = 0;
 80083b8:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <ButtonsPress+0x260>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e150      	b.n	8008662 <ButtonsPress+0x4d6>
 80083c0:	20000ae8 	.word	0x20000ae8
 80083c4:	20000a8f 	.word	0x20000a8f
 80083c8:	20000a8e 	.word	0x20000a8e
 80083cc:	20001182 	.word	0x20001182
 80083d0:	2000118c 	.word	0x2000118c
 80083d4:	20001184 	.word	0x20001184
 80083d8:	20000a8c 	.word	0x20000a8c
 80083dc:	20001180 	.word	0x20001180
 80083e0:	40000400 	.word	0x40000400
 80083e4:	20000a8d 	.word	0x20000a8d
 80083e8:	20000a3c 	.word	0x20000a3c
 80083ec:	20000a3d 	.word	0x20000a3d
 80083f0:	20000a11 	.word	0x20000a11
 80083f4:	20000a0a 	.word	0x20000a0a
 80083f8:	20000a09 	.word	0x20000a09
 80083fc:	200009fc 	.word	0x200009fc
 8008400:	20000a12 	.word	0x20000a12
 8008404:	20000a0c 	.word	0x20000a0c
 8008408:	20000a0b 	.word	0x20000a0b
 800840c:	20000a04 	.word	0x20000a04
 8008410:	200009ed 	.word	0x200009ed
 8008414:	200009e7 	.word	0x200009e7
 8008418:	200009e6 	.word	0x200009e6
 800841c:	200009d8 	.word	0x200009d8
 8008420:	200009ee 	.word	0x200009ee
 8008424:	2000000c 	.word	0x2000000c
 8008428:	200009ef 	.word	0x200009ef
 800842c:	200009e9 	.word	0x200009e9
 8008430:	200009e8 	.word	0x200009e8
 8008434:	200009e0 	.word	0x200009e0
			}

			// Сброс дня при настройке дней полива
			else
			if ((current_frame == 19) && (f_StSetDaysWater))
 8008438:	4b98      	ldr	r3, [pc, #608]	@ (800869c <ButtonsPress+0x510>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b13      	cmp	r3, #19
 800843e:	d152      	bne.n	80084e6 <ButtonsPress+0x35a>
 8008440:	4b97      	ldr	r3, [pc, #604]	@ (80086a0 <ButtonsPress+0x514>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d04e      	beq.n	80084e6 <ButtonsPress+0x35a>
			{
				switch(CurrentDigitSetDaysWater)
 8008448:	4b96      	ldr	r3, [pc, #600]	@ (80086a4 <ButtonsPress+0x518>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b06      	cmp	r3, #6
 800844e:	f200 8108 	bhi.w	8008662 <ButtonsPress+0x4d6>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <ButtonsPress+0x2cc>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	08008475 	.word	0x08008475
 800845c:	08008485 	.word	0x08008485
 8008460:	08008495 	.word	0x08008495
 8008464:	080084a5 	.word	0x080084a5
 8008468:	080084b5 	.word	0x080084b5
 800846c:	080084c5 	.word	0x080084c5
 8008470:	080084d5 	.word	0x080084d5
				{
					case 0:
							WaterDays &= ~0x01;
 8008474:	4b8c      	ldr	r3, [pc, #560]	@ (80086a8 <ButtonsPress+0x51c>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	b2da      	uxtb	r2, r3
 800847e:	4b8a      	ldr	r3, [pc, #552]	@ (80086a8 <ButtonsPress+0x51c>)
 8008480:	701a      	strb	r2, [r3, #0]
					break;
 8008482:	e02f      	b.n	80084e4 <ButtonsPress+0x358>

					case 1:
							WaterDays &= ~0x02;
 8008484:	4b88      	ldr	r3, [pc, #544]	@ (80086a8 <ButtonsPress+0x51c>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f023 0302 	bic.w	r3, r3, #2
 800848c:	b2da      	uxtb	r2, r3
 800848e:	4b86      	ldr	r3, [pc, #536]	@ (80086a8 <ButtonsPress+0x51c>)
 8008490:	701a      	strb	r2, [r3, #0]
					break;
 8008492:	e027      	b.n	80084e4 <ButtonsPress+0x358>

					case 2:
							WaterDays &= ~0x04;
 8008494:	4b84      	ldr	r3, [pc, #528]	@ (80086a8 <ButtonsPress+0x51c>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f023 0304 	bic.w	r3, r3, #4
 800849c:	b2da      	uxtb	r2, r3
 800849e:	4b82      	ldr	r3, [pc, #520]	@ (80086a8 <ButtonsPress+0x51c>)
 80084a0:	701a      	strb	r2, [r3, #0]
					break;
 80084a2:	e01f      	b.n	80084e4 <ButtonsPress+0x358>

					case 3:
							WaterDays &= ~0x08;
 80084a4:	4b80      	ldr	r3, [pc, #512]	@ (80086a8 <ButtonsPress+0x51c>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f023 0308 	bic.w	r3, r3, #8
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b7e      	ldr	r3, [pc, #504]	@ (80086a8 <ButtonsPress+0x51c>)
 80084b0:	701a      	strb	r2, [r3, #0]
					break;
 80084b2:	e017      	b.n	80084e4 <ButtonsPress+0x358>

					case 4:
							WaterDays &= ~0x10;
 80084b4:	4b7c      	ldr	r3, [pc, #496]	@ (80086a8 <ButtonsPress+0x51c>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	4b7a      	ldr	r3, [pc, #488]	@ (80086a8 <ButtonsPress+0x51c>)
 80084c0:	701a      	strb	r2, [r3, #0]
					break;
 80084c2:	e00f      	b.n	80084e4 <ButtonsPress+0x358>

					case 5:
							WaterDays &= ~0x20;
 80084c4:	4b78      	ldr	r3, [pc, #480]	@ (80086a8 <ButtonsPress+0x51c>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f023 0320 	bic.w	r3, r3, #32
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	4b76      	ldr	r3, [pc, #472]	@ (80086a8 <ButtonsPress+0x51c>)
 80084d0:	701a      	strb	r2, [r3, #0]
					break;
 80084d2:	e007      	b.n	80084e4 <ButtonsPress+0x358>

					case 6:
							WaterDays &= ~0x40;
 80084d4:	4b74      	ldr	r3, [pc, #464]	@ (80086a8 <ButtonsPress+0x51c>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	4b72      	ldr	r3, [pc, #456]	@ (80086a8 <ButtonsPress+0x51c>)
 80084e0:	701a      	strb	r2, [r3, #0]
					break;
 80084e2:	bf00      	nop
				switch(CurrentDigitSetDaysWater)
 80084e4:	e0bd      	b.n	8008662 <ButtonsPress+0x4d6>
				}
			}

			// Переключение с кадра 20 на 21
			else
			if ((current_frame == 20) && (pos_cursor == 4))
 80084e6:	4b6d      	ldr	r3, [pc, #436]	@ (800869c <ButtonsPress+0x510>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b14      	cmp	r3, #20
 80084ec:	d10a      	bne.n	8008504 <ButtonsPress+0x378>
 80084ee:	4b6f      	ldr	r3, [pc, #444]	@ (80086ac <ButtonsPress+0x520>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d106      	bne.n	8008504 <ButtonsPress+0x378>
			{
				current_frame = 21;
 80084f6:	4b69      	ldr	r3, [pc, #420]	@ (800869c <ButtonsPress+0x510>)
 80084f8:	2215      	movs	r2, #21
 80084fa:	701a      	strb	r2, [r3, #0]
				pos_cursor = 0;
 80084fc:	4b6b      	ldr	r3, [pc, #428]	@ (80086ac <ButtonsPress+0x520>)
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	e0ae      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Уменьшение цифры при установке
			// времени автоотключения экрана
			else
			if ((current_frame == 23) && (f_StSetScreenOff))
 8008504:	4b65      	ldr	r3, [pc, #404]	@ (800869c <ButtonsPress+0x510>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b17      	cmp	r3, #23
 800850a:	d115      	bne.n	8008538 <ButtonsPress+0x3ac>
 800850c:	4b68      	ldr	r3, [pc, #416]	@ (80086b0 <ButtonsPress+0x524>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <ButtonsPress+0x3ac>
			{
				if (CurrentNumberSetScreenOff > 0)
 8008514:	4b67      	ldr	r3, [pc, #412]	@ (80086b4 <ButtonsPress+0x528>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <ButtonsPress+0x39c>
					CurrentNumberSetScreenOff--;
 800851c:	4b65      	ldr	r3, [pc, #404]	@ (80086b4 <ButtonsPress+0x528>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	3b01      	subs	r3, #1
 8008522:	b2da      	uxtb	r2, r3
 8008524:	4b63      	ldr	r3, [pc, #396]	@ (80086b4 <ButtonsPress+0x528>)
 8008526:	701a      	strb	r2, [r3, #0]

				NumberSetScreenOff[CurrentDigitSetScreenOff] = CurrentNumberSetScreenOff;
 8008528:	4b63      	ldr	r3, [pc, #396]	@ (80086b8 <ButtonsPress+0x52c>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	4b61      	ldr	r3, [pc, #388]	@ (80086b4 <ButtonsPress+0x528>)
 8008530:	7819      	ldrb	r1, [r3, #0]
 8008532:	4b62      	ldr	r3, [pc, #392]	@ (80086bc <ButtonsPress+0x530>)
 8008534:	5499      	strb	r1, [r3, r2]
 8008536:	e094      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 23 на 24
			else
			if ((current_frame == 23) && (pos_cursor == 4))
 8008538:	4b58      	ldr	r3, [pc, #352]	@ (800869c <ButtonsPress+0x510>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b17      	cmp	r3, #23
 800853e:	d10a      	bne.n	8008556 <ButtonsPress+0x3ca>
 8008540:	4b5a      	ldr	r3, [pc, #360]	@ (80086ac <ButtonsPress+0x520>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b04      	cmp	r3, #4
 8008546:	d106      	bne.n	8008556 <ButtonsPress+0x3ca>
			{
				current_frame = 24;
 8008548:	4b54      	ldr	r3, [pc, #336]	@ (800869c <ButtonsPress+0x510>)
 800854a:	2218      	movs	r2, #24
 800854c:	701a      	strb	r2, [r3, #0]
				pos_cursor = 0;
 800854e:	4b57      	ldr	r3, [pc, #348]	@ (80086ac <ButtonsPress+0x520>)
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e085      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 29 на 30
			else
			if ((current_frame == 29) && (pos_cursor == 4))
 8008556:	4b51      	ldr	r3, [pc, #324]	@ (800869c <ButtonsPress+0x510>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b1d      	cmp	r3, #29
 800855c:	d10a      	bne.n	8008574 <ButtonsPress+0x3e8>
 800855e:	4b53      	ldr	r3, [pc, #332]	@ (80086ac <ButtonsPress+0x520>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d106      	bne.n	8008574 <ButtonsPress+0x3e8>
			{
				current_frame = 30;
 8008566:	4b4d      	ldr	r3, [pc, #308]	@ (800869c <ButtonsPress+0x510>)
 8008568:	221e      	movs	r2, #30
 800856a:	701a      	strb	r2, [r3, #0]
				pos_cursor = 2;
 800856c:	4b4f      	ldr	r3, [pc, #316]	@ (80086ac <ButtonsPress+0x520>)
 800856e:	2202      	movs	r2, #2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e076      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 31 на 32
			else
			if ((current_frame == 31) && (pos_cursor == 4))
 8008574:	4b49      	ldr	r3, [pc, #292]	@ (800869c <ButtonsPress+0x510>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b1f      	cmp	r3, #31
 800857a:	d10a      	bne.n	8008592 <ButtonsPress+0x406>
 800857c:	4b4b      	ldr	r3, [pc, #300]	@ (80086ac <ButtonsPress+0x520>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b04      	cmp	r3, #4
 8008582:	d106      	bne.n	8008592 <ButtonsPress+0x406>
			{
				current_frame = 32;
 8008584:	4b45      	ldr	r3, [pc, #276]	@ (800869c <ButtonsPress+0x510>)
 8008586:	2220      	movs	r2, #32
 8008588:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 800858a:	4b48      	ldr	r3, [pc, #288]	@ (80086ac <ButtonsPress+0x520>)
 800858c:	2204      	movs	r2, #4
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e067      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Переключение с кадра 21 на 33
			else
			if ((current_frame == 21) && (pos_cursor == 4))
 8008592:	4b42      	ldr	r3, [pc, #264]	@ (800869c <ButtonsPress+0x510>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b15      	cmp	r3, #21
 8008598:	d10a      	bne.n	80085b0 <ButtonsPress+0x424>
 800859a:	4b44      	ldr	r3, [pc, #272]	@ (80086ac <ButtonsPress+0x520>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d106      	bne.n	80085b0 <ButtonsPress+0x424>
			{
				current_frame = 33;
 80085a2:	4b3e      	ldr	r3, [pc, #248]	@ (800869c <ButtonsPress+0x510>)
 80085a4:	2221      	movs	r2, #33	@ 0x21
 80085a6:	701a      	strb	r2, [r3, #0]
				pos_cursor = 0;
 80085a8:	4b40      	ldr	r3, [pc, #256]	@ (80086ac <ButtonsPress+0x520>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e058      	b.n	8008662 <ButtonsPress+0x4d6>
			}

			// Перемещение курсора вниз
			else
			if (!f_BlockDown)
 80085b0:	4b43      	ldr	r3, [pc, #268]	@ (80086c0 <ButtonsPress+0x534>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d154      	bne.n	8008662 <ButtonsPress+0x4d6>
			{
				// Если курсор внизу дисплея,
				// то ищем новое положение
				// курсора с первой строки дисплея
				if (pos_cursor == 4)
 80085b8:	4b3c      	ldr	r3, [pc, #240]	@ (80086ac <ButtonsPress+0x520>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d118      	bne.n	80085f2 <ButtonsPress+0x466>
				{
					for (i = 0; i < 5; i++)
 80085c0:	2300      	movs	r3, #0
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	e010      	b.n	80085e8 <ButtonsPress+0x45c>
					{
						if (poss_ix[i])
 80085c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085ca:	4a3e      	ldr	r2, [pc, #248]	@ (80086c4 <ButtonsPress+0x538>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d004      	beq.n	80085dc <ButtonsPress+0x450>
						{
							pos_cursor = i;
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4b35      	ldr	r3, [pc, #212]	@ (80086ac <ButtonsPress+0x520>)
 80085d8:	701a      	strb	r2, [r3, #0]
							break;
 80085da:	e042      	b.n	8008662 <ButtonsPress+0x4d6>
					for (i = 0; i < 5; i++)
 80085dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3301      	adds	r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	80fb      	strh	r3, [r7, #6]
 80085e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	ddea      	ble.n	80085c6 <ButtonsPress+0x43a>
 80085f0:	e037      	b.n	8008662 <ButtonsPress+0x4d6>
				// Если есть строки ниже,
				// то проверяем, можно ли
				// перенести на них курсор
				else
				{
					for (i = pos_cursor + 1; i < 5; i++)
 80085f2:	4b2e      	ldr	r3, [pc, #184]	@ (80086ac <ButtonsPress+0x520>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	80fb      	strh	r3, [r7, #6]
 80085fc:	e012      	b.n	8008624 <ButtonsPress+0x498>
					{
						if (poss_ix[i])
 80085fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008602:	4a30      	ldr	r2, [pc, #192]	@ (80086c4 <ButtonsPress+0x538>)
 8008604:	5cd3      	ldrb	r3, [r2, r3]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <ButtonsPress+0x48c>
						{
							pos_cursor = i;
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <ButtonsPress+0x520>)
 8008610:	701a      	strb	r2, [r3, #0]
							f_stop_search = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	717b      	strb	r3, [r7, #5]
							break;
 8008616:	e009      	b.n	800862c <ButtonsPress+0x4a0>
					for (i = pos_cursor + 1; i < 5; i++)
 8008618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800861c:	b29b      	uxth	r3, r3
 800861e:	3301      	adds	r3, #1
 8008620:	b29b      	uxth	r3, r3
 8008622:	80fb      	strh	r3, [r7, #6]
 8008624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008628:	2b04      	cmp	r3, #4
 800862a:	dde8      	ble.n	80085fe <ButtonsPress+0x472>
					}

					// Если среди строк ниже не нашлось строк,
					// на которые можно перенести курсор, то
					// начинаем поиск с первой строки дисплея
					if (!f_stop_search)
 800862c:	797b      	ldrb	r3, [r7, #5]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d117      	bne.n	8008662 <ButtonsPress+0x4d6>
					{
						for (i = 0; i < 5; i++)
 8008632:	2300      	movs	r3, #0
 8008634:	80fb      	strh	r3, [r7, #6]
 8008636:	e010      	b.n	800865a <ButtonsPress+0x4ce>
						{
							if (poss_ix[i])
 8008638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800863c:	4a21      	ldr	r2, [pc, #132]	@ (80086c4 <ButtonsPress+0x538>)
 800863e:	5cd3      	ldrb	r3, [r2, r3]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <ButtonsPress+0x4c2>
							{
								pos_cursor = i;
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <ButtonsPress+0x520>)
 800864a:	701a      	strb	r2, [r3, #0]
								break;
 800864c:	e009      	b.n	8008662 <ButtonsPress+0x4d6>
						for (i = 0; i < 5; i++)
 800864e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008652:	b29b      	uxth	r3, r3
 8008654:	3301      	adds	r3, #1
 8008656:	b29b      	uxth	r3, r3
 8008658:	80fb      	strh	r3, [r7, #6]
 800865a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800865e:	2b04      	cmp	r3, #4
 8008660:	ddea      	ble.n	8008638 <ButtonsPress+0x4ac>
		}
	}


	// Если нажата кнопка вверх
	if (keys & (1 << KEYB_UP))
 8008662:	4b19      	ldr	r3, [pc, #100]	@ (80086c8 <ButtonsPress+0x53c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8328 	beq.w	8008cc0 <ButtonsPress+0xb34>
	{
		if (!f_BlockButtons)
 8008670:	4b16      	ldr	r3, [pc, #88]	@ (80086cc <ButtonsPress+0x540>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f040 8323 	bne.w	8008cc0 <ButtonsPress+0xb34>
		{
			// Проверка необходимости запрета
			// перемещения курсора вверх
			BlockCursorMoveUp();
 800867a:	f7ff fcd9 	bl	8008030 <BlockCursorMoveUp>

			// Переключение с кадра 2 на 1
			if ((current_frame == 2) && (pos_cursor == 3))
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <ButtonsPress+0x510>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b02      	cmp	r3, #2
 8008684:	d124      	bne.n	80086d0 <ButtonsPress+0x544>
 8008686:	4b09      	ldr	r3, [pc, #36]	@ (80086ac <ButtonsPress+0x520>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b03      	cmp	r3, #3
 800868c:	d120      	bne.n	80086d0 <ButtonsPress+0x544>
			{
				current_frame = 1;
 800868e:	4b03      	ldr	r3, [pc, #12]	@ (800869c <ButtonsPress+0x510>)
 8008690:	2201      	movs	r2, #1
 8008692:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <ButtonsPress+0x520>)
 8008696:	2204      	movs	r2, #4
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	e311      	b.n	8008cc0 <ButtonsPress+0xb34>
 800869c:	20000a3c 	.word	0x20000a3c
 80086a0:	20000a13 	.word	0x20000a13
 80086a4:	20000a0d 	.word	0x20000a0d
 80086a8:	20000a08 	.word	0x20000a08
 80086ac:	20000a3d 	.word	0x20000a3d
 80086b0:	20000a2b 	.word	0x20000a2b
 80086b4:	20000a29 	.word	0x20000a29
 80086b8:	20000a28 	.word	0x20000a28
 80086bc:	20000a24 	.word	0x20000a24
 80086c0:	20000a3f 	.word	0x20000a3f
 80086c4:	20000a44 	.word	0x20000a44
 80086c8:	20000ae8 	.word	0x20000ae8
 80086cc:	20000a8d 	.word	0x20000a8d
			}

			// Переключение с кадра 5 на 4
			else
			if ((current_frame == 5) && (pos_cursor == 0))
 80086d0:	4b86      	ldr	r3, [pc, #536]	@ (80088ec <ButtonsPress+0x760>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b05      	cmp	r3, #5
 80086d6:	d10a      	bne.n	80086ee <ButtonsPress+0x562>
 80086d8:	4b85      	ldr	r3, [pc, #532]	@ (80088f0 <ButtonsPress+0x764>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d106      	bne.n	80086ee <ButtonsPress+0x562>
			{
				current_frame = 4;
 80086e0:	4b82      	ldr	r3, [pc, #520]	@ (80088ec <ButtonsPress+0x760>)
 80086e2:	2204      	movs	r2, #4
 80086e4:	701a      	strb	r2, [r3, #0]
				pos_cursor = 3;
 80086e6:	4b82      	ldr	r3, [pc, #520]	@ (80088f0 <ButtonsPress+0x764>)
 80086e8:	2203      	movs	r2, #3
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	e2e8      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Увеличение цифры при установке
			// времени начала полива
			else
			if ((current_frame == 7) && (f_StSetTimeWater))
 80086ee:	4b7f      	ldr	r3, [pc, #508]	@ (80088ec <ButtonsPress+0x760>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b07      	cmp	r3, #7
 80086f4:	d15a      	bne.n	80087ac <ButtonsPress+0x620>
 80086f6:	4b7f      	ldr	r3, [pc, #508]	@ (80088f4 <ButtonsPress+0x768>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d056      	beq.n	80087ac <ButtonsPress+0x620>
			{
				if (CurrentNumberSetTimeWater < 9)
 80086fe:	4b7e      	ldr	r3, [pc, #504]	@ (80088f8 <ButtonsPress+0x76c>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b08      	cmp	r3, #8
 8008704:	d805      	bhi.n	8008712 <ButtonsPress+0x586>
					CurrentNumberSetTimeWater++;
 8008706:	4b7c      	ldr	r3, [pc, #496]	@ (80088f8 <ButtonsPress+0x76c>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	4b7a      	ldr	r3, [pc, #488]	@ (80088f8 <ButtonsPress+0x76c>)
 8008710:	701a      	strb	r2, [r3, #0]

				NumberSetTimeWater[CurrentDigitSetTimeWater] = CurrentNumberSetTimeWater;
 8008712:	4b7a      	ldr	r3, [pc, #488]	@ (80088fc <ButtonsPress+0x770>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	4b77      	ldr	r3, [pc, #476]	@ (80088f8 <ButtonsPress+0x76c>)
 800871a:	7819      	ldrb	r1, [r3, #0]
 800871c:	4b78      	ldr	r3, [pc, #480]	@ (8008900 <ButtonsPress+0x774>)
 800871e:	5499      	strb	r1, [r3, r2]


				// Ограничение ввода количества
				// часов, минут, секунд
				switch(CurrentDigitSetTimeWater)
 8008720:	4b76      	ldr	r3, [pc, #472]	@ (80088fc <ButtonsPress+0x770>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d028      	beq.n	800877a <ButtonsPress+0x5ee>
 8008728:	2b04      	cmp	r3, #4
 800872a:	dc37      	bgt.n	800879c <ButtonsPress+0x610>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <ButtonsPress+0x5aa>
 8008730:	2b02      	cmp	r3, #2
 8008732:	d011      	beq.n	8008758 <ButtonsPress+0x5cc>
								NumberSetTimeWater[CurrentDigitSetTimeWater] = 5;
							}
					break;

					default:
					break;
 8008734:	e032      	b.n	800879c <ButtonsPress+0x610>
							if (NumberSetTimeWater[CurrentDigitSetTimeWater] > 2)
 8008736:	4b71      	ldr	r3, [pc, #452]	@ (80088fc <ButtonsPress+0x770>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	4b70      	ldr	r3, [pc, #448]	@ (8008900 <ButtonsPress+0x774>)
 800873e:	5c9b      	ldrb	r3, [r3, r2]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d92d      	bls.n	80087a0 <ButtonsPress+0x614>
								CurrentNumberSetTimeWater = 2;
 8008744:	4b6c      	ldr	r3, [pc, #432]	@ (80088f8 <ButtonsPress+0x76c>)
 8008746:	2202      	movs	r2, #2
 8008748:	701a      	strb	r2, [r3, #0]
								NumberSetTimeWater[CurrentDigitSetTimeWater] = 2;
 800874a:	4b6c      	ldr	r3, [pc, #432]	@ (80088fc <ButtonsPress+0x770>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	4b6b      	ldr	r3, [pc, #428]	@ (8008900 <ButtonsPress+0x774>)
 8008752:	2102      	movs	r1, #2
 8008754:	5499      	strb	r1, [r3, r2]
					break;
 8008756:	e023      	b.n	80087a0 <ButtonsPress+0x614>
							if (NumberSetTimeWater[CurrentDigitSetTimeWater] > 5)
 8008758:	4b68      	ldr	r3, [pc, #416]	@ (80088fc <ButtonsPress+0x770>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	4b68      	ldr	r3, [pc, #416]	@ (8008900 <ButtonsPress+0x774>)
 8008760:	5c9b      	ldrb	r3, [r3, r2]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d91e      	bls.n	80087a4 <ButtonsPress+0x618>
								CurrentNumberSetTimeWater = 5;
 8008766:	4b64      	ldr	r3, [pc, #400]	@ (80088f8 <ButtonsPress+0x76c>)
 8008768:	2205      	movs	r2, #5
 800876a:	701a      	strb	r2, [r3, #0]
								NumberSetTimeWater[CurrentDigitSetTimeWater] = 5;
 800876c:	4b63      	ldr	r3, [pc, #396]	@ (80088fc <ButtonsPress+0x770>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	4b63      	ldr	r3, [pc, #396]	@ (8008900 <ButtonsPress+0x774>)
 8008774:	2105      	movs	r1, #5
 8008776:	5499      	strb	r1, [r3, r2]
					break;
 8008778:	e014      	b.n	80087a4 <ButtonsPress+0x618>
							if (NumberSetTimeWater[CurrentDigitSetTimeWater] > 5)
 800877a:	4b60      	ldr	r3, [pc, #384]	@ (80088fc <ButtonsPress+0x770>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	4b5f      	ldr	r3, [pc, #380]	@ (8008900 <ButtonsPress+0x774>)
 8008782:	5c9b      	ldrb	r3, [r3, r2]
 8008784:	2b05      	cmp	r3, #5
 8008786:	d90f      	bls.n	80087a8 <ButtonsPress+0x61c>
								CurrentNumberSetTimeWater = 5;
 8008788:	4b5b      	ldr	r3, [pc, #364]	@ (80088f8 <ButtonsPress+0x76c>)
 800878a:	2205      	movs	r2, #5
 800878c:	701a      	strb	r2, [r3, #0]
								NumberSetTimeWater[CurrentDigitSetTimeWater] = 5;
 800878e:	4b5b      	ldr	r3, [pc, #364]	@ (80088fc <ButtonsPress+0x770>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	4b5a      	ldr	r3, [pc, #360]	@ (8008900 <ButtonsPress+0x774>)
 8008796:	2105      	movs	r1, #5
 8008798:	5499      	strb	r1, [r3, r2]
					break;
 800879a:	e005      	b.n	80087a8 <ButtonsPress+0x61c>
					break;
 800879c:	bf00      	nop
 800879e:	e28f      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80087a0:	bf00      	nop
 80087a2:	e28d      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80087a4:	bf00      	nop
 80087a6:	e28b      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80087a8:	bf00      	nop
				switch(CurrentDigitSetTimeWater)
 80087aa:	e289      	b.n	8008cc0 <ButtonsPress+0xb34>
				}
			}

			// Увеличение цифры при установке продолжительности полива
			else
			if ((current_frame == 8) && (f_StSetDurationWater))
 80087ac:	4b4f      	ldr	r3, [pc, #316]	@ (80088ec <ButtonsPress+0x760>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d141      	bne.n	8008838 <ButtonsPress+0x6ac>
 80087b4:	4b53      	ldr	r3, [pc, #332]	@ (8008904 <ButtonsPress+0x778>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03d      	beq.n	8008838 <ButtonsPress+0x6ac>
			{
				if (CurrentNumberSetDurationWater < 9)
 80087bc:	4b52      	ldr	r3, [pc, #328]	@ (8008908 <ButtonsPress+0x77c>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d805      	bhi.n	80087d0 <ButtonsPress+0x644>
					CurrentNumberSetDurationWater++;
 80087c4:	4b50      	ldr	r3, [pc, #320]	@ (8008908 <ButtonsPress+0x77c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	4b4e      	ldr	r3, [pc, #312]	@ (8008908 <ButtonsPress+0x77c>)
 80087ce:	701a      	strb	r2, [r3, #0]

				NumberSetDurationWater[CurrentDigitSetDurationWater] = CurrentNumberSetDurationWater;
 80087d0:	4b4e      	ldr	r3, [pc, #312]	@ (800890c <ButtonsPress+0x780>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b4c      	ldr	r3, [pc, #304]	@ (8008908 <ButtonsPress+0x77c>)
 80087d8:	7819      	ldrb	r1, [r3, #0]
 80087da:	4b4d      	ldr	r3, [pc, #308]	@ (8008910 <ButtonsPress+0x784>)
 80087dc:	5499      	strb	r1, [r3, r2]


				// Ограничение ввода количества
				// количества минут, секунд
				switch(CurrentDigitSetDurationWater)
 80087de:	4b4b      	ldr	r3, [pc, #300]	@ (800890c <ButtonsPress+0x780>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <ButtonsPress+0x660>
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d011      	beq.n	800880e <ButtonsPress+0x682>
								NumberSetDurationWater[CurrentDigitSetDurationWater] = 5;
							}
					break;

					default:
					break;
 80087ea:	e024      	b.n	8008836 <ButtonsPress+0x6aa>
							if (NumberSetDurationWater[CurrentDigitSetDurationWater] > 1)
 80087ec:	4b47      	ldr	r3, [pc, #284]	@ (800890c <ButtonsPress+0x780>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b47      	ldr	r3, [pc, #284]	@ (8008910 <ButtonsPress+0x784>)
 80087f4:	5c9b      	ldrb	r3, [r3, r2]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d91a      	bls.n	8008830 <ButtonsPress+0x6a4>
								CurrentNumberSetDurationWater = 1;
 80087fa:	4b43      	ldr	r3, [pc, #268]	@ (8008908 <ButtonsPress+0x77c>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
								NumberSetDurationWater[CurrentDigitSetDurationWater] = 1;
 8008800:	4b42      	ldr	r3, [pc, #264]	@ (800890c <ButtonsPress+0x780>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	4b42      	ldr	r3, [pc, #264]	@ (8008910 <ButtonsPress+0x784>)
 8008808:	2101      	movs	r1, #1
 800880a:	5499      	strb	r1, [r3, r2]
					break;
 800880c:	e010      	b.n	8008830 <ButtonsPress+0x6a4>
							if (NumberSetDurationWater[CurrentDigitSetDurationWater] > 5)
 800880e:	4b3f      	ldr	r3, [pc, #252]	@ (800890c <ButtonsPress+0x780>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	4b3e      	ldr	r3, [pc, #248]	@ (8008910 <ButtonsPress+0x784>)
 8008816:	5c9b      	ldrb	r3, [r3, r2]
 8008818:	2b05      	cmp	r3, #5
 800881a:	d90b      	bls.n	8008834 <ButtonsPress+0x6a8>
								CurrentNumberSetDurationWater = 5;
 800881c:	4b3a      	ldr	r3, [pc, #232]	@ (8008908 <ButtonsPress+0x77c>)
 800881e:	2205      	movs	r2, #5
 8008820:	701a      	strb	r2, [r3, #0]
								NumberSetDurationWater[CurrentDigitSetDurationWater] = 5;
 8008822:	4b3a      	ldr	r3, [pc, #232]	@ (800890c <ButtonsPress+0x780>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	4b39      	ldr	r3, [pc, #228]	@ (8008910 <ButtonsPress+0x784>)
 800882a:	2105      	movs	r1, #5
 800882c:	5499      	strb	r1, [r3, r2]
					break;
 800882e:	e001      	b.n	8008834 <ButtonsPress+0x6a8>
					break;
 8008830:	bf00      	nop
 8008832:	e245      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 8008834:	bf00      	nop
				switch(CurrentDigitSetDurationWater)
 8008836:	e243      	b.n	8008cc0 <ButtonsPress+0xb34>
				}
			}

			// Увеличение цифры при установке даты
			else
			if ((current_frame == 12) && (f_StSetDate))
 8008838:	4b2c      	ldr	r3, [pc, #176]	@ (80088ec <ButtonsPress+0x760>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b0c      	cmp	r3, #12
 800883e:	d141      	bne.n	80088c4 <ButtonsPress+0x738>
 8008840:	4b34      	ldr	r3, [pc, #208]	@ (8008914 <ButtonsPress+0x788>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d03d      	beq.n	80088c4 <ButtonsPress+0x738>
			{
				if (CurrentNumberSetDate < 9)
 8008848:	4b33      	ldr	r3, [pc, #204]	@ (8008918 <ButtonsPress+0x78c>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b08      	cmp	r3, #8
 800884e:	d805      	bhi.n	800885c <ButtonsPress+0x6d0>
					CurrentNumberSetDate++;
 8008850:	4b31      	ldr	r3, [pc, #196]	@ (8008918 <ButtonsPress+0x78c>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	4b2f      	ldr	r3, [pc, #188]	@ (8008918 <ButtonsPress+0x78c>)
 800885a:	701a      	strb	r2, [r3, #0]

				NumberSetDate[CurrentDigitSetDate] = CurrentNumberSetDate;
 800885c:	4b2f      	ldr	r3, [pc, #188]	@ (800891c <ButtonsPress+0x790>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	4b2d      	ldr	r3, [pc, #180]	@ (8008918 <ButtonsPress+0x78c>)
 8008864:	7819      	ldrb	r1, [r3, #0]
 8008866:	4b2e      	ldr	r3, [pc, #184]	@ (8008920 <ButtonsPress+0x794>)
 8008868:	5499      	strb	r1, [r3, r2]


				// Ограничение ввода числа месяца
				// и номера месяца
				switch(CurrentDigitSetDate)
 800886a:	4b2c      	ldr	r3, [pc, #176]	@ (800891c <ButtonsPress+0x790>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <ButtonsPress+0x6ec>
 8008872:	2b02      	cmp	r3, #2
 8008874:	d011      	beq.n	800889a <ButtonsPress+0x70e>
								NumberSetDate[CurrentDigitSetDate] = 1;
							}
					break;

					default:
					break;
 8008876:	e024      	b.n	80088c2 <ButtonsPress+0x736>
							if (NumberSetDate[CurrentDigitSetDate] > 3)
 8008878:	4b28      	ldr	r3, [pc, #160]	@ (800891c <ButtonsPress+0x790>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	4b28      	ldr	r3, [pc, #160]	@ (8008920 <ButtonsPress+0x794>)
 8008880:	5c9b      	ldrb	r3, [r3, r2]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d91a      	bls.n	80088bc <ButtonsPress+0x730>
								CurrentNumberSetDate = 3;
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <ButtonsPress+0x78c>)
 8008888:	2203      	movs	r2, #3
 800888a:	701a      	strb	r2, [r3, #0]
								NumberSetDate[CurrentDigitSetDate] = 3;
 800888c:	4b23      	ldr	r3, [pc, #140]	@ (800891c <ButtonsPress+0x790>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	4b23      	ldr	r3, [pc, #140]	@ (8008920 <ButtonsPress+0x794>)
 8008894:	2103      	movs	r1, #3
 8008896:	5499      	strb	r1, [r3, r2]
					break;
 8008898:	e010      	b.n	80088bc <ButtonsPress+0x730>
							if (NumberSetDate[CurrentDigitSetDate] > 1)
 800889a:	4b20      	ldr	r3, [pc, #128]	@ (800891c <ButtonsPress+0x790>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008920 <ButtonsPress+0x794>)
 80088a2:	5c9b      	ldrb	r3, [r3, r2]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d90b      	bls.n	80088c0 <ButtonsPress+0x734>
								CurrentNumberSetDate = 1;
 80088a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <ButtonsPress+0x78c>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
								NumberSetDate[CurrentDigitSetDate] = 1;
 80088ae:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <ButtonsPress+0x790>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008920 <ButtonsPress+0x794>)
 80088b6:	2101      	movs	r1, #1
 80088b8:	5499      	strb	r1, [r3, r2]
					break;
 80088ba:	e001      	b.n	80088c0 <ButtonsPress+0x734>
					break;
 80088bc:	bf00      	nop
 80088be:	e1ff      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80088c0:	bf00      	nop
				switch(CurrentDigitSetDate)
 80088c2:	e1fd      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Увеличение цифры (дня недели)
			// при установке дня недели
			else
			if ((current_frame == 13) && (f_StSetDayOfWeek))
 80088c4:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <ButtonsPress+0x760>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b0d      	cmp	r3, #13
 80088ca:	d12f      	bne.n	800892c <ButtonsPress+0x7a0>
 80088cc:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <ButtonsPress+0x798>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d02b      	beq.n	800892c <ButtonsPress+0x7a0>
			{
				if (NumberSetDayOfWeek < 7)
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <ButtonsPress+0x79c>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b06      	cmp	r3, #6
 80088da:	f200 81f1 	bhi.w	8008cc0 <ButtonsPress+0xb34>
					NumberSetDayOfWeek++;
 80088de:	4b12      	ldr	r3, [pc, #72]	@ (8008928 <ButtonsPress+0x79c>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	4b10      	ldr	r3, [pc, #64]	@ (8008928 <ButtonsPress+0x79c>)
 80088e8:	701a      	strb	r2, [r3, #0]
				if (NumberSetDayOfWeek < 7)
 80088ea:	e1e9      	b.n	8008cc0 <ButtonsPress+0xb34>
 80088ec:	20000a3c 	.word	0x20000a3c
 80088f0:	20000a3d 	.word	0x20000a3d
 80088f4:	20000a11 	.word	0x20000a11
 80088f8:	20000a0a 	.word	0x20000a0a
 80088fc:	20000a09 	.word	0x20000a09
 8008900:	200009fc 	.word	0x200009fc
 8008904:	20000a12 	.word	0x20000a12
 8008908:	20000a0c 	.word	0x20000a0c
 800890c:	20000a0b 	.word	0x20000a0b
 8008910:	20000a04 	.word	0x20000a04
 8008914:	200009ed 	.word	0x200009ed
 8008918:	200009e7 	.word	0x200009e7
 800891c:	200009e6 	.word	0x200009e6
 8008920:	200009d8 	.word	0x200009d8
 8008924:	200009ee 	.word	0x200009ee
 8008928:	2000000c 	.word	0x2000000c
			}

			// Увеличение цифры при установке времени
			else
			if ((current_frame == 14) && (f_StSetTime))
 800892c:	4b94      	ldr	r3, [pc, #592]	@ (8008b80 <ButtonsPress+0x9f4>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b0e      	cmp	r3, #14
 8008932:	d15a      	bne.n	80089ea <ButtonsPress+0x85e>
 8008934:	4b93      	ldr	r3, [pc, #588]	@ (8008b84 <ButtonsPress+0x9f8>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d056      	beq.n	80089ea <ButtonsPress+0x85e>
			{
				if (CurrentNumberSetTime < 9)
 800893c:	4b92      	ldr	r3, [pc, #584]	@ (8008b88 <ButtonsPress+0x9fc>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b08      	cmp	r3, #8
 8008942:	d805      	bhi.n	8008950 <ButtonsPress+0x7c4>
					CurrentNumberSetTime++;
 8008944:	4b90      	ldr	r3, [pc, #576]	@ (8008b88 <ButtonsPress+0x9fc>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	3301      	adds	r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b8e      	ldr	r3, [pc, #568]	@ (8008b88 <ButtonsPress+0x9fc>)
 800894e:	701a      	strb	r2, [r3, #0]

				NumberSetTime[CurrentDigitSetTime] = CurrentNumberSetTime;
 8008950:	4b8e      	ldr	r3, [pc, #568]	@ (8008b8c <ButtonsPress+0xa00>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	4b8c      	ldr	r3, [pc, #560]	@ (8008b88 <ButtonsPress+0x9fc>)
 8008958:	7819      	ldrb	r1, [r3, #0]
 800895a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b90 <ButtonsPress+0xa04>)
 800895c:	5499      	strb	r1, [r3, r2]


				// Ограничение ввода количества
				// часов, минут, секунд
				switch(CurrentDigitSetTime)
 800895e:	4b8b      	ldr	r3, [pc, #556]	@ (8008b8c <ButtonsPress+0xa00>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	2b04      	cmp	r3, #4
 8008964:	d028      	beq.n	80089b8 <ButtonsPress+0x82c>
 8008966:	2b04      	cmp	r3, #4
 8008968:	dc37      	bgt.n	80089da <ButtonsPress+0x84e>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <ButtonsPress+0x7e8>
 800896e:	2b02      	cmp	r3, #2
 8008970:	d011      	beq.n	8008996 <ButtonsPress+0x80a>
								NumberSetTime[CurrentDigitSetTime] = 5;
							}
					break;

					default:
					break;
 8008972:	e032      	b.n	80089da <ButtonsPress+0x84e>
							if (NumberSetTime[CurrentDigitSetTime] > 2)
 8008974:	4b85      	ldr	r3, [pc, #532]	@ (8008b8c <ButtonsPress+0xa00>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	4b85      	ldr	r3, [pc, #532]	@ (8008b90 <ButtonsPress+0xa04>)
 800897c:	5c9b      	ldrb	r3, [r3, r2]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d92d      	bls.n	80089de <ButtonsPress+0x852>
								CurrentNumberSetTime = 2;
 8008982:	4b81      	ldr	r3, [pc, #516]	@ (8008b88 <ButtonsPress+0x9fc>)
 8008984:	2202      	movs	r2, #2
 8008986:	701a      	strb	r2, [r3, #0]
								NumberSetTime[CurrentDigitSetTime] = 2;
 8008988:	4b80      	ldr	r3, [pc, #512]	@ (8008b8c <ButtonsPress+0xa00>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	4b80      	ldr	r3, [pc, #512]	@ (8008b90 <ButtonsPress+0xa04>)
 8008990:	2102      	movs	r1, #2
 8008992:	5499      	strb	r1, [r3, r2]
					break;
 8008994:	e023      	b.n	80089de <ButtonsPress+0x852>
							if (NumberSetTime[CurrentDigitSetTime] > 5)
 8008996:	4b7d      	ldr	r3, [pc, #500]	@ (8008b8c <ButtonsPress+0xa00>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	4b7c      	ldr	r3, [pc, #496]	@ (8008b90 <ButtonsPress+0xa04>)
 800899e:	5c9b      	ldrb	r3, [r3, r2]
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	d91e      	bls.n	80089e2 <ButtonsPress+0x856>
								CurrentNumberSetTime = 5;
 80089a4:	4b78      	ldr	r3, [pc, #480]	@ (8008b88 <ButtonsPress+0x9fc>)
 80089a6:	2205      	movs	r2, #5
 80089a8:	701a      	strb	r2, [r3, #0]
								NumberSetTime[CurrentDigitSetTime] = 5;
 80089aa:	4b78      	ldr	r3, [pc, #480]	@ (8008b8c <ButtonsPress+0xa00>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	4b77      	ldr	r3, [pc, #476]	@ (8008b90 <ButtonsPress+0xa04>)
 80089b2:	2105      	movs	r1, #5
 80089b4:	5499      	strb	r1, [r3, r2]
					break;
 80089b6:	e014      	b.n	80089e2 <ButtonsPress+0x856>
							if (NumberSetTime[CurrentDigitSetTime] > 5)
 80089b8:	4b74      	ldr	r3, [pc, #464]	@ (8008b8c <ButtonsPress+0xa00>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	4b74      	ldr	r3, [pc, #464]	@ (8008b90 <ButtonsPress+0xa04>)
 80089c0:	5c9b      	ldrb	r3, [r3, r2]
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d90f      	bls.n	80089e6 <ButtonsPress+0x85a>
								CurrentNumberSetTime = 5;
 80089c6:	4b70      	ldr	r3, [pc, #448]	@ (8008b88 <ButtonsPress+0x9fc>)
 80089c8:	2205      	movs	r2, #5
 80089ca:	701a      	strb	r2, [r3, #0]
								NumberSetTime[CurrentDigitSetTime] = 5;
 80089cc:	4b6f      	ldr	r3, [pc, #444]	@ (8008b8c <ButtonsPress+0xa00>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008b90 <ButtonsPress+0xa04>)
 80089d4:	2105      	movs	r1, #5
 80089d6:	5499      	strb	r1, [r3, r2]
					break;
 80089d8:	e005      	b.n	80089e6 <ButtonsPress+0x85a>
					break;
 80089da:	bf00      	nop
 80089dc:	e170      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80089de:	bf00      	nop
 80089e0:	e16e      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80089e2:	bf00      	nop
 80089e4:	e16c      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 80089e6:	bf00      	nop
				switch(CurrentDigitSetTime)
 80089e8:	e16a      	b.n	8008cc0 <ButtonsPress+0xb34>
				}
			}

			// Переключение с кадра 18 на 15
			else
			if ((current_frame == 18) && (pos_cursor == 0))
 80089ea:	4b65      	ldr	r3, [pc, #404]	@ (8008b80 <ButtonsPress+0x9f4>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b12      	cmp	r3, #18
 80089f0:	d10a      	bne.n	8008a08 <ButtonsPress+0x87c>
 80089f2:	4b68      	ldr	r3, [pc, #416]	@ (8008b94 <ButtonsPress+0xa08>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <ButtonsPress+0x87c>
			{
				current_frame = 15;
 80089fa:	4b61      	ldr	r3, [pc, #388]	@ (8008b80 <ButtonsPress+0x9f4>)
 80089fc:	220f      	movs	r2, #15
 80089fe:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008a00:	4b64      	ldr	r3, [pc, #400]	@ (8008b94 <ButtonsPress+0xa08>)
 8008a02:	2204      	movs	r2, #4
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	e15b      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Установка дня при настройке дней полива
			else
			if ((current_frame == 19) && (f_StSetDaysWater))
 8008a08:	4b5d      	ldr	r3, [pc, #372]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b13      	cmp	r3, #19
 8008a0e:	d152      	bne.n	8008ab6 <ButtonsPress+0x92a>
 8008a10:	4b61      	ldr	r3, [pc, #388]	@ (8008b98 <ButtonsPress+0xa0c>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d04e      	beq.n	8008ab6 <ButtonsPress+0x92a>
			{
				switch(CurrentDigitSetDaysWater)
 8008a18:	4b60      	ldr	r3, [pc, #384]	@ (8008b9c <ButtonsPress+0xa10>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b06      	cmp	r3, #6
 8008a1e:	f200 814f 	bhi.w	8008cc0 <ButtonsPress+0xb34>
 8008a22:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <ButtonsPress+0x89c>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a45 	.word	0x08008a45
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a65 	.word	0x08008a65
 8008a34:	08008a75 	.word	0x08008a75
 8008a38:	08008a85 	.word	0x08008a85
 8008a3c:	08008a95 	.word	0x08008a95
 8008a40:	08008aa5 	.word	0x08008aa5
				{
					case 0:
							WaterDays |= 0x01;
 8008a44:	4b56      	ldr	r3, [pc, #344]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f043 0301 	orr.w	r3, r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	4b54      	ldr	r3, [pc, #336]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a50:	701a      	strb	r2, [r3, #0]
					break;
 8008a52:	e02f      	b.n	8008ab4 <ButtonsPress+0x928>

					case 1:
							WaterDays |= 0x02;
 8008a54:	4b52      	ldr	r3, [pc, #328]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f043 0302 	orr.w	r3, r3, #2
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	4b50      	ldr	r3, [pc, #320]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a60:	701a      	strb	r2, [r3, #0]
					break;
 8008a62:	e027      	b.n	8008ab4 <ButtonsPress+0x928>

					case 2:
							WaterDays |= 0x04;
 8008a64:	4b4e      	ldr	r3, [pc, #312]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f043 0304 	orr.w	r3, r3, #4
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a70:	701a      	strb	r2, [r3, #0]
					break;
 8008a72:	e01f      	b.n	8008ab4 <ButtonsPress+0x928>

					case 3:
							WaterDays |= 0x08;
 8008a74:	4b4a      	ldr	r3, [pc, #296]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f043 0308 	orr.w	r3, r3, #8
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	4b48      	ldr	r3, [pc, #288]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a80:	701a      	strb	r2, [r3, #0]
					break;
 8008a82:	e017      	b.n	8008ab4 <ButtonsPress+0x928>

					case 4:
							WaterDays |= 0x10;
 8008a84:	4b46      	ldr	r3, [pc, #280]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f043 0310 	orr.w	r3, r3, #16
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	4b44      	ldr	r3, [pc, #272]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a90:	701a      	strb	r2, [r3, #0]
					break;
 8008a92:	e00f      	b.n	8008ab4 <ButtonsPress+0x928>

					case 5:
							WaterDays |= 0x20;
 8008a94:	4b42      	ldr	r3, [pc, #264]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f043 0320 	orr.w	r3, r3, #32
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	4b40      	ldr	r3, [pc, #256]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008aa0:	701a      	strb	r2, [r3, #0]
					break;
 8008aa2:	e007      	b.n	8008ab4 <ButtonsPress+0x928>

					case 6:
							WaterDays |= 0x40;
 8008aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b3c      	ldr	r3, [pc, #240]	@ (8008ba0 <ButtonsPress+0xa14>)
 8008ab0:	701a      	strb	r2, [r3, #0]
					break;
 8008ab2:	bf00      	nop
				switch(CurrentDigitSetDaysWater)
 8008ab4:	e104      	b.n	8008cc0 <ButtonsPress+0xb34>
				}
			}

			// Переключение с кадра 21 на 20
			else
			if ((current_frame == 21) && (pos_cursor == 0))
 8008ab6:	4b32      	ldr	r3, [pc, #200]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b15      	cmp	r3, #21
 8008abc:	d10a      	bne.n	8008ad4 <ButtonsPress+0x948>
 8008abe:	4b35      	ldr	r3, [pc, #212]	@ (8008b94 <ButtonsPress+0xa08>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <ButtonsPress+0x948>
			{
				current_frame = 20;
 8008ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008ac8:	2214      	movs	r2, #20
 8008aca:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008acc:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <ButtonsPress+0xa08>)
 8008ace:	2204      	movs	r2, #4
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	e0f5      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Увеличение цифры при установке
			// времени автоотключения
			else
			if ((current_frame == 23) && (f_StSetScreenOff))
 8008ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b17      	cmp	r3, #23
 8008ada:	d141      	bne.n	8008b60 <ButtonsPress+0x9d4>
 8008adc:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <ButtonsPress+0xa18>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d03d      	beq.n	8008b60 <ButtonsPress+0x9d4>
			{
				if (CurrentNumberSetScreenOff < 9)
 8008ae4:	4b30      	ldr	r3, [pc, #192]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d805      	bhi.n	8008af8 <ButtonsPress+0x96c>
					CurrentNumberSetScreenOff++;
 8008aec:	4b2e      	ldr	r3, [pc, #184]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b2c      	ldr	r3, [pc, #176]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008af6:	701a      	strb	r2, [r3, #0]

				NumberSetScreenOff[CurrentDigitSetScreenOff] = CurrentNumberSetScreenOff;
 8008af8:	4b2c      	ldr	r3, [pc, #176]	@ (8008bac <ButtonsPress+0xa20>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008b00:	7819      	ldrb	r1, [r3, #0]
 8008b02:	4b2b      	ldr	r3, [pc, #172]	@ (8008bb0 <ButtonsPress+0xa24>)
 8008b04:	5499      	strb	r1, [r3, r2]


				// Ограничение ввода количества
				// количества минут, секунд
				switch(CurrentDigitSetScreenOff)
 8008b06:	4b29      	ldr	r3, [pc, #164]	@ (8008bac <ButtonsPress+0xa20>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <ButtonsPress+0x988>
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d011      	beq.n	8008b36 <ButtonsPress+0x9aa>
								NumberSetScreenOff[CurrentDigitSetScreenOff] = 5;
							}
					break;

					default:
					break;
 8008b12:	e024      	b.n	8008b5e <ButtonsPress+0x9d2>
							if (NumberSetScreenOff[CurrentDigitSetScreenOff] > 3)
 8008b14:	4b25      	ldr	r3, [pc, #148]	@ (8008bac <ButtonsPress+0xa20>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4b25      	ldr	r3, [pc, #148]	@ (8008bb0 <ButtonsPress+0xa24>)
 8008b1c:	5c9b      	ldrb	r3, [r3, r2]
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d91a      	bls.n	8008b58 <ButtonsPress+0x9cc>
								CurrentNumberSetScreenOff = 3;
 8008b22:	4b21      	ldr	r3, [pc, #132]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008b24:	2203      	movs	r2, #3
 8008b26:	701a      	strb	r2, [r3, #0]
								NumberSetScreenOff[CurrentDigitSetScreenOff] = 3;
 8008b28:	4b20      	ldr	r3, [pc, #128]	@ (8008bac <ButtonsPress+0xa20>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4b20      	ldr	r3, [pc, #128]	@ (8008bb0 <ButtonsPress+0xa24>)
 8008b30:	2103      	movs	r1, #3
 8008b32:	5499      	strb	r1, [r3, r2]
					break;
 8008b34:	e010      	b.n	8008b58 <ButtonsPress+0x9cc>
							if (NumberSetScreenOff[CurrentDigitSetScreenOff] > 5)
 8008b36:	4b1d      	ldr	r3, [pc, #116]	@ (8008bac <ButtonsPress+0xa20>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb0 <ButtonsPress+0xa24>)
 8008b3e:	5c9b      	ldrb	r3, [r3, r2]
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	d90b      	bls.n	8008b5c <ButtonsPress+0x9d0>
								CurrentNumberSetScreenOff = 5;
 8008b44:	4b18      	ldr	r3, [pc, #96]	@ (8008ba8 <ButtonsPress+0xa1c>)
 8008b46:	2205      	movs	r2, #5
 8008b48:	701a      	strb	r2, [r3, #0]
								NumberSetScreenOff[CurrentDigitSetScreenOff] = 5;
 8008b4a:	4b18      	ldr	r3, [pc, #96]	@ (8008bac <ButtonsPress+0xa20>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b17      	ldr	r3, [pc, #92]	@ (8008bb0 <ButtonsPress+0xa24>)
 8008b52:	2105      	movs	r1, #5
 8008b54:	5499      	strb	r1, [r3, r2]
					break;
 8008b56:	e001      	b.n	8008b5c <ButtonsPress+0x9d0>
					break;
 8008b58:	bf00      	nop
 8008b5a:	e0b1      	b.n	8008cc0 <ButtonsPress+0xb34>
					break;
 8008b5c:	bf00      	nop
				switch(CurrentDigitSetScreenOff)
 8008b5e:	e0af      	b.n	8008cc0 <ButtonsPress+0xb34>
				}
			}

			// Переключение с кадра 24 на 23
			else
			if ((current_frame == 24) && (pos_cursor == 0))
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b18      	cmp	r3, #24
 8008b66:	d125      	bne.n	8008bb4 <ButtonsPress+0xa28>
 8008b68:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <ButtonsPress+0xa08>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d121      	bne.n	8008bb4 <ButtonsPress+0xa28>
			{
				current_frame = 23;
 8008b70:	4b03      	ldr	r3, [pc, #12]	@ (8008b80 <ButtonsPress+0x9f4>)
 8008b72:	2217      	movs	r2, #23
 8008b74:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008b76:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <ButtonsPress+0xa08>)
 8008b78:	2204      	movs	r2, #4
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e0a0      	b.n	8008cc0 <ButtonsPress+0xb34>
 8008b7e:	bf00      	nop
 8008b80:	20000a3c 	.word	0x20000a3c
 8008b84:	200009ef 	.word	0x200009ef
 8008b88:	200009e9 	.word	0x200009e9
 8008b8c:	200009e8 	.word	0x200009e8
 8008b90:	200009e0 	.word	0x200009e0
 8008b94:	20000a3d 	.word	0x20000a3d
 8008b98:	20000a13 	.word	0x20000a13
 8008b9c:	20000a0d 	.word	0x20000a0d
 8008ba0:	20000a08 	.word	0x20000a08
 8008ba4:	20000a2b 	.word	0x20000a2b
 8008ba8:	20000a29 	.word	0x20000a29
 8008bac:	20000a28 	.word	0x20000a28
 8008bb0:	20000a24 	.word	0x20000a24
			}

			// Переключение с кадра 30 на 29
			else
			if ((current_frame == 30) && (pos_cursor == 2))
 8008bb4:	4b86      	ldr	r3, [pc, #536]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b1e      	cmp	r3, #30
 8008bba:	d10a      	bne.n	8008bd2 <ButtonsPress+0xa46>
 8008bbc:	4b85      	ldr	r3, [pc, #532]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d106      	bne.n	8008bd2 <ButtonsPress+0xa46>
			{
				current_frame = 29;
 8008bc4:	4b82      	ldr	r3, [pc, #520]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008bc6:	221d      	movs	r2, #29
 8008bc8:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008bca:	4b82      	ldr	r3, [pc, #520]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008bcc:	2204      	movs	r2, #4
 8008bce:	701a      	strb	r2, [r3, #0]
 8008bd0:	e076      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Переключение с кадра 32 на 31
			else
			if ((current_frame == 32) && (pos_cursor == 4))
 8008bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d10a      	bne.n	8008bf0 <ButtonsPress+0xa64>
 8008bda:	4b7e      	ldr	r3, [pc, #504]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d106      	bne.n	8008bf0 <ButtonsPress+0xa64>
			{
				current_frame = 31;
 8008be2:	4b7b      	ldr	r3, [pc, #492]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008be4:	221f      	movs	r2, #31
 8008be6:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008be8:	4b7a      	ldr	r3, [pc, #488]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008bea:	2204      	movs	r2, #4
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	e067      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Переключение с кадра 33 на 21
			else
			if ((current_frame == 33) && (pos_cursor == 0))
 8008bf0:	4b77      	ldr	r3, [pc, #476]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b21      	cmp	r3, #33	@ 0x21
 8008bf6:	d10a      	bne.n	8008c0e <ButtonsPress+0xa82>
 8008bf8:	4b76      	ldr	r3, [pc, #472]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d106      	bne.n	8008c0e <ButtonsPress+0xa82>
			{
				current_frame = 21;
 8008c00:	4b73      	ldr	r3, [pc, #460]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008c02:	2215      	movs	r2, #21
 8008c04:	701a      	strb	r2, [r3, #0]
				pos_cursor = 4;
 8008c06:	4b73      	ldr	r3, [pc, #460]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008c08:	2204      	movs	r2, #4
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	e058      	b.n	8008cc0 <ButtonsPress+0xb34>
			}

			// Перелючение курсора вверх
			else
			if (!f_BlockUp)
 8008c0e:	4b72      	ldr	r3, [pc, #456]	@ (8008dd8 <ButtonsPress+0xc4c>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d154      	bne.n	8008cc0 <ButtonsPress+0xb34>
			{
				// Если курсор наверху дисплея,
				// то ищем новое положение
				// курсора с последней строки дисплея
				if (pos_cursor == 0)
 8008c16:	4b6f      	ldr	r3, [pc, #444]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d118      	bne.n	8008c50 <ButtonsPress+0xac4>
				{
					for (i = 4; i >= 0; i--)
 8008c1e:	2304      	movs	r3, #4
 8008c20:	80fb      	strh	r3, [r7, #6]
 8008c22:	e010      	b.n	8008c46 <ButtonsPress+0xaba>
					{
						if (poss_ix[i])
 8008c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c28:	4a6c      	ldr	r2, [pc, #432]	@ (8008ddc <ButtonsPress+0xc50>)
 8008c2a:	5cd3      	ldrb	r3, [r2, r3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <ButtonsPress+0xaae>
						{
							pos_cursor = i;
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	4b67      	ldr	r3, [pc, #412]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008c36:	701a      	strb	r2, [r3, #0]
							break;
 8008c38:	e042      	b.n	8008cc0 <ButtonsPress+0xb34>
					for (i = 4; i >= 0; i--)
 8008c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	80fb      	strh	r3, [r7, #6]
 8008c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	daea      	bge.n	8008c24 <ButtonsPress+0xa98>
 8008c4e:	e037      	b.n	8008cc0 <ButtonsPress+0xb34>
				// Если есть строки выше,
				// то проверяем, можно ли
				// перенести на них курсор
				else
				{
					for (i = pos_cursor - 1; i >= 0; i--)
 8008c50:	4b60      	ldr	r3, [pc, #384]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	80fb      	strh	r3, [r7, #6]
 8008c5a:	e012      	b.n	8008c82 <ButtonsPress+0xaf6>
					{
						if (poss_ix[i])
 8008c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c60:	4a5e      	ldr	r2, [pc, #376]	@ (8008ddc <ButtonsPress+0xc50>)
 8008c62:	5cd3      	ldrb	r3, [r2, r3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <ButtonsPress+0xaea>
						{
							pos_cursor = i;
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	4b59      	ldr	r3, [pc, #356]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008c6e:	701a      	strb	r2, [r3, #0]
							f_stop_search = 1;
 8008c70:	2301      	movs	r3, #1
 8008c72:	717b      	strb	r3, [r7, #5]
							break;
 8008c74:	e009      	b.n	8008c8a <ButtonsPress+0xafe>
					for (i = pos_cursor - 1; i >= 0; i--)
 8008c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	80fb      	strh	r3, [r7, #6]
 8008c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dae8      	bge.n	8008c5c <ButtonsPress+0xad0>
					}

					// Если среди строк выше не нашлось строк,
					// на которые можно перенести курсор, то
					// начинаем поиск с последней строки дисплея
					if (!f_stop_search)
 8008c8a:	797b      	ldrb	r3, [r7, #5]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d117      	bne.n	8008cc0 <ButtonsPress+0xb34>
					{
						for (i = 4; i >= 0; i--)
 8008c90:	2304      	movs	r3, #4
 8008c92:	80fb      	strh	r3, [r7, #6]
 8008c94:	e010      	b.n	8008cb8 <ButtonsPress+0xb2c>
						{
							if (poss_ix[i])
 8008c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c9a:	4a50      	ldr	r2, [pc, #320]	@ (8008ddc <ButtonsPress+0xc50>)
 8008c9c:	5cd3      	ldrb	r3, [r2, r3]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <ButtonsPress+0xb20>
							{
								pos_cursor = i;
 8008ca2:	88fb      	ldrh	r3, [r7, #6]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8008dd4 <ButtonsPress+0xc48>)
 8008ca8:	701a      	strb	r2, [r3, #0]
								break;
 8008caa:	e009      	b.n	8008cc0 <ButtonsPress+0xb34>
						for (i = 4; i >= 0; i--)
 8008cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	80fb      	strh	r3, [r7, #6]
 8008cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	daea      	bge.n	8008c96 <ButtonsPress+0xb0a>
		}
	}


	// Если нажата кнопка влево
	if (keys & (1 << KEYB_LEFT))
 8008cc0:	4b47      	ldr	r3, [pc, #284]	@ (8008de0 <ButtonsPress+0xc54>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80ca 	beq.w	8008e62 <ButtonsPress+0xcd6>
	{
		if (!f_BlockButtons)
 8008cce:	4b45      	ldr	r3, [pc, #276]	@ (8008de4 <ButtonsPress+0xc58>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 80c5 	bne.w	8008e62 <ButtonsPress+0xcd6>
		{
			// Смещение разряда при установке даты
			if ((current_frame == 12) && (f_StSetDate))
 8008cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d115      	bne.n	8008d0c <ButtonsPress+0xb80>
 8008ce0:	4b41      	ldr	r3, [pc, #260]	@ (8008de8 <ButtonsPress+0xc5c>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d011      	beq.n	8008d0c <ButtonsPress+0xb80>
			{
				if (CurrentDigitSetDate > 0)
 8008ce8:	4b40      	ldr	r3, [pc, #256]	@ (8008dec <ButtonsPress+0xc60>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <ButtonsPress+0xb70>
					CurrentDigitSetDate--;
 8008cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8008dec <ButtonsPress+0xc60>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8008dec <ButtonsPress+0xc60>)
 8008cfa:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetDate = NumberSetDate[CurrentDigitSetDate];
 8008cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8008dec <ButtonsPress+0xc60>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b3b      	ldr	r3, [pc, #236]	@ (8008df0 <ButtonsPress+0xc64>)
 8008d04:	5c9a      	ldrb	r2, [r3, r2]
 8008d06:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <ButtonsPress+0xc68>)
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e0aa      	b.n	8008e62 <ButtonsPress+0xcd6>
			}

			else
			if ((current_frame == 7) && (f_StSetTimeWater))
 8008d0c:	4b30      	ldr	r3, [pc, #192]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b07      	cmp	r3, #7
 8008d12:	d115      	bne.n	8008d40 <ButtonsPress+0xbb4>
 8008d14:	4b38      	ldr	r3, [pc, #224]	@ (8008df8 <ButtonsPress+0xc6c>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d011      	beq.n	8008d40 <ButtonsPress+0xbb4>
			{
				if (CurrentDigitSetTimeWater > 0)
 8008d1c:	4b37      	ldr	r3, [pc, #220]	@ (8008dfc <ButtonsPress+0xc70>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <ButtonsPress+0xba4>
					CurrentDigitSetTimeWater--;
 8008d24:	4b35      	ldr	r3, [pc, #212]	@ (8008dfc <ButtonsPress+0xc70>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	4b33      	ldr	r3, [pc, #204]	@ (8008dfc <ButtonsPress+0xc70>)
 8008d2e:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetTimeWater = NumberSetTimeWater[CurrentDigitSetTimeWater];
 8008d30:	4b32      	ldr	r3, [pc, #200]	@ (8008dfc <ButtonsPress+0xc70>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	4b32      	ldr	r3, [pc, #200]	@ (8008e00 <ButtonsPress+0xc74>)
 8008d38:	5c9a      	ldrb	r2, [r3, r2]
 8008d3a:	4b32      	ldr	r3, [pc, #200]	@ (8008e04 <ButtonsPress+0xc78>)
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	e090      	b.n	8008e62 <ButtonsPress+0xcd6>
			}

			else
			if ((current_frame == 8) && (f_StSetDurationWater))
 8008d40:	4b23      	ldr	r3, [pc, #140]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d115      	bne.n	8008d74 <ButtonsPress+0xbe8>
 8008d48:	4b2f      	ldr	r3, [pc, #188]	@ (8008e08 <ButtonsPress+0xc7c>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d011      	beq.n	8008d74 <ButtonsPress+0xbe8>
			{
				if (CurrentDigitSetDurationWater > 0)
 8008d50:	4b2e      	ldr	r3, [pc, #184]	@ (8008e0c <ButtonsPress+0xc80>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <ButtonsPress+0xbd8>
					CurrentDigitSetDurationWater--;
 8008d58:	4b2c      	ldr	r3, [pc, #176]	@ (8008e0c <ButtonsPress+0xc80>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	4b2a      	ldr	r3, [pc, #168]	@ (8008e0c <ButtonsPress+0xc80>)
 8008d62:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetDurationWater = NumberSetDurationWater[CurrentDigitSetDurationWater];
 8008d64:	4b29      	ldr	r3, [pc, #164]	@ (8008e0c <ButtonsPress+0xc80>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b29      	ldr	r3, [pc, #164]	@ (8008e10 <ButtonsPress+0xc84>)
 8008d6c:	5c9a      	ldrb	r2, [r3, r2]
 8008d6e:	4b29      	ldr	r3, [pc, #164]	@ (8008e14 <ButtonsPress+0xc88>)
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e076      	b.n	8008e62 <ButtonsPress+0xcd6>
			}

			else
			if ((current_frame == 14) && (f_StSetTime))
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b0e      	cmp	r3, #14
 8008d7a:	d115      	bne.n	8008da8 <ButtonsPress+0xc1c>
 8008d7c:	4b26      	ldr	r3, [pc, #152]	@ (8008e18 <ButtonsPress+0xc8c>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d011      	beq.n	8008da8 <ButtonsPress+0xc1c>
			{
				if (CurrentDigitSetTime > 0)
 8008d84:	4b25      	ldr	r3, [pc, #148]	@ (8008e1c <ButtonsPress+0xc90>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <ButtonsPress+0xc0c>
					CurrentDigitSetTime--;
 8008d8c:	4b23      	ldr	r3, [pc, #140]	@ (8008e1c <ButtonsPress+0xc90>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	4b21      	ldr	r3, [pc, #132]	@ (8008e1c <ButtonsPress+0xc90>)
 8008d96:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetTime = NumberSetTime[CurrentDigitSetTime];
 8008d98:	4b20      	ldr	r3, [pc, #128]	@ (8008e1c <ButtonsPress+0xc90>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4b20      	ldr	r3, [pc, #128]	@ (8008e20 <ButtonsPress+0xc94>)
 8008da0:	5c9a      	ldrb	r2, [r3, r2]
 8008da2:	4b20      	ldr	r3, [pc, #128]	@ (8008e24 <ButtonsPress+0xc98>)
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e05c      	b.n	8008e62 <ButtonsPress+0xcd6>
			}

			else
			if ((current_frame == 19) && (f_StSetDaysWater))
 8008da8:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <ButtonsPress+0xc44>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b13      	cmp	r3, #19
 8008dae:	d13f      	bne.n	8008e30 <ButtonsPress+0xca4>
 8008db0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e28 <ButtonsPress+0xc9c>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d03b      	beq.n	8008e30 <ButtonsPress+0xca4>
			{
				if (CurrentDigitSetDaysWater > 0)
 8008db8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e2c <ButtonsPress+0xca0>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d050      	beq.n	8008e62 <ButtonsPress+0xcd6>
					CurrentDigitSetDaysWater--;
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e2c <ButtonsPress+0xca0>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	4b18      	ldr	r3, [pc, #96]	@ (8008e2c <ButtonsPress+0xca0>)
 8008dca:	701a      	strb	r2, [r3, #0]
				if (CurrentDigitSetDaysWater > 0)
 8008dcc:	e049      	b.n	8008e62 <ButtonsPress+0xcd6>
 8008dce:	bf00      	nop
 8008dd0:	20000a3c 	.word	0x20000a3c
 8008dd4:	20000a3d 	.word	0x20000a3d
 8008dd8:	20000a40 	.word	0x20000a40
 8008ddc:	20000a44 	.word	0x20000a44
 8008de0:	20000ae8 	.word	0x20000ae8
 8008de4:	20000a8d 	.word	0x20000a8d
 8008de8:	200009ed 	.word	0x200009ed
 8008dec:	200009e6 	.word	0x200009e6
 8008df0:	200009d8 	.word	0x200009d8
 8008df4:	200009e7 	.word	0x200009e7
 8008df8:	20000a11 	.word	0x20000a11
 8008dfc:	20000a09 	.word	0x20000a09
 8008e00:	200009fc 	.word	0x200009fc
 8008e04:	20000a0a 	.word	0x20000a0a
 8008e08:	20000a12 	.word	0x20000a12
 8008e0c:	20000a0b 	.word	0x20000a0b
 8008e10:	20000a04 	.word	0x20000a04
 8008e14:	20000a0c 	.word	0x20000a0c
 8008e18:	200009ef 	.word	0x200009ef
 8008e1c:	200009e8 	.word	0x200009e8
 8008e20:	200009e0 	.word	0x200009e0
 8008e24:	200009e9 	.word	0x200009e9
 8008e28:	20000a13 	.word	0x20000a13
 8008e2c:	20000a0d 	.word	0x20000a0d
			}

			else
			if ((current_frame == 23) && (f_StSetScreenOff))
 8008e30:	4b9e      	ldr	r3, [pc, #632]	@ (80090ac <ButtonsPress+0xf20>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b17      	cmp	r3, #23
 8008e36:	d114      	bne.n	8008e62 <ButtonsPress+0xcd6>
 8008e38:	4b9d      	ldr	r3, [pc, #628]	@ (80090b0 <ButtonsPress+0xf24>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <ButtonsPress+0xcd6>
			{
				if (CurrentDigitSetScreenOff > 0)
 8008e40:	4b9c      	ldr	r3, [pc, #624]	@ (80090b4 <ButtonsPress+0xf28>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <ButtonsPress+0xcc8>
					CurrentDigitSetScreenOff--;
 8008e48:	4b9a      	ldr	r3, [pc, #616]	@ (80090b4 <ButtonsPress+0xf28>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	4b98      	ldr	r3, [pc, #608]	@ (80090b4 <ButtonsPress+0xf28>)
 8008e52:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetScreenOff = NumberSetScreenOff[CurrentDigitSetScreenOff];
 8008e54:	4b97      	ldr	r3, [pc, #604]	@ (80090b4 <ButtonsPress+0xf28>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4b97      	ldr	r3, [pc, #604]	@ (80090b8 <ButtonsPress+0xf2c>)
 8008e5c:	5c9a      	ldrb	r2, [r3, r2]
 8008e5e:	4b97      	ldr	r3, [pc, #604]	@ (80090bc <ButtonsPress+0xf30>)
 8008e60:	701a      	strb	r2, [r3, #0]
		}
	}


	// Если нажата кнопка вправо
	if (keys & (1 << KEYB_RIGHT))
 8008e62:	4b97      	ldr	r3, [pc, #604]	@ (80090c0 <ButtonsPress+0xf34>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8099 	beq.w	8008fa2 <ButtonsPress+0xe16>
	{
		if (!f_BlockButtons)
 8008e70:	4b94      	ldr	r3, [pc, #592]	@ (80090c4 <ButtonsPress+0xf38>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 8094 	bne.w	8008fa2 <ButtonsPress+0xe16>
		{
			// Смещение разряда при установке даты
			if ((current_frame == 12) && (f_StSetDate))
 8008e7a:	4b8c      	ldr	r3, [pc, #560]	@ (80090ac <ButtonsPress+0xf20>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b0c      	cmp	r3, #12
 8008e80:	d115      	bne.n	8008eae <ButtonsPress+0xd22>
 8008e82:	4b91      	ldr	r3, [pc, #580]	@ (80090c8 <ButtonsPress+0xf3c>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d011      	beq.n	8008eae <ButtonsPress+0xd22>
			{
				if (CurrentDigitSetDate < 5)
 8008e8a:	4b90      	ldr	r3, [pc, #576]	@ (80090cc <ButtonsPress+0xf40>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d805      	bhi.n	8008e9e <ButtonsPress+0xd12>
					CurrentDigitSetDate++;
 8008e92:	4b8e      	ldr	r3, [pc, #568]	@ (80090cc <ButtonsPress+0xf40>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80090cc <ButtonsPress+0xf40>)
 8008e9c:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetDate = NumberSetDate[CurrentDigitSetDate];
 8008e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80090cc <ButtonsPress+0xf40>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80090d0 <ButtonsPress+0xf44>)
 8008ea6:	5c9a      	ldrb	r2, [r3, r2]
 8008ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80090d4 <ButtonsPress+0xf48>)
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e079      	b.n	8008fa2 <ButtonsPress+0xe16>
			}

			else
			if ((current_frame == 7) && (f_StSetTimeWater))
 8008eae:	4b7f      	ldr	r3, [pc, #508]	@ (80090ac <ButtonsPress+0xf20>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b07      	cmp	r3, #7
 8008eb4:	d115      	bne.n	8008ee2 <ButtonsPress+0xd56>
 8008eb6:	4b88      	ldr	r3, [pc, #544]	@ (80090d8 <ButtonsPress+0xf4c>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d011      	beq.n	8008ee2 <ButtonsPress+0xd56>
			{
				if (CurrentDigitSetTimeWater < 5)
 8008ebe:	4b87      	ldr	r3, [pc, #540]	@ (80090dc <ButtonsPress+0xf50>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d805      	bhi.n	8008ed2 <ButtonsPress+0xd46>
					CurrentDigitSetTimeWater++;
 8008ec6:	4b85      	ldr	r3, [pc, #532]	@ (80090dc <ButtonsPress+0xf50>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	4b83      	ldr	r3, [pc, #524]	@ (80090dc <ButtonsPress+0xf50>)
 8008ed0:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetTimeWater = NumberSetTimeWater[CurrentDigitSetTimeWater];
 8008ed2:	4b82      	ldr	r3, [pc, #520]	@ (80090dc <ButtonsPress+0xf50>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	4b81      	ldr	r3, [pc, #516]	@ (80090e0 <ButtonsPress+0xf54>)
 8008eda:	5c9a      	ldrb	r2, [r3, r2]
 8008edc:	4b81      	ldr	r3, [pc, #516]	@ (80090e4 <ButtonsPress+0xf58>)
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	e05f      	b.n	8008fa2 <ButtonsPress+0xe16>
			}

			else
			if ((current_frame == 8) && (f_StSetDurationWater))
 8008ee2:	4b72      	ldr	r3, [pc, #456]	@ (80090ac <ButtonsPress+0xf20>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d115      	bne.n	8008f16 <ButtonsPress+0xd8a>
 8008eea:	4b7f      	ldr	r3, [pc, #508]	@ (80090e8 <ButtonsPress+0xf5c>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <ButtonsPress+0xd8a>
			{
				if (CurrentDigitSetDurationWater < 3)
 8008ef2:	4b7e      	ldr	r3, [pc, #504]	@ (80090ec <ButtonsPress+0xf60>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d805      	bhi.n	8008f06 <ButtonsPress+0xd7a>
					CurrentDigitSetDurationWater++;
 8008efa:	4b7c      	ldr	r3, [pc, #496]	@ (80090ec <ButtonsPress+0xf60>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	4b7a      	ldr	r3, [pc, #488]	@ (80090ec <ButtonsPress+0xf60>)
 8008f04:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetDurationWater = NumberSetDurationWater[CurrentDigitSetDurationWater];
 8008f06:	4b79      	ldr	r3, [pc, #484]	@ (80090ec <ButtonsPress+0xf60>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4b78      	ldr	r3, [pc, #480]	@ (80090f0 <ButtonsPress+0xf64>)
 8008f0e:	5c9a      	ldrb	r2, [r3, r2]
 8008f10:	4b78      	ldr	r3, [pc, #480]	@ (80090f4 <ButtonsPress+0xf68>)
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	e045      	b.n	8008fa2 <ButtonsPress+0xe16>
			}

			else
			if ((current_frame == 14) && (f_StSetTime))
 8008f16:	4b65      	ldr	r3, [pc, #404]	@ (80090ac <ButtonsPress+0xf20>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b0e      	cmp	r3, #14
 8008f1c:	d115      	bne.n	8008f4a <ButtonsPress+0xdbe>
 8008f1e:	4b76      	ldr	r3, [pc, #472]	@ (80090f8 <ButtonsPress+0xf6c>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <ButtonsPress+0xdbe>
			{
				if (CurrentDigitSetTime < 5)
 8008f26:	4b75      	ldr	r3, [pc, #468]	@ (80090fc <ButtonsPress+0xf70>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d805      	bhi.n	8008f3a <ButtonsPress+0xdae>
					CurrentDigitSetTime++;
 8008f2e:	4b73      	ldr	r3, [pc, #460]	@ (80090fc <ButtonsPress+0xf70>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	4b71      	ldr	r3, [pc, #452]	@ (80090fc <ButtonsPress+0xf70>)
 8008f38:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetTime = NumberSetTime[CurrentDigitSetTime];
 8008f3a:	4b70      	ldr	r3, [pc, #448]	@ (80090fc <ButtonsPress+0xf70>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b6f      	ldr	r3, [pc, #444]	@ (8009100 <ButtonsPress+0xf74>)
 8008f42:	5c9a      	ldrb	r2, [r3, r2]
 8008f44:	4b6f      	ldr	r3, [pc, #444]	@ (8009104 <ButtonsPress+0xf78>)
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e02b      	b.n	8008fa2 <ButtonsPress+0xe16>
			}

			else
			if ((current_frame == 19) && (f_StSetDaysWater))
 8008f4a:	4b58      	ldr	r3, [pc, #352]	@ (80090ac <ButtonsPress+0xf20>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b13      	cmp	r3, #19
 8008f50:	d10e      	bne.n	8008f70 <ButtonsPress+0xde4>
 8008f52:	4b6d      	ldr	r3, [pc, #436]	@ (8009108 <ButtonsPress+0xf7c>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <ButtonsPress+0xde4>
			{
				if (CurrentDigitSetDaysWater < 6)
 8008f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800910c <ButtonsPress+0xf80>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d81f      	bhi.n	8008fa2 <ButtonsPress+0xe16>
					CurrentDigitSetDaysWater++;
 8008f62:	4b6a      	ldr	r3, [pc, #424]	@ (800910c <ButtonsPress+0xf80>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b68      	ldr	r3, [pc, #416]	@ (800910c <ButtonsPress+0xf80>)
 8008f6c:	701a      	strb	r2, [r3, #0]
				if (CurrentDigitSetDaysWater < 6)
 8008f6e:	e018      	b.n	8008fa2 <ButtonsPress+0xe16>
			}

			else
			if ((current_frame == 23) && (f_StSetScreenOff))
 8008f70:	4b4e      	ldr	r3, [pc, #312]	@ (80090ac <ButtonsPress+0xf20>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b17      	cmp	r3, #23
 8008f76:	d114      	bne.n	8008fa2 <ButtonsPress+0xe16>
 8008f78:	4b4d      	ldr	r3, [pc, #308]	@ (80090b0 <ButtonsPress+0xf24>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <ButtonsPress+0xe16>
			{
				if (CurrentDigitSetScreenOff < 3)
 8008f80:	4b4c      	ldr	r3, [pc, #304]	@ (80090b4 <ButtonsPress+0xf28>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d805      	bhi.n	8008f94 <ButtonsPress+0xe08>
					CurrentDigitSetScreenOff++;
 8008f88:	4b4a      	ldr	r3, [pc, #296]	@ (80090b4 <ButtonsPress+0xf28>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	4b48      	ldr	r3, [pc, #288]	@ (80090b4 <ButtonsPress+0xf28>)
 8008f92:	701a      	strb	r2, [r3, #0]

				CurrentNumberSetScreenOff = NumberSetScreenOff[CurrentDigitSetScreenOff];
 8008f94:	4b47      	ldr	r3, [pc, #284]	@ (80090b4 <ButtonsPress+0xf28>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4b47      	ldr	r3, [pc, #284]	@ (80090b8 <ButtonsPress+0xf2c>)
 8008f9c:	5c9a      	ldrb	r2, [r3, r2]
 8008f9e:	4b47      	ldr	r3, [pc, #284]	@ (80090bc <ButtonsPress+0xf30>)
 8008fa0:	701a      	strb	r2, [r3, #0]
		}
	}


	// Если нажата кнопка ок
	if (keys & (1 << KEYB_OK))
 8008fa2:	4b47      	ldr	r3, [pc, #284]	@ (80090c0 <ButtonsPress+0xf34>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0310 	and.w	r3, r3, #16
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f001 80b6 	beq.w	800a11c <ButtonsPress+0x1f90>
	{
		if (!f_BlockButtons)
 8008fb0:	4b44      	ldr	r3, [pc, #272]	@ (80090c4 <ButtonsPress+0xf38>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f041 80b1 	bne.w	800a11c <ButtonsPress+0x1f90>
		{
			switch(current_frame)
 8008fba:	4b3c      	ldr	r3, [pc, #240]	@ (80090ac <ButtonsPress+0xf20>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b21      	cmp	r3, #33	@ 0x21
 8008fc0:	f201 8071 	bhi.w	800a0a6 <ButtonsPress+0x1f1a>
 8008fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fcc <ButtonsPress+0xe40>)
 8008fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fca:	bf00      	nop
 8008fcc:	08009055 	.word	0x08009055
 8008fd0:	0800a0a7 	.word	0x0800a0a7
 8008fd4:	08009129 	.word	0x08009129
 8008fd8:	08009143 	.word	0x08009143
 8008fdc:	0800915d 	.word	0x0800915d
 8008fe0:	080091a7 	.word	0x080091a7
 8008fe4:	080091f1 	.word	0x080091f1
 8008fe8:	0800923b 	.word	0x0800923b
 8008fec:	08009313 	.word	0x08009313
 8008ff0:	0800a0a7 	.word	0x0800a0a7
 8008ff4:	08009471 	.word	0x08009471
 8008ff8:	0800a0a7 	.word	0x0800a0a7
 8008ffc:	0800949b 	.word	0x0800949b
 8009000:	08009501 	.word	0x08009501
 8009004:	080096d9 	.word	0x080096d9
 8009008:	08009809 	.word	0x08009809
 800900c:	08009853 	.word	0x08009853
 8009010:	0800986d 	.word	0x0800986d
 8009014:	08009a03 	.word	0x08009a03
 8009018:	08009a47 	.word	0x08009a47
 800901c:	08009b83 	.word	0x08009b83
 8009020:	08009c35 	.word	0x08009c35
 8009024:	08009d9d 	.word	0x08009d9d
 8009028:	08009dc5 	.word	0x08009dc5
 800902c:	08009ec9 	.word	0x08009ec9
 8009030:	08009ee3 	.word	0x08009ee3
 8009034:	08009efd 	.word	0x08009efd
 8009038:	08009f17 	.word	0x08009f17
 800903c:	08009f31 	.word	0x08009f31
 8009040:	0800a0a7 	.word	0x0800a0a7
 8009044:	08009f55 	.word	0x08009f55
 8009048:	0800a0a7 	.word	0x0800a0a7
 800904c:	08009f73 	.word	0x08009f73
 8009050:	0800a013 	.word	0x0800a013
			{
				// 0. Начальный кадр
				case 0:

						// Текущие параметры
						if (pos_cursor == 0)
 8009054:	4b2e      	ldr	r3, [pc, #184]	@ (8009110 <ButtonsPress+0xf84>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d107      	bne.n	800906c <ButtonsPress+0xee0>
						{
							current_frame = 15;
 800905c:	4b13      	ldr	r3, [pc, #76]	@ (80090ac <ButtonsPress+0xf20>)
 800905e:	220f      	movs	r2, #15
 8009060:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 8009062:	4b2b      	ldr	r3, [pc, #172]	@ (8009110 <ButtonsPress+0xf84>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
								current_frame = 27;
								pos_cursor = 2;
							}
						}

				break;
 8009068:	f001 b81f 	b.w	800a0aa <ButtonsPress+0x1f1e>
						if (pos_cursor == 2)
 800906c:	4b28      	ldr	r3, [pc, #160]	@ (8009110 <ButtonsPress+0xf84>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d107      	bne.n	8009084 <ButtonsPress+0xef8>
							current_frame = 4;
 8009074:	4b0d      	ldr	r3, [pc, #52]	@ (80090ac <ButtonsPress+0xf20>)
 8009076:	2204      	movs	r2, #4
 8009078:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 800907a:	4b25      	ldr	r3, [pc, #148]	@ (8009110 <ButtonsPress+0xf84>)
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
				break;
 8009080:	f001 b813 	b.w	800a0aa <ButtonsPress+0x1f1e>
						if (pos_cursor == 3)
 8009084:	4b22      	ldr	r3, [pc, #136]	@ (8009110 <ButtonsPress+0xf84>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b03      	cmp	r3, #3
 800908a:	f041 800e 	bne.w	800a0aa <ButtonsPress+0x1f1e>
							if (f_StartWatering)
 800908e:	4b21      	ldr	r3, [pc, #132]	@ (8009114 <ButtonsPress+0xf88>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d040      	beq.n	8009118 <ButtonsPress+0xf8c>
								EmergencyTerminationOfWatering();
 8009096:	f7fa fd57 	bl	8003b48 <EmergencyTerminationOfWatering>
								current_frame = 26;
 800909a:	4b04      	ldr	r3, [pc, #16]	@ (80090ac <ButtonsPress+0xf20>)
 800909c:	221a      	movs	r2, #26
 800909e:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80090a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009110 <ButtonsPress+0xf84>)
 80090a2:	2202      	movs	r2, #2
 80090a4:	701a      	strb	r2, [r3, #0]
				break;
 80090a6:	f001 b800 	b.w	800a0aa <ButtonsPress+0x1f1e>
 80090aa:	bf00      	nop
 80090ac:	20000a3c 	.word	0x20000a3c
 80090b0:	20000a2b 	.word	0x20000a2b
 80090b4:	20000a28 	.word	0x20000a28
 80090b8:	20000a24 	.word	0x20000a24
 80090bc:	20000a29 	.word	0x20000a29
 80090c0:	20000ae8 	.word	0x20000ae8
 80090c4:	20000a8d 	.word	0x20000a8d
 80090c8:	200009ed 	.word	0x200009ed
 80090cc:	200009e6 	.word	0x200009e6
 80090d0:	200009d8 	.word	0x200009d8
 80090d4:	200009e7 	.word	0x200009e7
 80090d8:	20000a11 	.word	0x20000a11
 80090dc:	20000a09 	.word	0x20000a09
 80090e0:	200009fc 	.word	0x200009fc
 80090e4:	20000a0a 	.word	0x20000a0a
 80090e8:	20000a12 	.word	0x20000a12
 80090ec:	20000a0b 	.word	0x20000a0b
 80090f0:	20000a04 	.word	0x20000a04
 80090f4:	20000a0c 	.word	0x20000a0c
 80090f8:	200009ef 	.word	0x200009ef
 80090fc:	200009e8 	.word	0x200009e8
 8009100:	200009e0 	.word	0x200009e0
 8009104:	200009e9 	.word	0x200009e9
 8009108:	20000a13 	.word	0x20000a13
 800910c:	20000a0d 	.word	0x20000a0d
 8009110:	20000a3d 	.word	0x20000a3d
 8009114:	20000a20 	.word	0x20000a20
								current_frame = 27;
 8009118:	4b91      	ldr	r3, [pc, #580]	@ (8009360 <ButtonsPress+0x11d4>)
 800911a:	221b      	movs	r2, #27
 800911c:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 800911e:	4b91      	ldr	r3, [pc, #580]	@ (8009364 <ButtonsPress+0x11d8>)
 8009120:	2202      	movs	r2, #2
 8009122:	701a      	strb	r2, [r3, #0]
				break;
 8009124:	f000 bfc1 	b.w	800a0aa <ButtonsPress+0x1f1e>
				break;


				// 2. Продолжение кадра 1
				case 2:
						if (pos_cursor == 3)
 8009128:	4b8e      	ldr	r3, [pc, #568]	@ (8009364 <ButtonsPress+0x11d8>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b03      	cmp	r3, #3
 800912e:	f040 87be 	bne.w	800a0ae <ButtonsPress+0x1f22>
						{
							current_frame = 15;
 8009132:	4b8b      	ldr	r3, [pc, #556]	@ (8009360 <ButtonsPress+0x11d4>)
 8009134:	220f      	movs	r2, #15
 8009136:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 8009138:	4b8a      	ldr	r3, [pc, #552]	@ (8009364 <ButtonsPress+0x11d8>)
 800913a:	2202      	movs	r2, #2
 800913c:	701a      	strb	r2, [r3, #0]
						}
				break;
 800913e:	f000 bfb6 	b.w	800a0ae <ButtonsPress+0x1f22>


				// 3. Уровень воды в резервуаре
				case 3:
						if (pos_cursor == 3)
 8009142:	4b88      	ldr	r3, [pc, #544]	@ (8009364 <ButtonsPress+0x11d8>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b03      	cmp	r3, #3
 8009148:	f040 87b3 	bne.w	800a0b2 <ButtonsPress+0x1f26>
						{
							current_frame = 18;
 800914c:	4b84      	ldr	r3, [pc, #528]	@ (8009360 <ButtonsPress+0x11d4>)
 800914e:	2212      	movs	r2, #18
 8009150:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 8009152:	4b84      	ldr	r3, [pc, #528]	@ (8009364 <ButtonsPress+0x11d8>)
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
						}
				break;
 8009158:	f000 bfab 	b.w	800a0b2 <ButtonsPress+0x1f26>


				// 4. Настройки
				case 4:
						if (pos_cursor == 0)
 800915c:	4b81      	ldr	r3, [pc, #516]	@ (8009364 <ButtonsPress+0x11d8>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d107      	bne.n	8009174 <ButtonsPress+0xfe8>
						{
							current_frame = 6;
 8009164:	4b7e      	ldr	r3, [pc, #504]	@ (8009360 <ButtonsPress+0x11d4>)
 8009166:	2206      	movs	r2, #6
 8009168:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 800916a:	4b7e      	ldr	r3, [pc, #504]	@ (8009364 <ButtonsPress+0x11d8>)
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
						if (pos_cursor == 3)
						{
							current_frame = 23;
							pos_cursor = 3;
						}
				break;
 8009170:	f000 bfa1 	b.w	800a0b6 <ButtonsPress+0x1f2a>
						if (pos_cursor == 2)
 8009174:	4b7b      	ldr	r3, [pc, #492]	@ (8009364 <ButtonsPress+0x11d8>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d107      	bne.n	800918c <ButtonsPress+0x1000>
							current_frame = 7;
 800917c:	4b78      	ldr	r3, [pc, #480]	@ (8009360 <ButtonsPress+0x11d4>)
 800917e:	2207      	movs	r2, #7
 8009180:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 8009182:	4b78      	ldr	r3, [pc, #480]	@ (8009364 <ButtonsPress+0x11d8>)
 8009184:	2202      	movs	r2, #2
 8009186:	701a      	strb	r2, [r3, #0]
				break;
 8009188:	f000 bf95 	b.w	800a0b6 <ButtonsPress+0x1f2a>
						if (pos_cursor == 3)
 800918c:	4b75      	ldr	r3, [pc, #468]	@ (8009364 <ButtonsPress+0x11d8>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b03      	cmp	r3, #3
 8009192:	f040 8790 	bne.w	800a0b6 <ButtonsPress+0x1f2a>
							current_frame = 23;
 8009196:	4b72      	ldr	r3, [pc, #456]	@ (8009360 <ButtonsPress+0x11d4>)
 8009198:	2217      	movs	r2, #23
 800919a:	701a      	strb	r2, [r3, #0]
							pos_cursor = 3;
 800919c:	4b71      	ldr	r3, [pc, #452]	@ (8009364 <ButtonsPress+0x11d8>)
 800919e:	2203      	movs	r2, #3
 80091a0:	701a      	strb	r2, [r3, #0]
				break;
 80091a2:	f000 bf88 	b.w	800a0b6 <ButtonsPress+0x1f2a>

				// 5. Продолжение кадра 4
				case 5:
						// (Отключить/включить) датчик
						// уровня воды
						if (pos_cursor == 0)
 80091a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009364 <ButtonsPress+0x11d8>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <ButtonsPress+0x1032>
						{
							current_frame = 31;
 80091ae:	4b6c      	ldr	r3, [pc, #432]	@ (8009360 <ButtonsPress+0x11d4>)
 80091b0:	221f      	movs	r2, #31
 80091b2:	701a      	strb	r2, [r3, #0]
							pos_cursor = 4;
 80091b4:	4b6b      	ldr	r3, [pc, #428]	@ (8009364 <ButtonsPress+0x11d8>)
 80091b6:	2204      	movs	r2, #4
 80091b8:	701a      	strb	r2, [r3, #0]
						if (pos_cursor == 3)
						{
							current_frame = 0;
							pos_cursor =  2;
						}
				break;
 80091ba:	f000 bf7e 	b.w	800a0ba <ButtonsPress+0x1f2e>
						if (pos_cursor == 2)
 80091be:	4b69      	ldr	r3, [pc, #420]	@ (8009364 <ButtonsPress+0x11d8>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d107      	bne.n	80091d6 <ButtonsPress+0x104a>
							current_frame = 20;
 80091c6:	4b66      	ldr	r3, [pc, #408]	@ (8009360 <ButtonsPress+0x11d4>)
 80091c8:	2214      	movs	r2, #20
 80091ca:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 80091cc:	4b65      	ldr	r3, [pc, #404]	@ (8009364 <ButtonsPress+0x11d8>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
				break;
 80091d2:	f000 bf72 	b.w	800a0ba <ButtonsPress+0x1f2e>
						if (pos_cursor == 3)
 80091d6:	4b63      	ldr	r3, [pc, #396]	@ (8009364 <ButtonsPress+0x11d8>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b03      	cmp	r3, #3
 80091dc:	f040 876d 	bne.w	800a0ba <ButtonsPress+0x1f2e>
							current_frame = 0;
 80091e0:	4b5f      	ldr	r3, [pc, #380]	@ (8009360 <ButtonsPress+0x11d4>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
							pos_cursor =  2;
 80091e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009364 <ButtonsPress+0x11d8>)
 80091e8:	2202      	movs	r2, #2
 80091ea:	701a      	strb	r2, [r3, #0]
				break;
 80091ec:	f000 bf65 	b.w	800a0ba <ButtonsPress+0x1f2e>


				// 6. Настройка текущего времени
				case 6:
						if (pos_cursor == 0)
 80091f0:	4b5c      	ldr	r3, [pc, #368]	@ (8009364 <ButtonsPress+0x11d8>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d107      	bne.n	8009208 <ButtonsPress+0x107c>
						{
							current_frame = 12;
 80091f8:	4b59      	ldr	r3, [pc, #356]	@ (8009360 <ButtonsPress+0x11d4>)
 80091fa:	220c      	movs	r2, #12
 80091fc:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 80091fe:	4b59      	ldr	r3, [pc, #356]	@ (8009364 <ButtonsPress+0x11d8>)
 8009200:	2202      	movs	r2, #2
 8009202:	701a      	strb	r2, [r3, #0]
						if (pos_cursor == 2)
						{
							current_frame = 4;
							pos_cursor =  0;
						}
				break;
 8009204:	f000 bf5b 	b.w	800a0be <ButtonsPress+0x1f32>
						if (pos_cursor == 1)
 8009208:	4b56      	ldr	r3, [pc, #344]	@ (8009364 <ButtonsPress+0x11d8>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d107      	bne.n	8009220 <ButtonsPress+0x1094>
							current_frame = 14;
 8009210:	4b53      	ldr	r3, [pc, #332]	@ (8009360 <ButtonsPress+0x11d4>)
 8009212:	220e      	movs	r2, #14
 8009214:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 8009216:	4b53      	ldr	r3, [pc, #332]	@ (8009364 <ButtonsPress+0x11d8>)
 8009218:	2202      	movs	r2, #2
 800921a:	701a      	strb	r2, [r3, #0]
				break;
 800921c:	f000 bf4f 	b.w	800a0be <ButtonsPress+0x1f32>
						if (pos_cursor == 2)
 8009220:	4b50      	ldr	r3, [pc, #320]	@ (8009364 <ButtonsPress+0x11d8>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b02      	cmp	r3, #2
 8009226:	f040 874a 	bne.w	800a0be <ButtonsPress+0x1f32>
							current_frame = 4;
 800922a:	4b4d      	ldr	r3, [pc, #308]	@ (8009360 <ButtonsPress+0x11d4>)
 800922c:	2204      	movs	r2, #4
 800922e:	701a      	strb	r2, [r3, #0]
							pos_cursor =  0;
 8009230:	4b4c      	ldr	r3, [pc, #304]	@ (8009364 <ButtonsPress+0x11d8>)
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
				break;
 8009236:	f000 bf42 	b.w	800a0be <ButtonsPress+0x1f32>


				// 7. Настройка полива
				case 7:
						// Установка времени
						if (pos_cursor == 2)
 800923a:	4b4a      	ldr	r3, [pc, #296]	@ (8009364 <ButtonsPress+0x11d8>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d121      	bne.n	8009286 <ButtonsPress+0x10fa>
						{
							cnt_SetTimeWater++;
 8009242:	4b49      	ldr	r3, [pc, #292]	@ (8009368 <ButtonsPress+0x11dc>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b47      	ldr	r3, [pc, #284]	@ (8009368 <ButtonsPress+0x11dc>)
 800924c:	701a      	strb	r2, [r3, #0]

							if (cnt_SetTimeWater == 1)
 800924e:	4b46      	ldr	r3, [pc, #280]	@ (8009368 <ButtonsPress+0x11dc>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d104      	bne.n	8009260 <ButtonsPress+0x10d4>
							{
								f_StSetTimeWater = 1;
 8009256:	4b45      	ldr	r3, [pc, #276]	@ (800936c <ButtonsPress+0x11e0>)
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
									current_frame = 17;
									pos_cursor = 3;
								}
							}
						}
				break;
 800925c:	f000 bf31 	b.w	800a0c2 <ButtonsPress+0x1f36>
							if (cnt_SetTimeWater == 2)
 8009260:	4b41      	ldr	r3, [pc, #260]	@ (8009368 <ButtonsPress+0x11dc>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b02      	cmp	r3, #2
 8009266:	f040 872c 	bne.w	800a0c2 <ButtonsPress+0x1f36>
								f_StSetTimeWater = 0;
 800926a:	4b40      	ldr	r3, [pc, #256]	@ (800936c <ButtonsPress+0x11e0>)
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
								cnt_SetTimeWater = 0;
 8009270:	4b3d      	ldr	r3, [pc, #244]	@ (8009368 <ButtonsPress+0x11dc>)
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
								CurrentDigitSetTimeWater = 0;
 8009276:	4b3e      	ldr	r3, [pc, #248]	@ (8009370 <ButtonsPress+0x11e4>)
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
								CurrentNumberSetTimeWater= 0;
 800927c:	4b3d      	ldr	r3, [pc, #244]	@ (8009374 <ButtonsPress+0x11e8>)
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
				break;
 8009282:	f000 bf1e 	b.w	800a0c2 <ButtonsPress+0x1f36>
						if (pos_cursor == 3)
 8009286:	4b37      	ldr	r3, [pc, #220]	@ (8009364 <ButtonsPress+0x11d8>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b03      	cmp	r3, #3
 800928c:	f040 8719 	bne.w	800a0c2 <ButtonsPress+0x1f36>
							if (f_TimeIsSetWater)
 8009290:	4b39      	ldr	r3, [pc, #228]	@ (8009378 <ButtonsPress+0x11ec>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 8714 	beq.w	800a0c2 <ButtonsPress+0x1f36>
								if ((WateringParamsSet.hour >= 0) && (WateringParamsSet.hour <= 23) &&
 800929a:	4b38      	ldr	r3, [pc, #224]	@ (800937c <ButtonsPress+0x11f0>)
 800929c:	789b      	ldrb	r3, [r3, #2]
 800929e:	2b17      	cmp	r3, #23
 80092a0:	d80f      	bhi.n	80092c2 <ButtonsPress+0x1136>
									(WateringParamsSet.minutes >= 0) && (WateringParamsSet.minutes <= 59) &&
 80092a2:	4b36      	ldr	r3, [pc, #216]	@ (800937c <ButtonsPress+0x11f0>)
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80092a8:	d80b      	bhi.n	80092c2 <ButtonsPress+0x1136>
									(WateringParamsSet.seconds >= 0) && (WateringParamsSet.seconds <= 59))
 80092aa:	4b34      	ldr	r3, [pc, #208]	@ (800937c <ButtonsPress+0x11f0>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80092b0:	d807      	bhi.n	80092c2 <ButtonsPress+0x1136>
									current_frame = 8;
 80092b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009360 <ButtonsPress+0x11d4>)
 80092b4:	2208      	movs	r2, #8
 80092b6:	701a      	strb	r2, [r3, #0]
									pos_cursor = 2;
 80092b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009364 <ButtonsPress+0x11d8>)
 80092ba:	2202      	movs	r2, #2
 80092bc:	701a      	strb	r2, [r3, #0]
				break;
 80092be:	f000 bf00 	b.w	800a0c2 <ButtonsPress+0x1f36>
									set_fails = 3;
 80092c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009380 <ButtonsPress+0x11f4>)
 80092c4:	2203      	movs	r2, #3
 80092c6:	701a      	strb	r2, [r3, #0]
									f_StSetTimeWater = 0;
 80092c8:	4b28      	ldr	r3, [pc, #160]	@ (800936c <ButtonsPress+0x11e0>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
									cnt_SetTimeWater = 0;
 80092ce:	4b26      	ldr	r3, [pc, #152]	@ (8009368 <ButtonsPress+0x11dc>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
									CurrentDigitSetTimeWater = 0;
 80092d4:	4b26      	ldr	r3, [pc, #152]	@ (8009370 <ButtonsPress+0x11e4>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
									CurrentNumberSetTimeWater= 0;
 80092da:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <ButtonsPress+0x11e8>)
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
									f_TimeIsSetWater = 0;
 80092e0:	4b25      	ldr	r3, [pc, #148]	@ (8009378 <ButtonsPress+0x11ec>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
									memset(ptr_WateringParamsSet, 0, 3);
 80092e6:	4b27      	ldr	r3, [pc, #156]	@ (8009384 <ButtonsPress+0x11f8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2203      	movs	r2, #3
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00a fafe 	bl	80138f0 <memset>
									memset(ptr_NumberSetTimeWater, 0, sizeof(NumberSetTimeWater)/sizeof(uint8_t));
 80092f4:	4b24      	ldr	r3, [pc, #144]	@ (8009388 <ButtonsPress+0x11fc>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2206      	movs	r2, #6
 80092fa:	2100      	movs	r1, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	f00a faf7 	bl	80138f0 <memset>
									current_frame = 17;
 8009302:	4b17      	ldr	r3, [pc, #92]	@ (8009360 <ButtonsPress+0x11d4>)
 8009304:	2211      	movs	r2, #17
 8009306:	701a      	strb	r2, [r3, #0]
									pos_cursor = 3;
 8009308:	4b16      	ldr	r3, [pc, #88]	@ (8009364 <ButtonsPress+0x11d8>)
 800930a:	2203      	movs	r2, #3
 800930c:	701a      	strb	r2, [r3, #0]
				break;
 800930e:	f000 bed8 	b.w	800a0c2 <ButtonsPress+0x1f36>

				// 8. Продолжение кадра 7
				case 8:

					// Установка продолжительности полива
					if (pos_cursor == 2)
 8009312:	4b14      	ldr	r3, [pc, #80]	@ (8009364 <ButtonsPress+0x11d8>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d140      	bne.n	800939c <ButtonsPress+0x1210>
					{
						cnt_SetDurationWater++;
 800931a:	4b1c      	ldr	r3, [pc, #112]	@ (800938c <ButtonsPress+0x1200>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b1a      	ldr	r3, [pc, #104]	@ (800938c <ButtonsPress+0x1200>)
 8009324:	701a      	strb	r2, [r3, #0]

						if (cnt_SetDurationWater == 1)
 8009326:	4b19      	ldr	r3, [pc, #100]	@ (800938c <ButtonsPress+0x1200>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d104      	bne.n	8009338 <ButtonsPress+0x11ac>
						{
							f_StSetDurationWater = 1;
 800932e:	4b18      	ldr	r3, [pc, #96]	@ (8009390 <ButtonsPress+0x1204>)
 8009330:	2201      	movs	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
							}
						}
					}

				break;
 8009334:	f000 bec7 	b.w	800a0c6 <ButtonsPress+0x1f3a>
						if (cnt_SetDurationWater == 2)
 8009338:	4b14      	ldr	r3, [pc, #80]	@ (800938c <ButtonsPress+0x1200>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b02      	cmp	r3, #2
 800933e:	f040 86c2 	bne.w	800a0c6 <ButtonsPress+0x1f3a>
							f_StSetDurationWater = 0;
 8009342:	4b13      	ldr	r3, [pc, #76]	@ (8009390 <ButtonsPress+0x1204>)
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
							cnt_SetDurationWater = 0;
 8009348:	4b10      	ldr	r3, [pc, #64]	@ (800938c <ButtonsPress+0x1200>)
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetDurationWater = 0;
 800934e:	4b11      	ldr	r3, [pc, #68]	@ (8009394 <ButtonsPress+0x1208>)
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
							CurrentNumberSetDurationWater= 0;
 8009354:	4b10      	ldr	r3, [pc, #64]	@ (8009398 <ButtonsPress+0x120c>)
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
				break;
 800935a:	f000 beb4 	b.w	800a0c6 <ButtonsPress+0x1f3a>
 800935e:	bf00      	nop
 8009360:	20000a3c 	.word	0x20000a3c
 8009364:	20000a3d 	.word	0x20000a3d
 8009368:	20000a0e 	.word	0x20000a0e
 800936c:	20000a11 	.word	0x20000a11
 8009370:	20000a09 	.word	0x20000a09
 8009374:	20000a0a 	.word	0x20000a0a
 8009378:	20000a16 	.word	0x20000a16
 800937c:	20000a68 	.word	0x20000a68
 8009380:	20000ae3 	.word	0x20000ae3
 8009384:	20000124 	.word	0x20000124
 8009388:	20000010 	.word	0x20000010
 800938c:	20000a0f 	.word	0x20000a0f
 8009390:	20000a12 	.word	0x20000a12
 8009394:	20000a0b 	.word	0x20000a0b
 8009398:	20000a0c 	.word	0x20000a0c
					if (pos_cursor == 3)
 800939c:	4b9e      	ldr	r3, [pc, #632]	@ (8009618 <ButtonsPress+0x148c>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	f040 8690 	bne.w	800a0c6 <ButtonsPress+0x1f3a>
						if (f_TimeIsSetDurationWater)
 80093a6:	4b9d      	ldr	r3, [pc, #628]	@ (800961c <ButtonsPress+0x1490>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 868b 	beq.w	800a0c6 <ButtonsPress+0x1f3a>
							if ((WateringParamsSet.minutes_watering == 0) &&
 80093b0:	4b9b      	ldr	r3, [pc, #620]	@ (8009620 <ButtonsPress+0x1494>)
 80093b2:	791b      	ldrb	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d149      	bne.n	800944c <ButtonsPress+0x12c0>
								(WateringParamsSet.seconds_watering == 0))
 80093b8:	4b99      	ldr	r3, [pc, #612]	@ (8009620 <ButtonsPress+0x1494>)
 80093ba:	78db      	ldrb	r3, [r3, #3]
							if ((WateringParamsSet.minutes_watering == 0) &&
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d145      	bne.n	800944c <ButtonsPress+0x12c0>
								set_fails = 4;
 80093c0:	4b98      	ldr	r3, [pc, #608]	@ (8009624 <ButtonsPress+0x1498>)
 80093c2:	2204      	movs	r2, #4
 80093c4:	701a      	strb	r2, [r3, #0]
								f_StSetTimeWater = 0;
 80093c6:	4b98      	ldr	r3, [pc, #608]	@ (8009628 <ButtonsPress+0x149c>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]
								cnt_SetTimeWater = 0;
 80093cc:	4b97      	ldr	r3, [pc, #604]	@ (800962c <ButtonsPress+0x14a0>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	701a      	strb	r2, [r3, #0]
								CurrentDigitSetTimeWater = 0;
 80093d2:	4b97      	ldr	r3, [pc, #604]	@ (8009630 <ButtonsPress+0x14a4>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
								CurrentNumberSetTimeWater= 0;
 80093d8:	4b96      	ldr	r3, [pc, #600]	@ (8009634 <ButtonsPress+0x14a8>)
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
								f_TimeIsSetWater = 0;
 80093de:	4b96      	ldr	r3, [pc, #600]	@ (8009638 <ButtonsPress+0x14ac>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	701a      	strb	r2, [r3, #0]
								memset(ptr_WateringParamsSet, 0, 3);
 80093e4:	4b95      	ldr	r3, [pc, #596]	@ (800963c <ButtonsPress+0x14b0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2203      	movs	r2, #3
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f00a fa7f 	bl	80138f0 <memset>
								memset(ptr_NumberSetTimeWater, 0, sizeof(NumberSetTimeWater)/sizeof(uint8_t));
 80093f2:	4b93      	ldr	r3, [pc, #588]	@ (8009640 <ButtonsPress+0x14b4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2206      	movs	r2, #6
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f00a fa78 	bl	80138f0 <memset>
								f_StSetDurationWater = 0;
 8009400:	4b90      	ldr	r3, [pc, #576]	@ (8009644 <ButtonsPress+0x14b8>)
 8009402:	2200      	movs	r2, #0
 8009404:	701a      	strb	r2, [r3, #0]
								cnt_SetDurationWater = 0;
 8009406:	4b90      	ldr	r3, [pc, #576]	@ (8009648 <ButtonsPress+0x14bc>)
 8009408:	2200      	movs	r2, #0
 800940a:	701a      	strb	r2, [r3, #0]
								CurrentDigitSetDurationWater = 0;
 800940c:	4b8f      	ldr	r3, [pc, #572]	@ (800964c <ButtonsPress+0x14c0>)
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
								CurrentNumberSetDurationWater= 0;
 8009412:	4b8f      	ldr	r3, [pc, #572]	@ (8009650 <ButtonsPress+0x14c4>)
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]
								f_TimeIsSetDurationWater = 0;
 8009418:	4b80      	ldr	r3, [pc, #512]	@ (800961c <ButtonsPress+0x1490>)
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
								memset(ptr_WateringParamsSet + 3, 0, 2);
 800941e:	4b87      	ldr	r3, [pc, #540]	@ (800963c <ButtonsPress+0x14b0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3303      	adds	r3, #3
 8009424:	2202      	movs	r2, #2
 8009426:	2100      	movs	r1, #0
 8009428:	4618      	mov	r0, r3
 800942a:	f00a fa61 	bl	80138f0 <memset>
								memset(ptr_NumberSetDurationWater, 0, sizeof(NumberSetDurationWater)/sizeof(uint8_t));
 800942e:	4b89      	ldr	r3, [pc, #548]	@ (8009654 <ButtonsPress+0x14c8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2204      	movs	r2, #4
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f00a fa5a 	bl	80138f0 <memset>
								current_frame = 17;
 800943c:	4b86      	ldr	r3, [pc, #536]	@ (8009658 <ButtonsPress+0x14cc>)
 800943e:	2211      	movs	r2, #17
 8009440:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 8009442:	4b75      	ldr	r3, [pc, #468]	@ (8009618 <ButtonsPress+0x148c>)
 8009444:	2203      	movs	r2, #3
 8009446:	701a      	strb	r2, [r3, #0]
				break;
 8009448:	f000 be3d 	b.w	800a0c6 <ButtonsPress+0x1f3a>
							if ((WateringParamsSet.minutes_watering >= 0) && (WateringParamsSet.minutes_watering <= 10) &&
 800944c:	4b74      	ldr	r3, [pc, #464]	@ (8009620 <ButtonsPress+0x1494>)
 800944e:	791b      	ldrb	r3, [r3, #4]
 8009450:	2b0a      	cmp	r3, #10
 8009452:	f200 8638 	bhi.w	800a0c6 <ButtonsPress+0x1f3a>
								(WateringParamsSet.seconds_watering >= 0) && (WateringParamsSet.seconds_watering <= 59))
 8009456:	4b72      	ldr	r3, [pc, #456]	@ (8009620 <ButtonsPress+0x1494>)
 8009458:	78db      	ldrb	r3, [r3, #3]
 800945a:	2b3b      	cmp	r3, #59	@ 0x3b
 800945c:	f200 8633 	bhi.w	800a0c6 <ButtonsPress+0x1f3a>
								current_frame = 19;
 8009460:	4b7d      	ldr	r3, [pc, #500]	@ (8009658 <ButtonsPress+0x14cc>)
 8009462:	2213      	movs	r2, #19
 8009464:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 8009466:	4b6c      	ldr	r3, [pc, #432]	@ (8009618 <ButtonsPress+0x148c>)
 8009468:	2203      	movs	r2, #3
 800946a:	701a      	strb	r2, [r3, #0]
				break;
 800946c:	f000 be2b 	b.w	800a0c6 <ButtonsPress+0x1f3a>

				// 10. Кадр сохранения данных
				case 10:

					// Ок
					if (pos_cursor == 2)
 8009470:	4b69      	ldr	r3, [pc, #420]	@ (8009618 <ButtonsPress+0x148c>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b02      	cmp	r3, #2
 8009476:	f040 8628 	bne.w	800a0ca <ButtonsPress+0x1f3e>
					{
						// Переход на кадр, который вызвал переход на кадр 10
						current_frame = previous_frame_set;
 800947a:	4b78      	ldr	r3, [pc, #480]	@ (800965c <ButtonsPress+0x14d0>)
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	4b76      	ldr	r3, [pc, #472]	@ (8009658 <ButtonsPress+0x14cc>)
 8009480:	701a      	strb	r2, [r3, #0]
						pos_cursor = previous_pos_cursor_set;
 8009482:	4b77      	ldr	r3, [pc, #476]	@ (8009660 <ButtonsPress+0x14d4>)
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	4b64      	ldr	r3, [pc, #400]	@ (8009618 <ButtonsPress+0x148c>)
 8009488:	701a      	strb	r2, [r3, #0]

						// Сброс прошлого кадра
						previous_frame_set = 0;
 800948a:	4b74      	ldr	r3, [pc, #464]	@ (800965c <ButtonsPress+0x14d0>)
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_set = 0;
 8009490:	4b73      	ldr	r3, [pc, #460]	@ (8009660 <ButtonsPress+0x14d4>)
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
					}

				break;
 8009496:	f000 be18 	b.w	800a0ca <ButtonsPress+0x1f3e>

				// 12. Кадр установки текущей даты
				case 12:

						// Переход к установке даты
						if (pos_cursor == 2)
 800949a:	4b5f      	ldr	r3, [pc, #380]	@ (8009618 <ButtonsPress+0x148c>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d121      	bne.n	80094e6 <ButtonsPress+0x135a>
						{
							cnt_SetDate++;
 80094a2:	4b70      	ldr	r3, [pc, #448]	@ (8009664 <ButtonsPress+0x14d8>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	3301      	adds	r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	4b6e      	ldr	r3, [pc, #440]	@ (8009664 <ButtonsPress+0x14d8>)
 80094ac:	701a      	strb	r2, [r3, #0]

							// Начало настройки даты
							if (cnt_SetDate == 1)
 80094ae:	4b6d      	ldr	r3, [pc, #436]	@ (8009664 <ButtonsPress+0x14d8>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d104      	bne.n	80094c0 <ButtonsPress+0x1334>
							{
								f_StSetDate = 1;
 80094b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009668 <ButtonsPress+0x14dc>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	701a      	strb	r2, [r3, #0]
						{
							current_frame = 13;
							pos_cursor = 2;
						}

				break;
 80094bc:	f000 be07 	b.w	800a0ce <ButtonsPress+0x1f42>
							if (cnt_SetDate == 2)
 80094c0:	4b68      	ldr	r3, [pc, #416]	@ (8009664 <ButtonsPress+0x14d8>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	f040 8602 	bne.w	800a0ce <ButtonsPress+0x1f42>
								f_StSetDate = 0;
 80094ca:	4b67      	ldr	r3, [pc, #412]	@ (8009668 <ButtonsPress+0x14dc>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
								cnt_SetDate = 0;
 80094d0:	4b64      	ldr	r3, [pc, #400]	@ (8009664 <ButtonsPress+0x14d8>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
								CurrentDigitSetDate = 0;
 80094d6:	4b65      	ldr	r3, [pc, #404]	@ (800966c <ButtonsPress+0x14e0>)
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
								CurrentNumberSetDate= 0;
 80094dc:	4b64      	ldr	r3, [pc, #400]	@ (8009670 <ButtonsPress+0x14e4>)
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
				break;
 80094e2:	f000 bdf4 	b.w	800a0ce <ButtonsPress+0x1f42>
						if (pos_cursor == 3)
 80094e6:	4b4c      	ldr	r3, [pc, #304]	@ (8009618 <ButtonsPress+0x148c>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	f040 85ef 	bne.w	800a0ce <ButtonsPress+0x1f42>
							current_frame = 13;
 80094f0:	4b59      	ldr	r3, [pc, #356]	@ (8009658 <ButtonsPress+0x14cc>)
 80094f2:	220d      	movs	r2, #13
 80094f4:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 80094f6:	4b48      	ldr	r3, [pc, #288]	@ (8009618 <ButtonsPress+0x148c>)
 80094f8:	2202      	movs	r2, #2
 80094fa:	701a      	strb	r2, [r3, #0]
				break;
 80094fc:	f000 bde7 	b.w	800a0ce <ButtonsPress+0x1f42>

				// 13. Кадр установки дня недели
				case 13:

						// Установка дня недели
						if (pos_cursor == 2)
 8009500:	4b45      	ldr	r3, [pc, #276]	@ (8009618 <ButtonsPress+0x148c>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d11e      	bne.n	8009546 <ButtonsPress+0x13ba>
						{
							cnt_SetDayOfWeek++;
 8009508:	4b5a      	ldr	r3, [pc, #360]	@ (8009674 <ButtonsPress+0x14e8>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	4b58      	ldr	r3, [pc, #352]	@ (8009674 <ButtonsPress+0x14e8>)
 8009512:	701a      	strb	r2, [r3, #0]

							// Начало настройки дня недели
							if (cnt_SetDayOfWeek == 1)
 8009514:	4b57      	ldr	r3, [pc, #348]	@ (8009674 <ButtonsPress+0x14e8>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d104      	bne.n	8009526 <ButtonsPress+0x139a>
							{
								f_StSetDayOfWeek = 1;
 800951c:	4b56      	ldr	r3, [pc, #344]	@ (8009678 <ButtonsPress+0x14ec>)
 800951e:	2201      	movs	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
							// Переход на кадр 6
							current_frame = 6;
							pos_cursor = 0;
						}

				break;
 8009522:	f000 bdd6 	b.w	800a0d2 <ButtonsPress+0x1f46>
							if (cnt_SetDayOfWeek == 2)
 8009526:	4b53      	ldr	r3, [pc, #332]	@ (8009674 <ButtonsPress+0x14e8>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b02      	cmp	r3, #2
 800952c:	f040 85d1 	bne.w	800a0d2 <ButtonsPress+0x1f46>
								f_StSetDayOfWeek = 0;
 8009530:	4b51      	ldr	r3, [pc, #324]	@ (8009678 <ButtonsPress+0x14ec>)
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
								cnt_SetDayOfWeek = 0;
 8009536:	4b4f      	ldr	r3, [pc, #316]	@ (8009674 <ButtonsPress+0x14e8>)
 8009538:	2200      	movs	r2, #0
 800953a:	701a      	strb	r2, [r3, #0]
								NumberSetDayOfWeek = 1;
 800953c:	4b4f      	ldr	r3, [pc, #316]	@ (800967c <ButtonsPress+0x14f0>)
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
				break;
 8009542:	f000 bdc6 	b.w	800a0d2 <ButtonsPress+0x1f46>
						if (pos_cursor == 3)
 8009546:	4b34      	ldr	r3, [pc, #208]	@ (8009618 <ButtonsPress+0x148c>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b03      	cmp	r3, #3
 800954c:	f040 80a2 	bne.w	8009694 <ButtonsPress+0x1508>
							if (f_DateIsSet && f_DayOfWeekIsSet)
 8009550:	4b4b      	ldr	r3, [pc, #300]	@ (8009680 <ButtonsPress+0x14f4>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 85bc 	beq.w	800a0d2 <ButtonsPress+0x1f46>
 800955a:	4b4a      	ldr	r3, [pc, #296]	@ (8009684 <ButtonsPress+0x14f8>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 85b7 	beq.w	800a0d2 <ButtonsPress+0x1f46>
								if ((timeSetDate.dayofweek >= 1) && (timeSetDate.dayofweek <= 7) &&
 8009564:	4b48      	ldr	r3, [pc, #288]	@ (8009688 <ButtonsPress+0x14fc>)
 8009566:	78db      	ldrb	r3, [r3, #3]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d02b      	beq.n	80095c4 <ButtonsPress+0x1438>
 800956c:	4b46      	ldr	r3, [pc, #280]	@ (8009688 <ButtonsPress+0x14fc>)
 800956e:	78db      	ldrb	r3, [r3, #3]
 8009570:	2b07      	cmp	r3, #7
 8009572:	d827      	bhi.n	80095c4 <ButtonsPress+0x1438>
									(timeSetDate.dayofmonth >= 1) && (timeSetDate.dayofmonth <= 31) &&
 8009574:	4b44      	ldr	r3, [pc, #272]	@ (8009688 <ButtonsPress+0x14fc>)
 8009576:	791b      	ldrb	r3, [r3, #4]
								if ((timeSetDate.dayofweek >= 1) && (timeSetDate.dayofweek <= 7) &&
 8009578:	2b00      	cmp	r3, #0
 800957a:	d023      	beq.n	80095c4 <ButtonsPress+0x1438>
									(timeSetDate.dayofmonth >= 1) && (timeSetDate.dayofmonth <= 31) &&
 800957c:	4b42      	ldr	r3, [pc, #264]	@ (8009688 <ButtonsPress+0x14fc>)
 800957e:	791b      	ldrb	r3, [r3, #4]
 8009580:	2b1f      	cmp	r3, #31
 8009582:	d81f      	bhi.n	80095c4 <ButtonsPress+0x1438>
									(timeSetDate.month >= 1) && (timeSetDate.month <= 12))
 8009584:	4b40      	ldr	r3, [pc, #256]	@ (8009688 <ButtonsPress+0x14fc>)
 8009586:	795b      	ldrb	r3, [r3, #5]
									(timeSetDate.dayofmonth >= 1) && (timeSetDate.dayofmonth <= 31) &&
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01b      	beq.n	80095c4 <ButtonsPress+0x1438>
									(timeSetDate.month >= 1) && (timeSetDate.month <= 12))
 800958c:	4b3e      	ldr	r3, [pc, #248]	@ (8009688 <ButtonsPress+0x14fc>)
 800958e:	795b      	ldrb	r3, [r3, #5]
 8009590:	2b0c      	cmp	r3, #12
 8009592:	d817      	bhi.n	80095c4 <ButtonsPress+0x1438>
									SetDateDS(timeSetDate.dayofweek, timeSetDate.dayofmonth,
 8009594:	4b3c      	ldr	r3, [pc, #240]	@ (8009688 <ButtonsPress+0x14fc>)
 8009596:	78d8      	ldrb	r0, [r3, #3]
 8009598:	4b3b      	ldr	r3, [pc, #236]	@ (8009688 <ButtonsPress+0x14fc>)
 800959a:	7919      	ldrb	r1, [r3, #4]
 800959c:	4b3a      	ldr	r3, [pc, #232]	@ (8009688 <ButtonsPress+0x14fc>)
 800959e:	795a      	ldrb	r2, [r3, #5]
 80095a0:	4b39      	ldr	r3, [pc, #228]	@ (8009688 <ButtonsPress+0x14fc>)
 80095a2:	799b      	ldrb	r3, [r3, #6]
 80095a4:	f7f8 f85e 	bl	8001664 <SetDateDS>
									previous_frame_set = 13;
 80095a8:	4b2c      	ldr	r3, [pc, #176]	@ (800965c <ButtonsPress+0x14d0>)
 80095aa:	220d      	movs	r2, #13
 80095ac:	701a      	strb	r2, [r3, #0]
									previous_pos_cursor_set = 3;
 80095ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009660 <ButtonsPress+0x14d4>)
 80095b0:	2203      	movs	r2, #3
 80095b2:	701a      	strb	r2, [r3, #0]
									current_frame = 10;
 80095b4:	4b28      	ldr	r3, [pc, #160]	@ (8009658 <ButtonsPress+0x14cc>)
 80095b6:	220a      	movs	r2, #10
 80095b8:	701a      	strb	r2, [r3, #0]
									pos_cursor = 2;
 80095ba:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <ButtonsPress+0x148c>)
 80095bc:	2202      	movs	r2, #2
 80095be:	701a      	strb	r2, [r3, #0]
				break;
 80095c0:	f000 bd87 	b.w	800a0d2 <ButtonsPress+0x1f46>
									set_fails = 1;
 80095c4:	4b17      	ldr	r3, [pc, #92]	@ (8009624 <ButtonsPress+0x1498>)
 80095c6:	2201      	movs	r2, #1
 80095c8:	701a      	strb	r2, [r3, #0]
									f_StSetDayOfWeek = 0;
 80095ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009678 <ButtonsPress+0x14ec>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
									cnt_SetDayOfWeek = 0;
 80095d0:	4b28      	ldr	r3, [pc, #160]	@ (8009674 <ButtonsPress+0x14e8>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
									NumberSetDayOfWeek = 1;
 80095d6:	4b29      	ldr	r3, [pc, #164]	@ (800967c <ButtonsPress+0x14f0>)
 80095d8:	2201      	movs	r2, #1
 80095da:	701a      	strb	r2, [r3, #0]
									f_DateIsSet = 0;
 80095dc:	4b28      	ldr	r3, [pc, #160]	@ (8009680 <ButtonsPress+0x14f4>)
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
									f_DayOfWeekIsSet = 0;
 80095e2:	4b28      	ldr	r3, [pc, #160]	@ (8009684 <ButtonsPress+0x14f8>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
									memset(ptr_timeSetDate + 3, 0, 4);
 80095e8:	4b28      	ldr	r3, [pc, #160]	@ (800968c <ButtonsPress+0x1500>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3303      	adds	r3, #3
 80095ee:	2204      	movs	r2, #4
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f00a f97c 	bl	80138f0 <memset>
									memset(ptr_NumberSetDate, 0, sizeof(NumberSetDate)/sizeof(uint8_t));
 80095f8:	4b25      	ldr	r3, [pc, #148]	@ (8009690 <ButtonsPress+0x1504>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2206      	movs	r2, #6
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f00a f975 	bl	80138f0 <memset>
									current_frame = 17;
 8009606:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <ButtonsPress+0x14cc>)
 8009608:	2211      	movs	r2, #17
 800960a:	701a      	strb	r2, [r3, #0]
									pos_cursor = 3;
 800960c:	4b02      	ldr	r3, [pc, #8]	@ (8009618 <ButtonsPress+0x148c>)
 800960e:	2203      	movs	r2, #3
 8009610:	701a      	strb	r2, [r3, #0]
				break;
 8009612:	f000 bd5e 	b.w	800a0d2 <ButtonsPress+0x1f46>
 8009616:	bf00      	nop
 8009618:	20000a3d 	.word	0x20000a3d
 800961c:	20000a19 	.word	0x20000a19
 8009620:	20000a68 	.word	0x20000a68
 8009624:	20000ae3 	.word	0x20000ae3
 8009628:	20000a11 	.word	0x20000a11
 800962c:	20000a0e 	.word	0x20000a0e
 8009630:	20000a09 	.word	0x20000a09
 8009634:	20000a0a 	.word	0x20000a0a
 8009638:	20000a16 	.word	0x20000a16
 800963c:	20000124 	.word	0x20000124
 8009640:	20000010 	.word	0x20000010
 8009644:	20000a12 	.word	0x20000a12
 8009648:	20000a0f 	.word	0x20000a0f
 800964c:	20000a0b 	.word	0x20000a0b
 8009650:	20000a0c 	.word	0x20000a0c
 8009654:	20000014 	.word	0x20000014
 8009658:	20000a3c 	.word	0x20000a3c
 800965c:	20000a37 	.word	0x20000a37
 8009660:	20000a38 	.word	0x20000a38
 8009664:	200009ea 	.word	0x200009ea
 8009668:	200009ed 	.word	0x200009ed
 800966c:	200009e6 	.word	0x200009e6
 8009670:	200009e7 	.word	0x200009e7
 8009674:	200009eb 	.word	0x200009eb
 8009678:	200009ee 	.word	0x200009ee
 800967c:	2000000c 	.word	0x2000000c
 8009680:	200009f2 	.word	0x200009f2
 8009684:	200009f5 	.word	0x200009f5
 8009688:	20000a54 	.word	0x20000a54
 800968c:	2000011c 	.word	0x2000011c
 8009690:	20000004 	.word	0x20000004
						if (pos_cursor == 4)
 8009694:	4bb0      	ldr	r3, [pc, #704]	@ (8009958 <ButtonsPress+0x17cc>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b04      	cmp	r3, #4
 800969a:	f040 851a 	bne.w	800a0d2 <ButtonsPress+0x1f46>
							f_DateIsSet = 0;
 800969e:	4baf      	ldr	r3, [pc, #700]	@ (800995c <ButtonsPress+0x17d0>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
							f_DayOfWeekIsSet = 0;
 80096a4:	4bae      	ldr	r3, [pc, #696]	@ (8009960 <ButtonsPress+0x17d4>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
							memset(ptr_timeSetDate + 3, 0, 4);
 80096aa:	4bae      	ldr	r3, [pc, #696]	@ (8009964 <ButtonsPress+0x17d8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3303      	adds	r3, #3
 80096b0:	2204      	movs	r2, #4
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f00a f91b 	bl	80138f0 <memset>
							memset(ptr_NumberSetDate, 0, sizeof(NumberSetDate)/sizeof(uint8_t));
 80096ba:	4bab      	ldr	r3, [pc, #684]	@ (8009968 <ButtonsPress+0x17dc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2206      	movs	r2, #6
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f00a f914 	bl	80138f0 <memset>
							current_frame = 6;
 80096c8:	4ba8      	ldr	r3, [pc, #672]	@ (800996c <ButtonsPress+0x17e0>)
 80096ca:	2206      	movs	r2, #6
 80096cc:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 80096ce:	4ba2      	ldr	r3, [pc, #648]	@ (8009958 <ButtonsPress+0x17cc>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
				break;
 80096d4:	f000 bcfd 	b.w	800a0d2 <ButtonsPress+0x1f46>

				// 14. Кадр настройки времени
				case 14:

						// Установка времени
						if (pos_cursor == 2)
 80096d8:	4b9f      	ldr	r3, [pc, #636]	@ (8009958 <ButtonsPress+0x17cc>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d121      	bne.n	8009724 <ButtonsPress+0x1598>
						{
							cnt_SetTime++;
 80096e0:	4ba3      	ldr	r3, [pc, #652]	@ (8009970 <ButtonsPress+0x17e4>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	4ba1      	ldr	r3, [pc, #644]	@ (8009970 <ButtonsPress+0x17e4>)
 80096ea:	701a      	strb	r2, [r3, #0]

							// Начало настройки дня недели
							if (cnt_SetTime == 1)
 80096ec:	4ba0      	ldr	r3, [pc, #640]	@ (8009970 <ButtonsPress+0x17e4>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d104      	bne.n	80096fe <ButtonsPress+0x1572>
							{
								f_StSetTime = 1;
 80096f4:	4b9f      	ldr	r3, [pc, #636]	@ (8009974 <ButtonsPress+0x17e8>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
							// Переход на кадр 6
							current_frame = 6;
							pos_cursor = 1;
						}

				break;
 80096fa:	f000 bcec 	b.w	800a0d6 <ButtonsPress+0x1f4a>
							if (cnt_SetTime == 2)
 80096fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009970 <ButtonsPress+0x17e4>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b02      	cmp	r3, #2
 8009704:	f040 84e7 	bne.w	800a0d6 <ButtonsPress+0x1f4a>
								f_StSetTime = 0;
 8009708:	4b9a      	ldr	r3, [pc, #616]	@ (8009974 <ButtonsPress+0x17e8>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
								cnt_SetTime = 0;
 800970e:	4b98      	ldr	r3, [pc, #608]	@ (8009970 <ButtonsPress+0x17e4>)
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
								CurrentDigitSetTime = 0;
 8009714:	4b98      	ldr	r3, [pc, #608]	@ (8009978 <ButtonsPress+0x17ec>)
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
								CurrentNumberSetTime= 0;
 800971a:	4b98      	ldr	r3, [pc, #608]	@ (800997c <ButtonsPress+0x17f0>)
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
				break;
 8009720:	f000 bcd9 	b.w	800a0d6 <ButtonsPress+0x1f4a>
						if (pos_cursor == 3)
 8009724:	4b8c      	ldr	r3, [pc, #560]	@ (8009958 <ButtonsPress+0x17cc>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b03      	cmp	r3, #3
 800972a:	d14f      	bne.n	80097cc <ButtonsPress+0x1640>
							if (f_TimeIsSet)
 800972c:	4b94      	ldr	r3, [pc, #592]	@ (8009980 <ButtonsPress+0x17f4>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 84d0 	beq.w	800a0d6 <ButtonsPress+0x1f4a>
								if ((timeSetDate.hour >= 0) && (timeSetDate.hour <= 23) &&
 8009736:	4b93      	ldr	r3, [pc, #588]	@ (8009984 <ButtonsPress+0x17f8>)
 8009738:	789b      	ldrb	r3, [r3, #2]
 800973a:	2b17      	cmp	r3, #23
 800973c:	d81e      	bhi.n	800977c <ButtonsPress+0x15f0>
									(timeSetDate.minutes >= 0) && (timeSetDate.minutes <= 59) &&
 800973e:	4b91      	ldr	r3, [pc, #580]	@ (8009984 <ButtonsPress+0x17f8>)
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	2b3b      	cmp	r3, #59	@ 0x3b
 8009744:	d81a      	bhi.n	800977c <ButtonsPress+0x15f0>
									(timeSetDate.seconds >= 0) && (timeSetDate.seconds <= 59))
 8009746:	4b8f      	ldr	r3, [pc, #572]	@ (8009984 <ButtonsPress+0x17f8>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b3b      	cmp	r3, #59	@ 0x3b
 800974c:	d816      	bhi.n	800977c <ButtonsPress+0x15f0>
									SetTimeDS(timeSetDate.seconds, timeSetDate.minutes, timeSetDate.hour);
 800974e:	4b8d      	ldr	r3, [pc, #564]	@ (8009984 <ButtonsPress+0x17f8>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	4a8c      	ldr	r2, [pc, #560]	@ (8009984 <ButtonsPress+0x17f8>)
 8009754:	7851      	ldrb	r1, [r2, #1]
 8009756:	4a8b      	ldr	r2, [pc, #556]	@ (8009984 <ButtonsPress+0x17f8>)
 8009758:	7892      	ldrb	r2, [r2, #2]
 800975a:	4618      	mov	r0, r3
 800975c:	f7f7 ffbe 	bl	80016dc <SetTimeDS>
									previous_frame_set = 14;
 8009760:	4b89      	ldr	r3, [pc, #548]	@ (8009988 <ButtonsPress+0x17fc>)
 8009762:	220e      	movs	r2, #14
 8009764:	701a      	strb	r2, [r3, #0]
									previous_pos_cursor_set = 3;
 8009766:	4b89      	ldr	r3, [pc, #548]	@ (800998c <ButtonsPress+0x1800>)
 8009768:	2203      	movs	r2, #3
 800976a:	701a      	strb	r2, [r3, #0]
									current_frame = 10;
 800976c:	4b7f      	ldr	r3, [pc, #508]	@ (800996c <ButtonsPress+0x17e0>)
 800976e:	220a      	movs	r2, #10
 8009770:	701a      	strb	r2, [r3, #0]
									pos_cursor = 2;
 8009772:	4b79      	ldr	r3, [pc, #484]	@ (8009958 <ButtonsPress+0x17cc>)
 8009774:	2202      	movs	r2, #2
 8009776:	701a      	strb	r2, [r3, #0]
				break;
 8009778:	f000 bcad 	b.w	800a0d6 <ButtonsPress+0x1f4a>
									set_fails = 2;
 800977c:	4b84      	ldr	r3, [pc, #528]	@ (8009990 <ButtonsPress+0x1804>)
 800977e:	2202      	movs	r2, #2
 8009780:	701a      	strb	r2, [r3, #0]
									f_StSetTime = 0;
 8009782:	4b7c      	ldr	r3, [pc, #496]	@ (8009974 <ButtonsPress+0x17e8>)
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]
									cnt_SetTime = 0;
 8009788:	4b79      	ldr	r3, [pc, #484]	@ (8009970 <ButtonsPress+0x17e4>)
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
									CurrentDigitSetTime = 0;
 800978e:	4b7a      	ldr	r3, [pc, #488]	@ (8009978 <ButtonsPress+0x17ec>)
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
									CurrentNumberSetTime= 0;
 8009794:	4b79      	ldr	r3, [pc, #484]	@ (800997c <ButtonsPress+0x17f0>)
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]
									f_TimeIsSet = 0;
 800979a:	4b79      	ldr	r3, [pc, #484]	@ (8009980 <ButtonsPress+0x17f4>)
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
									memset(ptr_timeSetDate, 0, 3);
 80097a0:	4b70      	ldr	r3, [pc, #448]	@ (8009964 <ButtonsPress+0x17d8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2203      	movs	r2, #3
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f00a f8a1 	bl	80138f0 <memset>
									memset(ptr_NumberSetTime, 0, sizeof(NumberSetTime)/sizeof(uint8_t));
 80097ae:	4b79      	ldr	r3, [pc, #484]	@ (8009994 <ButtonsPress+0x1808>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2206      	movs	r2, #6
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f00a f89a 	bl	80138f0 <memset>
									current_frame = 17;
 80097bc:	4b6b      	ldr	r3, [pc, #428]	@ (800996c <ButtonsPress+0x17e0>)
 80097be:	2211      	movs	r2, #17
 80097c0:	701a      	strb	r2, [r3, #0]
									pos_cursor = 3;
 80097c2:	4b65      	ldr	r3, [pc, #404]	@ (8009958 <ButtonsPress+0x17cc>)
 80097c4:	2203      	movs	r2, #3
 80097c6:	701a      	strb	r2, [r3, #0]
				break;
 80097c8:	f000 bc85 	b.w	800a0d6 <ButtonsPress+0x1f4a>
						if (pos_cursor == 4)
 80097cc:	4b62      	ldr	r3, [pc, #392]	@ (8009958 <ButtonsPress+0x17cc>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	f040 8480 	bne.w	800a0d6 <ButtonsPress+0x1f4a>
							f_TimeIsSet = 0;
 80097d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009980 <ButtonsPress+0x17f4>)
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
							memset(ptr_timeSetDate, 0, 3);
 80097dc:	4b61      	ldr	r3, [pc, #388]	@ (8009964 <ButtonsPress+0x17d8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2203      	movs	r2, #3
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f00a f883 	bl	80138f0 <memset>
							memset(ptr_NumberSetTime, 0, sizeof(NumberSetTime)/sizeof(uint8_t));
 80097ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009994 <ButtonsPress+0x1808>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2206      	movs	r2, #6
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f00a f87c 	bl	80138f0 <memset>
							current_frame = 6;
 80097f8:	4b5c      	ldr	r3, [pc, #368]	@ (800996c <ButtonsPress+0x17e0>)
 80097fa:	2206      	movs	r2, #6
 80097fc:	701a      	strb	r2, [r3, #0]
							pos_cursor = 1;
 80097fe:	4b56      	ldr	r3, [pc, #344]	@ (8009958 <ButtonsPress+0x17cc>)
 8009800:	2201      	movs	r2, #1
 8009802:	701a      	strb	r2, [r3, #0]
				break;
 8009804:	f000 bc67 	b.w	800a0d6 <ButtonsPress+0x1f4a>

				// 15. Кадр текущие параметры
				case 15:

					// Текущая дата и время
					if (pos_cursor == 0)
 8009808:	4b53      	ldr	r3, [pc, #332]	@ (8009958 <ButtonsPress+0x17cc>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d107      	bne.n	8009820 <ButtonsPress+0x1694>
					{
						current_frame = 16;
 8009810:	4b56      	ldr	r3, [pc, #344]	@ (800996c <ButtonsPress+0x17e0>)
 8009812:	2210      	movs	r2, #16
 8009814:	701a      	strb	r2, [r3, #0]
						pos_cursor = 4;
 8009816:	4b50      	ldr	r3, [pc, #320]	@ (8009958 <ButtonsPress+0x17cc>)
 8009818:	2204      	movs	r2, #4
 800981a:	701a      	strb	r2, [r3, #0]
					{
						current_frame = 3;
						pos_cursor = 3;
					}

				break;
 800981c:	f000 bc5d 	b.w	800a0da <ButtonsPress+0x1f4e>
					if (pos_cursor == 2)
 8009820:	4b4d      	ldr	r3, [pc, #308]	@ (8009958 <ButtonsPress+0x17cc>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d107      	bne.n	8009838 <ButtonsPress+0x16ac>
						current_frame = 1;
 8009828:	4b50      	ldr	r3, [pc, #320]	@ (800996c <ButtonsPress+0x17e0>)
 800982a:	2201      	movs	r2, #1
 800982c:	701a      	strb	r2, [r3, #0]
						pos_cursor = 4;
 800982e:	4b4a      	ldr	r3, [pc, #296]	@ (8009958 <ButtonsPress+0x17cc>)
 8009830:	2204      	movs	r2, #4
 8009832:	701a      	strb	r2, [r3, #0]
				break;
 8009834:	f000 bc51 	b.w	800a0da <ButtonsPress+0x1f4e>
					if (pos_cursor == 4)
 8009838:	4b47      	ldr	r3, [pc, #284]	@ (8009958 <ButtonsPress+0x17cc>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b04      	cmp	r3, #4
 800983e:	f040 844c 	bne.w	800a0da <ButtonsPress+0x1f4e>
						current_frame = 3;
 8009842:	4b4a      	ldr	r3, [pc, #296]	@ (800996c <ButtonsPress+0x17e0>)
 8009844:	2203      	movs	r2, #3
 8009846:	701a      	strb	r2, [r3, #0]
						pos_cursor = 3;
 8009848:	4b43      	ldr	r3, [pc, #268]	@ (8009958 <ButtonsPress+0x17cc>)
 800984a:	2203      	movs	r2, #3
 800984c:	701a      	strb	r2, [r3, #0]
				break;
 800984e:	f000 bc44 	b.w	800a0da <ButtonsPress+0x1f4e>

				// 16. Кадр текущая дата и время
				case 16:

					// Назад
					if (pos_cursor == 4)
 8009852:	4b41      	ldr	r3, [pc, #260]	@ (8009958 <ButtonsPress+0x17cc>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b04      	cmp	r3, #4
 8009858:	f040 8441 	bne.w	800a0de <ButtonsPress+0x1f52>
					{
						current_frame = 15;
 800985c:	4b43      	ldr	r3, [pc, #268]	@ (800996c <ButtonsPress+0x17e0>)
 800985e:	220f      	movs	r2, #15
 8009860:	701a      	strb	r2, [r3, #0]
						pos_cursor = 0;
 8009862:	4b3d      	ldr	r3, [pc, #244]	@ (8009958 <ButtonsPress+0x17cc>)
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
					}

				break;
 8009868:	f000 bc39 	b.w	800a0de <ButtonsPress+0x1f52>

				// 17. Кадр ошибки введённых параметров
				case 17:

					// Начать заново
					if (pos_cursor == 3)
 800986c:	4b3a      	ldr	r3, [pc, #232]	@ (8009958 <ButtonsPress+0x17cc>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b03      	cmp	r3, #3
 8009872:	d157      	bne.n	8009924 <ButtonsPress+0x1798>
					{
						// Переход на кадр настройки в
						// зависимости от того, какой
						// параметр был введён неправильно
						switch(set_fails)
 8009874:	4b46      	ldr	r3, [pc, #280]	@ (8009990 <ButtonsPress+0x1804>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	2b05      	cmp	r3, #5
 800987c:	d84d      	bhi.n	800991a <ButtonsPress+0x178e>
 800987e:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <ButtonsPress+0x16f8>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	0800989d 	.word	0x0800989d
 8009888:	080098b7 	.word	0x080098b7
 800988c:	080098cb 	.word	0x080098cb
 8009890:	080098df 	.word	0x080098df
 8009894:	080098f3 	.word	0x080098f3
 8009898:	08009907 	.word	0x08009907
						{
							// Ошибка ввода даты при настройке
							case 1:

								current_frame = 12;
 800989c:	4b33      	ldr	r3, [pc, #204]	@ (800996c <ButtonsPress+0x17e0>)
 800989e:	220c      	movs	r2, #12
 80098a0:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80098a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009958 <ButtonsPress+0x17cc>)
 80098a4:	2202      	movs	r2, #2
 80098a6:	701a      	strb	r2, [r3, #0]

								f_DateIsSet = 0;
 80098a8:	4b2c      	ldr	r3, [pc, #176]	@ (800995c <ButtonsPress+0x17d0>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
								f_DayOfWeekIsSet = 0;
 80098ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009960 <ButtonsPress+0x17d4>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	701a      	strb	r2, [r3, #0]

							break;
 80098b4:	e032      	b.n	800991c <ButtonsPress+0x1790>


							// Ошибка ввода времени при настройке
							case 2:

								current_frame = 14;
 80098b6:	4b2d      	ldr	r3, [pc, #180]	@ (800996c <ButtonsPress+0x17e0>)
 80098b8:	220e      	movs	r2, #14
 80098ba:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80098bc:	4b26      	ldr	r3, [pc, #152]	@ (8009958 <ButtonsPress+0x17cc>)
 80098be:	2202      	movs	r2, #2
 80098c0:	701a      	strb	r2, [r3, #0]

								f_TimeIsSet = 0;
 80098c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009980 <ButtonsPress+0x17f4>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]

							break;
 80098c8:	e028      	b.n	800991c <ButtonsPress+0x1790>

							// Ошибка ввода времени при
							// настройке времени начала полива
							case 3:

								current_frame = 7;
 80098ca:	4b28      	ldr	r3, [pc, #160]	@ (800996c <ButtonsPress+0x17e0>)
 80098cc:	2207      	movs	r2, #7
 80098ce:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80098d0:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <ButtonsPress+0x17cc>)
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]

								f_TimeIsSetWater = 0;
 80098d6:	4b30      	ldr	r3, [pc, #192]	@ (8009998 <ButtonsPress+0x180c>)
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]

							break;
 80098dc:	e01e      	b.n	800991c <ButtonsPress+0x1790>
							// Ошибка ввода времени при
							// настройке продолжительности полива
							// (полив не более 10 мин!)
							case 4:

								current_frame = 7;
 80098de:	4b23      	ldr	r3, [pc, #140]	@ (800996c <ButtonsPress+0x17e0>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80098e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009958 <ButtonsPress+0x17cc>)
 80098e6:	2202      	movs	r2, #2
 80098e8:	701a      	strb	r2, [r3, #0]

								f_TimeIsSetWater = 0;
 80098ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009998 <ButtonsPress+0x180c>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	701a      	strb	r2, [r3, #0]

							break;
 80098f0:	e014      	b.n	800991c <ButtonsPress+0x1790>
							// Ошибка ввода времени при
							// настройке дней полива
							// (нужно выбрать хотя бы один день)
							case 5:

								current_frame = 7;
 80098f2:	4b1e      	ldr	r3, [pc, #120]	@ (800996c <ButtonsPress+0x17e0>)
 80098f4:	2207      	movs	r2, #7
 80098f6:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80098f8:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <ButtonsPress+0x17cc>)
 80098fa:	2202      	movs	r2, #2
 80098fc:	701a      	strb	r2, [r3, #0]

								f_DaysWaterIsSet = 0;
 80098fe:	4b27      	ldr	r3, [pc, #156]	@ (800999c <ButtonsPress+0x1810>)
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]

							break;
 8009904:	e00a      	b.n	800991c <ButtonsPress+0x1790>
							// Установка ошибки ввода
							// времени автоотключения экрана
							// (не более 30 мин 59 сек)
							case 6:

								current_frame = 23;
 8009906:	4b19      	ldr	r3, [pc, #100]	@ (800996c <ButtonsPress+0x17e0>)
 8009908:	2217      	movs	r2, #23
 800990a:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 800990c:	4b12      	ldr	r3, [pc, #72]	@ (8009958 <ButtonsPress+0x17cc>)
 800990e:	2203      	movs	r2, #3
 8009910:	701a      	strb	r2, [r3, #0]

								f_ScreenOffIsSet = 0;
 8009912:	4b23      	ldr	r3, [pc, #140]	@ (80099a0 <ButtonsPress+0x1814>)
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]

							break;
 8009918:	e000      	b.n	800991c <ButtonsPress+0x1790>


							default:
							break;
 800991a:	bf00      	nop
						}

						// Сброс ошибок
						set_fails = 0;
 800991c:	4b1c      	ldr	r3, [pc, #112]	@ (8009990 <ButtonsPress+0x1804>)
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]

						// Сброс ошибок
						set_fails = 0;
					}

				break;
 8009922:	e3de      	b.n	800a0e2 <ButtonsPress+0x1f56>
					if (pos_cursor == 4)
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <ButtonsPress+0x17cc>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b04      	cmp	r3, #4
 800992a:	f040 83da 	bne.w	800a0e2 <ButtonsPress+0x1f56>
						switch(set_fails)
 800992e:	4b18      	ldr	r3, [pc, #96]	@ (8009990 <ButtonsPress+0x1804>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	3b01      	subs	r3, #1
 8009934:	2b05      	cmp	r3, #5
 8009936:	d85f      	bhi.n	80099f8 <ButtonsPress+0x186c>
 8009938:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <ButtonsPress+0x17b4>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099b3 	.word	0x080099b3
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099cf 	.word	0x080099cf
 8009950:	080099dd 	.word	0x080099dd
 8009954:	080099eb 	.word	0x080099eb
 8009958:	20000a3d 	.word	0x20000a3d
 800995c:	200009f2 	.word	0x200009f2
 8009960:	200009f5 	.word	0x200009f5
 8009964:	2000011c 	.word	0x2000011c
 8009968:	20000004 	.word	0x20000004
 800996c:	20000a3c 	.word	0x20000a3c
 8009970:	200009ec 	.word	0x200009ec
 8009974:	200009ef 	.word	0x200009ef
 8009978:	200009e8 	.word	0x200009e8
 800997c:	200009e9 	.word	0x200009e9
 8009980:	200009f8 	.word	0x200009f8
 8009984:	20000a54 	.word	0x20000a54
 8009988:	20000a37 	.word	0x20000a37
 800998c:	20000a38 	.word	0x20000a38
 8009990:	20000ae3 	.word	0x20000ae3
 8009994:	20000008 	.word	0x20000008
 8009998:	20000a16 	.word	0x20000a16
 800999c:	20000a1c 	.word	0x20000a1c
 80099a0:	20000a2e 	.word	0x20000a2e
								current_frame = 6;
 80099a4:	4bb2      	ldr	r3, [pc, #712]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099a6:	2206      	movs	r2, #6
 80099a8:	701a      	strb	r2, [r3, #0]
								pos_cursor = 0;
 80099aa:	4bb2      	ldr	r3, [pc, #712]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
							break;
 80099b0:	e023      	b.n	80099fa <ButtonsPress+0x186e>
								current_frame = 6;
 80099b2:	4baf      	ldr	r3, [pc, #700]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099b4:	2206      	movs	r2, #6
 80099b6:	701a      	strb	r2, [r3, #0]
								pos_cursor = 1;
 80099b8:	4bae      	ldr	r3, [pc, #696]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]
							break;
 80099be:	e01c      	b.n	80099fa <ButtonsPress+0x186e>
								current_frame = 4;
 80099c0:	4bab      	ldr	r3, [pc, #684]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099c2:	2204      	movs	r2, #4
 80099c4:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80099c6:	4bab      	ldr	r3, [pc, #684]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099c8:	2202      	movs	r2, #2
 80099ca:	701a      	strb	r2, [r3, #0]
							break;
 80099cc:	e015      	b.n	80099fa <ButtonsPress+0x186e>
								current_frame = 4;
 80099ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099d0:	2204      	movs	r2, #4
 80099d2:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80099d4:	4ba7      	ldr	r3, [pc, #668]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099d6:	2202      	movs	r2, #2
 80099d8:	701a      	strb	r2, [r3, #0]
							break;
 80099da:	e00e      	b.n	80099fa <ButtonsPress+0x186e>
								current_frame = 4;
 80099dc:	4ba4      	ldr	r3, [pc, #656]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099de:	2204      	movs	r2, #4
 80099e0:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 80099e2:	4ba4      	ldr	r3, [pc, #656]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]
							break;
 80099e8:	e007      	b.n	80099fa <ButtonsPress+0x186e>
								current_frame = 4;
 80099ea:	4ba1      	ldr	r3, [pc, #644]	@ (8009c70 <ButtonsPress+0x1ae4>)
 80099ec:	2204      	movs	r2, #4
 80099ee:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 80099f0:	4ba0      	ldr	r3, [pc, #640]	@ (8009c74 <ButtonsPress+0x1ae8>)
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
							break;
 80099f6:	e000      	b.n	80099fa <ButtonsPress+0x186e>
							break;
 80099f8:	bf00      	nop
						set_fails = 0;
 80099fa:	4b9f      	ldr	r3, [pc, #636]	@ (8009c78 <ButtonsPress+0x1aec>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	701a      	strb	r2, [r3, #0]
				break;
 8009a00:	e36f      	b.n	800a0e2 <ButtonsPress+0x1f56>

				// 18. Продолжение кадра 15
				case 18:

					// Уровень воды в резервуаре
					if (pos_cursor == 0)
 8009a02:	4b9c      	ldr	r3, [pc, #624]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <ButtonsPress+0x188c>
					{
						current_frame = 3;
 8009a0a:	4b99      	ldr	r3, [pc, #612]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	701a      	strb	r2, [r3, #0]
						pos_cursor = 3;
 8009a10:	4b98      	ldr	r3, [pc, #608]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a12:	2203      	movs	r2, #3
 8009a14:	701a      	strb	r2, [r3, #0]
					{
						current_frame = 0;
						pos_cursor = 0;
					}

				break;
 8009a16:	e366      	b.n	800a0e6 <ButtonsPress+0x1f5a>
					if (pos_cursor == 2)
 8009a18:	4b96      	ldr	r3, [pc, #600]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d106      	bne.n	8009a2e <ButtonsPress+0x18a2>
						current_frame = 25;
 8009a20:	4b93      	ldr	r3, [pc, #588]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009a22:	2219      	movs	r2, #25
 8009a24:	701a      	strb	r2, [r3, #0]
						pos_cursor = 4;
 8009a26:	4b93      	ldr	r3, [pc, #588]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a28:	2204      	movs	r2, #4
 8009a2a:	701a      	strb	r2, [r3, #0]
				break;
 8009a2c:	e35b      	b.n	800a0e6 <ButtonsPress+0x1f5a>
					if (pos_cursor == 4)
 8009a2e:	4b91      	ldr	r3, [pc, #580]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	f040 8357 	bne.w	800a0e6 <ButtonsPress+0x1f5a>
						current_frame = 0;
 8009a38:	4b8d      	ldr	r3, [pc, #564]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
						pos_cursor = 0;
 8009a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
				break;
 8009a44:	e34f      	b.n	800a0e6 <ButtonsPress+0x1f5a>

				// 19. Настройка полива (3)
				case 19:

					// Установка дней полива
					if (pos_cursor == 3)
 8009a46:	4b8b      	ldr	r3, [pc, #556]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d11c      	bne.n	8009a88 <ButtonsPress+0x18fc>
					{
						cnt_SetDaysWater++;
 8009a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	3301      	adds	r3, #1
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4b89      	ldr	r3, [pc, #548]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009a58:	701a      	strb	r2, [r3, #0]

						if (cnt_SetDaysWater == 1)
 8009a5a:	4b88      	ldr	r3, [pc, #544]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d103      	bne.n	8009a6a <ButtonsPress+0x18de>
						{
							f_StSetDaysWater = 1;
 8009a62:	4b87      	ldr	r3, [pc, #540]	@ (8009c80 <ButtonsPress+0x1af4>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	701a      	strb	r2, [r3, #0]
							memset(ptr_WateringParamsSet + 5, 0, 1);
							WaterDays = 0;
						}
					}

				break;
 8009a68:	e33f      	b.n	800a0ea <ButtonsPress+0x1f5e>
						if (cnt_SetDaysWater == 2)
 8009a6a:	4b84      	ldr	r3, [pc, #528]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	f040 833b 	bne.w	800a0ea <ButtonsPress+0x1f5e>
							f_StSetDaysWater = 0;
 8009a74:	4b82      	ldr	r3, [pc, #520]	@ (8009c80 <ButtonsPress+0x1af4>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
							cnt_SetDaysWater = 0;
 8009a7a:	4b80      	ldr	r3, [pc, #512]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetDaysWater = 0;
 8009a80:	4b80      	ldr	r3, [pc, #512]	@ (8009c84 <ButtonsPress+0x1af8>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
				break;
 8009a86:	e330      	b.n	800a0ea <ButtonsPress+0x1f5e>
					if (pos_cursor == 4)
 8009a88:	4b7a      	ldr	r3, [pc, #488]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b04      	cmp	r3, #4
 8009a8e:	f040 832c 	bne.w	800a0ea <ButtonsPress+0x1f5e>
						if (f_TimeIsSetDurationWater)
 8009a92:	4b7d      	ldr	r3, [pc, #500]	@ (8009c88 <ButtonsPress+0x1afc>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8327 	beq.w	800a0ea <ButtonsPress+0x1f5e>
							if (WateringParamsSet.daysofweek)
 8009a9c:	4b7b      	ldr	r3, [pc, #492]	@ (8009c8c <ButtonsPress+0x1b00>)
 8009a9e:	795b      	ldrb	r3, [r3, #5]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d012      	beq.n	8009aca <ButtonsPress+0x193e>
								SD_WriteData(1);
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f7f7 fc33 	bl	8001310 <SD_WriteData>
								f_WateringParamsChanged = 1;
 8009aaa:	4b79      	ldr	r3, [pc, #484]	@ (8009c90 <ButtonsPress+0x1b04>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
								previous_frame_set = 4;
 8009ab0:	4b78      	ldr	r3, [pc, #480]	@ (8009c94 <ButtonsPress+0x1b08>)
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	701a      	strb	r2, [r3, #0]
								previous_pos_cursor_set = 2;
 8009ab6:	4b78      	ldr	r3, [pc, #480]	@ (8009c98 <ButtonsPress+0x1b0c>)
 8009ab8:	2202      	movs	r2, #2
 8009aba:	701a      	strb	r2, [r3, #0]
								current_frame = 10;
 8009abc:	4b6c      	ldr	r3, [pc, #432]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009abe:	220a      	movs	r2, #10
 8009ac0:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 8009ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	e008      	b.n	8009adc <ButtonsPress+0x1950>
								set_fails = 5;
 8009aca:	4b6b      	ldr	r3, [pc, #428]	@ (8009c78 <ButtonsPress+0x1aec>)
 8009acc:	2205      	movs	r2, #5
 8009ace:	701a      	strb	r2, [r3, #0]
								current_frame = 17;
 8009ad0:	4b67      	ldr	r3, [pc, #412]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009ad2:	2211      	movs	r2, #17
 8009ad4:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 8009ad6:	4b67      	ldr	r3, [pc, #412]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009ad8:	2203      	movs	r2, #3
 8009ada:	701a      	strb	r2, [r3, #0]
							f_StSetTimeWater = 0;
 8009adc:	4b6f      	ldr	r3, [pc, #444]	@ (8009c9c <ButtonsPress+0x1b10>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
							cnt_SetTimeWater = 0;
 8009ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8009ca0 <ButtonsPress+0x1b14>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetTimeWater = 0;
 8009ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca4 <ButtonsPress+0x1b18>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	701a      	strb	r2, [r3, #0]
							CurrentNumberSetTimeWater= 0;
 8009aee:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca8 <ButtonsPress+0x1b1c>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
							f_TimeIsSetWater = 0;
 8009af4:	4b6d      	ldr	r3, [pc, #436]	@ (8009cac <ButtonsPress+0x1b20>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
							memset(ptr_WateringParamsSet, 0, 3);
 8009afa:	4b6d      	ldr	r3, [pc, #436]	@ (8009cb0 <ButtonsPress+0x1b24>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2203      	movs	r2, #3
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f009 fef4 	bl	80138f0 <memset>
							memset(ptr_NumberSetTimeWater, 0, sizeof(NumberSetTimeWater)/sizeof(uint8_t));
 8009b08:	4b6a      	ldr	r3, [pc, #424]	@ (8009cb4 <ButtonsPress+0x1b28>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2206      	movs	r2, #6
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f009 feed 	bl	80138f0 <memset>
							f_StSetDurationWater = 0;
 8009b16:	4b68      	ldr	r3, [pc, #416]	@ (8009cb8 <ButtonsPress+0x1b2c>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
							cnt_SetDurationWater = 0;
 8009b1c:	4b67      	ldr	r3, [pc, #412]	@ (8009cbc <ButtonsPress+0x1b30>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetDurationWater = 0;
 8009b22:	4b67      	ldr	r3, [pc, #412]	@ (8009cc0 <ButtonsPress+0x1b34>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
							CurrentNumberSetDurationWater= 0;
 8009b28:	4b66      	ldr	r3, [pc, #408]	@ (8009cc4 <ButtonsPress+0x1b38>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
							f_TimeIsSetDurationWater = 0;
 8009b2e:	4b56      	ldr	r3, [pc, #344]	@ (8009c88 <ButtonsPress+0x1afc>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
							memset(ptr_WateringParamsSet + 3, 0, 2);
 8009b34:	4b5e      	ldr	r3, [pc, #376]	@ (8009cb0 <ButtonsPress+0x1b24>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3303      	adds	r3, #3
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f009 fed6 	bl	80138f0 <memset>
							memset(ptr_NumberSetDurationWater, 0, sizeof(NumberSetDurationWater)/sizeof(uint8_t));
 8009b44:	4b60      	ldr	r3, [pc, #384]	@ (8009cc8 <ButtonsPress+0x1b3c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f009 fecf 	bl	80138f0 <memset>
							f_StSetDaysWater = 0;
 8009b52:	4b4b      	ldr	r3, [pc, #300]	@ (8009c80 <ButtonsPress+0x1af4>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
							cnt_SetDaysWater = 0;
 8009b58:	4b48      	ldr	r3, [pc, #288]	@ (8009c7c <ButtonsPress+0x1af0>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetDaysWater = 0;
 8009b5e:	4b49      	ldr	r3, [pc, #292]	@ (8009c84 <ButtonsPress+0x1af8>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
							f_DaysWaterIsSet = 0;
 8009b64:	4b59      	ldr	r3, [pc, #356]	@ (8009ccc <ButtonsPress+0x1b40>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	701a      	strb	r2, [r3, #0]
							memset(ptr_WateringParamsSet + 5, 0, 1);
 8009b6a:	4b51      	ldr	r3, [pc, #324]	@ (8009cb0 <ButtonsPress+0x1b24>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3305      	adds	r3, #5
 8009b70:	2201      	movs	r2, #1
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f009 febb 	bl	80138f0 <memset>
							WaterDays = 0;
 8009b7a:	4b55      	ldr	r3, [pc, #340]	@ (8009cd0 <ButtonsPress+0x1b44>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
				break;
 8009b80:	e2b3      	b.n	800a0ea <ButtonsPress+0x1f5e>
				// Сброс настроек (1)
				case 20:

					// Сбросить настройки
					// текущего времени
					if (pos_cursor == 0)
 8009b82:	4b3c      	ldr	r3, [pc, #240]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d117      	bne.n	8009bba <ButtonsPress+0x1a2e>
					{
						// Установка начальной даты
						// и дня недели (состояние сброса)
						SetDateDS(3, 1, 1, 25);
 8009b8a:	2319      	movs	r3, #25
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	2101      	movs	r1, #1
 8009b90:	2003      	movs	r0, #3
 8009b92:	f7f7 fd67 	bl	8001664 <SetDateDS>

						// Установка начального времени
						// (состояние сброса)
						SetTimeDS(0, 0, 0);
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f7f7 fd9e 	bl	80016dc <SetTimeDS>

						previous_frame_reset = 20;
 8009ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8009cd4 <ButtonsPress+0x1b48>)
 8009ba2:	2214      	movs	r2, #20
 8009ba4:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 0;
 8009ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8009cd8 <ButtonsPress+0x1b4c>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]

						// Переход на кадр 22 -
						// Сообщение об успешном сбросе
						current_frame = 22;
 8009bac:	4b30      	ldr	r3, [pc, #192]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009bae:	2216      	movs	r2, #22
 8009bb0:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009bb2:	4b30      	ldr	r3, [pc, #192]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	701a      	strb	r2, [r3, #0]
						// Сообщение об успешном сбросе
						current_frame = 22;
						pos_cursor = 2;
					}

				break;
 8009bb8:	e299      	b.n	800a0ee <ButtonsPress+0x1f62>
					if (pos_cursor == 2)
 8009bba:	4b2e      	ldr	r3, [pc, #184]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d119      	bne.n	8009bf6 <ButtonsPress+0x1a6a>
						memset(ptr_WateringParams, 0, sizeof(WateringParams)/sizeof(uint8_t));
 8009bc2:	4b46      	ldr	r3, [pc, #280]	@ (8009cdc <ButtonsPress+0x1b50>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	220c      	movs	r2, #12
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f009 fe90 	bl	80138f0 <memset>
						SD_WriteData(1);
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f7f7 fb9d 	bl	8001310 <SD_WriteData>
						f_WateringParamsChanged = 1;
 8009bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8009c90 <ButtonsPress+0x1b04>)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	701a      	strb	r2, [r3, #0]
						previous_frame_reset = 20;
 8009bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8009cd4 <ButtonsPress+0x1b48>)
 8009bde:	2214      	movs	r2, #20
 8009be0:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 2;
 8009be2:	4b3d      	ldr	r3, [pc, #244]	@ (8009cd8 <ButtonsPress+0x1b4c>)
 8009be4:	2202      	movs	r2, #2
 8009be6:	701a      	strb	r2, [r3, #0]
						current_frame = 22;
 8009be8:	4b21      	ldr	r3, [pc, #132]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009bea:	2216      	movs	r2, #22
 8009bec:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009bee:	4b21      	ldr	r3, [pc, #132]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	701a      	strb	r2, [r3, #0]
				break;
 8009bf4:	e27b      	b.n	800a0ee <ButtonsPress+0x1f62>
					if (pos_cursor == 4)
 8009bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	f040 8277 	bne.w	800a0ee <ButtonsPress+0x1f62>
						memset(ptr_ScreenOff, 0, sizeof(ScreenOff)/sizeof(uint8_t));
 8009c00:	4b37      	ldr	r3, [pc, #220]	@ (8009ce0 <ButtonsPress+0x1b54>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2208      	movs	r2, #8
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f009 fe71 	bl	80138f0 <memset>
						SD_WriteData(2);
 8009c0e:	2002      	movs	r0, #2
 8009c10:	f7f7 fb7e 	bl	8001310 <SD_WriteData>
						f_ScreenOffChanged = 1;
 8009c14:	4b33      	ldr	r3, [pc, #204]	@ (8009ce4 <ButtonsPress+0x1b58>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	701a      	strb	r2, [r3, #0]
						previous_frame_reset = 20;
 8009c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8009cd4 <ButtonsPress+0x1b48>)
 8009c1c:	2214      	movs	r2, #20
 8009c1e:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 4;
 8009c20:	4b2d      	ldr	r3, [pc, #180]	@ (8009cd8 <ButtonsPress+0x1b4c>)
 8009c22:	2204      	movs	r2, #4
 8009c24:	701a      	strb	r2, [r3, #0]
						current_frame = 22;
 8009c26:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009c28:	2216      	movs	r2, #22
 8009c2a:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009c2c:	4b11      	ldr	r3, [pc, #68]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009c2e:	2202      	movs	r2, #2
 8009c30:	701a      	strb	r2, [r3, #0]
				break;
 8009c32:	e25c      	b.n	800a0ee <ButtonsPress+0x1f62>
				// Сброс настроек (2)
				case 21:

					// Сбросить настройки
					// автоотключения экрана
					if (pos_cursor == 0)
 8009c34:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d155      	bne.n	8009ce8 <ButtonsPress+0x1b5c>
					{
						// Очистка текущего времени автоотключения экрана
						memset(ptr_ScreenOff, 0, sizeof(ScreenOff)/sizeof(uint8_t));
 8009c3c:	4b28      	ldr	r3, [pc, #160]	@ (8009ce0 <ButtonsPress+0x1b54>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2208      	movs	r2, #8
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f009 fe53 	bl	80138f0 <memset>

						// Сохранение параметров
						SD_WriteData(2);
 8009c4a:	2002      	movs	r0, #2
 8009c4c:	f7f7 fb60 	bl	8001310 <SD_WriteData>

						// Флаг того, что настройки
						// автоотключения экрана
						// были изменены и записаны на flash
						f_ScreenOffChanged = 1;
 8009c50:	4b24      	ldr	r3, [pc, #144]	@ (8009ce4 <ButtonsPress+0x1b58>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	701a      	strb	r2, [r3, #0]

						previous_frame_reset = 21;
 8009c56:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd4 <ButtonsPress+0x1b48>)
 8009c58:	2215      	movs	r2, #21
 8009c5a:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 0;
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd8 <ButtonsPress+0x1b4c>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]

						// Переход на кадр 22 -
						// Сообщение об успешном сбросе
						current_frame = 22;
 8009c62:	4b03      	ldr	r3, [pc, #12]	@ (8009c70 <ButtonsPress+0x1ae4>)
 8009c64:	2216      	movs	r2, #22
 8009c66:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009c68:	4b02      	ldr	r3, [pc, #8]	@ (8009c74 <ButtonsPress+0x1ae8>)
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	701a      	strb	r2, [r3, #0]
						// Сообщение об успешном сбросе
						current_frame = 22;
						pos_cursor = 2;
					}

				break;
 8009c6e:	e240      	b.n	800a0f2 <ButtonsPress+0x1f66>
 8009c70:	20000a3c 	.word	0x20000a3c
 8009c74:	20000a3d 	.word	0x20000a3d
 8009c78:	20000ae3 	.word	0x20000ae3
 8009c7c:	20000a10 	.word	0x20000a10
 8009c80:	20000a13 	.word	0x20000a13
 8009c84:	20000a0d 	.word	0x20000a0d
 8009c88:	20000a19 	.word	0x20000a19
 8009c8c:	20000a68 	.word	0x20000a68
 8009c90:	20000a1d 	.word	0x20000a1d
 8009c94:	20000a37 	.word	0x20000a37
 8009c98:	20000a38 	.word	0x20000a38
 8009c9c:	20000a11 	.word	0x20000a11
 8009ca0:	20000a0e 	.word	0x20000a0e
 8009ca4:	20000a09 	.word	0x20000a09
 8009ca8:	20000a0a 	.word	0x20000a0a
 8009cac:	20000a16 	.word	0x20000a16
 8009cb0:	20000124 	.word	0x20000124
 8009cb4:	20000010 	.word	0x20000010
 8009cb8:	20000a12 	.word	0x20000a12
 8009cbc:	20000a0f 	.word	0x20000a0f
 8009cc0:	20000a0b 	.word	0x20000a0b
 8009cc4:	20000a0c 	.word	0x20000a0c
 8009cc8:	20000014 	.word	0x20000014
 8009ccc:	20000a1c 	.word	0x20000a1c
 8009cd0:	20000a08 	.word	0x20000a08
 8009cd4:	20000a35 	.word	0x20000a35
 8009cd8:	20000a36 	.word	0x20000a36
 8009cdc:	20000120 	.word	0x20000120
 8009ce0:	20000128 	.word	0x20000128
 8009ce4:	20000a2f 	.word	0x20000a2f
					if (pos_cursor == 2)
 8009ce8:	4ba8      	ldr	r3, [pc, #672]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d115      	bne.n	8009d1c <ButtonsPress+0x1b90>
						WaterLevelSensorState.f_IsWaterLevelSensorOn = 1;
 8009cf0:	4ba7      	ldr	r3, [pc, #668]	@ (8009f90 <ButtonsPress+0x1e04>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
						SD_WriteData(3);
 8009cf6:	2003      	movs	r0, #3
 8009cf8:	f7f7 fb0a 	bl	8001310 <SD_WriteData>
						f_WaterLevelSensorStateChanged = 1;
 8009cfc:	4ba5      	ldr	r3, [pc, #660]	@ (8009f94 <ButtonsPress+0x1e08>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	701a      	strb	r2, [r3, #0]
						previous_frame_reset = 21;
 8009d02:	4ba5      	ldr	r3, [pc, #660]	@ (8009f98 <ButtonsPress+0x1e0c>)
 8009d04:	2215      	movs	r2, #21
 8009d06:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 2;
 8009d08:	4ba4      	ldr	r3, [pc, #656]	@ (8009f9c <ButtonsPress+0x1e10>)
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	701a      	strb	r2, [r3, #0]
						current_frame = 22;
 8009d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009d10:	2216      	movs	r2, #22
 8009d12:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009d14:	4b9d      	ldr	r3, [pc, #628]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009d16:	2202      	movs	r2, #2
 8009d18:	701a      	strb	r2, [r3, #0]
				break;
 8009d1a:	e1ea      	b.n	800a0f2 <ButtonsPress+0x1f66>
					if (pos_cursor == 4)
 8009d1c:	4b9b      	ldr	r3, [pc, #620]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	f040 81e6 	bne.w	800a0f2 <ButtonsPress+0x1f66>
						SetDateDS(3, 1, 1, 25);
 8009d26:	2319      	movs	r3, #25
 8009d28:	2201      	movs	r2, #1
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	2003      	movs	r0, #3
 8009d2e:	f7f7 fc99 	bl	8001664 <SetDateDS>
						SetTimeDS(0, 0, 0);
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	2000      	movs	r0, #0
 8009d38:	f7f7 fcd0 	bl	80016dc <SetTimeDS>
						memset(ptr_WateringParams, 0, sizeof(WateringParams)/sizeof(uint8_t));
 8009d3c:	4b99      	ldr	r3, [pc, #612]	@ (8009fa4 <ButtonsPress+0x1e18>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	220c      	movs	r2, #12
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f009 fdd3 	bl	80138f0 <memset>
						SD_WriteData(1);
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	f7f7 fae0 	bl	8001310 <SD_WriteData>
						f_WateringParamsChanged = 1;
 8009d50:	4b95      	ldr	r3, [pc, #596]	@ (8009fa8 <ButtonsPress+0x1e1c>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	701a      	strb	r2, [r3, #0]
						memset(ptr_ScreenOff, 0, sizeof(ScreenOff)/sizeof(uint8_t));
 8009d56:	4b95      	ldr	r3, [pc, #596]	@ (8009fac <ButtonsPress+0x1e20>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f009 fdc6 	bl	80138f0 <memset>
						SD_WriteData(2);
 8009d64:	2002      	movs	r0, #2
 8009d66:	f7f7 fad3 	bl	8001310 <SD_WriteData>
						f_ScreenOffChanged = 1;
 8009d6a:	4b91      	ldr	r3, [pc, #580]	@ (8009fb0 <ButtonsPress+0x1e24>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
						WaterLevelSensorState.f_IsWaterLevelSensorOn = 1;
 8009d70:	4b87      	ldr	r3, [pc, #540]	@ (8009f90 <ButtonsPress+0x1e04>)
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
						SD_WriteData(3);
 8009d76:	2003      	movs	r0, #3
 8009d78:	f7f7 faca 	bl	8001310 <SD_WriteData>
						f_WaterLevelSensorStateChanged = 1;
 8009d7c:	4b85      	ldr	r3, [pc, #532]	@ (8009f94 <ButtonsPress+0x1e08>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
						previous_frame_reset = 33;
 8009d82:	4b85      	ldr	r3, [pc, #532]	@ (8009f98 <ButtonsPress+0x1e0c>)
 8009d84:	2221      	movs	r2, #33	@ 0x21
 8009d86:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 0;
 8009d88:	4b84      	ldr	r3, [pc, #528]	@ (8009f9c <ButtonsPress+0x1e10>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	701a      	strb	r2, [r3, #0]
						current_frame = 22;
 8009d8e:	4b84      	ldr	r3, [pc, #528]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009d90:	2216      	movs	r2, #22
 8009d92:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 8009d94:	4b7d      	ldr	r3, [pc, #500]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009d96:	2202      	movs	r2, #2
 8009d98:	701a      	strb	r2, [r3, #0]
				break;
 8009d9a:	e1aa      	b.n	800a0f2 <ButtonsPress+0x1f66>
				// 22. Сообщение об успешном
				// сбросе настроек
				case 22:

					// Ок
					if (pos_cursor == 2)
 8009d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	f040 81a8 	bne.w	800a0f6 <ButtonsPress+0x1f6a>
					{
						// Переход на кадр, который вызвал переход на кадр 22
						current_frame = previous_frame_reset;
 8009da6:	4b7c      	ldr	r3, [pc, #496]	@ (8009f98 <ButtonsPress+0x1e0c>)
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	4b7d      	ldr	r3, [pc, #500]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009dac:	701a      	strb	r2, [r3, #0]
						pos_cursor = previous_pos_cursor_reset;
 8009dae:	4b7b      	ldr	r3, [pc, #492]	@ (8009f9c <ButtonsPress+0x1e10>)
 8009db0:	781a      	ldrb	r2, [r3, #0]
 8009db2:	4b76      	ldr	r3, [pc, #472]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009db4:	701a      	strb	r2, [r3, #0]

						// Сброс прошлого кадра
						previous_frame_reset = 0;
 8009db6:	4b78      	ldr	r3, [pc, #480]	@ (8009f98 <ButtonsPress+0x1e0c>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 0;
 8009dbc:	4b77      	ldr	r3, [pc, #476]	@ (8009f9c <ButtonsPress+0x1e10>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	701a      	strb	r2, [r3, #0]
					}

				break;
 8009dc2:	e198      	b.n	800a0f6 <ButtonsPress+0x1f6a>
				// 23. Настройка автоотключения экрана (1)
				case 23:

					// Установка времени
					// автоотключения экрана
					if (pos_cursor == 3)
 8009dc4:	4b71      	ldr	r3, [pc, #452]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d11f      	bne.n	8009e0c <ButtonsPress+0x1c80>
					{
						cnt_SetScreenOff++;
 8009dcc:	4b79      	ldr	r3, [pc, #484]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b77      	ldr	r3, [pc, #476]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009dd6:	701a      	strb	r2, [r3, #0]

						if (cnt_SetScreenOff == 1)
 8009dd8:	4b76      	ldr	r3, [pc, #472]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d103      	bne.n	8009de8 <ButtonsPress+0x1c5c>
						{
							f_StSetScreenOff = 1;
 8009de0:	4b75      	ldr	r3, [pc, #468]	@ (8009fb8 <ButtonsPress+0x1e2c>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
							memset(ptr_ScreenOffSet, 0, sizeof(ScreenOffSet)/sizeof(uint8_t));
							memset(ptr_NumberSetScreenOff, 0, sizeof(NumberSetScreenOff)/sizeof(uint8_t));
						}
					}

				break;
 8009de6:	e188      	b.n	800a0fa <ButtonsPress+0x1f6e>
						if (cnt_SetScreenOff == 2)
 8009de8:	4b72      	ldr	r3, [pc, #456]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	f040 8184 	bne.w	800a0fa <ButtonsPress+0x1f6e>
							f_StSetScreenOff = 0;
 8009df2:	4b71      	ldr	r3, [pc, #452]	@ (8009fb8 <ButtonsPress+0x1e2c>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
							cnt_SetScreenOff = 0;
 8009df8:	4b6e      	ldr	r3, [pc, #440]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetScreenOff = 0;
 8009dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8009fbc <ButtonsPress+0x1e30>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	701a      	strb	r2, [r3, #0]
							CurrentNumberSetScreenOff= 0;
 8009e04:	4b6e      	ldr	r3, [pc, #440]	@ (8009fc0 <ButtonsPress+0x1e34>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
				break;
 8009e0a:	e176      	b.n	800a0fa <ButtonsPress+0x1f6e>
					if (pos_cursor == 4)
 8009e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	f040 8172 	bne.w	800a0fa <ButtonsPress+0x1f6e>
						if (f_ScreenOffIsSet)
 8009e16:	4b6b      	ldr	r3, [pc, #428]	@ (8009fc4 <ButtonsPress+0x1e38>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 816d 	beq.w	800a0fa <ButtonsPress+0x1f6e>
							SecCheck = ScreenOffSet.minutes_screen_off * 60 + ScreenOffSet.seconds_screen_off;
 8009e20:	4b69      	ldr	r3, [pc, #420]	@ (8009fc8 <ButtonsPress+0x1e3c>)
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	461a      	mov	r2, r3
 8009e26:	0112      	lsls	r2, r2, #4
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4a66      	ldr	r2, [pc, #408]	@ (8009fc8 <ButtonsPress+0x1e3c>)
 8009e30:	7812      	ldrb	r2, [r2, #0]
 8009e32:	4413      	add	r3, r2
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	4b65      	ldr	r3, [pc, #404]	@ (8009fcc <ButtonsPress+0x1e40>)
 8009e38:	801a      	strh	r2, [r3, #0]
							if (((SecCheck >= 30) && (SecCheck <= 1800)) || (!SecCheck))
 8009e3a:	4b64      	ldr	r3, [pc, #400]	@ (8009fcc <ButtonsPress+0x1e40>)
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	2b1d      	cmp	r3, #29
 8009e40:	d904      	bls.n	8009e4c <ButtonsPress+0x1cc0>
 8009e42:	4b62      	ldr	r3, [pc, #392]	@ (8009fcc <ButtonsPress+0x1e40>)
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8009e4a:	d903      	bls.n	8009e54 <ButtonsPress+0x1cc8>
 8009e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8009fcc <ButtonsPress+0x1e40>)
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d112      	bne.n	8009e7a <ButtonsPress+0x1cee>
								SD_WriteData(2);
 8009e54:	2002      	movs	r0, #2
 8009e56:	f7f7 fa5b 	bl	8001310 <SD_WriteData>
								f_ScreenOffChanged = 1;
 8009e5a:	4b55      	ldr	r3, [pc, #340]	@ (8009fb0 <ButtonsPress+0x1e24>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
								previous_frame_set = 23;
 8009e60:	4b5b      	ldr	r3, [pc, #364]	@ (8009fd0 <ButtonsPress+0x1e44>)
 8009e62:	2217      	movs	r2, #23
 8009e64:	701a      	strb	r2, [r3, #0]
								previous_pos_cursor_set = 4;
 8009e66:	4b5b      	ldr	r3, [pc, #364]	@ (8009fd4 <ButtonsPress+0x1e48>)
 8009e68:	2204      	movs	r2, #4
 8009e6a:	701a      	strb	r2, [r3, #0]
								current_frame = 10;
 8009e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009e6e:	220a      	movs	r2, #10
 8009e70:	701a      	strb	r2, [r3, #0]
								pos_cursor = 2;
 8009e72:	4b46      	ldr	r3, [pc, #280]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009e74:	2202      	movs	r2, #2
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	e008      	b.n	8009e8c <ButtonsPress+0x1d00>
								set_fails = 6;
 8009e7a:	4b57      	ldr	r3, [pc, #348]	@ (8009fd8 <ButtonsPress+0x1e4c>)
 8009e7c:	2206      	movs	r2, #6
 8009e7e:	701a      	strb	r2, [r3, #0]
								current_frame = 17;
 8009e80:	4b47      	ldr	r3, [pc, #284]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009e82:	2211      	movs	r2, #17
 8009e84:	701a      	strb	r2, [r3, #0]
								pos_cursor = 3;
 8009e86:	4b41      	ldr	r3, [pc, #260]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009e88:	2203      	movs	r2, #3
 8009e8a:	701a      	strb	r2, [r3, #0]
							f_StSetScreenOff = 0;
 8009e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb8 <ButtonsPress+0x1e2c>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
							cnt_SetScreenOff = 0;
 8009e92:	4b48      	ldr	r3, [pc, #288]	@ (8009fb4 <ButtonsPress+0x1e28>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
							CurrentDigitSetScreenOff = 0;
 8009e98:	4b48      	ldr	r3, [pc, #288]	@ (8009fbc <ButtonsPress+0x1e30>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	701a      	strb	r2, [r3, #0]
							CurrentNumberSetScreenOff = 0;
 8009e9e:	4b48      	ldr	r3, [pc, #288]	@ (8009fc0 <ButtonsPress+0x1e34>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	701a      	strb	r2, [r3, #0]
							f_ScreenOffIsSet = 0;
 8009ea4:	4b47      	ldr	r3, [pc, #284]	@ (8009fc4 <ButtonsPress+0x1e38>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
							memset(ptr_ScreenOffSet, 0, sizeof(ScreenOffSet)/sizeof(uint8_t));
 8009eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8009fdc <ButtonsPress+0x1e50>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2208      	movs	r2, #8
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f009 fd1c 	bl	80138f0 <memset>
							memset(ptr_NumberSetScreenOff, 0, sizeof(NumberSetScreenOff)/sizeof(uint8_t));
 8009eb8:	4b49      	ldr	r3, [pc, #292]	@ (8009fe0 <ButtonsPress+0x1e54>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f009 fd15 	bl	80138f0 <memset>
				break;
 8009ec6:	e118      	b.n	800a0fa <ButtonsPress+0x1f6e>


				// 24. Настройка автоотключения экрана (2)
				case 24:

					switch(pos_cursor)
 8009ec8:	4b30      	ldr	r3, [pc, #192]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f040 8116 	bne.w	800a0fe <ButtonsPress+0x1f72>
					{
						// Назад
						case 0:

							current_frame = 4;
 8009ed2:	4b33      	ldr	r3, [pc, #204]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009ed4:	2204      	movs	r2, #4
 8009ed6:	701a      	strb	r2, [r3, #0]
							pos_cursor = 3;
 8009ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009eda:	2203      	movs	r2, #3
 8009edc:	701a      	strb	r2, [r3, #0]

						break;
 8009ede:	bf00      	nop
					}

				break;
 8009ee0:	e10d      	b.n	800a0fe <ButtonsPress+0x1f72>


				// 25. Текущее время автоотключения экрана
				case 25:

					switch(pos_cursor)
 8009ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	f040 810b 	bne.w	800a102 <ButtonsPress+0x1f76>
					{
						// Назад
						case 4:

							current_frame = 18;
 8009eec:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009eee:	2212      	movs	r2, #18
 8009ef0:	701a      	strb	r2, [r3, #0]
							pos_cursor = 2;
 8009ef2:	4b26      	ldr	r3, [pc, #152]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	701a      	strb	r2, [r3, #0]

						break;
 8009ef8:	bf00      	nop
					}

				break;
 8009efa:	e102      	b.n	800a102 <ButtonsPress+0x1f76>

				// 26. Сообщение об успешном
				// экстренном завершении полива
				case 26:

					switch(pos_cursor)
 8009efc:	4b23      	ldr	r3, [pc, #140]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	f040 8100 	bne.w	800a106 <ButtonsPress+0x1f7a>
					{
						case 2:

							current_frame = 0;
 8009f06:	4b26      	ldr	r3, [pc, #152]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
							pos_cursor = 3;
 8009f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f0e:	2203      	movs	r2, #3
 8009f10:	701a      	strb	r2, [r3, #0]

						break;
 8009f12:	bf00      	nop
					}

				break;
 8009f14:	e0f7      	b.n	800a106 <ButtonsPress+0x1f7a>

				// 27. Сообщение о том,
				// что полив не выполняется
				case 27:

					switch(pos_cursor)
 8009f16:	4b1d      	ldr	r3, [pc, #116]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	f040 80f5 	bne.w	800a10a <ButtonsPress+0x1f7e>
					{
						case 2:

							current_frame = 0;
 8009f20:	4b1f      	ldr	r3, [pc, #124]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	701a      	strb	r2, [r3, #0]
							pos_cursor = 3;
 8009f26:	4b19      	ldr	r3, [pc, #100]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f28:	2203      	movs	r2, #3
 8009f2a:	701a      	strb	r2, [r3, #0]

						break;
 8009f2c:	bf00      	nop
					}

				break;
 8009f2e:	e0ec      	b.n	800a10a <ButtonsPress+0x1f7e>

				// 28. Уведомление о необходимости
				// пополнить резервуар
				case 28:

					switch(pos_cursor)
 8009f30:	4b16      	ldr	r3, [pc, #88]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	f040 80ea 	bne.w	800a10e <ButtonsPress+0x1f82>
					{
						case 4:

							// Пользователь просмотрел уведомление 28
							f_NotificationViewed28 = 1;
 8009f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8009fe4 <ButtonsPress+0x1e58>)
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	701a      	strb	r2, [r3, #0]

							// Переход на предыдущий кадр
							current_frame = prev_frame;
 8009f40:	4b29      	ldr	r3, [pc, #164]	@ (8009fe8 <ButtonsPress+0x1e5c>)
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	4b16      	ldr	r3, [pc, #88]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009f46:	701a      	strb	r2, [r3, #0]
							pos_cursor = prev_pos_cursor;
 8009f48:	4b28      	ldr	r3, [pc, #160]	@ (8009fec <ButtonsPress+0x1e60>)
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f4e:	701a      	strb	r2, [r3, #0]

						break;
 8009f50:	bf00      	nop
					}

				break;
 8009f52:	e0dc      	b.n	800a10e <ButtonsPress+0x1f82>

				// 30. Сообщение о том, что полив не будет
				// выполнен из-за недостатка воды (2)
				case 30:

					switch(pos_cursor)
 8009f54:	4b0d      	ldr	r3, [pc, #52]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	f040 80da 	bne.w	800a112 <ButtonsPress+0x1f86>
					{
						case 2:

							// Переход на предыдущий кадр
							current_frame = prev_frame;
 8009f5e:	4b22      	ldr	r3, [pc, #136]	@ (8009fe8 <ButtonsPress+0x1e5c>)
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa0 <ButtonsPress+0x1e14>)
 8009f64:	701a      	strb	r2, [r3, #0]
							pos_cursor = prev_pos_cursor;
 8009f66:	4b21      	ldr	r3, [pc, #132]	@ (8009fec <ButtonsPress+0x1e60>)
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	4b08      	ldr	r3, [pc, #32]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f6c:	701a      	strb	r2, [r3, #0]

						break;
 8009f6e:	bf00      	nop
					}

				break;
 8009f70:	e0cf      	b.n	800a112 <ButtonsPress+0x1f86>

				// 32. Сообщение о том, что датчик
				// уровня воды будет выключен/включен (2)
				case 32:

					switch(pos_cursor)
 8009f72:	4b06      	ldr	r3, [pc, #24]	@ (8009f8c <ButtonsPress+0x1e00>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	f040 80cd 	bne.w	800a116 <ButtonsPress+0x1f8a>
					{
						case 4:

							// Смена значения флага
							// f_IsWaterLevelSensorOn
							if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 8009f7c:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <ButtonsPress+0x1e04>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d035      	beq.n	8009ff0 <ButtonsPress+0x1e64>
								WaterLevelSensorState.f_IsWaterLevelSensorOn = 0;
 8009f84:	4b02      	ldr	r3, [pc, #8]	@ (8009f90 <ButtonsPress+0x1e04>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e034      	b.n	8009ff6 <ButtonsPress+0x1e6a>
 8009f8c:	20000a3d 	.word	0x20000a3d
 8009f90:	20000a84 	.word	0x20000a84
 8009f94:	20000a34 	.word	0x20000a34
 8009f98:	20000a35 	.word	0x20000a35
 8009f9c:	20000a36 	.word	0x20000a36
 8009fa0:	20000a3c 	.word	0x20000a3c
 8009fa4:	20000120 	.word	0x20000120
 8009fa8:	20000a1d 	.word	0x20000a1d
 8009fac:	20000128 	.word	0x20000128
 8009fb0:	20000a2f 	.word	0x20000a2f
 8009fb4:	20000a2a 	.word	0x20000a2a
 8009fb8:	20000a2b 	.word	0x20000a2b
 8009fbc:	20000a28 	.word	0x20000a28
 8009fc0:	20000a29 	.word	0x20000a29
 8009fc4:	20000a2e 	.word	0x20000a2e
 8009fc8:	20000a7c 	.word	0x20000a7c
 8009fcc:	20000a30 	.word	0x20000a30
 8009fd0:	20000a37 	.word	0x20000a37
 8009fd4:	20000a38 	.word	0x20000a38
 8009fd8:	20000ae3 	.word	0x20000ae3
 8009fdc:	2000012c 	.word	0x2000012c
 8009fe0:	20000018 	.word	0x20000018
 8009fe4:	20000a39 	.word	0x20000a39
 8009fe8:	20000a3a 	.word	0x20000a3a
 8009fec:	20000a3b 	.word	0x20000a3b
							else
								WaterLevelSensorState.f_IsWaterLevelSensorOn = 1;
 8009ff0:	4b4c      	ldr	r3, [pc, #304]	@ (800a124 <ButtonsPress+0x1f98>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

							// Запись структуры WaterLevelSensorState на flash
							SD_WriteData(3);
 8009ff6:	2003      	movs	r0, #3
 8009ff8:	f7f7 f98a 	bl	8001310 <SD_WriteData>

							// Флаг того, что настройки состояния датчика
							// были изменены и записаны на flash
							f_WaterLevelSensorStateChanged = 1;
 8009ffc:	4b4a      	ldr	r3, [pc, #296]	@ (800a128 <ButtonsPress+0x1f9c>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	701a      	strb	r2, [r3, #0]

							// Переход на кадр 5
							current_frame = 5;
 800a002:	4b4a      	ldr	r3, [pc, #296]	@ (800a12c <ButtonsPress+0x1fa0>)
 800a004:	2205      	movs	r2, #5
 800a006:	701a      	strb	r2, [r3, #0]
							pos_cursor = 0;
 800a008:	4b49      	ldr	r3, [pc, #292]	@ (800a130 <ButtonsPress+0x1fa4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]

						break;
 800a00e:	bf00      	nop
					}

				break;
 800a010:	e081      	b.n	800a116 <ButtonsPress+0x1f8a>

				// 33. Сброс настроек (3)
				case 33:

					// Сбросить все настройки
					if (pos_cursor == 0)
 800a012:	4b47      	ldr	r3, [pc, #284]	@ (800a130 <ButtonsPress+0x1fa4>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d13a      	bne.n	800a090 <ButtonsPress+0x1f04>
					{
						// Установка начальной даты
						// и дня недели (состояние сброса)
						SetDateDS(3, 1, 1, 25);
 800a01a:	2319      	movs	r3, #25
 800a01c:	2201      	movs	r2, #1
 800a01e:	2101      	movs	r1, #1
 800a020:	2003      	movs	r0, #3
 800a022:	f7f7 fb1f 	bl	8001664 <SetDateDS>

						// Установка начального времени
						// (состояние сброса)
						SetTimeDS(0, 0, 0);
 800a026:	2200      	movs	r2, #0
 800a028:	2100      	movs	r1, #0
 800a02a:	2000      	movs	r0, #0
 800a02c:	f7f7 fb56 	bl	80016dc <SetTimeDS>

						// Сброс текущих настроек полива
						memset(ptr_WateringParams, 0, sizeof(WateringParams)/sizeof(uint8_t));
 800a030:	4b40      	ldr	r3, [pc, #256]	@ (800a134 <ButtonsPress+0x1fa8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	220c      	movs	r2, #12
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f009 fc59 	bl	80138f0 <memset>

						// Сохранение параметров полива
						SD_WriteData(1);
 800a03e:	2001      	movs	r0, #1
 800a040:	f7f7 f966 	bl	8001310 <SD_WriteData>

						// Флаг того, что настройки полива
						// были изменены и записаны на flash
						f_WateringParamsChanged = 1;
 800a044:	4b3c      	ldr	r3, [pc, #240]	@ (800a138 <ButtonsPress+0x1fac>)
 800a046:	2201      	movs	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]

						// Очистка текущего времени автоотключения экрана
						memset(ptr_ScreenOff, 0, sizeof(ScreenOff)/sizeof(uint8_t));
 800a04a:	4b3c      	ldr	r3, [pc, #240]	@ (800a13c <ButtonsPress+0x1fb0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2208      	movs	r2, #8
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f009 fc4c 	bl	80138f0 <memset>

						// Сохранение параметров
						SD_WriteData(2);
 800a058:	2002      	movs	r0, #2
 800a05a:	f7f7 f959 	bl	8001310 <SD_WriteData>

						// Флаг того, что настройки
						// автоотключения экрана
						// были изменены и записаны на flash
						f_ScreenOffChanged = 1;
 800a05e:	4b38      	ldr	r3, [pc, #224]	@ (800a140 <ButtonsPress+0x1fb4>)
 800a060:	2201      	movs	r2, #1
 800a062:	701a      	strb	r2, [r3, #0]

						// По умолчанию датчик уровня воды включен
						WaterLevelSensorState.f_IsWaterLevelSensorOn = 1;
 800a064:	4b2f      	ldr	r3, [pc, #188]	@ (800a124 <ButtonsPress+0x1f98>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]

						// Запись структуры WaterLevelSensorState на flash
						SD_WriteData(3);
 800a06a:	2003      	movs	r0, #3
 800a06c:	f7f7 f950 	bl	8001310 <SD_WriteData>

						// Флаг того, что настройки состояния датчика
						// были изменены и записаны на flash
						f_WaterLevelSensorStateChanged = 1;
 800a070:	4b2d      	ldr	r3, [pc, #180]	@ (800a128 <ButtonsPress+0x1f9c>)
 800a072:	2201      	movs	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]

						previous_frame_reset = 33;
 800a076:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <ButtonsPress+0x1fb8>)
 800a078:	2221      	movs	r2, #33	@ 0x21
 800a07a:	701a      	strb	r2, [r3, #0]
						previous_pos_cursor_reset = 0;
 800a07c:	4b32      	ldr	r3, [pc, #200]	@ (800a148 <ButtonsPress+0x1fbc>)
 800a07e:	2200      	movs	r2, #0
 800a080:	701a      	strb	r2, [r3, #0]

						// Переход на кадр 22 -
						// Сообщение об успешном сбросе
						current_frame = 22;
 800a082:	4b2a      	ldr	r3, [pc, #168]	@ (800a12c <ButtonsPress+0x1fa0>)
 800a084:	2216      	movs	r2, #22
 800a086:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 800a088:	4b29      	ldr	r3, [pc, #164]	@ (800a130 <ButtonsPress+0x1fa4>)
 800a08a:	2202      	movs	r2, #2
 800a08c:	701a      	strb	r2, [r3, #0]
					{
						current_frame = 5;
						pos_cursor = 2;
					}

				break;
 800a08e:	e044      	b.n	800a11a <ButtonsPress+0x1f8e>
					if (pos_cursor == 2)
 800a090:	4b27      	ldr	r3, [pc, #156]	@ (800a130 <ButtonsPress+0x1fa4>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d140      	bne.n	800a11a <ButtonsPress+0x1f8e>
						current_frame = 5;
 800a098:	4b24      	ldr	r3, [pc, #144]	@ (800a12c <ButtonsPress+0x1fa0>)
 800a09a:	2205      	movs	r2, #5
 800a09c:	701a      	strb	r2, [r3, #0]
						pos_cursor = 2;
 800a09e:	4b24      	ldr	r3, [pc, #144]	@ (800a130 <ButtonsPress+0x1fa4>)
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	701a      	strb	r2, [r3, #0]
				break;
 800a0a4:	e039      	b.n	800a11a <ButtonsPress+0x1f8e>


				default:
				break;
 800a0a6:	bf00      	nop
 800a0a8:	e038      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0aa:	bf00      	nop
 800a0ac:	e036      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ae:	bf00      	nop
 800a0b0:	e034      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0b2:	bf00      	nop
 800a0b4:	e032      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0b6:	bf00      	nop
 800a0b8:	e030      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ba:	bf00      	nop
 800a0bc:	e02e      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0be:	bf00      	nop
 800a0c0:	e02c      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0c2:	bf00      	nop
 800a0c4:	e02a      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0c6:	bf00      	nop
 800a0c8:	e028      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ca:	bf00      	nop
 800a0cc:	e026      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ce:	bf00      	nop
 800a0d0:	e024      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0d2:	bf00      	nop
 800a0d4:	e022      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0d6:	bf00      	nop
 800a0d8:	e020      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0da:	bf00      	nop
 800a0dc:	e01e      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0de:	bf00      	nop
 800a0e0:	e01c      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0e2:	bf00      	nop
 800a0e4:	e01a      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0e6:	bf00      	nop
 800a0e8:	e018      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ea:	bf00      	nop
 800a0ec:	e016      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0ee:	bf00      	nop
 800a0f0:	e014      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0f2:	bf00      	nop
 800a0f4:	e012      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0f6:	bf00      	nop
 800a0f8:	e010      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0fa:	bf00      	nop
 800a0fc:	e00e      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a0fe:	bf00      	nop
 800a100:	e00c      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a102:	bf00      	nop
 800a104:	e00a      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a106:	bf00      	nop
 800a108:	e008      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a10a:	bf00      	nop
 800a10c:	e006      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a10e:	bf00      	nop
 800a110:	e004      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a112:	bf00      	nop
 800a114:	e002      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <ButtonsPress+0x1f90>
				break;
 800a11a:	bf00      	nop
			}
		}
	}
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000a84 	.word	0x20000a84
 800a128:	20000a34 	.word	0x20000a34
 800a12c:	20000a3c 	.word	0x20000a3c
 800a130:	20000a3d 	.word	0x20000a3d
 800a134:	20000120 	.word	0x20000120
 800a138:	20000a1d 	.word	0x20000a1d
 800a13c:	20000128 	.word	0x20000128
 800a140:	20000a2f 	.word	0x20000a2f
 800a144:	20000a35 	.word	0x20000a35
 800a148:	20000a36 	.word	0x20000a36

0800a14c <DrawErrorFrame>:
//============================================================================

// Отрисовка кадра ошибки при
// появлении критической ошибки
void DrawErrorFrame(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af02      	add	r7, sp, #8
	// Отрисовка грустного смайлика
	OLED_DrawBitmap(ImageSad, 50, 50, 7, 7);
 800a152:	2307      	movs	r3, #7
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	2307      	movs	r3, #7
 800a158:	2232      	movs	r2, #50	@ 0x32
 800a15a:	2132      	movs	r1, #50	@ 0x32
 800a15c:	4830      	ldr	r0, [pc, #192]	@ (800a220 <DrawErrorFrame+0xd4>)
 800a15e:	f7f6 fada 	bl	8000716 <OLED_DrawBitmap>

	// "Фатальная ошибка!"
	FontSet(Segoe_UI_Rus_10);
 800a162:	4830      	ldr	r0, [pc, #192]	@ (800a224 <DrawErrorFrame+0xd8>)
 800a164:	f7f6 fe56 	bl	8000e14 <FontSet>
	OLED_DrawStr("Afnfkmyfz", 64, 13 * 1, 1);
 800a168:	2301      	movs	r3, #1
 800a16a:	220d      	movs	r2, #13
 800a16c:	2140      	movs	r1, #64	@ 0x40
 800a16e:	482e      	ldr	r0, [pc, #184]	@ (800a228 <DrawErrorFrame+0xdc>)
 800a170:	f7f6 fda2 	bl	8000cb8 <OLED_DrawStr>
	OLED_DrawStr("jib,rf", 64, 13 * 2, 1);
 800a174:	2301      	movs	r3, #1
 800a176:	221a      	movs	r2, #26
 800a178:	2140      	movs	r1, #64	@ 0x40
 800a17a:	482c      	ldr	r0, [pc, #176]	@ (800a22c <DrawErrorFrame+0xe0>)
 800a17c:	f7f6 fd9c 	bl	8000cb8 <OLED_DrawStr>
	OLED_DrawStr("!", 64 + OLED_GetWidthStr("jib,rf") + 2, 13 * 2, 1);
 800a180:	482a      	ldr	r0, [pc, #168]	@ (800a22c <DrawErrorFrame+0xe0>)
 800a182:	f7f6 fca7 	bl	8000ad4 <OLED_GetWidthStr>
 800a186:	4603      	mov	r3, r0
 800a188:	3342      	adds	r3, #66	@ 0x42
 800a18a:	b2d9      	uxtb	r1, r3
 800a18c:	2301      	movs	r3, #1
 800a18e:	221a      	movs	r2, #26
 800a190:	4827      	ldr	r0, [pc, #156]	@ (800a230 <DrawErrorFrame+0xe4>)
 800a192:	f7f6 fd91 	bl	8000cb8 <OLED_DrawStr>

	// Если обнаружена протечка помпы
	if (f_IsWaterLeak)
 800a196:	4b27      	ldr	r3, [pc, #156]	@ (800a234 <DrawErrorFrame+0xe8>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d025      	beq.n	800a1ea <DrawErrorFrame+0x9e>
	{
		// "Фатальная ошибка! (протечка помпы)"
		OLED_DrawChar_Modified('(', 64, 13 * 3, 1);
 800a19e:	2301      	movs	r3, #1
 800a1a0:	2227      	movs	r2, #39	@ 0x27
 800a1a2:	2140      	movs	r1, #64	@ 0x40
 800a1a4:	2028      	movs	r0, #40	@ 0x28
 800a1a6:	f7f7 fb8b 	bl	80018c0 <OLED_DrawChar_Modified>
		FontSet(Segoe_UI_Rus_10);
 800a1aa:	481e      	ldr	r0, [pc, #120]	@ (800a224 <DrawErrorFrame+0xd8>)
 800a1ac:	f7f6 fe32 	bl	8000e14 <FontSet>
		OLED_DrawStr("ghjntxrf", 64 + OLED_GetWidthStr("(") + 2, 13 * 3, 1);
 800a1b0:	4821      	ldr	r0, [pc, #132]	@ (800a238 <DrawErrorFrame+0xec>)
 800a1b2:	f7f6 fc8f 	bl	8000ad4 <OLED_GetWidthStr>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	3342      	adds	r3, #66	@ 0x42
 800a1ba:	b2d9      	uxtb	r1, r3
 800a1bc:	2301      	movs	r3, #1
 800a1be:	2227      	movs	r2, #39	@ 0x27
 800a1c0:	481e      	ldr	r0, [pc, #120]	@ (800a23c <DrawErrorFrame+0xf0>)
 800a1c2:	f7f6 fd79 	bl	8000cb8 <OLED_DrawStr>
		OLED_DrawStr("gjvgs", 64, 13 * 4, 1);
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	2234      	movs	r2, #52	@ 0x34
 800a1ca:	2140      	movs	r1, #64	@ 0x40
 800a1cc:	481c      	ldr	r0, [pc, #112]	@ (800a240 <DrawErrorFrame+0xf4>)
 800a1ce:	f7f6 fd73 	bl	8000cb8 <OLED_DrawStr>
		OLED_DrawChar_Modified(')', 64 + OLED_GetWidthStr("gjvgs") + 2, 13 * 4, 1);
 800a1d2:	481b      	ldr	r0, [pc, #108]	@ (800a240 <DrawErrorFrame+0xf4>)
 800a1d4:	f7f6 fc7e 	bl	8000ad4 <OLED_GetWidthStr>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	3342      	adds	r3, #66	@ 0x42
 800a1dc:	b2d9      	uxtb	r1, r3
 800a1de:	2301      	movs	r3, #1
 800a1e0:	2234      	movs	r2, #52	@ 0x34
 800a1e2:	2029      	movs	r0, #41	@ 0x29
 800a1e4:	f7f7 fb6c 	bl	80018c0 <OLED_DrawChar_Modified>
		// "Фатальная ошибка! (Micro SD)"
		FontSet(Segoe_UI_Eng_10);
		OLED_DrawStr("(Micro", 64, 13 * 3, 1);
		OLED_DrawStr("SD)", 64 + OLED_GetWidthStr("(Micro") + 3, 13 * 3, 1);
	}
}
 800a1e8:	e017      	b.n	800a21a <DrawErrorFrame+0xce>
	if (f_ErrorSD)
 800a1ea:	4b16      	ldr	r3, [pc, #88]	@ (800a244 <DrawErrorFrame+0xf8>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d013      	beq.n	800a21a <DrawErrorFrame+0xce>
		FontSet(Segoe_UI_Eng_10);
 800a1f2:	4815      	ldr	r0, [pc, #84]	@ (800a248 <DrawErrorFrame+0xfc>)
 800a1f4:	f7f6 fe0e 	bl	8000e14 <FontSet>
		OLED_DrawStr("(Micro", 64, 13 * 3, 1);
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	2227      	movs	r2, #39	@ 0x27
 800a1fc:	2140      	movs	r1, #64	@ 0x40
 800a1fe:	4813      	ldr	r0, [pc, #76]	@ (800a24c <DrawErrorFrame+0x100>)
 800a200:	f7f6 fd5a 	bl	8000cb8 <OLED_DrawStr>
		OLED_DrawStr("SD)", 64 + OLED_GetWidthStr("(Micro") + 3, 13 * 3, 1);
 800a204:	4811      	ldr	r0, [pc, #68]	@ (800a24c <DrawErrorFrame+0x100>)
 800a206:	f7f6 fc65 	bl	8000ad4 <OLED_GetWidthStr>
 800a20a:	4603      	mov	r3, r0
 800a20c:	3343      	adds	r3, #67	@ 0x43
 800a20e:	b2d9      	uxtb	r1, r3
 800a210:	2301      	movs	r3, #1
 800a212:	2227      	movs	r2, #39	@ 0x27
 800a214:	480e      	ldr	r0, [pc, #56]	@ (800a250 <DrawErrorFrame+0x104>)
 800a216:	f7f6 fd4f 	bl	8000cb8 <OLED_DrawStr>
}
 800a21a:	bf00      	nop
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08016884 	.word	0x08016884
 800a224:	080152fc 	.word	0x080152fc
 800a228:	080146c8 	.word	0x080146c8
 800a22c:	080146d4 	.word	0x080146d4
 800a230:	080146dc 	.word	0x080146dc
 800a234:	20000ae1 	.word	0x20000ae1
 800a238:	08014548 	.word	0x08014548
 800a23c:	080146e0 	.word	0x080146e0
 800a240:	080146ec 	.word	0x080146ec
 800a244:	20000aec 	.word	0x20000aec
 800a248:	08015d20 	.word	0x08015d20
 800a24c:	080146f4 	.word	0x080146f4
 800a250:	080146fc 	.word	0x080146fc

0800a254 <CheckFatalErrors>:


// Проверка наличия фатальных ошибок
void CheckFatalErrors(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
	// Фиксирование фатальной ошибки
	// при появлянии протечки или
	//при ошибке в работе с micro sd
	if ((f_IsWaterLeak) || (f_ErrorSD))
 800a258:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <CheckFatalErrors+0x30>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <CheckFatalErrors+0x14>
 800a260:	4b09      	ldr	r3, [pc, #36]	@ (800a288 <CheckFatalErrors+0x34>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <CheckFatalErrors+0x1c>
		f_FatalErrors = 1;
 800a268:	4b08      	ldr	r3, [pc, #32]	@ (800a28c <CheckFatalErrors+0x38>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	e003      	b.n	800a278 <CheckFatalErrors+0x24>
	else
		f_FatalErrors = 0;
 800a270:	4b06      	ldr	r3, [pc, #24]	@ (800a28c <CheckFatalErrors+0x38>)
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20000ae1 	.word	0x20000ae1
 800a288:	20000aec 	.word	0x20000aec
 800a28c:	20000ae4 	.word	0x20000ae4

0800a290 <CheckWaterLeak>:
//	АЦП
//============================================================================

// Проверка протечки помпы
void CheckWaterLeak(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
	// При первом обнаружении утечки
	// запускается таймер на 60 секунд,
	// затем выполняется повторная
	// проверка протечки помпы
	if (mean_adc_ch1 <= 2000)
 800a294:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <CheckWaterLeak+0x44>)
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a29c:	d802      	bhi.n	800a2a4 <CheckWaterLeak+0x14>
		f_StartCheckLeak = 1;
 800a29e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d8 <CheckWaterLeak+0x48>)
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	701a      	strb	r2, [r3, #0]

	if (f_FinishCheckLeak)
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <CheckWaterLeak+0x4c>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00d      	beq.n	800a2ca <CheckWaterLeak+0x3a>
	{
		// Сброс флагов
		f_StartCheckLeak = 0;
 800a2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d8 <CheckWaterLeak+0x48>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	701a      	strb	r2, [r3, #0]
		f_FinishCheckLeak = 0;
 800a2b4:	4b09      	ldr	r3, [pc, #36]	@ (800a2dc <CheckWaterLeak+0x4c>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]

		// Повторная проверка
		if (mean_adc_ch1 <= 2000)
 800a2ba:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <CheckWaterLeak+0x44>)
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a2c2:	d802      	bhi.n	800a2ca <CheckWaterLeak+0x3a>
			f_IsWaterLeak = 1;
 800a2c4:	4b06      	ldr	r3, [pc, #24]	@ (800a2e0 <CheckWaterLeak+0x50>)
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	701a      	strb	r2, [r3, #0]
	}
}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	20000ad8 	.word	0x20000ad8
 800a2d8:	20000ae2 	.word	0x20000ae2
 800a2dc:	2000118e 	.word	0x2000118e
 800a2e0:	20000ae1 	.word	0x20000ae1

0800a2e4 <LED_Control>:


// Управление светодиодами
// на основе уровня воды (индикация уровня воды)
void LED_Control(uint16_t adc_value)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	80fb      	strh	r3, [r7, #6]
	// Моргание тремя светодиодами при отсутствии воды
	if ((adc_value <= 4095) && (adc_value > 3000))
 800a2ee:	88fb      	ldrh	r3, [r7, #6]
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f4:	d224      	bcs.n	800a340 <LED_Control+0x5c>
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d91f      	bls.n	800a340 <LED_Control+0x5c>
	{
		// Сброс светодиодов (синхронизация)
		if (!f_ResetLED)
 800a300:	4b42      	ldr	r3, [pc, #264]	@ (800a40c <LED_Control+0x128>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d114      	bne.n	800a332 <LED_Control+0x4e>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800a308:	2200      	movs	r2, #0
 800a30a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a30e:	4840      	ldr	r0, [pc, #256]	@ (800a410 <LED_Control+0x12c>)
 800a310:	f002 fdae 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a31a:	483d      	ldr	r0, [pc, #244]	@ (800a410 <LED_Control+0x12c>)
 800a31c:	f002 fda8 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a320:	2200      	movs	r2, #0
 800a322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a326:	483a      	ldr	r0, [pc, #232]	@ (800a410 <LED_Control+0x12c>)
 800a328:	f002 fda2 	bl	800ce70 <HAL_GPIO_WritePin>

			f_ResetLED = 1;
 800a32c:	4b37      	ldr	r3, [pc, #220]	@ (800a40c <LED_Control+0x128>)
 800a32e:	2201      	movs	r2, #1
 800a330:	701a      	strb	r2, [r3, #0]
		}

		f_LED_Blink = 1;
 800a332:	4b38      	ldr	r3, [pc, #224]	@ (800a414 <LED_Control+0x130>)
 800a334:	2201      	movs	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
		WaterLevel = NoWater;
 800a338:	4b37      	ldr	r3, [pc, #220]	@ (800a418 <LED_Control+0x134>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	e060      	b.n	800a402 <LED_Control+0x11e>
	}

	else
	{
		f_LED_Blink = 0;
 800a340:	4b34      	ldr	r3, [pc, #208]	@ (800a414 <LED_Control+0x130>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
		f_ResetLED = 0;
 800a346:	4b31      	ldr	r3, [pc, #196]	@ (800a40c <LED_Control+0x128>)
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]

		// Включение одного светодиода при небольшом уровне воды
		if ((adc_value <= 3000) && (adc_value > 1850))
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a352:	4293      	cmp	r3, r2
 800a354:	d81a      	bhi.n	800a38c <LED_Control+0xa8>
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	f240 723a 	movw	r2, #1850	@ 0x73a
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d915      	bls.n	800a38c <LED_Control+0xa8>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a360:	2201      	movs	r2, #1
 800a362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a366:	482a      	ldr	r0, [pc, #168]	@ (800a410 <LED_Control+0x12c>)
 800a368:	f002 fd82 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800a36c:	2200      	movs	r2, #0
 800a36e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a372:	4827      	ldr	r0, [pc, #156]	@ (800a410 <LED_Control+0x12c>)
 800a374:	f002 fd7c 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a378:	2200      	movs	r2, #0
 800a37a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a37e:	4824      	ldr	r0, [pc, #144]	@ (800a410 <LED_Control+0x12c>)
 800a380:	f002 fd76 	bl	800ce70 <HAL_GPIO_WritePin>
			WaterLevel = LowLevel;
 800a384:	4b24      	ldr	r3, [pc, #144]	@ (800a418 <LED_Control+0x134>)
 800a386:	2201      	movs	r2, #1
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	e03a      	b.n	800a402 <LED_Control+0x11e>
		}

		// Включение двух светодиодов при умеренном уровне воды
		else
		if ((adc_value <= 1850) && (adc_value > 1750))
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	f240 723a 	movw	r2, #1850	@ 0x73a
 800a392:	4293      	cmp	r3, r2
 800a394:	d81a      	bhi.n	800a3cc <LED_Control+0xe8>
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d915      	bls.n	800a3cc <LED_Control+0xe8>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a3a6:	481a      	ldr	r0, [pc, #104]	@ (800a410 <LED_Control+0x12c>)
 800a3a8:	f002 fd62 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a3b2:	4817      	ldr	r0, [pc, #92]	@ (800a410 <LED_Control+0x12c>)
 800a3b4:	f002 fd5c 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a3be:	4814      	ldr	r0, [pc, #80]	@ (800a410 <LED_Control+0x12c>)
 800a3c0:	f002 fd56 	bl	800ce70 <HAL_GPIO_WritePin>
			WaterLevel = MidLevel;
 800a3c4:	4b14      	ldr	r3, [pc, #80]	@ (800a418 <LED_Control+0x134>)
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	e01a      	b.n	800a402 <LED_Control+0x11e>
		}

		// Включение трёх светодиодов при большом количестве воды
		else
		if ((adc_value <= 1750) && (adc_value >= 0))
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d815      	bhi.n	800a402 <LED_Control+0x11e>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a3dc:	480c      	ldr	r0, [pc, #48]	@ (800a410 <LED_Control+0x12c>)
 800a3de:	f002 fd47 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a3e8:	4809      	ldr	r0, [pc, #36]	@ (800a410 <LED_Control+0x12c>)
 800a3ea:	f002 fd41 	bl	800ce70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a3f4:	4806      	ldr	r0, [pc, #24]	@ (800a410 <LED_Control+0x12c>)
 800a3f6:	f002 fd3b 	bl	800ce70 <HAL_GPIO_WritePin>
			WaterLevel = HighLevel;
 800a3fa:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <LED_Control+0x134>)
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a400:	e7ff      	b.n	800a402 <LED_Control+0x11e>
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000add 	.word	0x20000add
 800a410:	40020400 	.word	0x40020400
 800a414:	20000adc 	.word	0x20000adc
 800a418:	20000134 	.word	0x20000134

0800a41c <IsWaterLevelChanged>:


// Проверка изменения уровня воды
void IsWaterLevelChanged(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
	new_WaterLevel = WaterLevel;
 800a420:	4b0b      	ldr	r3, [pc, #44]	@ (800a450 <IsWaterLevelChanged+0x34>)
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	4b0b      	ldr	r3, [pc, #44]	@ (800a454 <IsWaterLevelChanged+0x38>)
 800a426:	701a      	strb	r2, [r3, #0]

	// Если было изменение уровня воды на NoWater
	if ((new_WaterLevel == NoWater) &&
 800a428:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <IsWaterLevelChanged+0x38>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d106      	bne.n	800a43e <IsWaterLevelChanged+0x22>
		(old_WaterLevel == LowLevel))
 800a430:	4b09      	ldr	r3, [pc, #36]	@ (800a458 <IsWaterLevelChanged+0x3c>)
 800a432:	781b      	ldrb	r3, [r3, #0]
	if ((new_WaterLevel == NoWater) &&
 800a434:	2b01      	cmp	r3, #1
 800a436:	d102      	bne.n	800a43e <IsWaterLevelChanged+0x22>
		f_WaterLevelChangedNoWater = 1;
 800a438:	4b08      	ldr	r3, [pc, #32]	@ (800a45c <IsWaterLevelChanged+0x40>)
 800a43a:	2201      	movs	r2, #1
 800a43c:	701a      	strb	r2, [r3, #0]

	old_WaterLevel = new_WaterLevel;
 800a43e:	4b05      	ldr	r3, [pc, #20]	@ (800a454 <IsWaterLevelChanged+0x38>)
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	4b05      	ldr	r3, [pc, #20]	@ (800a458 <IsWaterLevelChanged+0x3c>)
 800a444:	701a      	strb	r2, [r3, #0]
}
 800a446:	bf00      	nop
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	20000134 	.word	0x20000134
 800a454:	20000ade 	.word	0x20000ade
 800a458:	20000adf 	.word	0x20000adf
 800a45c:	20000ae0 	.word	0x20000ae0

0800a460 <ADC_DataProcessing>:


// Сохранение и обработка данных с АЦП
void ADC_DataProcessing(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
	// Суммарное значение АЦП
	// для расчёта среднего значения
	uint32_t sum_adc_ch0 = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]
	uint32_t sum_adc_ch1 = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	71fb      	strb	r3, [r7, #7]

	// Если преобразование АЦП завершено
	if (f_AdcEndOfConversion)
 800a472:	4b60      	ldr	r3, [pc, #384]	@ (800a5f4 <ADC_DataProcessing+0x194>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80b6 	beq.w	800a5ea <ADC_DataProcessing+0x18a>
	{
		// Сброс флага завершения преобразования АЦП
		f_AdcEndOfConversion = 0;
 800a47e:	4b5d      	ldr	r3, [pc, #372]	@ (800a5f4 <ADC_DataProcessing+0x194>)
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]

		//----------------------------------------------
		// Остановка АЦП, перенос данных в массивы
		//----------------------------------------------
		HAL_ADC_Stop_DMA(&hadc1);
 800a484:	485c      	ldr	r0, [pc, #368]	@ (800a5f8 <ADC_DataProcessing+0x198>)
 800a486:	f001 fb21 	bl	800bacc <HAL_ADC_Stop_DMA>

		adc_result_ch0[adc_index] = adc_data[0];
 800a48a:	4b5c      	ldr	r3, [pc, #368]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	4b5b      	ldr	r3, [pc, #364]	@ (800a600 <ADC_DataProcessing+0x1a0>)
 800a492:	8819      	ldrh	r1, [r3, #0]
 800a494:	4b5b      	ldr	r3, [pc, #364]	@ (800a604 <ADC_DataProcessing+0x1a4>)
 800a496:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_result_ch1[adc_index] = adc_data[1];
 800a49a:	4b58      	ldr	r3, [pc, #352]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4b57      	ldr	r3, [pc, #348]	@ (800a600 <ADC_DataProcessing+0x1a0>)
 800a4a2:	8859      	ldrh	r1, [r3, #2]
 800a4a4:	4b58      	ldr	r3, [pc, #352]	@ (800a608 <ADC_DataProcessing+0x1a8>)
 800a4a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		adc_index++;
 800a4aa:	4b54      	ldr	r3, [pc, #336]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	4b52      	ldr	r3, [pc, #328]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a4b4:	701a      	strb	r2, [r3, #0]

		if (adc_index == AdcArraySize)
 800a4b6:	4b51      	ldr	r3, [pc, #324]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b10      	cmp	r3, #16
 800a4bc:	d105      	bne.n	800a4ca <ADC_DataProcessing+0x6a>
		{
			adc_index = 0;
 800a4be:	4b4f      	ldr	r3, [pc, #316]	@ (800a5fc <ADC_DataProcessing+0x19c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]

			// Флаг того, что набрано
			// достаточно измерений АЦП
			f_AdcFull = 1;
 800a4c4:	4b51      	ldr	r3, [pc, #324]	@ (800a60c <ADC_DataProcessing+0x1ac>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	701a      	strb	r2, [r3, #0]
		//----------------------------------------------
		// Анализ данных
		//----------------------------------------------

		// Если набрано достаточно измерений АЦП
		if (f_AdcFull)
 800a4ca:	4b50      	ldr	r3, [pc, #320]	@ (800a60c <ADC_DataProcessing+0x1ac>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d032      	beq.n	800a538 <ADC_DataProcessing+0xd8>
		{
			for (i = 0; i < AdcArraySize; i++)
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	71fb      	strb	r3, [r7, #7]
 800a4d6:	e012      	b.n	800a4fe <ADC_DataProcessing+0x9e>
			{
				sum_adc_ch0 += adc_result_ch0[i];
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	4a4a      	ldr	r2, [pc, #296]	@ (800a604 <ADC_DataProcessing+0x1a4>)
 800a4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
				sum_adc_ch1 += adc_result_ch1[i];
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	4a47      	ldr	r2, [pc, #284]	@ (800a608 <ADC_DataProcessing+0x1a8>)
 800a4ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
			for (i = 0; i < AdcArraySize; i++)
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	71fb      	strb	r3, [r7, #7]
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	2b0f      	cmp	r3, #15
 800a502:	d9e9      	bls.n	800a4d8 <ADC_DataProcessing+0x78>
			}

			// Среднее значение АЦП (в отсчётах)
			mean_adc_ch0 = (uint16_t) (sum_adc_ch0 / AdcArraySize);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	091b      	lsrs	r3, r3, #4
 800a508:	b29a      	uxth	r2, r3
 800a50a:	4b41      	ldr	r3, [pc, #260]	@ (800a610 <ADC_DataProcessing+0x1b0>)
 800a50c:	801a      	strh	r2, [r3, #0]
			mean_adc_ch1 = (uint16_t) (sum_adc_ch1 / AdcArraySize);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	091b      	lsrs	r3, r3, #4
 800a512:	b29a      	uxth	r2, r3
 800a514:	4b3f      	ldr	r3, [pc, #252]	@ (800a614 <ADC_DataProcessing+0x1b4>)
 800a516:	801a      	strh	r2, [r3, #0]

			// Очистка массивов
			memset((char*) &adc_result_ch0[0], 0, sizeof(adc_result_ch0));
 800a518:	2220      	movs	r2, #32
 800a51a:	2100      	movs	r1, #0
 800a51c:	4839      	ldr	r0, [pc, #228]	@ (800a604 <ADC_DataProcessing+0x1a4>)
 800a51e:	f009 f9e7 	bl	80138f0 <memset>
			memset((char*) &adc_result_ch1[0], 0, sizeof(adc_result_ch1));
 800a522:	2220      	movs	r2, #32
 800a524:	2100      	movs	r1, #0
 800a526:	4838      	ldr	r0, [pc, #224]	@ (800a608 <ADC_DataProcessing+0x1a8>)
 800a528:	f009 f9e2 	bl	80138f0 <memset>

			f_AdcFull = 0;
 800a52c:	4b37      	ldr	r3, [pc, #220]	@ (800a60c <ADC_DataProcessing+0x1ac>)
 800a52e:	2200      	movs	r2, #0
 800a530:	701a      	strb	r2, [r3, #0]

			// Флаг начала анализа данных с АЦП
			f_StartAnalyzingAdcData = 1;
 800a532:	4b39      	ldr	r3, [pc, #228]	@ (800a618 <ADC_DataProcessing+0x1b8>)
 800a534:	2201      	movs	r2, #1
 800a536:	701a      	strb	r2, [r3, #0]
		}

		// Сброс флагов, если есть вода
		if (WaterLevel != NoWater)
 800a538:	4b38      	ldr	r3, [pc, #224]	@ (800a61c <ADC_DataProcessing+0x1bc>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <ADC_DataProcessing+0xec>
		{
			f_WaterLevelChangedNoWater = 0;
 800a540:	4b37      	ldr	r3, [pc, #220]	@ (800a620 <ADC_DataProcessing+0x1c0>)
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
			f_NotificationViewed28 = 0;
 800a546:	4b37      	ldr	r3, [pc, #220]	@ (800a624 <ADC_DataProcessing+0x1c4>)
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
		}

		// Проверка изменения уровня воды
		IsWaterLevelChanged();
 800a54c:	f7ff ff66 	bl	800a41c <IsWaterLevelChanged>

		if (f_StartAnalyzingAdcData)
 800a550:	4b31      	ldr	r3, [pc, #196]	@ (800a618 <ADC_DataProcessing+0x1b8>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d03d      	beq.n	800a5d4 <ADC_DataProcessing+0x174>
		{
			// Если датчик уровня воды включен
			if (WaterLevelSensorState.f_IsWaterLevelSensorOn)
 800a558:	4b33      	ldr	r3, [pc, #204]	@ (800a628 <ADC_DataProcessing+0x1c8>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01f      	beq.n	800a5a0 <ADC_DataProcessing+0x140>
			{
				// Включение светодиодов
				// в зависимости от уровня воды
				LED_Control(mean_adc_ch0);
 800a560:	4b2b      	ldr	r3, [pc, #172]	@ (800a610 <ADC_DataProcessing+0x1b0>)
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff febd 	bl	800a2e4 <LED_Control>

				// Если уровень воды в резервуаре
				// изменился на NoWater
				if (f_WaterLevelChangedNoWater)
 800a56a:	4b2d      	ldr	r3, [pc, #180]	@ (800a620 <ADC_DataProcessing+0x1c0>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d02e      	beq.n	800a5d0 <ADC_DataProcessing+0x170>
				{
					// Если пользователь ранее
					// не видел уведомление 28
					if (!f_NotificationViewed28)
 800a572:	4b2c      	ldr	r3, [pc, #176]	@ (800a624 <ADC_DataProcessing+0x1c4>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d12a      	bne.n	800a5d0 <ADC_DataProcessing+0x170>
					{
						if (current_frame != 28)
 800a57a:	4b2c      	ldr	r3, [pc, #176]	@ (800a62c <ADC_DataProcessing+0x1cc>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b1c      	cmp	r3, #28
 800a580:	d007      	beq.n	800a592 <ADC_DataProcessing+0x132>
						{
							// Сохранение текущего кадра
							prev_frame = current_frame;
 800a582:	4b2a      	ldr	r3, [pc, #168]	@ (800a62c <ADC_DataProcessing+0x1cc>)
 800a584:	781a      	ldrb	r2, [r3, #0]
 800a586:	4b2a      	ldr	r3, [pc, #168]	@ (800a630 <ADC_DataProcessing+0x1d0>)
 800a588:	701a      	strb	r2, [r3, #0]
							prev_pos_cursor = pos_cursor;
 800a58a:	4b2a      	ldr	r3, [pc, #168]	@ (800a634 <ADC_DataProcessing+0x1d4>)
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	4b2a      	ldr	r3, [pc, #168]	@ (800a638 <ADC_DataProcessing+0x1d8>)
 800a590:	701a      	strb	r2, [r3, #0]
						}

						// 28. Уведомление о необходимости
						// пополнить резервуар
						current_frame = 28;
 800a592:	4b26      	ldr	r3, [pc, #152]	@ (800a62c <ADC_DataProcessing+0x1cc>)
 800a594:	221c      	movs	r2, #28
 800a596:	701a      	strb	r2, [r3, #0]
						pos_cursor = 4;
 800a598:	4b26      	ldr	r3, [pc, #152]	@ (800a634 <ADC_DataProcessing+0x1d4>)
 800a59a:	2204      	movs	r2, #4
 800a59c:	701a      	strb	r2, [r3, #0]
 800a59e:	e017      	b.n	800a5d0 <ADC_DataProcessing+0x170>
			}

			// Выключение всех светодиодов
			else
			{
				f_LED_Blink = 0;
 800a5a0:	4b26      	ldr	r3, [pc, #152]	@ (800a63c <ADC_DataProcessing+0x1dc>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
				f_ResetLED = 0;
 800a5a6:	4b26      	ldr	r3, [pc, #152]	@ (800a640 <ADC_DataProcessing+0x1e0>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a5b2:	4824      	ldr	r0, [pc, #144]	@ (800a644 <ADC_DataProcessing+0x1e4>)
 800a5b4:	f002 fc5c 	bl	800ce70 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a5be:	4821      	ldr	r0, [pc, #132]	@ (800a644 <ADC_DataProcessing+0x1e4>)
 800a5c0:	f002 fc56 	bl	800ce70 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a5ca:	481e      	ldr	r0, [pc, #120]	@ (800a644 <ADC_DataProcessing+0x1e4>)
 800a5cc:	f002 fc50 	bl	800ce70 <HAL_GPIO_WritePin>
			}

			// Проверка утечки воды
			CheckWaterLeak();
 800a5d0:	f7ff fe5e 	bl	800a290 <CheckWaterLeak>
		}

		//----------------------------------------------
		// Запуск АЦП
		//----------------------------------------------
		adc_data[0] = 0;
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a600 <ADC_DataProcessing+0x1a0>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	801a      	strh	r2, [r3, #0]
		adc_data[1] = 0;
 800a5da:	4b09      	ldr	r3, [pc, #36]	@ (800a600 <ADC_DataProcessing+0x1a0>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	805a      	strh	r2, [r3, #2]

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 2);
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	4907      	ldr	r1, [pc, #28]	@ (800a600 <ADC_DataProcessing+0x1a0>)
 800a5e4:	4804      	ldr	r0, [pc, #16]	@ (800a5f8 <ADC_DataProcessing+0x198>)
 800a5e6:	f001 f981 	bl	800b8ec <HAL_ADC_Start_DMA>
	}
}
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	2000118d 	.word	0x2000118d
 800a5f8:	20000648 	.word	0x20000648
 800a5fc:	20000ad4 	.word	0x20000ad4
 800a600:	20000a90 	.word	0x20000a90
 800a604:	20000a94 	.word	0x20000a94
 800a608:	20000ab4 	.word	0x20000ab4
 800a60c:	20000ada 	.word	0x20000ada
 800a610:	20000ad6 	.word	0x20000ad6
 800a614:	20000ad8 	.word	0x20000ad8
 800a618:	20000adb 	.word	0x20000adb
 800a61c:	20000134 	.word	0x20000134
 800a620:	20000ae0 	.word	0x20000ae0
 800a624:	20000a39 	.word	0x20000a39
 800a628:	20000a84 	.word	0x20000a84
 800a62c:	20000a3c 	.word	0x20000a3c
 800a630:	20000a3a 	.word	0x20000a3a
 800a634:	20000a3d 	.word	0x20000a3d
 800a638:	20000a3b 	.word	0x20000a3b
 800a63c:	20000adc 	.word	0x20000adc
 800a640:	20000add 	.word	0x20000add
 800a644:	40020400 	.word	0x40020400

0800a648 <MountDisk>:
//	Другое
//============================================================================

// Монтирование логического диска
void MountDisk(void)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
	if (f_mount(&USERFatFS, USERPath, 0) != FR_OK)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4906      	ldr	r1, [pc, #24]	@ (800a668 <MountDisk+0x20>)
 800a650:	4806      	ldr	r0, [pc, #24]	@ (800a66c <MountDisk+0x24>)
 800a652:	f008 fa79 	bl	8012b48 <f_mount>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <MountDisk+0x1a>
		f_ErrorSD = 1;
 800a65c:	4b04      	ldr	r3, [pc, #16]	@ (800a670 <MountDisk+0x28>)
 800a65e:	2201      	movs	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
}
 800a662:	bf00      	nop
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	2000119c 	.word	0x2000119c
 800a66c:	200011a0 	.word	0x200011a0
 800a670:	20000aec 	.word	0x20000aec

0800a674 <InitAll>:

// Инициализация всего и
// определение начальных
// параметров при включении
void InitAll(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
	// Один из двух выходов для управления помпой.
	// На этом выходе можно всегда поддерживать высокий уровень,
	// а вторым выходом непосредственно управлять помпой
	HAL_GPIO_WritePin(Pump1_GPIO_Port, Pump1_Pin, GPIO_PIN_SET);
 800a678:	2201      	movs	r2, #1
 800a67a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a67e:	4826      	ldr	r0, [pc, #152]	@ (800a718 <InitAll+0xa4>)
 800a680:	f002 fbf6 	bl	800ce70 <HAL_GPIO_WritePin>

	// Выключение помпы
	PumpOff();
 800a684:	2201      	movs	r2, #1
 800a686:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a68a:	4824      	ldr	r0, [pc, #144]	@ (800a71c <InitAll+0xa8>)
 800a68c:	f002 fbf0 	bl	800ce70 <HAL_GPIO_WritePin>

	// Кнопки для опроса
	KEYB_Add_Button(Button_Left_GPIO_Port, Button_Left_Pin, KEYB_LEFT, KEYB_BUTTON_ACTIVE);
 800a690:	2300      	movs	r3, #0
 800a692:	2202      	movs	r2, #2
 800a694:	2110      	movs	r1, #16
 800a696:	4821      	ldr	r0, [pc, #132]	@ (800a71c <InitAll+0xa8>)
 800a698:	f7f6 fbea 	bl	8000e70 <KEYB_Add_Button>
	KEYB_Add_Button(Button_Right_GPIO_Port, Button_Right_Pin, KEYB_RIGHT, KEYB_BUTTON_ACTIVE);
 800a69c:	2300      	movs	r3, #0
 800a69e:	2203      	movs	r2, #3
 800a6a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a6a4:	481c      	ldr	r0, [pc, #112]	@ (800a718 <InitAll+0xa4>)
 800a6a6:	f7f6 fbe3 	bl	8000e70 <KEYB_Add_Button>
	KEYB_Add_Button(Button_Up_GPIO_Port, Button_Up_Pin, KEYB_UP, KEYB_BUTTON_ACTIVE);
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a6b2:	4819      	ldr	r0, [pc, #100]	@ (800a718 <InitAll+0xa4>)
 800a6b4:	f7f6 fbdc 	bl	8000e70 <KEYB_Add_Button>
	KEYB_Add_Button(Button_Down_GPIO_Port, Button_Down_Pin, KEYB_DOWN, KEYB_BUTTON_ACTIVE);
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a6c0:	4815      	ldr	r0, [pc, #84]	@ (800a718 <InitAll+0xa4>)
 800a6c2:	f7f6 fbd5 	bl	8000e70 <KEYB_Add_Button>
	KEYB_Add_Button(Button_Ok_GPIO_Port, Button_Ok_Pin, KEYB_OK, KEYB_BUTTON_ACTIVE);
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2204      	movs	r2, #4
 800a6ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a6ce:	4812      	ldr	r0, [pc, #72]	@ (800a718 <InitAll+0xa4>)
 800a6d0:	f7f6 fbce 	bl	8000e70 <KEYB_Add_Button>

	// Запуск таймера 2 (для обработки кнопок)
	TIM2->CR1 |= TIM_CR1_CEN;
 800a6d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	6013      	str	r3, [r2, #0]

	// Запуск таймера 5 (для управления светодиодами)
	HAL_TIM_Base_Start_IT(&htim5);
 800a6e4:	480e      	ldr	r0, [pc, #56]	@ (800a720 <InitAll+0xac>)
 800a6e6:	f004 ff65 	bl	800f5b4 <HAL_TIM_Base_Start_IT>

	// Инициализация дисплея
	OLED_Init(&hi2c1);
 800a6ea:	480e      	ldr	r0, [pc, #56]	@ (800a724 <InitAll+0xb0>)
 800a6ec:	f7f5 ff98 	bl	8000620 <OLED_Init>

	// Установка начальных возможных
	// позиций курсора (кадр №0)
	DefaultCursorPositions();
 800a6f0:	f7fd fba2 	bl	8007e38 <DefaultCursorPositions>

	// Монтируем логический диск
	MountDisk();
 800a6f4:	f7ff ffa8 	bl	800a648 <MountDisk>

	// Чтение настроек полива
	// и времени автоотключения экрана
	// при включении (при успешном монтировании диска)
	if (!f_ErrorSD)
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <InitAll+0xb4>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <InitAll+0x90>
		InitReadFlashParams();
 800a700:	f7f6 ff64 	bl	80015cc <InitReadFlashParams>

	// Определение времени
	// автоотключения экрана
	// при включении
	InitScreenOff();
 800a704:	f7f8 fac2 	bl	8002c8c <InitScreenOff>

	// Включение АЦП
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 2);
 800a708:	2202      	movs	r2, #2
 800a70a:	4908      	ldr	r1, [pc, #32]	@ (800a72c <InitAll+0xb8>)
 800a70c:	4808      	ldr	r0, [pc, #32]	@ (800a730 <InitAll+0xbc>)
 800a70e:	f001 f8ed 	bl	800b8ec <HAL_ADC_Start_DMA>
}
 800a712:	bf00      	nop
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40020000 	.word	0x40020000
 800a71c:	40020400 	.word	0x40020400
 800a720:	20000990 	.word	0x20000990
 800a724:	200006f8 	.word	0x200006f8
 800a728:	20000aec 	.word	0x20000aec
 800a72c:	20000a90 	.word	0x20000a90
 800a730:	20000648 	.word	0x20000648

0800a734 <DrawSleepFrame>:


// Отрисовка кадра со спящим смайликом
void DrawSleepFrame(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af02      	add	r7, sp, #8
	// Отрисовка смайлика
	OLED_DrawBitmap(ImageSleepMode, 64, 64, 3, 0);
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2303      	movs	r3, #3
 800a740:	2240      	movs	r2, #64	@ 0x40
 800a742:	2140      	movs	r1, #64	@ 0x40
 800a744:	480a      	ldr	r0, [pc, #40]	@ (800a770 <DrawSleepFrame+0x3c>)
 800a746:	f7f5 ffe6 	bl	8000716 <OLED_DrawBitmap>

	// "Спящий режим"
	FontSet(Segoe_UI_Rus_12);
 800a74a:	480a      	ldr	r0, [pc, #40]	@ (800a774 <DrawSleepFrame+0x40>)
 800a74c:	f7f6 fb62 	bl	8000e14 <FontSet>
	OLED_DrawStr("Cgzobq", 64 + 2, 13 * 2, 1);
 800a750:	2301      	movs	r3, #1
 800a752:	221a      	movs	r2, #26
 800a754:	2142      	movs	r1, #66	@ 0x42
 800a756:	4808      	ldr	r0, [pc, #32]	@ (800a778 <DrawSleepFrame+0x44>)
 800a758:	f7f6 faae 	bl	8000cb8 <OLED_DrawStr>
	OLED_DrawStr("ht;bv", 64 + 2 + 5, 13 * 3 + 2, 1);
 800a75c:	2301      	movs	r3, #1
 800a75e:	2229      	movs	r2, #41	@ 0x29
 800a760:	2147      	movs	r1, #71	@ 0x47
 800a762:	4806      	ldr	r0, [pc, #24]	@ (800a77c <DrawSleepFrame+0x48>)
 800a764:	f7f6 faa8 	bl	8000cb8 <OLED_DrawStr>
}
 800a768:	bf00      	nop
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	08016684 	.word	0x08016684
 800a774:	08014758 	.word	0x08014758
 800a778:	08014700 	.word	0x08014700
 800a77c:	08014708 	.word	0x08014708

0800a780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a784:	f000 fffc 	bl	800b780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a788:	f000 f85e 	bl	800a848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a78c:	f000 fb34 	bl	800adf8 <MX_GPIO_Init>
  MX_DMA_Init();
 800a790:	f000 fb02 	bl	800ad98 <MX_DMA_Init>
  MX_ADC1_Init();
 800a794:	f000 f8c2 	bl	800a91c <MX_ADC1_Init>
  MX_CRC_Init();
 800a798:	f000 f920 	bl	800a9dc <MX_CRC_Init>
  MX_I2C1_Init();
 800a79c:	f000 f932 	bl	800aa04 <MX_I2C1_Init>
  MX_I2C2_Init();
 800a7a0:	f000 f95e 	bl	800aa60 <MX_I2C2_Init>
  MX_TIM2_Init();
 800a7a4:	f000 f9c0 	bl	800ab28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a7a8:	f000 fa0c 	bl	800abc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800a7ac:	f000 fa58 	bl	800ac60 <MX_TIM4_Init>
  MX_SPI1_Init();
 800a7b0:	f000 f984 	bl	800aabc <MX_SPI1_Init>
  MX_FATFS_Init();
 800a7b4:	f005 fb16 	bl	800fde4 <MX_FATFS_Init>
  MX_TIM5_Init();
 800a7b8:	f000 faa0 	bl	800acfc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Инициализация всего и
  // определение начальных
  // параметров при включении
  InitAll();
 800a7bc:	f7ff ff5a 	bl	800a674 <InitAll>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Проверка наличия критичесих ошибок
	  CheckFatalErrors();
 800a7c0:	f7ff fd48 	bl	800a254 <CheckFatalErrors>

	  // Если нет критических ошибок
	  if (!f_FatalErrors)
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a834 <main+0xb4>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d125      	bne.n	800a818 <main+0x98>
	  {
		  // Чтение настроек,
		  // если они были изменены
		  ReadFlashParams();
 800a7cc:	f7f6 fe9c 	bl	8001508 <ReadFlashParams>

		  // Чтение текущего времени
		  Get_Time();
 800a7d0:	f7f6 ffb4 	bl	800173c <Get_Time>

		  // Обработка данных с АЦП
		  ADC_DataProcessing();
 800a7d4:	f7ff fe44 	bl	800a460 <ADC_DataProcessing>

		  // Обновление температуры
		  force_temp_conv();
 800a7d8:	f7f7 f800 	bl	80017dc <force_temp_conv>

		  // Очистка экрана
		  OLED_Clear(0);
 800a7dc:	2000      	movs	r0, #0
 800a7de:	f7f5 ff87 	bl	80006f0 <OLED_Clear>

		  // Обработка нажатий на кнопки
		  ButtonsPress();
 800a7e2:	f7fd fcd3 	bl	800818c <ButtonsPress>

		  // Если установлен "спящий" режим
		  if (f_SleepMode)
 800a7e6:	4b14      	ldr	r3, [pc, #80]	@ (800a838 <main+0xb8>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <main+0x80>
		  {
			  // Отрисовка кадра со смайликом, если после
			  // установки спящего режима не прошло 30 секунд
			  if (f_DrawFrameSleepMode)
 800a7f0:	4b12      	ldr	r3, [pc, #72]	@ (800a83c <main+0xbc>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00b      	beq.n	800a812 <main+0x92>
				  DrawSleepFrame();
 800a7fa:	f7ff ff9b 	bl	800a734 <DrawSleepFrame>
 800a7fe:	e008      	b.n	800a812 <main+0x92>
		  // Обычный режим
		  else
		  {
			  // Установка новых возможных позиций
			  // курсора, если кадр изменился
			  SetCursorPositions();
 800a800:	f7fd fb4e 	bl	8007ea0 <SetCursorPositions>

			  // Отрисовка курсора
			  DrawCursor();
 800a804:	f7fd f958 	bl	8007ab8 <DrawCursor>

			  // Построение текущего кадра
			  BuildFrame(current_frame);
 800a808:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <main+0xc0>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7f9 faad 	bl	8003d6c <BuildFrame>
		  }

		  // Включение помпы (начало полива)
		  IsTimeToStartWatering();
 800a812:	f7f9 fa1b 	bl	8003c4c <IsTimeToStartWatering>
 800a816:	e00a      	b.n	800a82e <main+0xae>

	  // Если есть критические ошибки
	  else
	  {
		  // Отключение помпы
		  PumpOff();
 800a818:	2201      	movs	r2, #1
 800a81a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a81e:	4809      	ldr	r0, [pc, #36]	@ (800a844 <main+0xc4>)
 800a820:	f002 fb26 	bl	800ce70 <HAL_GPIO_WritePin>

		  // Очистка экрана
		  OLED_Clear(0);
 800a824:	2000      	movs	r0, #0
 800a826:	f7f5 ff63 	bl	80006f0 <OLED_Clear>

		  // Отрисовка кадра ошибки
		  DrawErrorFrame();
 800a82a:	f7ff fc8f 	bl	800a14c <DrawErrorFrame>
	  }

	  // Вывод следующего кадра
	  OLED_UpdateScreen();
 800a82e:	f7f6 faab 	bl	8000d88 <OLED_UpdateScreen>
	  CheckFatalErrors();
 800a832:	e7c5      	b.n	800a7c0 <main+0x40>
 800a834:	20000ae4 	.word	0x20000ae4
 800a838:	20001182 	.word	0x20001182
 800a83c:	2000118c 	.word	0x2000118c
 800a840:	20000a3c 	.word	0x20000a3c
 800a844:	40020400 	.word	0x40020400

0800a848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b094      	sub	sp, #80	@ 0x50
 800a84c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a84e:	f107 0320 	add.w	r3, r7, #32
 800a852:	2230      	movs	r2, #48	@ 0x30
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f009 f84a 	bl	80138f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	605a      	str	r2, [r3, #4]
 800a866:	609a      	str	r2, [r3, #8]
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a86c:	2300      	movs	r3, #0
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	4b28      	ldr	r3, [pc, #160]	@ (800a914 <SystemClock_Config+0xcc>)
 800a872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a874:	4a27      	ldr	r2, [pc, #156]	@ (800a914 <SystemClock_Config+0xcc>)
 800a876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a87a:	6413      	str	r3, [r2, #64]	@ 0x40
 800a87c:	4b25      	ldr	r3, [pc, #148]	@ (800a914 <SystemClock_Config+0xcc>)
 800a87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a884:	60bb      	str	r3, [r7, #8]
 800a886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800a888:	2300      	movs	r3, #0
 800a88a:	607b      	str	r3, [r7, #4]
 800a88c:	4b22      	ldr	r3, [pc, #136]	@ (800a918 <SystemClock_Config+0xd0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a894:	4a20      	ldr	r2, [pc, #128]	@ (800a918 <SystemClock_Config+0xd0>)
 800a896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	4b1e      	ldr	r3, [pc, #120]	@ (800a918 <SystemClock_Config+0xd0>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a8a4:	607b      	str	r3, [r7, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a8ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a8b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a8bc:	2319      	movs	r3, #25
 800a8be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800a8c0:	2390      	movs	r3, #144	@ 0x90
 800a8c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a8c8:	2304      	movs	r3, #4
 800a8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a8cc:	f107 0320 	add.w	r3, r7, #32
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f003 fdd3 	bl	800e47c <HAL_RCC_OscConfig>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a8dc:	f000 fb0e 	bl	800aefc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a8e0:	230f      	movs	r3, #15
 800a8e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a8ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f004 f835 	bl	800e96c <HAL_RCC_ClockConfig>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a908:	f000 faf8 	bl	800aefc <Error_Handler>
  }
}
 800a90c:	bf00      	nop
 800a90e:	3750      	adds	r7, #80	@ 0x50
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40023800 	.word	0x40023800
 800a918:	40007000 	.word	0x40007000

0800a91c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a922:	463b      	mov	r3, r7
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	605a      	str	r2, [r3, #4]
 800a92a:	609a      	str	r2, [r3, #8]
 800a92c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a92e:	4b28      	ldr	r3, [pc, #160]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a930:	4a28      	ldr	r2, [pc, #160]	@ (800a9d4 <MX_ADC1_Init+0xb8>)
 800a932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a934:	4b26      	ldr	r3, [pc, #152]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a936:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a93a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a93c:	4b24      	ldr	r3, [pc, #144]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a93e:	2200      	movs	r2, #0
 800a940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a942:	4b23      	ldr	r3, [pc, #140]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a944:	2201      	movs	r2, #1
 800a946:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a948:	4b21      	ldr	r3, [pc, #132]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a94e:	4b20      	ldr	r3, [pc, #128]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a956:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a958:	2200      	movs	r2, #0
 800a95a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a95c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a95e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9d8 <MX_ADC1_Init+0xbc>)
 800a960:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a962:	4b1b      	ldr	r3, [pc, #108]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a964:	2200      	movs	r2, #0
 800a966:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800a968:	4b19      	ldr	r3, [pc, #100]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a96a:	2202      	movs	r2, #2
 800a96c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a96e:	4b18      	ldr	r3, [pc, #96]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a976:	4b16      	ldr	r3, [pc, #88]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a978:	2201      	movs	r2, #1
 800a97a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a97c:	4814      	ldr	r0, [pc, #80]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a97e:	f000 ff71 	bl	800b864 <HAL_ADC_Init>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800a988:	f000 fab8 	bl	800aefc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a990:	2301      	movs	r3, #1
 800a992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a994:	2300      	movs	r3, #0
 800a996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a998:	463b      	mov	r3, r7
 800a99a:	4619      	mov	r1, r3
 800a99c:	480c      	ldr	r0, [pc, #48]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a99e:	f001 f903 	bl	800bba8 <HAL_ADC_ConfigChannel>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a9a8:	f000 faa8 	bl	800aefc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4805      	ldr	r0, [pc, #20]	@ (800a9d0 <MX_ADC1_Init+0xb4>)
 800a9ba:	f001 f8f5 	bl	800bba8 <HAL_ADC_ConfigChannel>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800a9c4:	f000 fa9a 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a9c8:	bf00      	nop
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000648 	.word	0x20000648
 800a9d4:	40012000 	.word	0x40012000
 800a9d8:	0f000001 	.word	0x0f000001

0800a9dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	@ (800a9fc <MX_CRC_Init+0x20>)
 800a9e2:	4a07      	ldr	r2, [pc, #28]	@ (800aa00 <MX_CRC_Init+0x24>)
 800a9e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a9e6:	4805      	ldr	r0, [pc, #20]	@ (800a9fc <MX_CRC_Init+0x20>)
 800a9e8:	f001 fc8f 	bl	800c30a <HAL_CRC_Init>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a9f2:	f000 fa83 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a9f6:	bf00      	nop
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200006f0 	.word	0x200006f0
 800aa00:	40023000 	.word	0x40023000

0800aa04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800aa08:	4b12      	ldr	r3, [pc, #72]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa0a:	4a13      	ldr	r2, [pc, #76]	@ (800aa58 <MX_I2C1_Init+0x54>)
 800aa0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800aa0e:	4b11      	ldr	r3, [pc, #68]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa10:	4a12      	ldr	r2, [pc, #72]	@ (800aa5c <MX_I2C1_Init+0x58>)
 800aa12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aa14:	4b0f      	ldr	r3, [pc, #60]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800aa26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aa28:	4b0a      	ldr	r3, [pc, #40]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800aa2e:	4b09      	ldr	r3, [pc, #36]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aa34:	4b07      	ldr	r3, [pc, #28]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aa3a:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aa40:	4804      	ldr	r0, [pc, #16]	@ (800aa54 <MX_I2C1_Init+0x50>)
 800aa42:	f002 fa49 	bl	800ced8 <HAL_I2C_Init>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800aa4c:	f000 fa56 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800aa50:	bf00      	nop
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	200006f8 	.word	0x200006f8
 800aa58:	40005400 	.word	0x40005400
 800aa5c:	00061a80 	.word	0x00061a80

0800aa60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800aa64:	4b12      	ldr	r3, [pc, #72]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa66:	4a13      	ldr	r2, [pc, #76]	@ (800aab4 <MX_I2C2_Init+0x54>)
 800aa68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800aa6a:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa6c:	4a12      	ldr	r2, [pc, #72]	@ (800aab8 <MX_I2C2_Init+0x58>)
 800aa6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aa70:	4b0f      	ldr	r3, [pc, #60]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800aa76:	4b0e      	ldr	r3, [pc, #56]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800aa82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aa84:	4b0a      	ldr	r3, [pc, #40]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800aa8a:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aa90:	4b07      	ldr	r3, [pc, #28]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aa96:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800aa9c:	4804      	ldr	r0, [pc, #16]	@ (800aab0 <MX_I2C2_Init+0x50>)
 800aa9e:	f002 fa1b 	bl	800ced8 <HAL_I2C_Init>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800aaa8:	f000 fa28 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800aaac:	bf00      	nop
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	2000074c 	.word	0x2000074c
 800aab4:	40005800 	.word	0x40005800
 800aab8:	00061a80 	.word	0x00061a80

0800aabc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800aac0:	4b17      	ldr	r3, [pc, #92]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aac2:	4a18      	ldr	r2, [pc, #96]	@ (800ab24 <MX_SPI1_Init+0x68>)
 800aac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800aac6:	4b16      	ldr	r3, [pc, #88]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800aacc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800aace:	4b14      	ldr	r3, [pc, #80]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800aad4:	4b12      	ldr	r3, [pc, #72]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800aada:	4b11      	ldr	r3, [pc, #68]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aadc:	2200      	movs	r2, #0
 800aade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800aae0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800aae6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800aaee:	4b0c      	ldr	r3, [pc, #48]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aaf0:	2238      	movs	r2, #56	@ 0x38
 800aaf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800aafa:	4b09      	ldr	r3, [pc, #36]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab00:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ab06:	4b06      	ldr	r3, [pc, #24]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800ab08:	220a      	movs	r2, #10
 800ab0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab0c:	4804      	ldr	r0, [pc, #16]	@ (800ab20 <MX_SPI1_Init+0x64>)
 800ab0e:	f004 f8f9 	bl	800ed04 <HAL_SPI_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800ab18:	f000 f9f0 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ab1c:	bf00      	nop
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	200007a0 	.word	0x200007a0
 800ab24:	40013000 	.word	0x40013000

0800ab28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	605a      	str	r2, [r3, #4]
 800ab38:	609a      	str	r2, [r3, #8]
 800ab3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ab44:	4b1e      	ldr	r3, [pc, #120]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ab4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800ab4c:	4b1c      	ldr	r3, [pc, #112]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800ab52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab54:	4b1a      	ldr	r3, [pc, #104]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359;
 800ab5a:	4b19      	ldr	r3, [pc, #100]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab5c:	f240 1267 	movw	r2, #359	@ 0x167
 800ab60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab62:	4b17      	ldr	r3, [pc, #92]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab68:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ab6e:	4814      	ldr	r0, [pc, #80]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab70:	f004 fcd0 	bl	800f514 <HAL_TIM_Base_Init>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800ab7a:	f000 f9bf 	bl	800aefc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4619      	mov	r1, r3
 800ab8a:	480d      	ldr	r0, [pc, #52]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800ab8c:	f004 fe93 	bl	800f8b6 <HAL_TIM_ConfigClockSource>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800ab96:	f000 f9b1 	bl	800aefc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aba2:	463b      	mov	r3, r7
 800aba4:	4619      	mov	r1, r3
 800aba6:	4806      	ldr	r0, [pc, #24]	@ (800abc0 <MX_TIM2_Init+0x98>)
 800aba8:	f005 f89a 	bl	800fce0 <HAL_TIMEx_MasterConfigSynchronization>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800abb2:	f000 f9a3 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800abb6:	bf00      	nop
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	200008b8 	.word	0x200008b8

0800abc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	605a      	str	r2, [r3, #4]
 800abd4:	609a      	str	r2, [r3, #8]
 800abd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abd8:	463b      	mov	r3, r7
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800abe0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800abe2:	4a1e      	ldr	r2, [pc, #120]	@ (800ac5c <MX_TIM3_Init+0x98>)
 800abe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800abe6:	4b1c      	ldr	r3, [pc, #112]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800abe8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800abec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abee:	4b1a      	ldr	r3, [pc, #104]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800abf4:	4b18      	ldr	r3, [pc, #96]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800abf6:	f242 720f 	movw	r2, #9999	@ 0x270f
 800abfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abfc:	4b16      	ldr	r3, [pc, #88]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac02:	4b15      	ldr	r3, [pc, #84]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ac08:	4813      	ldr	r0, [pc, #76]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800ac0a:	f004 fc83 	bl	800f514 <HAL_TIM_Base_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800ac14:	f000 f972 	bl	800aefc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4619      	mov	r1, r3
 800ac24:	480c      	ldr	r0, [pc, #48]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800ac26:	f004 fe46 	bl	800f8b6 <HAL_TIM_ConfigClockSource>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800ac30:	f000 f964 	bl	800aefc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac34:	2300      	movs	r3, #0
 800ac36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ac3c:	463b      	mov	r3, r7
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4805      	ldr	r0, [pc, #20]	@ (800ac58 <MX_TIM3_Init+0x94>)
 800ac42:	f005 f84d 	bl	800fce0 <HAL_TIMEx_MasterConfigSynchronization>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800ac4c:	f000 f956 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ac50:	bf00      	nop
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000900 	.word	0x20000900
 800ac5c:	40000400 	.word	0x40000400

0800ac60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac66:	f107 0308 	add.w	r3, r7, #8
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
 800ac70:	609a      	str	r2, [r3, #8]
 800ac72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac74:	463b      	mov	r3, r7
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ac7c:	4b1d      	ldr	r3, [pc, #116]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800ac7e:	4a1e      	ldr	r2, [pc, #120]	@ (800acf8 <MX_TIM4_Init+0x98>)
 800ac80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800ac82:	4b1c      	ldr	r3, [pc, #112]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800ac84:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800ac88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac8a:	4b1a      	ldr	r3, [pc, #104]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800ac90:	4b18      	ldr	r3, [pc, #96]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800ac92:	f242 720f 	movw	r2, #9999	@ 0x270f
 800ac96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac98:	4b16      	ldr	r3, [pc, #88]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac9e:	4b15      	ldr	r3, [pc, #84]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800aca4:	4813      	ldr	r0, [pc, #76]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800aca6:	f004 fc35 	bl	800f514 <HAL_TIM_Base_Init>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800acb0:	f000 f924 	bl	800aefc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800acb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800acba:	f107 0308 	add.w	r3, r7, #8
 800acbe:	4619      	mov	r1, r3
 800acc0:	480c      	ldr	r0, [pc, #48]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800acc2:	f004 fdf8 	bl	800f8b6 <HAL_TIM_ConfigClockSource>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800accc:	f000 f916 	bl	800aefc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acd0:	2300      	movs	r3, #0
 800acd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800acd8:	463b      	mov	r3, r7
 800acda:	4619      	mov	r1, r3
 800acdc:	4805      	ldr	r0, [pc, #20]	@ (800acf4 <MX_TIM4_Init+0x94>)
 800acde:	f004 ffff 	bl	800fce0 <HAL_TIMEx_MasterConfigSynchronization>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800ace8:	f000 f908 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800acec:	bf00      	nop
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20000948 	.word	0x20000948
 800acf8:	40000800 	.word	0x40000800

0800acfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	605a      	str	r2, [r3, #4]
 800ad0c:	609a      	str	r2, [r3, #8]
 800ad0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad10:	463b      	mov	r3, r7
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ad18:	4b1d      	ldr	r3, [pc, #116]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ad94 <MX_TIM5_Init+0x98>)
 800ad1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 800ad1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad20:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800ad24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad26:	4b1a      	ldr	r3, [pc, #104]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800ad2c:	4b18      	ldr	r3, [pc, #96]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 800ad32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad34:	4b16      	ldr	r3, [pc, #88]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad3a:	4b15      	ldr	r3, [pc, #84]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ad40:	4813      	ldr	r0, [pc, #76]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad42:	f004 fbe7 	bl	800f514 <HAL_TIM_Base_Init>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800ad4c:	f000 f8d6 	bl	800aefc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	480c      	ldr	r0, [pc, #48]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad5e:	f004 fdaa 	bl	800f8b6 <HAL_TIM_ConfigClockSource>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800ad68:	f000 f8c8 	bl	800aefc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ad74:	463b      	mov	r3, r7
 800ad76:	4619      	mov	r1, r3
 800ad78:	4805      	ldr	r0, [pc, #20]	@ (800ad90 <MX_TIM5_Init+0x94>)
 800ad7a:	f004 ffb1 	bl	800fce0 <HAL_TIMEx_MasterConfigSynchronization>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800ad84:	f000 f8ba 	bl	800aefc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20000990 	.word	0x20000990
 800ad94:	40000c00 	.word	0x40000c00

0800ad98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad9e:	2300      	movs	r3, #0
 800ada0:	607b      	str	r3, [r7, #4]
 800ada2:	4b14      	ldr	r3, [pc, #80]	@ (800adf4 <MX_DMA_Init+0x5c>)
 800ada4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada6:	4a13      	ldr	r2, [pc, #76]	@ (800adf4 <MX_DMA_Init+0x5c>)
 800ada8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800adac:	6313      	str	r3, [r2, #48]	@ 0x30
 800adae:	4b11      	ldr	r3, [pc, #68]	@ (800adf4 <MX_DMA_Init+0x5c>)
 800adb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb6:	607b      	str	r3, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800adba:	2200      	movs	r2, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	2038      	movs	r0, #56	@ 0x38
 800adc0:	f001 fa6d 	bl	800c29e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800adc4:	2038      	movs	r0, #56	@ 0x38
 800adc6:	f001 fa86 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	203b      	movs	r0, #59	@ 0x3b
 800add0:	f001 fa65 	bl	800c29e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800add4:	203b      	movs	r0, #59	@ 0x3b
 800add6:	f001 fa7e 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800adda:	2200      	movs	r2, #0
 800addc:	2100      	movs	r1, #0
 800adde:	203c      	movs	r0, #60	@ 0x3c
 800ade0:	f001 fa5d 	bl	800c29e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800ade4:	203c      	movs	r0, #60	@ 0x3c
 800ade6:	f001 fa76 	bl	800c2d6 <HAL_NVIC_EnableIRQ>

}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	40023800 	.word	0x40023800

0800adf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adfe:	f107 030c 	add.w	r3, r7, #12
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	605a      	str	r2, [r3, #4]
 800ae08:	609a      	str	r2, [r3, #8]
 800ae0a:	60da      	str	r2, [r3, #12]
 800ae0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
 800ae12:	4b37      	ldr	r3, [pc, #220]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae16:	4a36      	ldr	r2, [pc, #216]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae1e:	4b34      	ldr	r3, [pc, #208]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae26:	60bb      	str	r3, [r7, #8]
 800ae28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	607b      	str	r3, [r7, #4]
 800ae2e:	4b30      	ldr	r3, [pc, #192]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae32:	4a2f      	ldr	r2, [pc, #188]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae3a:	4b2d      	ldr	r3, [pc, #180]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	607b      	str	r3, [r7, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae46:	2300      	movs	r3, #0
 800ae48:	603b      	str	r3, [r7, #0]
 800ae4a:	4b29      	ldr	r3, [pc, #164]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae4e:	4a28      	ldr	r2, [pc, #160]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae50:	f043 0302 	orr.w	r3, r3, #2
 800ae54:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae56:	4b26      	ldr	r3, [pc, #152]	@ (800aef0 <MX_GPIO_Init+0xf8>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800ae62:	2200      	movs	r2, #0
 800ae64:	f24f 0101 	movw	r1, #61441	@ 0xf001
 800ae68:	4822      	ldr	r0, [pc, #136]	@ (800aef4 <MX_GPIO_Init+0xfc>)
 800ae6a:	f002 f801 	bl	800ce70 <HAL_GPIO_WritePin>
                          |Pump2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pump1_GPIO_Port, Pump1_Pin, GPIO_PIN_RESET);
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae74:	4820      	ldr	r0, [pc, #128]	@ (800aef8 <MX_GPIO_Init+0x100>)
 800ae76:	f001 fffb 	bl	800ce70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin LED1_Pin LED2_Pin LED3_Pin
                           Pump2_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800ae7a:	f24f 0301 	movw	r3, #61441	@ 0xf001
 800ae7e:	60fb      	str	r3, [r7, #12]
                          |Pump2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae80:	2301      	movs	r3, #1
 800ae82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	4619      	mov	r1, r3
 800ae92:	4818      	ldr	r0, [pc, #96]	@ (800aef4 <MX_GPIO_Init+0xfc>)
 800ae94:	f001 fe68 	bl	800cb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pump1_Pin */
  GPIO_InitStruct.Pin = Pump1_Pin;
 800ae98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Pump1_GPIO_Port, &GPIO_InitStruct);
 800aeaa:	f107 030c 	add.w	r3, r7, #12
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4811      	ldr	r0, [pc, #68]	@ (800aef8 <MX_GPIO_Init+0x100>)
 800aeb2:	f001 fe59 	bl	800cb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Down_Pin Button_Right_Pin Button_Up_Pin Button_Ok_Pin */
  GPIO_InitStruct.Pin = Button_Down_Pin|Button_Right_Pin|Button_Up_Pin|Button_Ok_Pin;
 800aeb6:	f44f 431c 	mov.w	r3, #39936	@ 0x9c00
 800aeba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aebc:	2300      	movs	r3, #0
 800aebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	4619      	mov	r1, r3
 800aeca:	480b      	ldr	r0, [pc, #44]	@ (800aef8 <MX_GPIO_Init+0x100>)
 800aecc:	f001 fe4c 	bl	800cb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Left_Pin */
  GPIO_InitStruct.Pin = Button_Left_Pin;
 800aed0:	2310      	movs	r3, #16
 800aed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_Left_GPIO_Port, &GPIO_InitStruct);
 800aedc:	f107 030c 	add.w	r3, r7, #12
 800aee0:	4619      	mov	r1, r3
 800aee2:	4804      	ldr	r0, [pc, #16]	@ (800aef4 <MX_GPIO_Init+0xfc>)
 800aee4:	f001 fe40 	bl	800cb68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800aee8:	bf00      	nop
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	40023800 	.word	0x40023800
 800aef4:	40020400 	.word	0x40020400
 800aef8:	40020000 	.word	0x40020000

0800aefc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800af00:	b672      	cpsid	i
}
 800af02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <Error_Handler+0x8>

0800af08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af0e:	2300      	movs	r3, #0
 800af10:	607b      	str	r3, [r7, #4]
 800af12:	4b10      	ldr	r3, [pc, #64]	@ (800af54 <HAL_MspInit+0x4c>)
 800af14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af16:	4a0f      	ldr	r2, [pc, #60]	@ (800af54 <HAL_MspInit+0x4c>)
 800af18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <HAL_MspInit+0x4c>)
 800af20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af26:	607b      	str	r3, [r7, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af2a:	2300      	movs	r3, #0
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	4b09      	ldr	r3, [pc, #36]	@ (800af54 <HAL_MspInit+0x4c>)
 800af30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af32:	4a08      	ldr	r2, [pc, #32]	@ (800af54 <HAL_MspInit+0x4c>)
 800af34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af38:	6413      	str	r3, [r2, #64]	@ 0x40
 800af3a:	4b06      	ldr	r3, [pc, #24]	@ (800af54 <HAL_MspInit+0x4c>)
 800af3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af46:	bf00      	nop
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	40023800 	.word	0x40023800

0800af58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08a      	sub	sp, #40	@ 0x28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	605a      	str	r2, [r3, #4]
 800af6a:	609a      	str	r2, [r3, #8]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a2e      	ldr	r2, [pc, #184]	@ (800b030 <HAL_ADC_MspInit+0xd8>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d156      	bne.n	800b028 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800af7a:	2300      	movs	r3, #0
 800af7c:	613b      	str	r3, [r7, #16]
 800af7e:	4b2d      	ldr	r3, [pc, #180]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800af80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af82:	4a2c      	ldr	r2, [pc, #176]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800af84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af88:	6453      	str	r3, [r2, #68]	@ 0x44
 800af8a:	4b2a      	ldr	r3, [pc, #168]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800af8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	4b26      	ldr	r3, [pc, #152]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800af9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9e:	4a25      	ldr	r2, [pc, #148]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800afa0:	f043 0301 	orr.w	r3, r3, #1
 800afa4:	6313      	str	r3, [r2, #48]	@ 0x30
 800afa6:	4b23      	ldr	r3, [pc, #140]	@ (800b034 <HAL_ADC_MspInit+0xdc>)
 800afa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800afb2:	2303      	movs	r3, #3
 800afb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800afb6:	2303      	movs	r3, #3
 800afb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afbe:	f107 0314 	add.w	r3, r7, #20
 800afc2:	4619      	mov	r1, r3
 800afc4:	481c      	ldr	r0, [pc, #112]	@ (800b038 <HAL_ADC_MspInit+0xe0>)
 800afc6:	f001 fdcf 	bl	800cb68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800afca:	4b1c      	ldr	r3, [pc, #112]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afcc:	4a1c      	ldr	r2, [pc, #112]	@ (800b040 <HAL_ADC_MspInit+0xe8>)
 800afce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800afd0:	4b1a      	ldr	r3, [pc, #104]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afd6:	4b19      	ldr	r3, [pc, #100]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afd8:	2200      	movs	r2, #0
 800afda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800afdc:	4b17      	ldr	r3, [pc, #92]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afde:	2200      	movs	r2, #0
 800afe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800afe2:	4b16      	ldr	r3, [pc, #88]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800afe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800afea:	4b14      	ldr	r3, [pc, #80]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800afec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aff2:	4b12      	ldr	r3, [pc, #72]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800aff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800aff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800affa:	4b10      	ldr	r3, [pc, #64]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800affc:	2200      	movs	r2, #0
 800affe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b000:	4b0e      	ldr	r3, [pc, #56]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800b002:	2200      	movs	r2, #0
 800b004:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b006:	4b0d      	ldr	r3, [pc, #52]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800b008:	2200      	movs	r2, #0
 800b00a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b00c:	480b      	ldr	r0, [pc, #44]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800b00e:	f001 f9cb 	bl	800c3a8 <HAL_DMA_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800b018:	f7ff ff70 	bl	800aefc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a07      	ldr	r2, [pc, #28]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800b020:	639a      	str	r2, [r3, #56]	@ 0x38
 800b022:	4a06      	ldr	r2, [pc, #24]	@ (800b03c <HAL_ADC_MspInit+0xe4>)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800b028:	bf00      	nop
 800b02a:	3728      	adds	r7, #40	@ 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	40012000 	.word	0x40012000
 800b034:	40023800 	.word	0x40023800
 800b038:	40020000 	.word	0x40020000
 800b03c:	20000690 	.word	0x20000690
 800b040:	40026470 	.word	0x40026470

0800b044 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0b      	ldr	r2, [pc, #44]	@ (800b080 <HAL_CRC_MspInit+0x3c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d10d      	bne.n	800b072 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	4b0a      	ldr	r3, [pc, #40]	@ (800b084 <HAL_CRC_MspInit+0x40>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05e:	4a09      	ldr	r2, [pc, #36]	@ (800b084 <HAL_CRC_MspInit+0x40>)
 800b060:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b064:	6313      	str	r3, [r2, #48]	@ 0x30
 800b066:	4b07      	ldr	r3, [pc, #28]	@ (800b084 <HAL_CRC_MspInit+0x40>)
 800b068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b06a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800b072:	bf00      	nop
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	40023000 	.word	0x40023000
 800b084:	40023800 	.word	0x40023800

0800b088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08c      	sub	sp, #48	@ 0x30
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b090:	f107 031c 	add.w	r3, r7, #28
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	605a      	str	r2, [r3, #4]
 800b09a:	609a      	str	r2, [r3, #8]
 800b09c:	60da      	str	r2, [r3, #12]
 800b09e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a3a      	ldr	r2, [pc, #232]	@ (800b190 <HAL_I2C_MspInit+0x108>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d12c      	bne.n	800b104 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61bb      	str	r3, [r7, #24]
 800b0ae:	4b39      	ldr	r3, [pc, #228]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b2:	4a38      	ldr	r2, [pc, #224]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0b4:	f043 0302 	orr.w	r3, r3, #2
 800b0b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0ba:	4b36      	ldr	r3, [pc, #216]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	61bb      	str	r3, [r7, #24]
 800b0c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b0c6:	23c0      	movs	r3, #192	@ 0xc0
 800b0c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0ca:	2312      	movs	r3, #18
 800b0cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b0d6:	2304      	movs	r3, #4
 800b0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0da:	f107 031c 	add.w	r3, r7, #28
 800b0de:	4619      	mov	r1, r3
 800b0e0:	482d      	ldr	r0, [pc, #180]	@ (800b198 <HAL_I2C_MspInit+0x110>)
 800b0e2:	f001 fd41 	bl	800cb68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ee:	4a29      	ldr	r2, [pc, #164]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b0f4:	6413      	str	r3, [r2, #64]	@ 0x40
 800b0f6:	4b27      	ldr	r3, [pc, #156]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b102:	e041      	b.n	800b188 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a24      	ldr	r2, [pc, #144]	@ (800b19c <HAL_I2C_MspInit+0x114>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d13c      	bne.n	800b188 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b10e:	2300      	movs	r3, #0
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	4b20      	ldr	r3, [pc, #128]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b116:	4a1f      	ldr	r2, [pc, #124]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b118:	f043 0302 	orr.w	r3, r3, #2
 800b11c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b11e:	4b1d      	ldr	r3, [pc, #116]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b12a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b12e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b130:	2312      	movs	r3, #18
 800b132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b134:	2300      	movs	r3, #0
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b138:	2303      	movs	r3, #3
 800b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b13c:	2304      	movs	r3, #4
 800b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b140:	f107 031c 	add.w	r3, r7, #28
 800b144:	4619      	mov	r1, r3
 800b146:	4814      	ldr	r0, [pc, #80]	@ (800b198 <HAL_I2C_MspInit+0x110>)
 800b148:	f001 fd0e 	bl	800cb68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b14c:	2308      	movs	r3, #8
 800b14e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b150:	2312      	movs	r3, #18
 800b152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b154:	2300      	movs	r3, #0
 800b156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b158:	2303      	movs	r3, #3
 800b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b15c:	2309      	movs	r3, #9
 800b15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b160:	f107 031c 	add.w	r3, r7, #28
 800b164:	4619      	mov	r1, r3
 800b166:	480c      	ldr	r0, [pc, #48]	@ (800b198 <HAL_I2C_MspInit+0x110>)
 800b168:	f001 fcfe 	bl	800cb68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	4b08      	ldr	r3, [pc, #32]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b174:	4a07      	ldr	r2, [pc, #28]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b17a:	6413      	str	r3, [r2, #64]	@ 0x40
 800b17c:	4b05      	ldr	r3, [pc, #20]	@ (800b194 <HAL_I2C_MspInit+0x10c>)
 800b17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	bf00      	nop
 800b18a:	3730      	adds	r7, #48	@ 0x30
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	40005400 	.word	0x40005400
 800b194:	40023800 	.word	0x40023800
 800b198:	40020400 	.word	0x40020400
 800b19c:	40005800 	.word	0x40005800

0800b1a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	@ 0x28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a8:	f107 0314 	add.w	r3, r7, #20
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	605a      	str	r2, [r3, #4]
 800b1b2:	609a      	str	r2, [r3, #8]
 800b1b4:	60da      	str	r2, [r3, #12]
 800b1b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a47      	ldr	r2, [pc, #284]	@ (800b2dc <HAL_SPI_MspInit+0x13c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	f040 8088 	bne.w	800b2d4 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	4b45      	ldr	r3, [pc, #276]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1cc:	4a44      	ldr	r2, [pc, #272]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b1d2:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1d4:	4b42      	ldr	r3, [pc, #264]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e8:	4a3d      	ldr	r2, [pc, #244]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1f0:	4b3b      	ldr	r3, [pc, #236]	@ (800b2e0 <HAL_SPI_MspInit+0x140>)
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800b1fc:	23e0      	movs	r3, #224	@ 0xe0
 800b1fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b200:	2302      	movs	r3, #2
 800b202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b204:	2300      	movs	r3, #0
 800b206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b208:	2303      	movs	r3, #3
 800b20a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b20c:	2305      	movs	r3, #5
 800b20e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	4619      	mov	r1, r3
 800b216:	4833      	ldr	r0, [pc, #204]	@ (800b2e4 <HAL_SPI_MspInit+0x144>)
 800b218:	f001 fca6 	bl	800cb68 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800b21c:	4b32      	ldr	r3, [pc, #200]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b21e:	4a33      	ldr	r2, [pc, #204]	@ (800b2ec <HAL_SPI_MspInit+0x14c>)
 800b220:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800b222:	4b31      	ldr	r3, [pc, #196]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b224:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800b228:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b22a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b230:	4b2d      	ldr	r3, [pc, #180]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b232:	2200      	movs	r2, #0
 800b234:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b236:	4b2c      	ldr	r3, [pc, #176]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b23c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b23e:	4b2a      	ldr	r3, [pc, #168]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b240:	2200      	movs	r2, #0
 800b242:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b244:	4b28      	ldr	r3, [pc, #160]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b246:	2200      	movs	r2, #0
 800b248:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800b24a:	4b27      	ldr	r3, [pc, #156]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b250:	4b25      	ldr	r3, [pc, #148]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b252:	2200      	movs	r2, #0
 800b254:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b256:	4b24      	ldr	r3, [pc, #144]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b258:	2200      	movs	r2, #0
 800b25a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b25c:	4822      	ldr	r0, [pc, #136]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b25e:	f001 f8a3 	bl	800c3a8 <HAL_DMA_Init>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800b268:	f7ff fe48 	bl	800aefc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b270:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b272:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e8 <HAL_SPI_MspInit+0x148>)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800b278:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b27a:	4a1e      	ldr	r2, [pc, #120]	@ (800b2f4 <HAL_SPI_MspInit+0x154>)
 800b27c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800b27e:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b280:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800b284:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b286:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b288:	2240      	movs	r2, #64	@ 0x40
 800b28a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b28c:	4b18      	ldr	r3, [pc, #96]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b28e:	2200      	movs	r2, #0
 800b290:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b292:	4b17      	ldr	r3, [pc, #92]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b294:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b298:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b29a:	4b15      	ldr	r3, [pc, #84]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2a0:	4b13      	ldr	r3, [pc, #76]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800b2a6:	4b12      	ldr	r3, [pc, #72]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b2ac:	4b10      	ldr	r3, [pc, #64]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800b2b8:	480d      	ldr	r0, [pc, #52]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2ba:	f001 f875 	bl	800c3a8 <HAL_DMA_Init>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800b2c4:	f7ff fe1a 	bl	800aefc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a09      	ldr	r2, [pc, #36]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2cc:	649a      	str	r2, [r3, #72]	@ 0x48
 800b2ce:	4a08      	ldr	r2, [pc, #32]	@ (800b2f0 <HAL_SPI_MspInit+0x150>)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800b2d4:	bf00      	nop
 800b2d6:	3728      	adds	r7, #40	@ 0x28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	40013000 	.word	0x40013000
 800b2e0:	40023800 	.word	0x40023800
 800b2e4:	40020000 	.word	0x40020000
 800b2e8:	200007f8 	.word	0x200007f8
 800b2ec:	40026410 	.word	0x40026410
 800b2f0:	20000858 	.word	0x20000858
 800b2f4:	40026458 	.word	0x40026458

0800b2f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b308:	d116      	bne.n	800b338 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
 800b30e:	4b36      	ldr	r3, [pc, #216]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b312:	4a35      	ldr	r2, [pc, #212]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b314:	f043 0301 	orr.w	r3, r3, #1
 800b318:	6413      	str	r3, [r2, #64]	@ 0x40
 800b31a:	4b33      	ldr	r3, [pc, #204]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b326:	2200      	movs	r2, #0
 800b328:	2100      	movs	r1, #0
 800b32a:	201c      	movs	r0, #28
 800b32c:	f000 ffb7 	bl	800c29e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b330:	201c      	movs	r0, #28
 800b332:	f000 ffd0 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800b336:	e052      	b.n	800b3de <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a2b      	ldr	r2, [pc, #172]	@ (800b3ec <HAL_TIM_Base_MspInit+0xf4>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d116      	bne.n	800b370 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b342:	2300      	movs	r3, #0
 800b344:	613b      	str	r3, [r7, #16]
 800b346:	4b28      	ldr	r3, [pc, #160]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34a:	4a27      	ldr	r2, [pc, #156]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b34c:	f043 0302 	orr.w	r3, r3, #2
 800b350:	6413      	str	r3, [r2, #64]	@ 0x40
 800b352:	4b25      	ldr	r3, [pc, #148]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	613b      	str	r3, [r7, #16]
 800b35c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b35e:	2200      	movs	r2, #0
 800b360:	2100      	movs	r1, #0
 800b362:	201d      	movs	r0, #29
 800b364:	f000 ff9b 	bl	800c29e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b368:	201d      	movs	r0, #29
 800b36a:	f000 ffb4 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
}
 800b36e:	e036      	b.n	800b3de <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f0 <HAL_TIM_Base_MspInit+0xf8>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d116      	bne.n	800b3a8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b37a:	2300      	movs	r3, #0
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b382:	4a19      	ldr	r2, [pc, #100]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b384:	f043 0304 	orr.w	r3, r3, #4
 800b388:	6413      	str	r3, [r2, #64]	@ 0x40
 800b38a:	4b17      	ldr	r3, [pc, #92]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b396:	2200      	movs	r2, #0
 800b398:	2100      	movs	r1, #0
 800b39a:	201e      	movs	r0, #30
 800b39c:	f000 ff7f 	bl	800c29e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b3a0:	201e      	movs	r0, #30
 800b3a2:	f000 ff98 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
}
 800b3a6:	e01a      	b.n	800b3de <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a11      	ldr	r2, [pc, #68]	@ (800b3f4 <HAL_TIM_Base_MspInit+0xfc>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d115      	bne.n	800b3de <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60bb      	str	r3, [r7, #8]
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ba:	4a0b      	ldr	r2, [pc, #44]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b3bc:	f043 0308 	orr.w	r3, r3, #8
 800b3c0:	6413      	str	r3, [r2, #64]	@ 0x40
 800b3c2:	4b09      	ldr	r3, [pc, #36]	@ (800b3e8 <HAL_TIM_Base_MspInit+0xf0>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	60bb      	str	r3, [r7, #8]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	2032      	movs	r0, #50	@ 0x32
 800b3d4:	f000 ff63 	bl	800c29e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800b3d8:	2032      	movs	r0, #50	@ 0x32
 800b3da:	f000 ff7c 	bl	800c2d6 <HAL_NVIC_EnableIRQ>
}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40023800 	.word	0x40023800
 800b3ec:	40000400 	.word	0x40000400
 800b3f0:	40000800 	.word	0x40000800
 800b3f4:	40000c00 	.word	0x40000c00

0800b3f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b3fc:	bf00      	nop
 800b3fe:	e7fd      	b.n	800b3fc <NMI_Handler+0x4>

0800b400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b404:	bf00      	nop
 800b406:	e7fd      	b.n	800b404 <HardFault_Handler+0x4>

0800b408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b408:	b480      	push	{r7}
 800b40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <MemManage_Handler+0x4>

0800b410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b410:	b480      	push	{r7}
 800b412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b414:	bf00      	nop
 800b416:	e7fd      	b.n	800b414 <BusFault_Handler+0x4>

0800b418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b41c:	bf00      	nop
 800b41e:	e7fd      	b.n	800b41c <UsageFault_Handler+0x4>

0800b420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b424:	bf00      	nop
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b42e:	b480      	push	{r7}
 800b430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b432:	bf00      	nop
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b44e:	f000 f9e9 	bl	800b824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b452:	bf00      	nop
 800b454:	bd80      	pop	{r7, pc}

0800b456 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */

  // Функция опроса кнопок
  KEYB_Input_Keys();
 800b45a:	f7f5 fd93 	bl	8000f84 <KEYB_Input_Keys>

  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b45e:	bf00      	nop
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b468:	4802      	ldr	r0, [pc, #8]	@ (800b474 <TIM3_IRQHandler+0x10>)
 800b46a:	f004 f934 	bl	800f6d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b46e:	bf00      	nop
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000900 	.word	0x20000900

0800b478 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b47c:	4802      	ldr	r0, [pc, #8]	@ (800b488 <TIM4_IRQHandler+0x10>)
 800b47e:	f004 f92a 	bl	800f6d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b482:	bf00      	nop
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20000948 	.word	0x20000948

0800b48c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b490:	4802      	ldr	r0, [pc, #8]	@ (800b49c <TIM5_IRQHandler+0x10>)
 800b492:	f004 f920 	bl	800f6d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b496:	bf00      	nop
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000990 	.word	0x20000990

0800b4a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b4a4:	4802      	ldr	r0, [pc, #8]	@ (800b4b0 <DMA2_Stream0_IRQHandler+0x10>)
 800b4a6:	f001 f8f5 	bl	800c694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b4aa:	bf00      	nop
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	200007f8 	.word	0x200007f8

0800b4b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b4b8:	4802      	ldr	r0, [pc, #8]	@ (800b4c4 <DMA2_Stream3_IRQHandler+0x10>)
 800b4ba:	f001 f8eb 	bl	800c694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b4be:	bf00      	nop
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20000858 	.word	0x20000858

0800b4c8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b4cc:	4802      	ldr	r0, [pc, #8]	@ (800b4d8 <DMA2_Stream4_IRQHandler+0x10>)
 800b4ce:	f001 f8e1 	bl	800c694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800b4d2:	bf00      	nop
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000690 	.word	0x20000690

0800b4dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

// Прерывание при переполнении таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a4f      	ldr	r2, [pc, #316]	@ (800b628 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d12f      	bne.n	800b54e <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		// Если не установлен "спящий" режим
		if (!f_SleepMode)
 800b4ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b62c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d113      	bne.n	800b520 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			// Текущее количество секунд
			// бездействия пользователя
			// (отсутствие нажатия на кнопки)
			SecondsSleepMode_CNT++;
 800b4f8:	4b4d      	ldr	r3, [pc, #308]	@ (800b630 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	3301      	adds	r3, #1
 800b500:	b29a      	uxth	r2, r3
 800b502:	4b4b      	ldr	r3, [pc, #300]	@ (800b630 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800b504:	801a      	strh	r2, [r3, #0]

			// Переход в "спящий" режим (выключение экрана)
			// по достижению заданного количества секунд
			if (SecondsSleepMode_CNT == SecondsSleepMode_ARR)
 800b506:	4b4a      	ldr	r3, [pc, #296]	@ (800b630 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	4b49      	ldr	r3, [pc, #292]	@ (800b634 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d105      	bne.n	800b520 <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				f_SleepMode = 1;
 800b514:	4b45      	ldr	r3, [pc, #276]	@ (800b62c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b516:	2201      	movs	r2, #1
 800b518:	701a      	strb	r2, [r3, #0]

				// Флаг начала отрисовки кадра со смайликом
				f_DrawFrameSleepMode = 1;
 800b51a:	4b47      	ldr	r3, [pc, #284]	@ (800b638 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800b51c:	2201      	movs	r2, #1
 800b51e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (f_DrawFrameSleepMode)
 800b520:	4b45      	ldr	r3, [pc, #276]	@ (800b638 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d011      	beq.n	800b54e <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			SecondsStartSleepMode_CNT++;
 800b52a:	4b44      	ldr	r3, [pc, #272]	@ (800b63c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3301      	adds	r3, #1
 800b532:	b29a      	uxth	r2, r3
 800b534:	4b41      	ldr	r3, [pc, #260]	@ (800b63c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800b536:	801a      	strh	r2, [r3, #0]

			// Завершение отрисовки кадра
			// со смайликом в течение спустя 30 секунд
			// после перехода в "спящий" режим
			if (SecondsStartSleepMode_CNT == 30)
 800b538:	4b40      	ldr	r3, [pc, #256]	@ (800b63c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	2b1e      	cmp	r3, #30
 800b540:	d105      	bne.n	800b54e <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				f_DrawFrameSleepMode = 0;
 800b542:	4b3d      	ldr	r3, [pc, #244]	@ (800b638 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800b544:	2200      	movs	r2, #0
 800b546:	701a      	strb	r2, [r3, #0]
				SecondsStartSleepMode_CNT = 0;
 800b548:	4b3c      	ldr	r3, [pc, #240]	@ (800b63c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	if (htim->Instance == TIM4)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a3b      	ldr	r2, [pc, #236]	@ (800b640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d126      	bne.n	800b5a6 <HAL_TIM_PeriodElapsedCallback+0xca>
	{
		// Если установлен флаг начала полива
		if (f_StartWatering)
 800b558:	4b3a      	ldr	r3, [pc, #232]	@ (800b644 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d022      	beq.n	800b5a6 <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			SecondsStartWatering_CNT++;
 800b560:	4b39      	ldr	r3, [pc, #228]	@ (800b648 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	b29b      	uxth	r3, r3
 800b566:	3301      	adds	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	4b37      	ldr	r3, [pc, #220]	@ (800b648 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800b56c:	801a      	strh	r2, [r3, #0]

			// Выключение полива через
			// заданное количество секунд
			if (SecondsStartWatering_CNT == SecondsWatering)
 800b56e:	4b36      	ldr	r3, [pc, #216]	@ (800b648 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	b29a      	uxth	r2, r3
 800b574:	4b35      	ldr	r3, [pc, #212]	@ (800b64c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d114      	bne.n	800b5a6 <HAL_TIM_PeriodElapsedCallback+0xca>
			{
				// Выключение помпы
				PumpOff();
 800b57c:	2201      	movs	r2, #1
 800b57e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b582:	4833      	ldr	r0, [pc, #204]	@ (800b650 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800b584:	f001 fc74 	bl	800ce70 <HAL_GPIO_WritePin>

				// Сброс и выключение таймера 4
				HAL_TIM_Base_Stop_IT(&htim4);
 800b588:	4832      	ldr	r0, [pc, #200]	@ (800b654 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800b58a:	f004 f875 	bl	800f678 <HAL_TIM_Base_Stop_IT>
				TIM4->CNT = 0;
 800b58e:	4b2c      	ldr	r3, [pc, #176]	@ (800b640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800b590:	2200      	movs	r2, #0
 800b592:	625a      	str	r2, [r3, #36]	@ 0x24

				f_StartWatering = 0;
 800b594:	4b2b      	ldr	r3, [pc, #172]	@ (800b644 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800b596:	2200      	movs	r2, #0
 800b598:	701a      	strb	r2, [r3, #0]
				SecondsStartWatering_CNT = 0;
 800b59a:	4b2b      	ldr	r3, [pc, #172]	@ (800b648 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	801a      	strh	r2, [r3, #0]
				SecondsWatering = 0;
 800b5a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b64c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	if (htim->Instance == TIM5)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a2b      	ldr	r2, [pc, #172]	@ (800b658 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d137      	bne.n	800b620 <HAL_TIM_PeriodElapsedCallback+0x144>
	{
		// Если установлен флаг
		// необходимости моргания светодиодами
		if (f_LED_Blink)
 800b5b0:	4b2a      	ldr	r3, [pc, #168]	@ (800b65c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01d      	beq.n	800b5f4 <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			SecondsBlinkLED_CNT++;
 800b5b8:	4b29      	ldr	r3, [pc, #164]	@ (800b660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3301      	adds	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	4b27      	ldr	r3, [pc, #156]	@ (800b660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800b5c4:	801a      	strh	r2, [r3, #0]

			// Моргание светодиодов раз в секунду
			if (SecondsBlinkLED_CNT == 1)
 800b5c6:	4b26      	ldr	r3, [pc, #152]	@ (800b660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d111      	bne.n	800b5f4 <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b5d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b5d4:	481e      	ldr	r0, [pc, #120]	@ (800b650 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800b5d6:	f001 fc64 	bl	800cea2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800b5da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b5de:	481c      	ldr	r0, [pc, #112]	@ (800b650 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800b5e0:	f001 fc5f 	bl	800cea2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800b5e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b5e8:	4819      	ldr	r0, [pc, #100]	@ (800b650 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800b5ea:	f001 fc5a 	bl	800cea2 <HAL_GPIO_TogglePin>

				SecondsBlinkLED_CNT = 0;
 800b5ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	801a      	strh	r2, [r3, #0]
			}
		}

		// Если установлен флаг
		// начала проверки протечки
		if (f_StartCheckLeak)
 800b5f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b664 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d011      	beq.n	800b620 <HAL_TIM_PeriodElapsedCallback+0x144>
		{
			SecondsPumpLeak_CNT++;
 800b5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	3301      	adds	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	4b18      	ldr	r3, [pc, #96]	@ (800b668 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800b608:	801a      	strh	r2, [r3, #0]

			// После отсчёта 60 секунд выполняется
			// повторная проверка протечки помпы
			if (SecondsPumpLeak_CNT == 60)
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2b3c      	cmp	r3, #60	@ 0x3c
 800b612:	d105      	bne.n	800b620 <HAL_TIM_PeriodElapsedCallback+0x144>
			{
				f_FinishCheckLeak = 1;
 800b614:	4b15      	ldr	r3, [pc, #84]	@ (800b66c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800b616:	2201      	movs	r2, #1
 800b618:	701a      	strb	r2, [r3, #0]
				SecondsPumpLeak_CNT = 0;
 800b61a:	4b13      	ldr	r3, [pc, #76]	@ (800b668 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40000400 	.word	0x40000400
 800b62c:	20001182 	.word	0x20001182
 800b630:	20001180 	.word	0x20001180
 800b634:	20000a32 	.word	0x20000a32
 800b638:	2000118c 	.word	0x2000118c
 800b63c:	20001184 	.word	0x20001184
 800b640:	40000800 	.word	0x40000800
 800b644:	20000a20 	.word	0x20000a20
 800b648:	20001186 	.word	0x20001186
 800b64c:	20000a1e 	.word	0x20000a1e
 800b650:	40020400 	.word	0x40020400
 800b654:	20000948 	.word	0x20000948
 800b658:	40000c00 	.word	0x40000c00
 800b65c:	20000adc 	.word	0x20000adc
 800b660:	20001188 	.word	0x20001188
 800b664:	20000ae2 	.word	0x20000ae2
 800b668:	2000118a 	.word	0x2000118a
 800b66c:	2000118e 	.word	0x2000118e

0800b670 <HAL_ADC_ConvCpltCallback>:


// Если преобразование АЦП завершено
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	// Установка флага завершения преобразования АЦП
    if (hadc->Instance == ADC1)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a05      	ldr	r2, [pc, #20]	@ (800b694 <HAL_ADC_ConvCpltCallback+0x24>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d102      	bne.n	800b688 <HAL_ADC_ConvCpltCallback+0x18>
       f_AdcEndOfConversion = 1;
 800b682:	4b05      	ldr	r3, [pc, #20]	@ (800b698 <HAL_ADC_ConvCpltCallback+0x28>)
 800b684:	2201      	movs	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	40012000 	.word	0x40012000
 800b698:	2000118d 	.word	0x2000118d

0800b69c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b6a4:	4a14      	ldr	r2, [pc, #80]	@ (800b6f8 <_sbrk+0x5c>)
 800b6a6:	4b15      	ldr	r3, [pc, #84]	@ (800b6fc <_sbrk+0x60>)
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b6b0:	4b13      	ldr	r3, [pc, #76]	@ (800b700 <_sbrk+0x64>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b6b8:	4b11      	ldr	r3, [pc, #68]	@ (800b700 <_sbrk+0x64>)
 800b6ba:	4a12      	ldr	r2, [pc, #72]	@ (800b704 <_sbrk+0x68>)
 800b6bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b6be:	4b10      	ldr	r3, [pc, #64]	@ (800b700 <_sbrk+0x64>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d207      	bcs.n	800b6dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b6cc:	f008 f918 	bl	8013900 <__errno>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	220c      	movs	r2, #12
 800b6d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6da:	e009      	b.n	800b6f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b6dc:	4b08      	ldr	r3, [pc, #32]	@ (800b700 <_sbrk+0x64>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b6e2:	4b07      	ldr	r3, [pc, #28]	@ (800b700 <_sbrk+0x64>)
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	4a05      	ldr	r2, [pc, #20]	@ (800b700 <_sbrk+0x64>)
 800b6ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20010000 	.word	0x20010000
 800b6fc:	00000400 	.word	0x00000400
 800b700:	20001190 	.word	0x20001190
 800b704:	20001788 	.word	0x20001788

0800b708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b708:	b480      	push	{r7}
 800b70a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b70c:	4b06      	ldr	r3, [pc, #24]	@ (800b728 <SystemInit+0x20>)
 800b70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b712:	4a05      	ldr	r2, [pc, #20]	@ (800b728 <SystemInit+0x20>)
 800b714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b71c:	bf00      	nop
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	e000ed00 	.word	0xe000ed00

0800b72c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b72c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b764 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b730:	f7ff ffea 	bl	800b708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b734:	480c      	ldr	r0, [pc, #48]	@ (800b768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b736:	490d      	ldr	r1, [pc, #52]	@ (800b76c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b738:	4a0d      	ldr	r2, [pc, #52]	@ (800b770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b73a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b73c:	e002      	b.n	800b744 <LoopCopyDataInit>

0800b73e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b73e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b742:	3304      	adds	r3, #4

0800b744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b748:	d3f9      	bcc.n	800b73e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b74a:	4a0a      	ldr	r2, [pc, #40]	@ (800b774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b74c:	4c0a      	ldr	r4, [pc, #40]	@ (800b778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b74e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b750:	e001      	b.n	800b756 <LoopFillZerobss>

0800b752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b754:	3204      	adds	r2, #4

0800b756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b758:	d3fb      	bcc.n	800b752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b75a:	f008 f8d7 	bl	801390c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b75e:	f7ff f80f 	bl	800a780 <main>
  bx  lr    
 800b762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b76c:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800b770:	08016e88 	.word	0x08016e88
  ldr r2, =_sbss
 800b774:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 800b778:	20001784 	.word	0x20001784

0800b77c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b77c:	e7fe      	b.n	800b77c <ADC_IRQHandler>
	...

0800b780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b784:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <HAL_Init+0x40>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c0 <HAL_Init+0x40>)
 800b78a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b78e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b790:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c0 <HAL_Init+0x40>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a0a      	ldr	r2, [pc, #40]	@ (800b7c0 <HAL_Init+0x40>)
 800b796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b79a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b79c:	4b08      	ldr	r3, [pc, #32]	@ (800b7c0 <HAL_Init+0x40>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a07      	ldr	r2, [pc, #28]	@ (800b7c0 <HAL_Init+0x40>)
 800b7a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b7a8:	2003      	movs	r0, #3
 800b7aa:	f000 fd6d 	bl	800c288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b7ae:	200f      	movs	r0, #15
 800b7b0:	f000 f808 	bl	800b7c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b7b4:	f7ff fba8 	bl	800af08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	40023c00 	.word	0x40023c00

0800b7c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b7cc:	4b12      	ldr	r3, [pc, #72]	@ (800b818 <HAL_InitTick+0x54>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	4b12      	ldr	r3, [pc, #72]	@ (800b81c <HAL_InitTick+0x58>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b7da:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fd85 	bl	800c2f2 <HAL_SYSTICK_Config>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e00e      	b.n	800b810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b0f      	cmp	r3, #15
 800b7f6:	d80a      	bhi.n	800b80e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	f000 fd4d 	bl	800c29e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b804:	4a06      	ldr	r2, [pc, #24]	@ (800b820 <HAL_InitTick+0x5c>)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e000      	b.n	800b810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20000138 	.word	0x20000138
 800b81c:	20000140 	.word	0x20000140
 800b820:	2000013c 	.word	0x2000013c

0800b824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b828:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <HAL_IncTick+0x20>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <HAL_IncTick+0x24>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4413      	add	r3, r2
 800b834:	4a04      	ldr	r2, [pc, #16]	@ (800b848 <HAL_IncTick+0x24>)
 800b836:	6013      	str	r3, [r2, #0]
}
 800b838:	bf00      	nop
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20000140 	.word	0x20000140
 800b848:	20001194 	.word	0x20001194

0800b84c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
  return uwTick;
 800b850:	4b03      	ldr	r3, [pc, #12]	@ (800b860 <HAL_GetTick+0x14>)
 800b852:	681b      	ldr	r3, [r3, #0]
}
 800b854:	4618      	mov	r0, r3
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20001194 	.word	0x20001194

0800b864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e033      	b.n	800b8e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d109      	bne.n	800b896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff fb68 	bl	800af58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d118      	bne.n	800b8d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b8aa:	f023 0302 	bic.w	r3, r3, #2
 800b8ae:	f043 0202 	orr.w	r2, r3, #2
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fa98 	bl	800bdec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	f043 0201 	orr.w	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b8d2:	e001      	b.n	800b8d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <HAL_ADC_Start_DMA+0x1e>
 800b906:	2302      	movs	r3, #2
 800b908:	e0ce      	b.n	800baa8 <HAL_ADC_Start_DMA+0x1bc>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d018      	beq.n	800b952 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 0201 	orr.w	r2, r2, #1
 800b92e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b930:	4b5f      	ldr	r3, [pc, #380]	@ (800bab0 <HAL_ADC_Start_DMA+0x1c4>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a5f      	ldr	r2, [pc, #380]	@ (800bab4 <HAL_ADC_Start_DMA+0x1c8>)
 800b936:	fba2 2303 	umull	r2, r3, r2, r3
 800b93a:	0c9a      	lsrs	r2, r3, #18
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800b944:	e002      	b.n	800b94c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	3b01      	subs	r3, #1
 800b94a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1f9      	bne.n	800b946 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b95c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b960:	d107      	bne.n	800b972 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b970:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	f040 8086 	bne.w	800ba8e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b986:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b9ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9c0:	d106      	bne.n	800b9d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9c6:	f023 0206 	bic.w	r2, r3, #6
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	645a      	str	r2, [r3, #68]	@ 0x44
 800b9ce:	e002      	b.n	800b9d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b9de:	4b36      	ldr	r3, [pc, #216]	@ (800bab8 <HAL_ADC_Start_DMA+0x1cc>)
 800b9e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e6:	4a35      	ldr	r2, [pc, #212]	@ (800babc <HAL_ADC_Start_DMA+0x1d0>)
 800b9e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ee:	4a34      	ldr	r2, [pc, #208]	@ (800bac0 <HAL_ADC_Start_DMA+0x1d4>)
 800b9f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f6:	4a33      	ldr	r2, [pc, #204]	@ (800bac4 <HAL_ADC_Start_DMA+0x1d8>)
 800b9f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800ba02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ba12:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689a      	ldr	r2, [r3, #8]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba22:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	334c      	adds	r3, #76	@ 0x4c
 800ba2e:	4619      	mov	r1, r3
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f000 fd66 	bl	800c504 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f003 031f 	and.w	r3, r3, #31
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10f      	bne.n	800ba64 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d129      	bne.n	800baa6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ba60:	609a      	str	r2, [r3, #8]
 800ba62:	e020      	b.n	800baa6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a17      	ldr	r2, [pc, #92]	@ (800bac8 <HAL_ADC_Start_DMA+0x1dc>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d11b      	bne.n	800baa6 <HAL_ADC_Start_DMA+0x1ba>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d114      	bne.n	800baa6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ba8a:	609a      	str	r2, [r3, #8]
 800ba8c:	e00b      	b.n	800baa6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba92:	f043 0210 	orr.w	r2, r3, #16
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9e:	f043 0201 	orr.w	r2, r3, #1
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20000138 	.word	0x20000138
 800bab4:	431bde83 	.word	0x431bde83
 800bab8:	40012300 	.word	0x40012300
 800babc:	0800bfe5 	.word	0x0800bfe5
 800bac0:	0800c09f 	.word	0x0800c09f
 800bac4:	0800c0bb 	.word	0x0800c0bb
 800bac8:	40012000 	.word	0x40012000

0800bacc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d101      	bne.n	800bae6 <HAL_ADC_Stop_DMA+0x1a>
 800bae2:	2302      	movs	r3, #2
 800bae4:	e048      	b.n	800bb78 <HAL_ADC_Stop_DMA+0xac>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0201 	bic.w	r2, r2, #1
 800bafc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d130      	bne.n	800bb6e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb1a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d10f      	bne.n	800bb4a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fd40 	bl	800c5b4 <HAL_DMA_Abort>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800bb58:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bb62:	f023 0301 	bic.w	r3, r3, #1
 800bb66:	f043 0201 	orr.w	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_ADC_ConfigChannel+0x1c>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e105      	b.n	800bdd0 <HAL_ADC_ConfigChannel+0x228>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b09      	cmp	r3, #9
 800bbd2:	d925      	bls.n	800bc20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68d9      	ldr	r1, [r3, #12]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	4413      	add	r3, r2
 800bbe8:	3b1e      	subs	r3, #30
 800bbea:	2207      	movs	r2, #7
 800bbec:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf0:	43da      	mvns	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	400a      	ands	r2, r1
 800bbf8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68d9      	ldr	r1, [r3, #12]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	4403      	add	r3, r0
 800bc12:	3b1e      	subs	r3, #30
 800bc14:	409a      	lsls	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	60da      	str	r2, [r3, #12]
 800bc1e:	e022      	b.n	800bc66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6919      	ldr	r1, [r3, #16]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4613      	mov	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4413      	add	r3, r2
 800bc34:	2207      	movs	r2, #7
 800bc36:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3a:	43da      	mvns	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	400a      	ands	r2, r1
 800bc42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6919      	ldr	r1, [r3, #16]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4618      	mov	r0, r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	4403      	add	r3, r0
 800bc5c:	409a      	lsls	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	2b06      	cmp	r3, #6
 800bc6c:	d824      	bhi.n	800bcb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	3b05      	subs	r3, #5
 800bc80:	221f      	movs	r2, #31
 800bc82:	fa02 f303 	lsl.w	r3, r2, r3
 800bc86:	43da      	mvns	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	400a      	ands	r2, r1
 800bc8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	3b05      	subs	r3, #5
 800bcaa:	fa00 f203 	lsl.w	r2, r0, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800bcb6:	e04c      	b.n	800bd52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b0c      	cmp	r3, #12
 800bcbe:	d824      	bhi.n	800bd0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	3b23      	subs	r3, #35	@ 0x23
 800bcd2:	221f      	movs	r2, #31
 800bcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd8:	43da      	mvns	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	400a      	ands	r2, r1
 800bce0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4618      	mov	r0, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3b23      	subs	r3, #35	@ 0x23
 800bcfc:	fa00 f203 	lsl.w	r2, r0, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	430a      	orrs	r2, r1
 800bd06:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd08:	e023      	b.n	800bd52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	3b41      	subs	r3, #65	@ 0x41
 800bd1c:	221f      	movs	r2, #31
 800bd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd22:	43da      	mvns	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	400a      	ands	r2, r1
 800bd2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4618      	mov	r0, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	3b41      	subs	r3, #65	@ 0x41
 800bd46:	fa00 f203 	lsl.w	r2, r0, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bd52:	4b22      	ldr	r3, [pc, #136]	@ (800bddc <HAL_ADC_ConfigChannel+0x234>)
 800bd54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a21      	ldr	r2, [pc, #132]	@ (800bde0 <HAL_ADC_ConfigChannel+0x238>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d109      	bne.n	800bd74 <HAL_ADC_ConfigChannel+0x1cc>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b12      	cmp	r3, #18
 800bd66:	d105      	bne.n	800bd74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a19      	ldr	r2, [pc, #100]	@ (800bde0 <HAL_ADC_ConfigChannel+0x238>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d123      	bne.n	800bdc6 <HAL_ADC_ConfigChannel+0x21e>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b10      	cmp	r3, #16
 800bd84:	d003      	beq.n	800bd8e <HAL_ADC_ConfigChannel+0x1e6>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b11      	cmp	r3, #17
 800bd8c:	d11b      	bne.n	800bdc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b10      	cmp	r3, #16
 800bda0:	d111      	bne.n	800bdc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bda2:	4b10      	ldr	r3, [pc, #64]	@ (800bde4 <HAL_ADC_ConfigChannel+0x23c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a10      	ldr	r2, [pc, #64]	@ (800bde8 <HAL_ADC_ConfigChannel+0x240>)
 800bda8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdac:	0c9a      	lsrs	r2, r3, #18
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800bdb8:	e002      	b.n	800bdc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1f9      	bne.n	800bdba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	40012300 	.word	0x40012300
 800bde0:	40012000 	.word	0x40012000
 800bde4:	20000138 	.word	0x20000138
 800bde8:	431bde83 	.word	0x431bde83

0800bdec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bdf4:	4b79      	ldr	r3, [pc, #484]	@ (800bfdc <ADC_Init+0x1f0>)
 800bdf6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	431a      	orrs	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6859      	ldr	r1, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	021a      	lsls	r2, r3, #8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	430a      	orrs	r2, r1
 800be34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800be44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6859      	ldr	r1, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689a      	ldr	r2, [r3, #8]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6899      	ldr	r1, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7e:	4a58      	ldr	r2, [pc, #352]	@ (800bfe0 <ADC_Init+0x1f4>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d022      	beq.n	800beca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	689a      	ldr	r2, [r3, #8]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800be92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6899      	ldr	r1, [r3, #8]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800beb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6899      	ldr	r1, [r3, #8]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	609a      	str	r2, [r3, #8]
 800bec8:	e00f      	b.n	800beea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800bee8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0202 	bic.w	r2, r2, #2
 800bef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6899      	ldr	r1, [r3, #8]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7e1b      	ldrb	r3, [r3, #24]
 800bf04:	005a      	lsls	r2, r3, #1
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01b      	beq.n	800bf50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800bf36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6859      	ldr	r1, [r3, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf42:	3b01      	subs	r3, #1
 800bf44:	035a      	lsls	r2, r3, #13
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	605a      	str	r2, [r3, #4]
 800bf4e:	e007      	b.n	800bf60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800bf6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	051a      	lsls	r2, r3, #20
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689a      	ldr	r2, [r3, #8]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bf94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6899      	ldr	r1, [r3, #8]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfa2:	025a      	lsls	r2, r3, #9
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6899      	ldr	r1, [r3, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	029a      	lsls	r2, r3, #10
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	609a      	str	r2, [r3, #8]
}
 800bfd0:	bf00      	nop
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	40012300 	.word	0x40012300
 800bfe0:	0f000001 	.word	0x0f000001

0800bfe4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d13c      	bne.n	800c078 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d12b      	bne.n	800c070 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d127      	bne.n	800c070 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c026:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d006      	beq.n	800c03c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d119      	bne.n	800c070 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0220 	bic.w	r2, r2, #32
 800c04a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c060:	2b00      	cmp	r3, #0
 800c062:	d105      	bne.n	800c070 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c068:	f043 0201 	orr.w	r2, r3, #1
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fafd 	bl	800b670 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c076:	e00e      	b.n	800c096 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c07c:	f003 0310 	and.w	r3, r3, #16
 800c080:	2b00      	cmp	r3, #0
 800c082:	d003      	beq.n	800c08c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff fd85 	bl	800bb94 <HAL_ADC_ErrorCallback>
}
 800c08a:	e004      	b.n	800c096 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	4798      	blx	r3
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff fd67 	bl	800bb80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2240      	movs	r2, #64	@ 0x40
 800c0cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d2:	f043 0204 	orr.w	r2, r3, #4
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff fd5a 	bl	800bb94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c12c <__NVIC_SetPriorityGrouping+0x44>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c104:	4013      	ands	r3, r2
 800c106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c11a:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <__NVIC_SetPriorityGrouping+0x44>)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	60d3      	str	r3, [r2, #12]
}
 800c120:	bf00      	nop
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	e000ed00 	.word	0xe000ed00

0800c130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c134:	4b04      	ldr	r3, [pc, #16]	@ (800c148 <__NVIC_GetPriorityGrouping+0x18>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	0a1b      	lsrs	r3, r3, #8
 800c13a:	f003 0307 	and.w	r3, r3, #7
}
 800c13e:	4618      	mov	r0, r3
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	e000ed00 	.word	0xe000ed00

0800c14c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	db0b      	blt.n	800c176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c15e:	79fb      	ldrb	r3, [r7, #7]
 800c160:	f003 021f 	and.w	r2, r3, #31
 800c164:	4907      	ldr	r1, [pc, #28]	@ (800c184 <__NVIC_EnableIRQ+0x38>)
 800c166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c16a:	095b      	lsrs	r3, r3, #5
 800c16c:	2001      	movs	r0, #1
 800c16e:	fa00 f202 	lsl.w	r2, r0, r2
 800c172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	e000e100 	.word	0xe000e100

0800c188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	6039      	str	r1, [r7, #0]
 800c192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	db0a      	blt.n	800c1b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	490c      	ldr	r1, [pc, #48]	@ (800c1d4 <__NVIC_SetPriority+0x4c>)
 800c1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1a6:	0112      	lsls	r2, r2, #4
 800c1a8:	b2d2      	uxtb	r2, r2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c1b0:	e00a      	b.n	800c1c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	4908      	ldr	r1, [pc, #32]	@ (800c1d8 <__NVIC_SetPriority+0x50>)
 800c1b8:	79fb      	ldrb	r3, [r7, #7]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	3b04      	subs	r3, #4
 800c1c0:	0112      	lsls	r2, r2, #4
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	761a      	strb	r2, [r3, #24]
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	e000e100 	.word	0xe000e100
 800c1d8:	e000ed00 	.word	0xe000ed00

0800c1dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b089      	sub	sp, #36	@ 0x24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	f1c3 0307 	rsb	r3, r3, #7
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	bf28      	it	cs
 800c1fa:	2304      	movcs	r3, #4
 800c1fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	3304      	adds	r3, #4
 800c202:	2b06      	cmp	r3, #6
 800c204:	d902      	bls.n	800c20c <NVIC_EncodePriority+0x30>
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	3b03      	subs	r3, #3
 800c20a:	e000      	b.n	800c20e <NVIC_EncodePriority+0x32>
 800c20c:	2300      	movs	r3, #0
 800c20e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	fa02 f303 	lsl.w	r3, r2, r3
 800c21a:	43da      	mvns	r2, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	401a      	ands	r2, r3
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c224:	f04f 31ff 	mov.w	r1, #4294967295
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	fa01 f303 	lsl.w	r3, r1, r3
 800c22e:	43d9      	mvns	r1, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c234:	4313      	orrs	r3, r2
         );
}
 800c236:	4618      	mov	r0, r3
 800c238:	3724      	adds	r7, #36	@ 0x24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
	...

0800c244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3b01      	subs	r3, #1
 800c250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c254:	d301      	bcc.n	800c25a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c256:	2301      	movs	r3, #1
 800c258:	e00f      	b.n	800c27a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c25a:	4a0a      	ldr	r2, [pc, #40]	@ (800c284 <SysTick_Config+0x40>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3b01      	subs	r3, #1
 800c260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c262:	210f      	movs	r1, #15
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	f7ff ff8e 	bl	800c188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c26c:	4b05      	ldr	r3, [pc, #20]	@ (800c284 <SysTick_Config+0x40>)
 800c26e:	2200      	movs	r2, #0
 800c270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c272:	4b04      	ldr	r3, [pc, #16]	@ (800c284 <SysTick_Config+0x40>)
 800c274:	2207      	movs	r2, #7
 800c276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	e000e010 	.word	0xe000e010

0800c288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff29 	bl	800c0e8 <__NVIC_SetPriorityGrouping>
}
 800c296:	bf00      	nop
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b086      	sub	sp, #24
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	607a      	str	r2, [r7, #4]
 800c2aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c2b0:	f7ff ff3e 	bl	800c130 <__NVIC_GetPriorityGrouping>
 800c2b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	6978      	ldr	r0, [r7, #20]
 800c2bc:	f7ff ff8e 	bl	800c1dc <NVIC_EncodePriority>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff ff5d 	bl	800c188 <__NVIC_SetPriority>
}
 800c2ce:	bf00      	nop
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b082      	sub	sp, #8
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	4603      	mov	r3, r0
 800c2de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c2e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff ff31 	bl	800c14c <__NVIC_EnableIRQ>
}
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff ffa2 	bl	800c244 <SysTick_Config>
 800c300:	4603      	mov	r3, r0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e00e      	b.n	800c33a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	795b      	ldrb	r3, [r3, #5]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d105      	bne.n	800c332 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe fe89 	bl	800b044 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c342:	b480      	push	{r7}
 800c344:	b087      	sub	sp, #28
 800c346:	af00      	add	r7, sp, #0
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c34e:	2300      	movs	r3, #0
 800c350:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2202      	movs	r2, #2
 800c356:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0201 	orr.w	r2, r2, #1
 800c366:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800c368:	2300      	movs	r3, #0
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	e00a      	b.n	800c384 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	441a      	add	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	3301      	adds	r3, #1
 800c382:	617b      	str	r3, [r7, #20]
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d3f0      	bcc.n	800c36e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2201      	movs	r2, #1
 800c398:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800c39a:	693b      	ldr	r3, [r7, #16]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c3b4:	f7ff fa4a 	bl	800b84c <HAL_GetTick>
 800c3b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e099      	b.n	800c4f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f022 0201 	bic.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c3e4:	e00f      	b.n	800c406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c3e6:	f7ff fa31 	bl	800b84c <HAL_GetTick>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	2b05      	cmp	r3, #5
 800c3f2:	d908      	bls.n	800c406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2203      	movs	r2, #3
 800c3fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	e078      	b.n	800c4f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0301 	and.w	r3, r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e8      	bne.n	800c3e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	4b38      	ldr	r3, [pc, #224]	@ (800c500 <HAL_DMA_Init+0x158>)
 800c420:	4013      	ands	r3, r2
 800c422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c43e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c44a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d107      	bne.n	800c470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c468:	4313      	orrs	r3, r2
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f023 0307 	bic.w	r3, r3, #7
 800c486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	4313      	orrs	r3, r2
 800c490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c496:	2b04      	cmp	r3, #4
 800c498:	d117      	bne.n	800c4ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00e      	beq.n	800c4ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fadf 	bl	800ca70 <DMA_CheckFifoParam>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d008      	beq.n	800c4ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2240      	movs	r2, #64	@ 0x40
 800c4bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e016      	b.n	800c4f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa96 	bl	800ca04 <DMA_CalcBaseAndBitshift>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4e0:	223f      	movs	r2, #63	@ 0x3f
 800c4e2:	409a      	lsls	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	f010803f 	.word	0xf010803f

0800c504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c51a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <HAL_DMA_Start_IT+0x26>
 800c526:	2302      	movs	r3, #2
 800c528:	e040      	b.n	800c5ac <HAL_DMA_Start_IT+0xa8>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d12f      	bne.n	800c59e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2202      	movs	r2, #2
 800c542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 fa28 	bl	800c9a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c55c:	223f      	movs	r2, #63	@ 0x3f
 800c55e:	409a      	lsls	r2, r3
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f042 0216 	orr.w	r2, r2, #22
 800c572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d007      	beq.n	800c58c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0208 	orr.w	r2, r2, #8
 800c58a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	e005      	b.n	800c5aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c5c2:	f7ff f943 	bl	800b84c <HAL_GetTick>
 800c5c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d008      	beq.n	800c5e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2280      	movs	r2, #128	@ 0x80
 800c5d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e052      	b.n	800c68c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f022 0216 	bic.w	r2, r2, #22
 800c5f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	695a      	ldr	r2, [r3, #20]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c604:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d103      	bne.n	800c616 <HAL_DMA_Abort+0x62>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f022 0208 	bic.w	r2, r2, #8
 800c624:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 0201 	bic.w	r2, r2, #1
 800c634:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c636:	e013      	b.n	800c660 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c638:	f7ff f908 	bl	800b84c <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b05      	cmp	r3, #5
 800c644:	d90c      	bls.n	800c660 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2203      	movs	r2, #3
 800c650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e015      	b.n	800c68c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e4      	bne.n	800c638 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c672:	223f      	movs	r2, #63	@ 0x3f
 800c674:	409a      	lsls	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c69c:	2300      	movs	r3, #0
 800c69e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c6a0:	4b8e      	ldr	r3, [pc, #568]	@ (800c8dc <HAL_DMA_IRQHandler+0x248>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a8e      	ldr	r2, [pc, #568]	@ (800c8e0 <HAL_DMA_IRQHandler+0x24c>)
 800c6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6aa:	0a9b      	lsrs	r3, r3, #10
 800c6ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6be:	2208      	movs	r2, #8
 800c6c0:	409a      	lsls	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01a      	beq.n	800c700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d013      	beq.n	800c700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 0204 	bic.w	r2, r2, #4
 800c6e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	409a      	lsls	r2, r3
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f8:	f043 0201 	orr.w	r2, r3, #1
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c704:	2201      	movs	r2, #1
 800c706:	409a      	lsls	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4013      	ands	r3, r2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d012      	beq.n	800c736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c722:	2201      	movs	r2, #1
 800c724:	409a      	lsls	r2, r3
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c72e:	f043 0202 	orr.w	r2, r3, #2
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c73a:	2204      	movs	r2, #4
 800c73c:	409a      	lsls	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	4013      	ands	r3, r2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d012      	beq.n	800c76c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00b      	beq.n	800c76c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c758:	2204      	movs	r2, #4
 800c75a:	409a      	lsls	r2, r3
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c764:	f043 0204 	orr.w	r2, r3, #4
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c770:	2210      	movs	r2, #16
 800c772:	409a      	lsls	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	4013      	ands	r3, r2
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d043      	beq.n	800c804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0308 	and.w	r3, r3, #8
 800c786:	2b00      	cmp	r3, #0
 800c788:	d03c      	beq.n	800c804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c78e:	2210      	movs	r2, #16
 800c790:	409a      	lsls	r2, r3
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d018      	beq.n	800c7d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d108      	bne.n	800c7c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d024      	beq.n	800c804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	4798      	blx	r3
 800c7c2:	e01f      	b.n	800c804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01b      	beq.n	800c804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	4798      	blx	r3
 800c7d4:	e016      	b.n	800c804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d107      	bne.n	800c7f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f022 0208 	bic.w	r2, r2, #8
 800c7f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c808:	2220      	movs	r2, #32
 800c80a:	409a      	lsls	r2, r3
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4013      	ands	r3, r2
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 808f 	beq.w	800c934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 8087 	beq.w	800c934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c82a:	2220      	movs	r2, #32
 800c82c:	409a      	lsls	r2, r3
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	d136      	bne.n	800c8ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0216 	bic.w	r2, r2, #22
 800c84c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	695a      	ldr	r2, [r3, #20]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c85c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c862:	2b00      	cmp	r3, #0
 800c864:	d103      	bne.n	800c86e <HAL_DMA_IRQHandler+0x1da>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d007      	beq.n	800c87e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f022 0208 	bic.w	r2, r2, #8
 800c87c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c882:	223f      	movs	r2, #63	@ 0x3f
 800c884:	409a      	lsls	r2, r3
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d07e      	beq.n	800c9a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	4798      	blx	r3
        }
        return;
 800c8aa:	e079      	b.n	800c9a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d01d      	beq.n	800c8f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10d      	bne.n	800c8e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d031      	beq.n	800c934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	4798      	blx	r3
 800c8d8:	e02c      	b.n	800c934 <HAL_DMA_IRQHandler+0x2a0>
 800c8da:	bf00      	nop
 800c8dc:	20000138 	.word	0x20000138
 800c8e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d023      	beq.n	800c934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	4798      	blx	r3
 800c8f4:	e01e      	b.n	800c934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10f      	bne.n	800c924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f022 0210 	bic.w	r2, r2, #16
 800c912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d032      	beq.n	800c9a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d022      	beq.n	800c98e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2205      	movs	r2, #5
 800c94c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f022 0201 	bic.w	r2, r2, #1
 800c95e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	3301      	adds	r3, #1
 800c964:	60bb      	str	r3, [r7, #8]
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d307      	bcc.n	800c97c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1f2      	bne.n	800c960 <HAL_DMA_IRQHandler+0x2cc>
 800c97a:	e000      	b.n	800c97e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c97c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c992:	2b00      	cmp	r3, #0
 800c994:	d005      	beq.n	800c9a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	4798      	blx	r3
 800c99e:	e000      	b.n	800c9a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800c9a0:	bf00      	nop
    }
  }
}
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c9c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	2b40      	cmp	r3, #64	@ 0x40
 800c9d4:	d108      	bne.n	800c9e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c9e6:	e007      	b.n	800c9f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	60da      	str	r2, [r3, #12]
}
 800c9f8:	bf00      	nop
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	3b10      	subs	r3, #16
 800ca14:	4a14      	ldr	r2, [pc, #80]	@ (800ca68 <DMA_CalcBaseAndBitshift+0x64>)
 800ca16:	fba2 2303 	umull	r2, r3, r2, r3
 800ca1a:	091b      	lsrs	r3, r3, #4
 800ca1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ca1e:	4a13      	ldr	r2, [pc, #76]	@ (800ca6c <DMA_CalcBaseAndBitshift+0x68>)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d909      	bls.n	800ca46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ca3a:	f023 0303 	bic.w	r3, r3, #3
 800ca3e:	1d1a      	adds	r2, r3, #4
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	659a      	str	r2, [r3, #88]	@ 0x58
 800ca44:	e007      	b.n	800ca56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ca4e:	f023 0303 	bic.w	r3, r3, #3
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	aaaaaaab 	.word	0xaaaaaaab
 800ca6c:	080169fc 	.word	0x080169fc

0800ca70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d11f      	bne.n	800caca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d856      	bhi.n	800cb3e <DMA_CheckFifoParam+0xce>
 800ca90:	a201      	add	r2, pc, #4	@ (adr r2, 800ca98 <DMA_CheckFifoParam+0x28>)
 800ca92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca96:	bf00      	nop
 800ca98:	0800caa9 	.word	0x0800caa9
 800ca9c:	0800cabb 	.word	0x0800cabb
 800caa0:	0800caa9 	.word	0x0800caa9
 800caa4:	0800cb3f 	.word	0x0800cb3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d046      	beq.n	800cb42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cab8:	e043      	b.n	800cb42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cabe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cac2:	d140      	bne.n	800cb46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cac8:	e03d      	b.n	800cb46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	699b      	ldr	r3, [r3, #24]
 800cace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cad2:	d121      	bne.n	800cb18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d837      	bhi.n	800cb4a <DMA_CheckFifoParam+0xda>
 800cada:	a201      	add	r2, pc, #4	@ (adr r2, 800cae0 <DMA_CheckFifoParam+0x70>)
 800cadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae0:	0800caf1 	.word	0x0800caf1
 800cae4:	0800caf7 	.word	0x0800caf7
 800cae8:	0800caf1 	.word	0x0800caf1
 800caec:	0800cb09 	.word	0x0800cb09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	73fb      	strb	r3, [r7, #15]
      break;
 800caf4:	e030      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cafa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d025      	beq.n	800cb4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cb06:	e022      	b.n	800cb4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cb10:	d11f      	bne.n	800cb52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cb16:	e01c      	b.n	800cb52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d903      	bls.n	800cb26 <DMA_CheckFifoParam+0xb6>
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d003      	beq.n	800cb2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cb24:	e018      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	73fb      	strb	r3, [r7, #15]
      break;
 800cb2a:	e015      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00e      	beq.n	800cb56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3c:	e00b      	b.n	800cb56 <DMA_CheckFifoParam+0xe6>
      break;
 800cb3e:	bf00      	nop
 800cb40:	e00a      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;
 800cb42:	bf00      	nop
 800cb44:	e008      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;
 800cb46:	bf00      	nop
 800cb48:	e006      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;
 800cb4a:	bf00      	nop
 800cb4c:	e004      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;
 800cb4e:	bf00      	nop
 800cb50:	e002      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;   
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <DMA_CheckFifoParam+0xe8>
      break;
 800cb56:	bf00      	nop
    }
  } 
  
  return status; 
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop

0800cb68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b089      	sub	sp, #36	@ 0x24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]
 800cb82:	e159      	b.n	800ce38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cb84:	2201      	movs	r2, #1
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	4013      	ands	r3, r2
 800cb96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	f040 8148 	bne.w	800ce32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f003 0303 	and.w	r3, r3, #3
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d005      	beq.n	800cbba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d130      	bne.n	800cc1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	005b      	lsls	r3, r3, #1
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbca:	43db      	mvns	r3, r3
 800cbcc:	69ba      	ldr	r2, [r7, #24]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	68da      	ldr	r2, [r3, #12]
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	fa02 f303 	lsl.w	r3, r2, r3
 800cbde:	69ba      	ldr	r2, [r7, #24]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf8:	43db      	mvns	r3, r3
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	091b      	lsrs	r3, r3, #4
 800cc06:	f003 0201 	and.w	r2, r3, #1
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc10:	69ba      	ldr	r2, [r7, #24]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	f003 0303 	and.w	r3, r3, #3
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d017      	beq.n	800cc58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	2203      	movs	r2, #3
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4c:	69ba      	ldr	r2, [r7, #24]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	69ba      	ldr	r2, [r7, #24]
 800cc56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d123      	bne.n	800ccac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	08da      	lsrs	r2, r3, #3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3208      	adds	r2, #8
 800cc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	f003 0307 	and.w	r3, r3, #7
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	220f      	movs	r2, #15
 800cc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc80:	43db      	mvns	r3, r3
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	4013      	ands	r3, r2
 800cc86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	691a      	ldr	r2, [r3, #16]
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	fa02 f303 	lsl.w	r3, r2, r3
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	08da      	lsrs	r2, r3, #3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3208      	adds	r2, #8
 800cca6:	69b9      	ldr	r1, [r7, #24]
 800cca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	2203      	movs	r2, #3
 800ccb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	f003 0203 	and.w	r2, r3, #3
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	69ba      	ldr	r2, [r7, #24]
 800ccde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 80a2 	beq.w	800ce32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60fb      	str	r3, [r7, #12]
 800ccf2:	4b57      	ldr	r3, [pc, #348]	@ (800ce50 <HAL_GPIO_Init+0x2e8>)
 800ccf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf6:	4a56      	ldr	r2, [pc, #344]	@ (800ce50 <HAL_GPIO_Init+0x2e8>)
 800ccf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ccfc:	6453      	str	r3, [r2, #68]	@ 0x44
 800ccfe:	4b54      	ldr	r3, [pc, #336]	@ (800ce50 <HAL_GPIO_Init+0x2e8>)
 800cd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cd0a:	4a52      	ldr	r2, [pc, #328]	@ (800ce54 <HAL_GPIO_Init+0x2ec>)
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	089b      	lsrs	r3, r3, #2
 800cd10:	3302      	adds	r3, #2
 800cd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	f003 0303 	and.w	r3, r3, #3
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	220f      	movs	r2, #15
 800cd22:	fa02 f303 	lsl.w	r3, r2, r3
 800cd26:	43db      	mvns	r3, r3
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a49      	ldr	r2, [pc, #292]	@ (800ce58 <HAL_GPIO_Init+0x2f0>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d019      	beq.n	800cd6a <HAL_GPIO_Init+0x202>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a48      	ldr	r2, [pc, #288]	@ (800ce5c <HAL_GPIO_Init+0x2f4>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d013      	beq.n	800cd66 <HAL_GPIO_Init+0x1fe>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a47      	ldr	r2, [pc, #284]	@ (800ce60 <HAL_GPIO_Init+0x2f8>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00d      	beq.n	800cd62 <HAL_GPIO_Init+0x1fa>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a46      	ldr	r2, [pc, #280]	@ (800ce64 <HAL_GPIO_Init+0x2fc>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d007      	beq.n	800cd5e <HAL_GPIO_Init+0x1f6>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a45      	ldr	r2, [pc, #276]	@ (800ce68 <HAL_GPIO_Init+0x300>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d101      	bne.n	800cd5a <HAL_GPIO_Init+0x1f2>
 800cd56:	2304      	movs	r3, #4
 800cd58:	e008      	b.n	800cd6c <HAL_GPIO_Init+0x204>
 800cd5a:	2307      	movs	r3, #7
 800cd5c:	e006      	b.n	800cd6c <HAL_GPIO_Init+0x204>
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e004      	b.n	800cd6c <HAL_GPIO_Init+0x204>
 800cd62:	2302      	movs	r3, #2
 800cd64:	e002      	b.n	800cd6c <HAL_GPIO_Init+0x204>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <HAL_GPIO_Init+0x204>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	f002 0203 	and.w	r2, r2, #3
 800cd72:	0092      	lsls	r2, r2, #2
 800cd74:	4093      	lsls	r3, r2
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd7c:	4935      	ldr	r1, [pc, #212]	@ (800ce54 <HAL_GPIO_Init+0x2ec>)
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	089b      	lsrs	r3, r3, #2
 800cd82:	3302      	adds	r3, #2
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cd8a:	4b38      	ldr	r3, [pc, #224]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	43db      	mvns	r3, r3
 800cd94:	69ba      	ldr	r2, [r7, #24]
 800cd96:	4013      	ands	r3, r2
 800cd98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d003      	beq.n	800cdae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cda6:	69ba      	ldr	r2, [r7, #24]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cdae:	4a2f      	ldr	r2, [pc, #188]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cdb4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	43db      	mvns	r3, r3
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cdd8:	4a24      	ldr	r2, [pc, #144]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cdde:	4b23      	ldr	r3, [pc, #140]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	43db      	mvns	r3, r3
 800cde8:	69ba      	ldr	r2, [r7, #24]
 800cdea:	4013      	ands	r3, r2
 800cdec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ce02:	4a1a      	ldr	r2, [pc, #104]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ce08:	4b18      	ldr	r3, [pc, #96]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	43db      	mvns	r3, r3
 800ce12:	69ba      	ldr	r2, [r7, #24]
 800ce14:	4013      	ands	r3, r2
 800ce16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ce24:	69ba      	ldr	r2, [r7, #24]
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ce2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ce6c <HAL_GPIO_Init+0x304>)
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	3301      	adds	r3, #1
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	2b0f      	cmp	r3, #15
 800ce3c:	f67f aea2 	bls.w	800cb84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	3724      	adds	r7, #36	@ 0x24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	40023800 	.word	0x40023800
 800ce54:	40013800 	.word	0x40013800
 800ce58:	40020000 	.word	0x40020000
 800ce5c:	40020400 	.word	0x40020400
 800ce60:	40020800 	.word	0x40020800
 800ce64:	40020c00 	.word	0x40020c00
 800ce68:	40021000 	.word	0x40021000
 800ce6c:	40013c00 	.word	0x40013c00

0800ce70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	807b      	strh	r3, [r7, #2]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ce80:	787b      	ldrb	r3, [r7, #1]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce86:	887a      	ldrh	r2, [r7, #2]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ce8c:	e003      	b.n	800ce96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ce8e:	887b      	ldrh	r3, [r7, #2]
 800ce90:	041a      	lsls	r2, r3, #16
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	619a      	str	r2, [r3, #24]
}
 800ce96:	bf00      	nop
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b085      	sub	sp, #20
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ceb4:	887a      	ldrh	r2, [r7, #2]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	4013      	ands	r3, r2
 800ceba:	041a      	lsls	r2, r3, #16
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	43d9      	mvns	r1, r3
 800cec0:	887b      	ldrh	r3, [r7, #2]
 800cec2:	400b      	ands	r3, r1
 800cec4:	431a      	orrs	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	619a      	str	r2, [r3, #24]
}
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
	...

0800ced8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e12b      	b.n	800d142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7fe f8c2 	bl	800b088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2224      	movs	r2, #36	@ 0x24
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f022 0201 	bic.w	r2, r2, #1
 800cf1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cf2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cf3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cf3c:	f001 fece 	bl	800ecdc <HAL_RCC_GetPCLK1Freq>
 800cf40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	4a81      	ldr	r2, [pc, #516]	@ (800d14c <HAL_I2C_Init+0x274>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d807      	bhi.n	800cf5c <HAL_I2C_Init+0x84>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4a80      	ldr	r2, [pc, #512]	@ (800d150 <HAL_I2C_Init+0x278>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	bf94      	ite	ls
 800cf54:	2301      	movls	r3, #1
 800cf56:	2300      	movhi	r3, #0
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	e006      	b.n	800cf6a <HAL_I2C_Init+0x92>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4a7d      	ldr	r2, [pc, #500]	@ (800d154 <HAL_I2C_Init+0x27c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	bf94      	ite	ls
 800cf64:	2301      	movls	r3, #1
 800cf66:	2300      	movhi	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e0e7      	b.n	800d142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	4a78      	ldr	r2, [pc, #480]	@ (800d158 <HAL_I2C_Init+0x280>)
 800cf76:	fba2 2303 	umull	r2, r3, r2, r3
 800cf7a:	0c9b      	lsrs	r3, r3, #18
 800cf7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6a1b      	ldr	r3, [r3, #32]
 800cf98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	4a6a      	ldr	r2, [pc, #424]	@ (800d14c <HAL_I2C_Init+0x274>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d802      	bhi.n	800cfac <HAL_I2C_Init+0xd4>
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	e009      	b.n	800cfc0 <HAL_I2C_Init+0xe8>
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
 800cfb6:	4a69      	ldr	r2, [pc, #420]	@ (800d15c <HAL_I2C_Init+0x284>)
 800cfb8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfbc:	099b      	lsrs	r3, r3, #6
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	6812      	ldr	r2, [r2, #0]
 800cfc4:	430b      	orrs	r3, r1
 800cfc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cfd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	495c      	ldr	r1, [pc, #368]	@ (800d14c <HAL_I2C_Init+0x274>)
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	d819      	bhi.n	800d014 <HAL_I2C_Init+0x13c>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	1e59      	subs	r1, r3, #1
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cff4:	400b      	ands	r3, r1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <HAL_I2C_Init+0x138>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	1e59      	subs	r1, r3, #1
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	fbb1 f3f3 	udiv	r3, r1, r3
 800d008:	3301      	adds	r3, #1
 800d00a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00e:	e051      	b.n	800d0b4 <HAL_I2C_Init+0x1dc>
 800d010:	2304      	movs	r3, #4
 800d012:	e04f      	b.n	800d0b4 <HAL_I2C_Init+0x1dc>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d111      	bne.n	800d040 <HAL_I2C_Init+0x168>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	1e58      	subs	r0, r3, #1
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6859      	ldr	r1, [r3, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	440b      	add	r3, r1
 800d02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d02e:	3301      	adds	r3, #1
 800d030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf0c      	ite	eq
 800d038:	2301      	moveq	r3, #1
 800d03a:	2300      	movne	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	e012      	b.n	800d066 <HAL_I2C_Init+0x18e>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	1e58      	subs	r0, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6859      	ldr	r1, [r3, #4]
 800d048:	460b      	mov	r3, r1
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	440b      	add	r3, r1
 800d04e:	0099      	lsls	r1, r3, #2
 800d050:	440b      	add	r3, r1
 800d052:	fbb0 f3f3 	udiv	r3, r0, r3
 800d056:	3301      	adds	r3, #1
 800d058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bf0c      	ite	eq
 800d060:	2301      	moveq	r3, #1
 800d062:	2300      	movne	r3, #0
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <HAL_I2C_Init+0x196>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e022      	b.n	800d0b4 <HAL_I2C_Init+0x1dc>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10e      	bne.n	800d094 <HAL_I2C_Init+0x1bc>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	1e58      	subs	r0, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6859      	ldr	r1, [r3, #4]
 800d07e:	460b      	mov	r3, r1
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	440b      	add	r3, r1
 800d084:	fbb0 f3f3 	udiv	r3, r0, r3
 800d088:	3301      	adds	r3, #1
 800d08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d08e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d092:	e00f      	b.n	800d0b4 <HAL_I2C_Init+0x1dc>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	1e58      	subs	r0, r3, #1
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6859      	ldr	r1, [r3, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	0099      	lsls	r1, r3, #2
 800d0a4:	440b      	add	r3, r1
 800d0a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	6809      	ldr	r1, [r1, #0]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69da      	ldr	r2, [r3, #28]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d0e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	6911      	ldr	r1, [r2, #16]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	68d2      	ldr	r2, [r2, #12]
 800d0ee:	4311      	orrs	r1, r2
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	6812      	ldr	r2, [r2, #0]
 800d0f4:	430b      	orrs	r3, r1
 800d0f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	695a      	ldr	r2, [r3, #20]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0201 	orr.w	r2, r2, #1
 800d122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2220      	movs	r2, #32
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	000186a0 	.word	0x000186a0
 800d150:	001e847f 	.word	0x001e847f
 800d154:	003d08ff 	.word	0x003d08ff
 800d158:	431bde83 	.word	0x431bde83
 800d15c:	10624dd3 	.word	0x10624dd3

0800d160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	461a      	mov	r2, r3
 800d16c:	460b      	mov	r3, r1
 800d16e:	817b      	strh	r3, [r7, #10]
 800d170:	4613      	mov	r3, r2
 800d172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d174:	f7fe fb6a 	bl	800b84c <HAL_GetTick>
 800d178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b20      	cmp	r3, #32
 800d184:	f040 80e0 	bne.w	800d348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	2319      	movs	r3, #25
 800d18e:	2201      	movs	r2, #1
 800d190:	4970      	ldr	r1, [pc, #448]	@ (800d354 <HAL_I2C_Master_Transmit+0x1f4>)
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 ff3c 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d19e:	2302      	movs	r3, #2
 800d1a0:	e0d3      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d101      	bne.n	800d1b0 <HAL_I2C_Master_Transmit+0x50>
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	e0cc      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d007      	beq.n	800d1d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f042 0201 	orr.w	r2, r2, #1
 800d1d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d1e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2221      	movs	r2, #33	@ 0x21
 800d1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	893a      	ldrh	r2, [r7, #8]
 800d206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4a50      	ldr	r2, [pc, #320]	@ (800d358 <HAL_I2C_Master_Transmit+0x1f8>)
 800d216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d218:	8979      	ldrh	r1, [r7, #10]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	6a3a      	ldr	r2, [r7, #32]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 fcf6 	bl	800dc10 <I2C_MasterRequestWrite>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e08d      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d22e:	2300      	movs	r3, #0
 800d230:	613b      	str	r3, [r7, #16]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	613b      	str	r3, [r7, #16]
 800d242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d244:	e066      	b.n	800d314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	6a39      	ldr	r1, [r7, #32]
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 fffa 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00d      	beq.n	800d272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	d107      	bne.n	800d26e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d26c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e06b      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d276:	781a      	ldrb	r2, [r3, #0]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	3b01      	subs	r3, #1
 800d290:	b29a      	uxth	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d29a:	3b01      	subs	r3, #1
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	f003 0304 	and.w	r3, r3, #4
 800d2ac:	2b04      	cmp	r3, #4
 800d2ae:	d11b      	bne.n	800d2e8 <HAL_I2C_Master_Transmit+0x188>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d017      	beq.n	800d2e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2bc:	781a      	ldrb	r2, [r3, #0]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	6a39      	ldr	r1, [r7, #32]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 fff1 	bl	800e2d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00d      	beq.n	800d314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	d107      	bne.n	800d310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d30e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e01a      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d194      	bne.n	800d246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d32a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2220      	movs	r2, #32
 800d330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	e000      	b.n	800d34a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d348:	2302      	movs	r3, #2
  }
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	00100002 	.word	0x00100002
 800d358:	ffff0000 	.word	0xffff0000

0800d35c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af02      	add	r7, sp, #8
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	4608      	mov	r0, r1
 800d366:	4611      	mov	r1, r2
 800d368:	461a      	mov	r2, r3
 800d36a:	4603      	mov	r3, r0
 800d36c:	817b      	strh	r3, [r7, #10]
 800d36e:	460b      	mov	r3, r1
 800d370:	813b      	strh	r3, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d376:	f7fe fa69 	bl	800b84c <HAL_GetTick>
 800d37a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b20      	cmp	r3, #32
 800d386:	f040 80d9 	bne.w	800d53c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	2319      	movs	r3, #25
 800d390:	2201      	movs	r2, #1
 800d392:	496d      	ldr	r1, [pc, #436]	@ (800d548 <HAL_I2C_Mem_Write+0x1ec>)
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f000 fe3b 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	e0cc      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d101      	bne.n	800d3b2 <HAL_I2C_Mem_Write+0x56>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	e0c5      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d007      	beq.n	800d3d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f042 0201 	orr.w	r2, r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d3e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2221      	movs	r2, #33	@ 0x21
 800d3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2240      	movs	r2, #64	@ 0x40
 800d3f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6a3a      	ldr	r2, [r7, #32]
 800d402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d40e:	b29a      	uxth	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	4a4d      	ldr	r2, [pc, #308]	@ (800d54c <HAL_I2C_Mem_Write+0x1f0>)
 800d418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d41a:	88f8      	ldrh	r0, [r7, #6]
 800d41c:	893a      	ldrh	r2, [r7, #8]
 800d41e:	8979      	ldrh	r1, [r7, #10]
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4603      	mov	r3, r0
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 fc72 	bl	800dd14 <I2C_RequestMemoryWrite>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d052      	beq.n	800d4dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	e081      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d43a:	697a      	ldr	r2, [r7, #20]
 800d43c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 ff00 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d107      	bne.n	800d462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e06b      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46a:	781a      	ldrb	r2, [r3, #0]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d480:	3b01      	subs	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b04      	cmp	r3, #4
 800d4a2:	d11b      	bne.n	800d4dc <HAL_I2C_Mem_Write+0x180>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d017      	beq.n	800d4dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b0:	781a      	ldrb	r2, [r3, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1aa      	bne.n	800d43a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f000 fef3 	bl	800e2d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00d      	beq.n	800d510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f8:	2b04      	cmp	r3, #4
 800d4fa:	d107      	bne.n	800d50c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d50a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e016      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d51e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2220      	movs	r2, #32
 800d524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	e000      	b.n	800d53e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d53c:	2302      	movs	r3, #2
  }
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	00100002 	.word	0x00100002
 800d54c:	ffff0000 	.word	0xffff0000

0800d550 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b08c      	sub	sp, #48	@ 0x30
 800d554:	af02      	add	r7, sp, #8
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	4608      	mov	r0, r1
 800d55a:	4611      	mov	r1, r2
 800d55c:	461a      	mov	r2, r3
 800d55e:	4603      	mov	r3, r0
 800d560:	817b      	strh	r3, [r7, #10]
 800d562:	460b      	mov	r3, r1
 800d564:	813b      	strh	r3, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d56a:	f7fe f96f 	bl	800b84c <HAL_GetTick>
 800d56e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b20      	cmp	r3, #32
 800d57a:	f040 8214 	bne.w	800d9a6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	2319      	movs	r3, #25
 800d584:	2201      	movs	r2, #1
 800d586:	497b      	ldr	r1, [pc, #492]	@ (800d774 <HAL_I2C_Mem_Read+0x224>)
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f000 fd41 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d594:	2302      	movs	r3, #2
 800d596:	e207      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d101      	bne.n	800d5a6 <HAL_I2C_Mem_Read+0x56>
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e200      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d007      	beq.n	800d5cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f042 0201 	orr.w	r2, r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d5da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2222      	movs	r2, #34	@ 0x22
 800d5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2240      	movs	r2, #64	@ 0x40
 800d5e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d5fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d602:	b29a      	uxth	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4a5b      	ldr	r2, [pc, #364]	@ (800d778 <HAL_I2C_Mem_Read+0x228>)
 800d60c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d60e:	88f8      	ldrh	r0, [r7, #6]
 800d610:	893a      	ldrh	r2, [r7, #8]
 800d612:	8979      	ldrh	r1, [r7, #10]
 800d614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d616:	9301      	str	r3, [sp, #4]
 800d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4603      	mov	r3, r0
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 fc0e 	bl	800de40 <I2C_RequestMemoryRead>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e1bc      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	d113      	bne.n	800d65e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d636:	2300      	movs	r3, #0
 800d638:	623b      	str	r3, [r7, #32]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	623b      	str	r3, [r7, #32]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	699b      	ldr	r3, [r3, #24]
 800d648:	623b      	str	r3, [r7, #32]
 800d64a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	e190      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d662:	2b01      	cmp	r3, #1
 800d664:	d11b      	bne.n	800d69e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d676:	2300      	movs	r3, #0
 800d678:	61fb      	str	r3, [r7, #28]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	61fb      	str	r3, [r7, #28]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	61fb      	str	r3, [r7, #28]
 800d68a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	e170      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d11b      	bne.n	800d6de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d6c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	61bb      	str	r3, [r7, #24]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	61bb      	str	r3, [r7, #24]
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	e150      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6de:	2300      	movs	r3, #0
 800d6e0:	617b      	str	r3, [r7, #20]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d6f4:	e144      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	f200 80f1 	bhi.w	800d8e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d704:	2b01      	cmp	r3, #1
 800d706:	d123      	bne.n	800d750 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d70a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 fe29 	bl	800e364 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d001      	beq.n	800d71c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	e145      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691a      	ldr	r2, [r3, #16]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72e:	1c5a      	adds	r2, r3, #1
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d738:	3b01      	subs	r3, #1
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d744:	b29b      	uxth	r3, r3
 800d746:	3b01      	subs	r3, #1
 800d748:	b29a      	uxth	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d74e:	e117      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d754:	2b02      	cmp	r3, #2
 800d756:	d14e      	bne.n	800d7f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75e:	2200      	movs	r2, #0
 800d760:	4906      	ldr	r1, [pc, #24]	@ (800d77c <HAL_I2C_Mem_Read+0x22c>)
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f000 fc54 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d008      	beq.n	800d780 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e11a      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
 800d772:	bf00      	nop
 800d774:	00100002 	.word	0x00100002
 800d778:	ffff0000 	.word	0xffff0000
 800d77c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d78e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691a      	ldr	r2, [r3, #16]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7f4:	e0c4      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	496c      	ldr	r1, [pc, #432]	@ (800d9b0 <HAL_I2C_Mem_Read+0x460>)
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 fc05 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e0cb      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d81e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	691a      	ldr	r2, [r3, #16]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d82a:	b2d2      	uxtb	r2, r2
 800d82c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d83c:	3b01      	subs	r3, #1
 800d83e:	b29a      	uxth	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d848:	b29b      	uxth	r3, r3
 800d84a:	3b01      	subs	r3, #1
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d858:	2200      	movs	r2, #0
 800d85a:	4955      	ldr	r1, [pc, #340]	@ (800d9b0 <HAL_I2C_Mem_Read+0x460>)
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f000 fbd7 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e09d      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d87a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	691a      	ldr	r2, [r3, #16]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d886:	b2d2      	uxtb	r2, r2
 800d888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d898:	3b01      	subs	r3, #1
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	691a      	ldr	r2, [r3, #16]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8b8:	b2d2      	uxtb	r2, r2
 800d8ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c0:	1c5a      	adds	r2, r3, #1
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d8e0:	e04e      	b.n	800d980 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f000 fd3c 	bl	800e364 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e058      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	691a      	ldr	r2, [r3, #16]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d900:	b2d2      	uxtb	r2, r2
 800d902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d908:	1c5a      	adds	r2, r3, #1
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d912:	3b01      	subs	r3, #1
 800d914:	b29a      	uxth	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d91e:	b29b      	uxth	r3, r3
 800d920:	3b01      	subs	r3, #1
 800d922:	b29a      	uxth	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	f003 0304 	and.w	r3, r3, #4
 800d932:	2b04      	cmp	r3, #4
 800d934:	d124      	bne.n	800d980 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d107      	bne.n	800d94e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d94c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	691a      	ldr	r2, [r3, #16]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d958:	b2d2      	uxtb	r2, r2
 800d95a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d960:	1c5a      	adds	r2, r3, #1
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d96a:	3b01      	subs	r3, #1
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d976:	b29b      	uxth	r3, r3
 800d978:	3b01      	subs	r3, #1
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d984:	2b00      	cmp	r3, #0
 800d986:	f47f aeb6 	bne.w	800d6f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2220      	movs	r2, #32
 800d98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e000      	b.n	800d9a8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d9a6:	2302      	movs	r3, #2
  }
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3728      	adds	r7, #40	@ 0x28
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	00010004 	.word	0x00010004

0800d9b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08a      	sub	sp, #40	@ 0x28
 800d9b8:	af02      	add	r7, sp, #8
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	607a      	str	r2, [r7, #4]
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800d9c4:	f7fd ff42 	bl	800b84c <HAL_GetTick>
 800d9c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	2b20      	cmp	r3, #32
 800d9d8:	f040 8111 	bne.w	800dbfe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	2319      	movs	r3, #25
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	4988      	ldr	r1, [pc, #544]	@ (800dc08 <HAL_I2C_IsDeviceReady+0x254>)
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fb12 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	e104      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d101      	bne.n	800da04 <HAL_I2C_IsDeviceReady+0x50>
 800da00:	2302      	movs	r3, #2
 800da02:	e0fd      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b01      	cmp	r3, #1
 800da18:	d007      	beq.n	800da2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f042 0201 	orr.w	r2, r2, #1
 800da28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2224      	movs	r2, #36	@ 0x24
 800da3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4a70      	ldr	r2, [pc, #448]	@ (800dc0c <HAL_I2C_IsDeviceReady+0x258>)
 800da4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800da5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2200      	movs	r2, #0
 800da66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fad0 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00d      	beq.n	800da92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da84:	d103      	bne.n	800da8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	e0b6      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800da92:	897b      	ldrh	r3, [r7, #10]
 800da94:	b2db      	uxtb	r3, r3
 800da96:	461a      	mov	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800daa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800daa2:	f7fd fed3 	bl	800b84c <HAL_GetTick>
 800daa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	f003 0302 	and.w	r3, r3, #2
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	bf0c      	ite	eq
 800dab6:	2301      	moveq	r3, #1
 800dab8:	2300      	movne	r3, #0
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dacc:	bf0c      	ite	eq
 800dace:	2301      	moveq	r3, #1
 800dad0:	2300      	movne	r3, #0
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dad6:	e025      	b.n	800db24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dad8:	f7fd feb8 	bl	800b84c <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d302      	bcc.n	800daee <HAL_I2C_IsDeviceReady+0x13a>
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d103      	bne.n	800daf6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	22a0      	movs	r2, #160	@ 0xa0
 800daf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	695b      	ldr	r3, [r3, #20]
 800dafc:	f003 0302 	and.w	r3, r3, #2
 800db00:	2b02      	cmp	r3, #2
 800db02:	bf0c      	ite	eq
 800db04:	2301      	moveq	r3, #1
 800db06:	2300      	movne	r3, #0
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db1a:	bf0c      	ite	eq
 800db1c:	2301      	moveq	r3, #1
 800db1e:	2300      	movne	r3, #0
 800db20:	b2db      	uxtb	r3, r3
 800db22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2ba0      	cmp	r3, #160	@ 0xa0
 800db2e:	d005      	beq.n	800db3c <HAL_I2C_IsDeviceReady+0x188>
 800db30:	7dfb      	ldrb	r3, [r7, #23]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <HAL_I2C_IsDeviceReady+0x188>
 800db36:	7dbb      	ldrb	r3, [r7, #22]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0cd      	beq.n	800dad8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2220      	movs	r2, #32
 800db40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	f003 0302 	and.w	r3, r3, #2
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d129      	bne.n	800dba6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db62:	2300      	movs	r3, #0
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	695b      	ldr	r3, [r3, #20]
 800db6c:	613b      	str	r3, [r7, #16]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	613b      	str	r3, [r7, #16]
 800db76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	2319      	movs	r3, #25
 800db7e:	2201      	movs	r2, #1
 800db80:	4921      	ldr	r1, [pc, #132]	@ (800dc08 <HAL_I2C_IsDeviceReady+0x254>)
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 fa44 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d001      	beq.n	800db92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e036      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2220      	movs	r2, #32
 800db96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	e02c      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dbb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dbbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2319      	movs	r3, #25
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	490f      	ldr	r1, [pc, #60]	@ (800dc08 <HAL_I2C_IsDeviceReady+0x254>)
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f000 fa20 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e012      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dbe0:	69ba      	ldr	r2, [r7, #24]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	f4ff af32 	bcc.w	800da4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2220      	movs	r2, #32
 800dbee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e000      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dbfe:	2302      	movs	r3, #2
  }
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3720      	adds	r7, #32
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	00100002 	.word	0x00100002
 800dc0c:	ffff0000 	.word	0xffff0000

0800dc10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	607a      	str	r2, [r7, #4]
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2b08      	cmp	r3, #8
 800dc2a:	d006      	beq.n	800dc3a <I2C_MasterRequestWrite+0x2a>
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d003      	beq.n	800dc3a <I2C_MasterRequestWrite+0x2a>
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dc38:	d108      	bne.n	800dc4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	e00b      	b.n	800dc64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc50:	2b12      	cmp	r3, #18
 800dc52:	d107      	bne.n	800dc64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 f9cd 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc8a:	d103      	bne.n	800dc94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dc94:	2303      	movs	r3, #3
 800dc96:	e035      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dca0:	d108      	bne.n	800dcb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dca2:	897b      	ldrh	r3, [r7, #10]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	461a      	mov	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dcb0:	611a      	str	r2, [r3, #16]
 800dcb2:	e01b      	b.n	800dcec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dcb4:	897b      	ldrh	r3, [r7, #10]
 800dcb6:	11db      	asrs	r3, r3, #7
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 0306 	and.w	r3, r3, #6
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f063 030f 	orn	r3, r3, #15
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	490e      	ldr	r1, [pc, #56]	@ (800dd0c <I2C_MasterRequestWrite+0xfc>)
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f000 fa16 	bl	800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e010      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dce2:	897b      	ldrh	r3, [r7, #10]
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	4907      	ldr	r1, [pc, #28]	@ (800dd10 <I2C_MasterRequestWrite+0x100>)
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f000 fa06 	bl	800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	00010008 	.word	0x00010008
 800dd10:	00010002 	.word	0x00010002

0800dd14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af02      	add	r7, sp, #8
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	4611      	mov	r1, r2
 800dd20:	461a      	mov	r2, r3
 800dd22:	4603      	mov	r3, r0
 800dd24:	817b      	strh	r3, [r7, #10]
 800dd26:	460b      	mov	r3, r1
 800dd28:	813b      	strh	r3, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f000 f960 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00d      	beq.n	800dd72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd64:	d103      	bne.n	800dd6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	e05f      	b.n	800de32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dd72:	897b      	ldrh	r3, [r7, #10]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	461a      	mov	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dd80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd84:	6a3a      	ldr	r2, [r7, #32]
 800dd86:	492d      	ldr	r1, [pc, #180]	@ (800de3c <I2C_RequestMemoryWrite+0x128>)
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f9bb 	bl	800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	e04c      	b.n	800de32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ddae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddb0:	6a39      	ldr	r1, [r7, #32]
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 fa46 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00d      	beq.n	800ddda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d107      	bne.n	800ddd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e02b      	b.n	800de32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ddda:	88fb      	ldrh	r3, [r7, #6]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d105      	bne.n	800ddec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dde0:	893b      	ldrh	r3, [r7, #8]
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	611a      	str	r2, [r3, #16]
 800ddea:	e021      	b.n	800de30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ddec:	893b      	ldrh	r3, [r7, #8]
 800ddee:	0a1b      	lsrs	r3, r3, #8
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ddfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddfc:	6a39      	ldr	r1, [r7, #32]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 fa20 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00d      	beq.n	800de26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0e:	2b04      	cmp	r3, #4
 800de10:	d107      	bne.n	800de22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e005      	b.n	800de32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800de26:	893b      	ldrh	r3, [r7, #8]
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	00010002 	.word	0x00010002

0800de40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b088      	sub	sp, #32
 800de44:	af02      	add	r7, sp, #8
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	4608      	mov	r0, r1
 800de4a:	4611      	mov	r1, r2
 800de4c:	461a      	mov	r2, r3
 800de4e:	4603      	mov	r3, r0
 800de50:	817b      	strh	r3, [r7, #10]
 800de52:	460b      	mov	r3, r1
 800de54:	813b      	strh	r3, [r7, #8]
 800de56:	4613      	mov	r3, r2
 800de58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800de68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800de78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	2200      	movs	r2, #0
 800de82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 f8c2 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00d      	beq.n	800deae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dea0:	d103      	bne.n	800deaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dea8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e0aa      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800deae:	897b      	ldrh	r3, [r7, #10]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	461a      	mov	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800debc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800debe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec0:	6a3a      	ldr	r2, [r7, #32]
 800dec2:	4952      	ldr	r1, [pc, #328]	@ (800e00c <I2C_RequestMemoryRead+0x1cc>)
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 f91d 	bl	800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e097      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ded4:	2300      	movs	r3, #0
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800deea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deec:	6a39      	ldr	r1, [r7, #32]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 f9a8 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00d      	beq.n	800df16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800defe:	2b04      	cmp	r3, #4
 800df00:	d107      	bne.n	800df12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e076      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d105      	bne.n	800df28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df1c:	893b      	ldrh	r3, [r7, #8]
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	611a      	str	r2, [r3, #16]
 800df26:	e021      	b.n	800df6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800df28:	893b      	ldrh	r3, [r7, #8]
 800df2a:	0a1b      	lsrs	r3, r3, #8
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df38:	6a39      	ldr	r1, [r7, #32]
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 f982 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00d      	beq.n	800df62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d107      	bne.n	800df5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e050      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df62:	893b      	ldrh	r3, [r7, #8]
 800df64:	b2da      	uxtb	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df6e:	6a39      	ldr	r1, [r7, #32]
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f000 f967 	bl	800e244 <I2C_WaitOnTXEFlagUntilTimeout>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00d      	beq.n	800df98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df80:	2b04      	cmp	r3, #4
 800df82:	d107      	bne.n	800df94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	e035      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 f82b 	bl	800e010 <I2C_WaitOnFlagUntilTimeout>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00d      	beq.n	800dfdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfce:	d103      	bne.n	800dfd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dfd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e013      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dfdc:	897b      	ldrh	r3, [r7, #10]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f043 0301 	orr.w	r3, r3, #1
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfee:	6a3a      	ldr	r2, [r7, #32]
 800dff0:	4906      	ldr	r1, [pc, #24]	@ (800e00c <I2C_RequestMemoryRead+0x1cc>)
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 f886 	bl	800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e000      	b.n	800e004 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	00010002 	.word	0x00010002

0800e010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	603b      	str	r3, [r7, #0]
 800e01c:	4613      	mov	r3, r2
 800e01e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e020:	e048      	b.n	800e0b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e028:	d044      	beq.n	800e0b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e02a:	f7fd fc0f 	bl	800b84c <HAL_GetTick>
 800e02e:	4602      	mov	r2, r0
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d302      	bcc.n	800e040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d139      	bne.n	800e0b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	0c1b      	lsrs	r3, r3, #16
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b01      	cmp	r3, #1
 800e048:	d10d      	bne.n	800e066 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	695b      	ldr	r3, [r3, #20]
 800e050:	43da      	mvns	r2, r3
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	4013      	ands	r3, r2
 800e056:	b29b      	uxth	r3, r3
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bf0c      	ite	eq
 800e05c:	2301      	moveq	r3, #1
 800e05e:	2300      	movne	r3, #0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	461a      	mov	r2, r3
 800e064:	e00c      	b.n	800e080 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	699b      	ldr	r3, [r3, #24]
 800e06c:	43da      	mvns	r2, r3
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	4013      	ands	r3, r2
 800e072:	b29b      	uxth	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	bf0c      	ite	eq
 800e078:	2301      	moveq	r3, #1
 800e07a:	2300      	movne	r3, #0
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	461a      	mov	r2, r3
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	429a      	cmp	r2, r3
 800e084:	d116      	bne.n	800e0b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2220      	movs	r2, #32
 800e090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a0:	f043 0220 	orr.w	r2, r3, #32
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e023      	b.n	800e0fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	0c1b      	lsrs	r3, r3, #16
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d10d      	bne.n	800e0da <I2C_WaitOnFlagUntilTimeout+0xca>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	695b      	ldr	r3, [r3, #20]
 800e0c4:	43da      	mvns	r2, r3
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2301      	moveq	r3, #1
 800e0d2:	2300      	movne	r3, #0
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	e00c      	b.n	800e0f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	43da      	mvns	r2, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bf0c      	ite	eq
 800e0ec:	2301      	moveq	r3, #1
 800e0ee:	2300      	movne	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d093      	beq.n	800e022 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e112:	e071      	b.n	800e1f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e11e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e122:	d123      	bne.n	800e16c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e132:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e13c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2220      	movs	r2, #32
 800e148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e158:	f043 0204 	orr.w	r2, r3, #4
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e067      	b.n	800e23c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e172:	d041      	beq.n	800e1f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e174:	f7fd fb6a 	bl	800b84c <HAL_GetTick>
 800e178:	4602      	mov	r2, r0
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d302      	bcc.n	800e18a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d136      	bne.n	800e1f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b01      	cmp	r3, #1
 800e192:	d10c      	bne.n	800e1ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	43da      	mvns	r2, r3
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	4013      	ands	r3, r2
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	bf14      	ite	ne
 800e1a6:	2301      	movne	r3, #1
 800e1a8:	2300      	moveq	r3, #0
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	e00b      	b.n	800e1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	43da      	mvns	r2, r3
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bf14      	ite	ne
 800e1c0:	2301      	movne	r3, #1
 800e1c2:	2300      	moveq	r3, #0
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d016      	beq.n	800e1f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e4:	f043 0220 	orr.w	r2, r3, #32
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e021      	b.n	800e23c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d10c      	bne.n	800e21c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	43da      	mvns	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	4013      	ands	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	2b00      	cmp	r3, #0
 800e212:	bf14      	ite	ne
 800e214:	2301      	movne	r3, #1
 800e216:	2300      	moveq	r3, #0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	e00b      	b.n	800e234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	43da      	mvns	r2, r3
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	4013      	ands	r3, r2
 800e228:	b29b      	uxth	r3, r3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bf14      	ite	ne
 800e22e:	2301      	movne	r3, #1
 800e230:	2300      	moveq	r3, #0
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	f47f af6d 	bne.w	800e114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e250:	e034      	b.n	800e2bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 f8e3 	bl	800e41e <I2C_IsAcknowledgeFailed>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e25e:	2301      	movs	r3, #1
 800e260:	e034      	b.n	800e2cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e268:	d028      	beq.n	800e2bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e26a:	f7fd faef 	bl	800b84c <HAL_GetTick>
 800e26e:	4602      	mov	r2, r0
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	429a      	cmp	r2, r3
 800e278:	d302      	bcc.n	800e280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d11d      	bne.n	800e2bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e28a:	2b80      	cmp	r3, #128	@ 0x80
 800e28c:	d016      	beq.n	800e2bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2220      	movs	r2, #32
 800e298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a8:	f043 0220 	orr.w	r2, r3, #32
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e007      	b.n	800e2cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	695b      	ldr	r3, [r3, #20]
 800e2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2c6:	2b80      	cmp	r3, #128	@ 0x80
 800e2c8:	d1c3      	bne.n	800e252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e2e0:	e034      	b.n	800e34c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f89b 	bl	800e41e <I2C_IsAcknowledgeFailed>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e034      	b.n	800e35c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f8:	d028      	beq.n	800e34c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2fa:	f7fd faa7 	bl	800b84c <HAL_GetTick>
 800e2fe:	4602      	mov	r2, r0
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	429a      	cmp	r2, r3
 800e308:	d302      	bcc.n	800e310 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d11d      	bne.n	800e34c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	f003 0304 	and.w	r3, r3, #4
 800e31a:	2b04      	cmp	r3, #4
 800e31c:	d016      	beq.n	800e34c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2220      	movs	r2, #32
 800e328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e338:	f043 0220 	orr.w	r2, r3, #32
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e007      	b.n	800e35c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	f003 0304 	and.w	r3, r3, #4
 800e356:	2b04      	cmp	r3, #4
 800e358:	d1c3      	bne.n	800e2e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e370:	e049      	b.n	800e406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	f003 0310 	and.w	r3, r3, #16
 800e37c:	2b10      	cmp	r3, #16
 800e37e:	d119      	bne.n	800e3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f06f 0210 	mvn.w	r2, #16
 800e388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2220      	movs	r2, #32
 800e394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e030      	b.n	800e416 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3b4:	f7fd fa4a 	bl	800b84c <HAL_GetTick>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d302      	bcc.n	800e3ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d11d      	bne.n	800e406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	695b      	ldr	r3, [r3, #20]
 800e3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3d4:	2b40      	cmp	r3, #64	@ 0x40
 800e3d6:	d016      	beq.n	800e406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2220      	movs	r2, #32
 800e3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f2:	f043 0220 	orr.w	r2, r3, #32
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	e007      	b.n	800e416 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e410:	2b40      	cmp	r3, #64	@ 0x40
 800e412:	d1ae      	bne.n	800e372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e41e:	b480      	push	{r7}
 800e420:	b083      	sub	sp, #12
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e434:	d11b      	bne.n	800e46e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e43e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2220      	movs	r2, #32
 800e44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e45a:	f043 0204 	orr.w	r2, r3, #4
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e000      	b.n	800e470 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d101      	bne.n	800e48e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e267      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d075      	beq.n	800e586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e49a:	4b88      	ldr	r3, [pc, #544]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f003 030c 	and.w	r3, r3, #12
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d00c      	beq.n	800e4c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e4a6:	4b85      	ldr	r3, [pc, #532]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e4ae:	2b08      	cmp	r3, #8
 800e4b0:	d112      	bne.n	800e4d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e4b2:	4b82      	ldr	r3, [pc, #520]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e4ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e4be:	d10b      	bne.n	800e4d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e4c0:	4b7e      	ldr	r3, [pc, #504]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d05b      	beq.n	800e584 <HAL_RCC_OscConfig+0x108>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d157      	bne.n	800e584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e242      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4e0:	d106      	bne.n	800e4f0 <HAL_RCC_OscConfig+0x74>
 800e4e2:	4b76      	ldr	r3, [pc, #472]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a75      	ldr	r2, [pc, #468]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4ec:	6013      	str	r3, [r2, #0]
 800e4ee:	e01d      	b.n	800e52c <HAL_RCC_OscConfig+0xb0>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e4f8:	d10c      	bne.n	800e514 <HAL_RCC_OscConfig+0x98>
 800e4fa:	4b70      	ldr	r3, [pc, #448]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a6f      	ldr	r2, [pc, #444]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	4b6d      	ldr	r3, [pc, #436]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a6c      	ldr	r2, [pc, #432]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e50c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e510:	6013      	str	r3, [r2, #0]
 800e512:	e00b      	b.n	800e52c <HAL_RCC_OscConfig+0xb0>
 800e514:	4b69      	ldr	r3, [pc, #420]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a68      	ldr	r2, [pc, #416]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e51a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	4b66      	ldr	r3, [pc, #408]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a65      	ldr	r2, [pc, #404]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e52a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d013      	beq.n	800e55c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e534:	f7fd f98a 	bl	800b84c <HAL_GetTick>
 800e538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e53a:	e008      	b.n	800e54e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e53c:	f7fd f986 	bl	800b84c <HAL_GetTick>
 800e540:	4602      	mov	r2, r0
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	2b64      	cmp	r3, #100	@ 0x64
 800e548:	d901      	bls.n	800e54e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	e207      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e54e:	4b5b      	ldr	r3, [pc, #364]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e556:	2b00      	cmp	r3, #0
 800e558:	d0f0      	beq.n	800e53c <HAL_RCC_OscConfig+0xc0>
 800e55a:	e014      	b.n	800e586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e55c:	f7fd f976 	bl	800b84c <HAL_GetTick>
 800e560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e562:	e008      	b.n	800e576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e564:	f7fd f972 	bl	800b84c <HAL_GetTick>
 800e568:	4602      	mov	r2, r0
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	2b64      	cmp	r3, #100	@ 0x64
 800e570:	d901      	bls.n	800e576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e572:	2303      	movs	r3, #3
 800e574:	e1f3      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e576:	4b51      	ldr	r3, [pc, #324]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1f0      	bne.n	800e564 <HAL_RCC_OscConfig+0xe8>
 800e582:	e000      	b.n	800e586 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d063      	beq.n	800e65a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e592:	4b4a      	ldr	r3, [pc, #296]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	f003 030c 	and.w	r3, r3, #12
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00b      	beq.n	800e5b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e59e:	4b47      	ldr	r3, [pc, #284]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e5a6:	2b08      	cmp	r3, #8
 800e5a8:	d11c      	bne.n	800e5e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e5aa:	4b44      	ldr	r3, [pc, #272]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d116      	bne.n	800e5e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5b6:	4b41      	ldr	r3, [pc, #260]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d005      	beq.n	800e5ce <HAL_RCC_OscConfig+0x152>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d001      	beq.n	800e5ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e1c7      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	691b      	ldr	r3, [r3, #16]
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	4937      	ldr	r1, [pc, #220]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5e2:	e03a      	b.n	800e65a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d020      	beq.n	800e62e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e5ec:	4b34      	ldr	r3, [pc, #208]	@ (800e6c0 <HAL_RCC_OscConfig+0x244>)
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5f2:	f7fd f92b 	bl	800b84c <HAL_GetTick>
 800e5f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5f8:	e008      	b.n	800e60c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e5fa:	f7fd f927 	bl	800b84c <HAL_GetTick>
 800e5fe:	4602      	mov	r2, r0
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	1ad3      	subs	r3, r2, r3
 800e604:	2b02      	cmp	r3, #2
 800e606:	d901      	bls.n	800e60c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e608:	2303      	movs	r3, #3
 800e60a:	e1a8      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e60c:	4b2b      	ldr	r3, [pc, #172]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f003 0302 	and.w	r3, r3, #2
 800e614:	2b00      	cmp	r3, #0
 800e616:	d0f0      	beq.n	800e5fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e618:	4b28      	ldr	r3, [pc, #160]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	4925      	ldr	r1, [pc, #148]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e628:	4313      	orrs	r3, r2
 800e62a:	600b      	str	r3, [r1, #0]
 800e62c:	e015      	b.n	800e65a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e62e:	4b24      	ldr	r3, [pc, #144]	@ (800e6c0 <HAL_RCC_OscConfig+0x244>)
 800e630:	2200      	movs	r2, #0
 800e632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e634:	f7fd f90a 	bl	800b84c <HAL_GetTick>
 800e638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e63a:	e008      	b.n	800e64e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e63c:	f7fd f906 	bl	800b84c <HAL_GetTick>
 800e640:	4602      	mov	r2, r0
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2b02      	cmp	r3, #2
 800e648:	d901      	bls.n	800e64e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e64a:	2303      	movs	r3, #3
 800e64c:	e187      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e64e:	4b1b      	ldr	r3, [pc, #108]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f0      	bne.n	800e63c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 0308 	and.w	r3, r3, #8
 800e662:	2b00      	cmp	r3, #0
 800e664:	d036      	beq.n	800e6d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d016      	beq.n	800e69c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e66e:	4b15      	ldr	r3, [pc, #84]	@ (800e6c4 <HAL_RCC_OscConfig+0x248>)
 800e670:	2201      	movs	r2, #1
 800e672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e674:	f7fd f8ea 	bl	800b84c <HAL_GetTick>
 800e678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e67a:	e008      	b.n	800e68e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e67c:	f7fd f8e6 	bl	800b84c <HAL_GetTick>
 800e680:	4602      	mov	r2, r0
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	2b02      	cmp	r3, #2
 800e688:	d901      	bls.n	800e68e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e167      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e68e:	4b0b      	ldr	r3, [pc, #44]	@ (800e6bc <HAL_RCC_OscConfig+0x240>)
 800e690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0f0      	beq.n	800e67c <HAL_RCC_OscConfig+0x200>
 800e69a:	e01b      	b.n	800e6d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e69c:	4b09      	ldr	r3, [pc, #36]	@ (800e6c4 <HAL_RCC_OscConfig+0x248>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e6a2:	f7fd f8d3 	bl	800b84c <HAL_GetTick>
 800e6a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e6a8:	e00e      	b.n	800e6c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e6aa:	f7fd f8cf 	bl	800b84c <HAL_GetTick>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d907      	bls.n	800e6c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	e150      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
 800e6bc:	40023800 	.word	0x40023800
 800e6c0:	42470000 	.word	0x42470000
 800e6c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e6c8:	4b88      	ldr	r3, [pc, #544]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e6ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6cc:	f003 0302 	and.w	r3, r3, #2
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1ea      	bne.n	800e6aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 8097 	beq.w	800e810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e6e6:	4b81      	ldr	r3, [pc, #516]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10f      	bne.n	800e712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60bb      	str	r3, [r7, #8]
 800e6f6:	4b7d      	ldr	r3, [pc, #500]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fa:	4a7c      	ldr	r2, [pc, #496]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e6fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e700:	6413      	str	r3, [r2, #64]	@ 0x40
 800e702:	4b7a      	ldr	r3, [pc, #488]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e70a:	60bb      	str	r3, [r7, #8]
 800e70c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e70e:	2301      	movs	r3, #1
 800e710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e712:	4b77      	ldr	r3, [pc, #476]	@ (800e8f0 <HAL_RCC_OscConfig+0x474>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d118      	bne.n	800e750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e71e:	4b74      	ldr	r3, [pc, #464]	@ (800e8f0 <HAL_RCC_OscConfig+0x474>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a73      	ldr	r2, [pc, #460]	@ (800e8f0 <HAL_RCC_OscConfig+0x474>)
 800e724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e72a:	f7fd f88f 	bl	800b84c <HAL_GetTick>
 800e72e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e730:	e008      	b.n	800e744 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e732:	f7fd f88b 	bl	800b84c <HAL_GetTick>
 800e736:	4602      	mov	r2, r0
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d901      	bls.n	800e744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e740:	2303      	movs	r3, #3
 800e742:	e10c      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e744:	4b6a      	ldr	r3, [pc, #424]	@ (800e8f0 <HAL_RCC_OscConfig+0x474>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d0f0      	beq.n	800e732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d106      	bne.n	800e766 <HAL_RCC_OscConfig+0x2ea>
 800e758:	4b64      	ldr	r3, [pc, #400]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e75c:	4a63      	ldr	r2, [pc, #396]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e75e:	f043 0301 	orr.w	r3, r3, #1
 800e762:	6713      	str	r3, [r2, #112]	@ 0x70
 800e764:	e01c      	b.n	800e7a0 <HAL_RCC_OscConfig+0x324>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	2b05      	cmp	r3, #5
 800e76c:	d10c      	bne.n	800e788 <HAL_RCC_OscConfig+0x30c>
 800e76e:	4b5f      	ldr	r3, [pc, #380]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e772:	4a5e      	ldr	r2, [pc, #376]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e774:	f043 0304 	orr.w	r3, r3, #4
 800e778:	6713      	str	r3, [r2, #112]	@ 0x70
 800e77a:	4b5c      	ldr	r3, [pc, #368]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e77e:	4a5b      	ldr	r2, [pc, #364]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e780:	f043 0301 	orr.w	r3, r3, #1
 800e784:	6713      	str	r3, [r2, #112]	@ 0x70
 800e786:	e00b      	b.n	800e7a0 <HAL_RCC_OscConfig+0x324>
 800e788:	4b58      	ldr	r3, [pc, #352]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e78a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e78c:	4a57      	ldr	r2, [pc, #348]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e78e:	f023 0301 	bic.w	r3, r3, #1
 800e792:	6713      	str	r3, [r2, #112]	@ 0x70
 800e794:	4b55      	ldr	r3, [pc, #340]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e798:	4a54      	ldr	r2, [pc, #336]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e79a:	f023 0304 	bic.w	r3, r3, #4
 800e79e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d015      	beq.n	800e7d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7a8:	f7fd f850 	bl	800b84c <HAL_GetTick>
 800e7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7ae:	e00a      	b.n	800e7c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7b0:	f7fd f84c 	bl	800b84c <HAL_GetTick>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d901      	bls.n	800e7c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e0cb      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7c6:	4b49      	ldr	r3, [pc, #292]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e7c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7ca:	f003 0302 	and.w	r3, r3, #2
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d0ee      	beq.n	800e7b0 <HAL_RCC_OscConfig+0x334>
 800e7d2:	e014      	b.n	800e7fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e7d4:	f7fd f83a 	bl	800b84c <HAL_GetTick>
 800e7d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7da:	e00a      	b.n	800e7f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7dc:	f7fd f836 	bl	800b84c <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d901      	bls.n	800e7f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e0b5      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7f2:	4b3e      	ldr	r3, [pc, #248]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7f6:	f003 0302 	and.w	r3, r3, #2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1ee      	bne.n	800e7dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e7fe:	7dfb      	ldrb	r3, [r7, #23]
 800e800:	2b01      	cmp	r3, #1
 800e802:	d105      	bne.n	800e810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e804:	4b39      	ldr	r3, [pc, #228]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e808:	4a38      	ldr	r2, [pc, #224]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e80a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e80e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	699b      	ldr	r3, [r3, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 80a1 	beq.w	800e95c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e81a:	4b34      	ldr	r3, [pc, #208]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	f003 030c 	and.w	r3, r3, #12
 800e822:	2b08      	cmp	r3, #8
 800e824:	d05c      	beq.n	800e8e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	d141      	bne.n	800e8b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e82e:	4b31      	ldr	r3, [pc, #196]	@ (800e8f4 <HAL_RCC_OscConfig+0x478>)
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e834:	f7fd f80a 	bl	800b84c <HAL_GetTick>
 800e838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e83a:	e008      	b.n	800e84e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e83c:	f7fd f806 	bl	800b84c <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b02      	cmp	r3, #2
 800e848:	d901      	bls.n	800e84e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e087      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e84e:	4b27      	ldr	r3, [pc, #156]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1f0      	bne.n	800e83c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	69da      	ldr	r2, [r3, #28]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	431a      	orrs	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e868:	019b      	lsls	r3, r3, #6
 800e86a:	431a      	orrs	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e870:	085b      	lsrs	r3, r3, #1
 800e872:	3b01      	subs	r3, #1
 800e874:	041b      	lsls	r3, r3, #16
 800e876:	431a      	orrs	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87c:	061b      	lsls	r3, r3, #24
 800e87e:	491b      	ldr	r1, [pc, #108]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e880:	4313      	orrs	r3, r2
 800e882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e884:	4b1b      	ldr	r3, [pc, #108]	@ (800e8f4 <HAL_RCC_OscConfig+0x478>)
 800e886:	2201      	movs	r2, #1
 800e888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e88a:	f7fc ffdf 	bl	800b84c <HAL_GetTick>
 800e88e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e890:	e008      	b.n	800e8a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e892:	f7fc ffdb 	bl	800b84c <HAL_GetTick>
 800e896:	4602      	mov	r2, r0
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d901      	bls.n	800e8a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	e05c      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e8a4:	4b11      	ldr	r3, [pc, #68]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0f0      	beq.n	800e892 <HAL_RCC_OscConfig+0x416>
 800e8b0:	e054      	b.n	800e95c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8b2:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <HAL_RCC_OscConfig+0x478>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e8b8:	f7fc ffc8 	bl	800b84c <HAL_GetTick>
 800e8bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8be:	e008      	b.n	800e8d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8c0:	f7fc ffc4 	bl	800b84c <HAL_GetTick>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d901      	bls.n	800e8d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e8ce:	2303      	movs	r3, #3
 800e8d0:	e045      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8d2:	4b06      	ldr	r3, [pc, #24]	@ (800e8ec <HAL_RCC_OscConfig+0x470>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1f0      	bne.n	800e8c0 <HAL_RCC_OscConfig+0x444>
 800e8de:	e03d      	b.n	800e95c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	699b      	ldr	r3, [r3, #24]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d107      	bne.n	800e8f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e038      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
 800e8ec:	40023800 	.word	0x40023800
 800e8f0:	40007000 	.word	0x40007000
 800e8f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e968 <HAL_RCC_OscConfig+0x4ec>)
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d028      	beq.n	800e958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e910:	429a      	cmp	r2, r3
 800e912:	d121      	bne.n	800e958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e91e:	429a      	cmp	r2, r3
 800e920:	d11a      	bne.n	800e958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e928:	4013      	ands	r3, r2
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e92e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e930:	4293      	cmp	r3, r2
 800e932:	d111      	bne.n	800e958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e93e:	085b      	lsrs	r3, r3, #1
 800e940:	3b01      	subs	r3, #1
 800e942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e944:	429a      	cmp	r2, r3
 800e946:	d107      	bne.n	800e958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e954:	429a      	cmp	r2, r3
 800e956:	d001      	beq.n	800e95c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e000      	b.n	800e95e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	40023800 	.word	0x40023800

0800e96c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e0cc      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e980:	4b68      	ldr	r3, [pc, #416]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f003 0307 	and.w	r3, r3, #7
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d90c      	bls.n	800e9a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e98e:	4b65      	ldr	r3, [pc, #404]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800e990:	683a      	ldr	r2, [r7, #0]
 800e992:	b2d2      	uxtb	r2, r2
 800e994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e996:	4b63      	ldr	r3, [pc, #396]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f003 0307 	and.w	r3, r3, #7
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d001      	beq.n	800e9a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e0b8      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 0302 	and.w	r3, r3, #2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d020      	beq.n	800e9f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d005      	beq.n	800e9cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e9c0:	4b59      	ldr	r3, [pc, #356]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	4a58      	ldr	r2, [pc, #352]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e9ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d005      	beq.n	800e9e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e9d8:	4b53      	ldr	r3, [pc, #332]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	4a52      	ldr	r2, [pc, #328]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e9e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e9e4:	4b50      	ldr	r3, [pc, #320]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	494d      	ldr	r1, [pc, #308]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d044      	beq.n	800ea8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d107      	bne.n	800ea1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea0a:	4b47      	ldr	r3, [pc, #284]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d119      	bne.n	800ea4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e07f      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d003      	beq.n	800ea2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ea26:	2b03      	cmp	r3, #3
 800ea28:	d107      	bne.n	800ea3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea2a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d109      	bne.n	800ea4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e06f      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea3a:	4b3b      	ldr	r3, [pc, #236]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e067      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ea4a:	4b37      	ldr	r3, [pc, #220]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f023 0203 	bic.w	r2, r3, #3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	4934      	ldr	r1, [pc, #208]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ea5c:	f7fc fef6 	bl	800b84c <HAL_GetTick>
 800ea60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea62:	e00a      	b.n	800ea7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea64:	f7fc fef2 	bl	800b84c <HAL_GetTick>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d901      	bls.n	800ea7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ea76:	2303      	movs	r3, #3
 800ea78:	e04f      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea7a:	4b2b      	ldr	r3, [pc, #172]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800ea7c:	689b      	ldr	r3, [r3, #8]
 800ea7e:	f003 020c 	and.w	r2, r3, #12
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d1eb      	bne.n	800ea64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ea8c:	4b25      	ldr	r3, [pc, #148]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 0307 	and.w	r3, r3, #7
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d20c      	bcs.n	800eab4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea9a:	4b22      	ldr	r3, [pc, #136]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	b2d2      	uxtb	r2, r2
 800eaa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eaa2:	4b20      	ldr	r3, [pc, #128]	@ (800eb24 <HAL_RCC_ClockConfig+0x1b8>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 0307 	and.w	r3, r3, #7
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d001      	beq.n	800eab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e032      	b.n	800eb1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 0304 	and.w	r3, r3, #4
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eac0:	4b19      	ldr	r3, [pc, #100]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	4916      	ldr	r1, [pc, #88]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800eace:	4313      	orrs	r3, r2
 800ead0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 0308 	and.w	r3, r3, #8
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d009      	beq.n	800eaf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eade:	4b12      	ldr	r3, [pc, #72]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	490e      	ldr	r1, [pc, #56]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800eaf2:	f000 f821 	bl	800eb38 <HAL_RCC_GetSysClockFreq>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	4b0b      	ldr	r3, [pc, #44]	@ (800eb28 <HAL_RCC_ClockConfig+0x1bc>)
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	091b      	lsrs	r3, r3, #4
 800eafe:	f003 030f 	and.w	r3, r3, #15
 800eb02:	490a      	ldr	r1, [pc, #40]	@ (800eb2c <HAL_RCC_ClockConfig+0x1c0>)
 800eb04:	5ccb      	ldrb	r3, [r1, r3]
 800eb06:	fa22 f303 	lsr.w	r3, r2, r3
 800eb0a:	4a09      	ldr	r2, [pc, #36]	@ (800eb30 <HAL_RCC_ClockConfig+0x1c4>)
 800eb0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800eb0e:	4b09      	ldr	r3, [pc, #36]	@ (800eb34 <HAL_RCC_ClockConfig+0x1c8>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fc fe56 	bl	800b7c4 <HAL_InitTick>

  return HAL_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	40023c00 	.word	0x40023c00
 800eb28:	40023800 	.word	0x40023800
 800eb2c:	080169e4 	.word	0x080169e4
 800eb30:	20000138 	.word	0x20000138
 800eb34:	2000013c 	.word	0x2000013c

0800eb38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eb38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb3c:	b090      	sub	sp, #64	@ 0x40
 800eb3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800eb44:	2300      	movs	r3, #0
 800eb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eb50:	4b59      	ldr	r3, [pc, #356]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f003 030c 	and.w	r3, r3, #12
 800eb58:	2b08      	cmp	r3, #8
 800eb5a:	d00d      	beq.n	800eb78 <HAL_RCC_GetSysClockFreq+0x40>
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	f200 80a1 	bhi.w	800eca4 <HAL_RCC_GetSysClockFreq+0x16c>
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <HAL_RCC_GetSysClockFreq+0x34>
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	d003      	beq.n	800eb72 <HAL_RCC_GetSysClockFreq+0x3a>
 800eb6a:	e09b      	b.n	800eca4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eb6c:	4b53      	ldr	r3, [pc, #332]	@ (800ecbc <HAL_RCC_GetSysClockFreq+0x184>)
 800eb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800eb70:	e09b      	b.n	800ecaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eb72:	4b53      	ldr	r3, [pc, #332]	@ (800ecc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eb74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800eb76:	e098      	b.n	800ecaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eb78:	4b4f      	ldr	r3, [pc, #316]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eb82:	4b4d      	ldr	r3, [pc, #308]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d028      	beq.n	800ebe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb8e:	4b4a      	ldr	r3, [pc, #296]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	099b      	lsrs	r3, r3, #6
 800eb94:	2200      	movs	r2, #0
 800eb96:	623b      	str	r3, [r7, #32]
 800eb98:	627a      	str	r2, [r7, #36]	@ 0x24
 800eb9a:	6a3b      	ldr	r3, [r7, #32]
 800eb9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800eba0:	2100      	movs	r1, #0
 800eba2:	4b47      	ldr	r3, [pc, #284]	@ (800ecc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eba4:	fb03 f201 	mul.w	r2, r3, r1
 800eba8:	2300      	movs	r3, #0
 800ebaa:	fb00 f303 	mul.w	r3, r0, r3
 800ebae:	4413      	add	r3, r2
 800ebb0:	4a43      	ldr	r2, [pc, #268]	@ (800ecc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ebb2:	fba0 1202 	umull	r1, r2, r0, r2
 800ebb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ebb8:	460a      	mov	r2, r1
 800ebba:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ebbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebbe:	4413      	add	r3, r2
 800ebc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	61bb      	str	r3, [r7, #24]
 800ebc8:	61fa      	str	r2, [r7, #28]
 800ebca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ebd2:	f7f1 fb5d 	bl	8000290 <__aeabi_uldivmod>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4613      	mov	r3, r2
 800ebdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebde:	e053      	b.n	800ec88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ebe0:	4b35      	ldr	r3, [pc, #212]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	099b      	lsrs	r3, r3, #6
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	617a      	str	r2, [r7, #20]
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ebf2:	f04f 0b00 	mov.w	fp, #0
 800ebf6:	4652      	mov	r2, sl
 800ebf8:	465b      	mov	r3, fp
 800ebfa:	f04f 0000 	mov.w	r0, #0
 800ebfe:	f04f 0100 	mov.w	r1, #0
 800ec02:	0159      	lsls	r1, r3, #5
 800ec04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec08:	0150      	lsls	r0, r2, #5
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	ebb2 080a 	subs.w	r8, r2, sl
 800ec12:	eb63 090b 	sbc.w	r9, r3, fp
 800ec16:	f04f 0200 	mov.w	r2, #0
 800ec1a:	f04f 0300 	mov.w	r3, #0
 800ec1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ec22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ec26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ec2a:	ebb2 0408 	subs.w	r4, r2, r8
 800ec2e:	eb63 0509 	sbc.w	r5, r3, r9
 800ec32:	f04f 0200 	mov.w	r2, #0
 800ec36:	f04f 0300 	mov.w	r3, #0
 800ec3a:	00eb      	lsls	r3, r5, #3
 800ec3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ec40:	00e2      	lsls	r2, r4, #3
 800ec42:	4614      	mov	r4, r2
 800ec44:	461d      	mov	r5, r3
 800ec46:	eb14 030a 	adds.w	r3, r4, sl
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	eb45 030b 	adc.w	r3, r5, fp
 800ec50:	607b      	str	r3, [r7, #4]
 800ec52:	f04f 0200 	mov.w	r2, #0
 800ec56:	f04f 0300 	mov.w	r3, #0
 800ec5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ec5e:	4629      	mov	r1, r5
 800ec60:	028b      	lsls	r3, r1, #10
 800ec62:	4621      	mov	r1, r4
 800ec64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ec68:	4621      	mov	r1, r4
 800ec6a:	028a      	lsls	r2, r1, #10
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec72:	2200      	movs	r2, #0
 800ec74:	60bb      	str	r3, [r7, #8]
 800ec76:	60fa      	str	r2, [r7, #12]
 800ec78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec7c:	f7f1 fb08 	bl	8000290 <__aeabi_uldivmod>
 800ec80:	4602      	mov	r2, r0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4613      	mov	r3, r2
 800ec86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ec88:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	0c1b      	lsrs	r3, r3, #16
 800ec8e:	f003 0303 	and.w	r3, r3, #3
 800ec92:	3301      	adds	r3, #1
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ec98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800eca2:	e002      	b.n	800ecaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800eca4:	4b05      	ldr	r3, [pc, #20]	@ (800ecbc <HAL_RCC_GetSysClockFreq+0x184>)
 800eca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800eca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3740      	adds	r7, #64	@ 0x40
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecb6:	bf00      	nop
 800ecb8:	40023800 	.word	0x40023800
 800ecbc:	00f42400 	.word	0x00f42400
 800ecc0:	017d7840 	.word	0x017d7840

0800ecc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ecc8:	4b03      	ldr	r3, [pc, #12]	@ (800ecd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ecca:	681b      	ldr	r3, [r3, #0]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	20000138 	.word	0x20000138

0800ecdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ece0:	f7ff fff0 	bl	800ecc4 <HAL_RCC_GetHCLKFreq>
 800ece4:	4602      	mov	r2, r0
 800ece6:	4b05      	ldr	r3, [pc, #20]	@ (800ecfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	0a9b      	lsrs	r3, r3, #10
 800ecec:	f003 0307 	and.w	r3, r3, #7
 800ecf0:	4903      	ldr	r1, [pc, #12]	@ (800ed00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ecf2:	5ccb      	ldrb	r3, [r1, r3]
 800ecf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	40023800 	.word	0x40023800
 800ed00:	080169f4 	.word	0x080169f4

0800ed04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e07b      	b.n	800ee0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d108      	bne.n	800ed30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed26:	d009      	beq.n	800ed3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	61da      	str	r2, [r3, #28]
 800ed2e:	e005      	b.n	800ed3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d106      	bne.n	800ed5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7fc fa22 	bl	800b1a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2202      	movs	r2, #2
 800ed60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ed84:	431a      	orrs	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed8e:	431a      	orrs	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	431a      	orrs	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	f003 0301 	and.w	r3, r3, #1
 800eda2:	431a      	orrs	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	699b      	ldr	r3, [r3, #24]
 800eda8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800edac:	431a      	orrs	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69db      	ldr	r3, [r3, #28]
 800edb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800edb6:	431a      	orrs	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6a1b      	ldr	r3, [r3, #32]
 800edbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edc0:	ea42 0103 	orr.w	r1, r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	430a      	orrs	r2, r1
 800edd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	0c1b      	lsrs	r3, r3, #16
 800edda:	f003 0104 	and.w	r1, r3, #4
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede2:	f003 0210 	and.w	r2, r3, #16
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	430a      	orrs	r2, r1
 800edec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	69da      	ldr	r2, [r3, #28]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800edfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
	...

0800ee18 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ee2c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d00c      	beq.n	800ee54 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee40:	d106      	bne.n	800ee50 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <HAL_SPI_TransmitReceive_DMA+0x38>
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	2b04      	cmp	r3, #4
 800ee4e:	d001      	beq.n	800ee54 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 800ee50:	2302      	movs	r3, #2
 800ee52:	e0cf      	b.n	800eff4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d005      	beq.n	800ee66 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800ee60:	887b      	ldrh	r3, [r7, #2]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800ee66:	2301      	movs	r3, #1
 800ee68:	e0c4      	b.n	800eff4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d101      	bne.n	800ee78 <HAL_SPI_TransmitReceive_DMA+0x60>
 800ee74:	2302      	movs	r3, #2
 800ee76:	e0bd      	b.n	800eff4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b04      	cmp	r3, #4
 800ee8a:	d003      	beq.n	800ee94 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2205      	movs	r2, #5
 800ee90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	887a      	ldrh	r2, [r7, #2]
 800eea4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	887a      	ldrh	r2, [r7, #2]
 800eeaa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	887a      	ldrh	r2, [r7, #2]
 800eeb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	887a      	ldrh	r2, [r7, #2]
 800eebc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2200      	movs	r2, #0
 800eec8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d108      	bne.n	800eee8 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeda:	4a48      	ldr	r2, [pc, #288]	@ (800effc <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800eedc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eee2:	4a47      	ldr	r2, [pc, #284]	@ (800f000 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800eee4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800eee6:	e007      	b.n	800eef8 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeec:	4a45      	ldr	r2, [pc, #276]	@ (800f004 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800eeee:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eef4:	4a44      	ldr	r2, [pc, #272]	@ (800f008 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800eef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eefc:	4a43      	ldr	r2, [pc, #268]	@ (800f00c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800eefe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef04:	2200      	movs	r2, #0
 800ef06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	330c      	adds	r3, #12
 800ef12:	4619      	mov	r1, r3
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ef20:	f7fd faf0 	bl	800c504 <HAL_DMA_Start_IT>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00b      	beq.n	800ef42 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef2e:	f043 0210 	orr.w	r2, r3, #16
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e058      	b.n	800eff4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	685a      	ldr	r2, [r3, #4]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f042 0201 	orr.w	r2, r2, #1
 800ef50:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef56:	2200      	movs	r2, #0
 800ef58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef5e:	2200      	movs	r2, #0
 800ef60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef66:	2200      	movs	r2, #0
 800ef68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef6e:	2200      	movs	r2, #0
 800ef70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	330c      	adds	r3, #12
 800ef82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ef88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef8a:	f7fd fabb 	bl	800c504 <HAL_DMA_Start_IT>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00b      	beq.n	800efac <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef98:	f043 0210 	orr.w	r2, r3, #16
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e023      	b.n	800eff4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efb6:	2b40      	cmp	r3, #64	@ 0x40
 800efb8:	d007      	beq.n	800efca <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800efc8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f042 0220 	orr.w	r2, r2, #32
 800efe0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f042 0202 	orr.w	r2, r2, #2
 800eff0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	0800f217 	.word	0x0800f217
 800f000:	0800f0df 	.word	0x0800f0df
 800f004:	0800f233 	.word	0x0800f233
 800f008:	0800f187 	.word	0x0800f187
 800f00c:	0800f24f 	.word	0x0800f24f

0800f010 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f018:	2300      	movs	r3, #0
 800f01a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00f      	beq.n	800f044 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd fac3 	bl	800c5b4 <HAL_DMA_Abort>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d007      	beq.n	800f044 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f038:	f043 0210 	orr.w	r2, r3, #16
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 800f040:	2301      	movs	r3, #1
 800f042:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00f      	beq.n	800f06c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f050:	4618      	mov	r0, r3
 800f052:	f7fd faaf 	bl	800c5b4 <HAL_DMA_Abort>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d007      	beq.n	800f06c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f060:	f043 0210 	orr.w	r2, r3, #16
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f022 0203 	bic.w	r2, r2, #3
 800f07a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  return errorcode;
 800f084:	7bfb      	ldrb	r3, [r7, #15]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f08e:	b480      	push	{r7}
 800f090:	b083      	sub	sp, #12
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f096:	bf00      	nop
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b083      	sub	sp, #12
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800f0aa:	bf00      	nop
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	b083      	sub	sp, #12
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f0be:	bf00      	nop
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f0ca:	b480      	push	{r7}
 800f0cc:	b083      	sub	sp, #12
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f0d2:	bf00      	nop
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b084      	sub	sp, #16
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ea:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0ec:	f7fc fbae 	bl	800b84c <HAL_GetTick>
 800f0f0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f100:	d03b      	beq.n	800f17a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	685a      	ldr	r2, [r3, #4]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f022 0220 	bic.w	r2, r2, #32
 800f110:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10d      	bne.n	800f136 <SPI_DMAReceiveCplt+0x58>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f122:	d108      	bne.n	800f136 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	685a      	ldr	r2, [r3, #4]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 0203 	bic.w	r2, r2, #3
 800f132:	605a      	str	r2, [r3, #4]
 800f134:	e007      	b.n	800f146 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f022 0201 	bic.w	r2, r2, #1
 800f144:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f146:	68ba      	ldr	r2, [r7, #8]
 800f148:	2164      	movs	r1, #100	@ 0x64
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f000 f928 	bl	800f3a0 <SPI_EndRxTransaction>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d002      	beq.n	800f15c <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2220      	movs	r2, #32
 800f15a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d003      	beq.n	800f17a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7ff ffa9 	bl	800f0ca <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f178:	e002      	b.n	800f180 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7ff ff87 	bl	800f08e <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f192:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f194:	f7fc fb5a 	bl	800b84c <HAL_GetTick>
 800f198:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1a8:	d02f      	beq.n	800f20a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	685a      	ldr	r2, [r3, #4]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f022 0220 	bic.w	r2, r2, #32
 800f1b8:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	2164      	movs	r1, #100	@ 0x64
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 f954 	bl	800f46c <SPI_EndRxTxTransaction>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d005      	beq.n	800f1d6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1ce:	f043 0220 	orr.w	r2, r3, #32
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f022 0203 	bic.w	r2, r2, #3
 800f1e4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d003      	beq.n	800f20a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff ff61 	bl	800f0ca <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f208:	e002      	b.n	800f210 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f000 feb6 	bl	800ff7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f222:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7ff ff3c 	bl	800f0a2 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b084      	sub	sp, #16
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff ff38 	bl	800f0b6 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f246:	bf00      	nop
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f25a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685a      	ldr	r2, [r3, #4]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f022 0203 	bic.w	r2, r2, #3
 800f26a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f270:	f043 0210 	orr.w	r2, r3, #16
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff ff22 	bl	800f0ca <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f286:	bf00      	nop
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b088      	sub	sp, #32
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	4613      	mov	r3, r2
 800f29e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f2a0:	f7fc fad4 	bl	800b84c <HAL_GetTick>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a8:	1a9b      	subs	r3, r3, r2
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f2b0:	f7fc facc 	bl	800b84c <HAL_GetTick>
 800f2b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f2b6:	4b39      	ldr	r3, [pc, #228]	@ (800f39c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	015b      	lsls	r3, r3, #5
 800f2bc:	0d1b      	lsrs	r3, r3, #20
 800f2be:	69fa      	ldr	r2, [r7, #28]
 800f2c0:	fb02 f303 	mul.w	r3, r2, r3
 800f2c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f2c6:	e054      	b.n	800f372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ce:	d050      	beq.n	800f372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f2d0:	f7fc fabc 	bl	800b84c <HAL_GetTick>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	69fa      	ldr	r2, [r7, #28]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d902      	bls.n	800f2e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d13d      	bne.n	800f362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f2f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f2fe:	d111      	bne.n	800f324 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f308:	d004      	beq.n	800f314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f312:	d107      	bne.n	800f324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f32c:	d10f      	bne.n	800f34e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f34c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2201      	movs	r2, #1
 800f352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f35e:	2303      	movs	r3, #3
 800f360:	e017      	b.n	800f392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f368:	2300      	movs	r3, #0
 800f36a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	3b01      	subs	r3, #1
 800f370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	689a      	ldr	r2, [r3, #8]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	4013      	ands	r3, r2
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	429a      	cmp	r2, r3
 800f380:	bf0c      	ite	eq
 800f382:	2301      	moveq	r3, #1
 800f384:	2300      	movne	r3, #0
 800f386:	b2db      	uxtb	r3, r3
 800f388:	461a      	mov	r2, r3
 800f38a:	79fb      	ldrb	r3, [r7, #7]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d19b      	bne.n	800f2c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3720      	adds	r7, #32
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20000138 	.word	0x20000138

0800f3a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f3b4:	d111      	bne.n	800f3da <SPI_EndRxTransaction+0x3a>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3be:	d004      	beq.n	800f3ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3c8:	d107      	bne.n	800f3da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f3d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f3e2:	d12a      	bne.n	800f43a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3ec:	d012      	beq.n	800f414 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	2180      	movs	r1, #128	@ 0x80
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f7ff ff49 	bl	800f290 <SPI_WaitFlagStateUntilTimeout>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d02d      	beq.n	800f460 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f408:	f043 0220 	orr.w	r2, r3, #32
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f410:	2303      	movs	r3, #3
 800f412:	e026      	b.n	800f462 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2200      	movs	r2, #0
 800f41c:	2101      	movs	r1, #1
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7ff ff36 	bl	800f290 <SPI_WaitFlagStateUntilTimeout>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01a      	beq.n	800f460 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f42e:	f043 0220 	orr.w	r2, r3, #32
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f436:	2303      	movs	r3, #3
 800f438:	e013      	b.n	800f462 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2200      	movs	r2, #0
 800f442:	2101      	movs	r1, #1
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff ff23 	bl	800f290 <SPI_WaitFlagStateUntilTimeout>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d007      	beq.n	800f460 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f454:	f043 0220 	orr.w	r2, r3, #32
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e000      	b.n	800f462 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
	...

0800f46c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b088      	sub	sp, #32
 800f470:	af02      	add	r7, sp, #8
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2201      	movs	r2, #1
 800f480:	2102      	movs	r1, #2
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff ff04 	bl	800f290 <SPI_WaitFlagStateUntilTimeout>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d007      	beq.n	800f49e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f492:	f043 0220 	orr.w	r2, r3, #32
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f49a:	2303      	movs	r3, #3
 800f49c:	e032      	b.n	800f504 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f49e:	4b1b      	ldr	r3, [pc, #108]	@ (800f50c <SPI_EndRxTxTransaction+0xa0>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a1b      	ldr	r2, [pc, #108]	@ (800f510 <SPI_EndRxTxTransaction+0xa4>)
 800f4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f4a8:	0d5b      	lsrs	r3, r3, #21
 800f4aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f4ae:	fb02 f303 	mul.w	r3, r2, r3
 800f4b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f4bc:	d112      	bne.n	800f4e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2180      	movs	r1, #128	@ 0x80
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7ff fee1 	bl	800f290 <SPI_WaitFlagStateUntilTimeout>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d016      	beq.n	800f502 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4d8:	f043 0220 	orr.w	r2, r3, #32
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	e00f      	b.n	800f504 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00a      	beq.n	800f500 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4fa:	2b80      	cmp	r3, #128	@ 0x80
 800f4fc:	d0f2      	beq.n	800f4e4 <SPI_EndRxTxTransaction+0x78>
 800f4fe:	e000      	b.n	800f502 <SPI_EndRxTxTransaction+0x96>
        break;
 800f500:	bf00      	nop
  }

  return HAL_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	20000138 	.word	0x20000138
 800f510:	165e9f81 	.word	0x165e9f81

0800f514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	e041      	b.n	800f5aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d106      	bne.n	800f540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7fb fedc 	bl	800b2f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3304      	adds	r3, #4
 800f550:	4619      	mov	r1, r3
 800f552:	4610      	mov	r0, r2
 800f554:	f000 fa9e 	bl	800fa94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d001      	beq.n	800f5cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e044      	b.n	800f656 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68da      	ldr	r2, [r3, #12]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f042 0201 	orr.w	r2, r2, #1
 800f5e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a1e      	ldr	r2, [pc, #120]	@ (800f664 <HAL_TIM_Base_Start_IT+0xb0>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d018      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x6c>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5f6:	d013      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x6c>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800f668 <HAL_TIM_Base_Start_IT+0xb4>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d00e      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x6c>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a19      	ldr	r2, [pc, #100]	@ (800f66c <HAL_TIM_Base_Start_IT+0xb8>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d009      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x6c>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a17      	ldr	r2, [pc, #92]	@ (800f670 <HAL_TIM_Base_Start_IT+0xbc>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d004      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x6c>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a16      	ldr	r2, [pc, #88]	@ (800f674 <HAL_TIM_Base_Start_IT+0xc0>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d111      	bne.n	800f644 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b06      	cmp	r3, #6
 800f630:	d010      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f042 0201 	orr.w	r2, r2, #1
 800f640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f642:	e007      	b.n	800f654 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f042 0201 	orr.w	r2, r2, #1
 800f652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	40010000 	.word	0x40010000
 800f668:	40000400 	.word	0x40000400
 800f66c:	40000800 	.word	0x40000800
 800f670:	40000c00 	.word	0x40000c00
 800f674:	40014000 	.word	0x40014000

0800f678 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68da      	ldr	r2, [r3, #12]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f022 0201 	bic.w	r2, r2, #1
 800f68e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6a1a      	ldr	r2, [r3, #32]
 800f696:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f69a:	4013      	ands	r3, r2
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10f      	bne.n	800f6c0 <HAL_TIM_Base_Stop_IT+0x48>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6a1a      	ldr	r2, [r3, #32]
 800f6a6:	f240 4344 	movw	r3, #1092	@ 0x444
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d107      	bne.n	800f6c0 <HAL_TIM_Base_Stop_IT+0x48>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f022 0201 	bic.w	r2, r2, #1
 800f6be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f003 0302 	and.w	r3, r3, #2
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d020      	beq.n	800f73a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f003 0302 	and.w	r3, r3, #2
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d01b      	beq.n	800f73a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f06f 0202 	mvn.w	r2, #2
 800f70a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	f003 0303 	and.w	r3, r3, #3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d003      	beq.n	800f728 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 f999 	bl	800fa58 <HAL_TIM_IC_CaptureCallback>
 800f726:	e005      	b.n	800f734 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f98b 	bl	800fa44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f99c 	bl	800fa6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	f003 0304 	and.w	r3, r3, #4
 800f740:	2b00      	cmp	r3, #0
 800f742:	d020      	beq.n	800f786 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f003 0304 	and.w	r3, r3, #4
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d01b      	beq.n	800f786 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f06f 0204 	mvn.w	r2, #4
 800f756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2202      	movs	r2, #2
 800f75c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	699b      	ldr	r3, [r3, #24]
 800f764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d003      	beq.n	800f774 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 f973 	bl	800fa58 <HAL_TIM_IC_CaptureCallback>
 800f772:	e005      	b.n	800f780 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f965 	bl	800fa44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f976 	bl	800fa6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	f003 0308 	and.w	r3, r3, #8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d020      	beq.n	800f7d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f003 0308 	and.w	r3, r3, #8
 800f796:	2b00      	cmp	r3, #0
 800f798:	d01b      	beq.n	800f7d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f06f 0208 	mvn.w	r2, #8
 800f7a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2204      	movs	r2, #4
 800f7a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	69db      	ldr	r3, [r3, #28]
 800f7b0:	f003 0303 	and.w	r3, r3, #3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d003      	beq.n	800f7c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f94d 	bl	800fa58 <HAL_TIM_IC_CaptureCallback>
 800f7be:	e005      	b.n	800f7cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 f93f 	bl	800fa44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f950 	bl	800fa6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	f003 0310 	and.w	r3, r3, #16
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d020      	beq.n	800f81e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f003 0310 	and.w	r3, r3, #16
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d01b      	beq.n	800f81e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f06f 0210 	mvn.w	r2, #16
 800f7ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2208      	movs	r2, #8
 800f7f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	69db      	ldr	r3, [r3, #28]
 800f7fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f800:	2b00      	cmp	r3, #0
 800f802:	d003      	beq.n	800f80c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 f927 	bl	800fa58 <HAL_TIM_IC_CaptureCallback>
 800f80a:	e005      	b.n	800f818 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f919 	bl	800fa44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 f92a 	bl	800fa6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00c      	beq.n	800f842 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d007      	beq.n	800f842 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f06f 0201 	mvn.w	r2, #1
 800f83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fb fe4d 	bl	800b4dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f852:	2b00      	cmp	r3, #0
 800f854:	d007      	beq.n	800f866 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fab5 	bl	800fdd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00c      	beq.n	800f88a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f876:	2b00      	cmp	r3, #0
 800f878:	d007      	beq.n	800f88a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 f8fb 	bl	800fa80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	f003 0320 	and.w	r3, r3, #32
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00c      	beq.n	800f8ae <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f003 0320 	and.w	r3, r3, #32
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d007      	beq.n	800f8ae <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f06f 0220 	mvn.w	r2, #32
 800f8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fa87 	bl	800fdbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f8ae:	bf00      	nop
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d101      	bne.n	800f8d2 <HAL_TIM_ConfigClockSource+0x1c>
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e0b4      	b.n	800fa3c <HAL_TIM_ConfigClockSource+0x186>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2202      	movs	r2, #2
 800f8de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f8f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f8f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f90a:	d03e      	beq.n	800f98a <HAL_TIM_ConfigClockSource+0xd4>
 800f90c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f910:	f200 8087 	bhi.w	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f918:	f000 8086 	beq.w	800fa28 <HAL_TIM_ConfigClockSource+0x172>
 800f91c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f920:	d87f      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f922:	2b70      	cmp	r3, #112	@ 0x70
 800f924:	d01a      	beq.n	800f95c <HAL_TIM_ConfigClockSource+0xa6>
 800f926:	2b70      	cmp	r3, #112	@ 0x70
 800f928:	d87b      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f92a:	2b60      	cmp	r3, #96	@ 0x60
 800f92c:	d050      	beq.n	800f9d0 <HAL_TIM_ConfigClockSource+0x11a>
 800f92e:	2b60      	cmp	r3, #96	@ 0x60
 800f930:	d877      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f932:	2b50      	cmp	r3, #80	@ 0x50
 800f934:	d03c      	beq.n	800f9b0 <HAL_TIM_ConfigClockSource+0xfa>
 800f936:	2b50      	cmp	r3, #80	@ 0x50
 800f938:	d873      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f93a:	2b40      	cmp	r3, #64	@ 0x40
 800f93c:	d058      	beq.n	800f9f0 <HAL_TIM_ConfigClockSource+0x13a>
 800f93e:	2b40      	cmp	r3, #64	@ 0x40
 800f940:	d86f      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f942:	2b30      	cmp	r3, #48	@ 0x30
 800f944:	d064      	beq.n	800fa10 <HAL_TIM_ConfigClockSource+0x15a>
 800f946:	2b30      	cmp	r3, #48	@ 0x30
 800f948:	d86b      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f94a:	2b20      	cmp	r3, #32
 800f94c:	d060      	beq.n	800fa10 <HAL_TIM_ConfigClockSource+0x15a>
 800f94e:	2b20      	cmp	r3, #32
 800f950:	d867      	bhi.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
 800f952:	2b00      	cmp	r3, #0
 800f954:	d05c      	beq.n	800fa10 <HAL_TIM_ConfigClockSource+0x15a>
 800f956:	2b10      	cmp	r3, #16
 800f958:	d05a      	beq.n	800fa10 <HAL_TIM_ConfigClockSource+0x15a>
 800f95a:	e062      	b.n	800fa22 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f96c:	f000 f998 	bl	800fca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f97e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	609a      	str	r2, [r3, #8]
      break;
 800f988:	e04f      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f99a:	f000 f981 	bl	800fca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	689a      	ldr	r2, [r3, #8]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f9ac:	609a      	str	r2, [r3, #8]
      break;
 800f9ae:	e03c      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9bc:	461a      	mov	r2, r3
 800f9be:	f000 f8f5 	bl	800fbac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2150      	movs	r1, #80	@ 0x50
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f000 f94e 	bl	800fc6a <TIM_ITRx_SetConfig>
      break;
 800f9ce:	e02c      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9dc:	461a      	mov	r2, r3
 800f9de:	f000 f914 	bl	800fc0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2160      	movs	r1, #96	@ 0x60
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 f93e 	bl	800fc6a <TIM_ITRx_SetConfig>
      break;
 800f9ee:	e01c      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f000 f8d5 	bl	800fbac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2140      	movs	r1, #64	@ 0x40
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 f92e 	bl	800fc6a <TIM_ITRx_SetConfig>
      break;
 800fa0e:	e00c      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	4610      	mov	r0, r2
 800fa1c:	f000 f925 	bl	800fc6a <TIM_ITRx_SetConfig>
      break;
 800fa20:	e003      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fa22:	2301      	movs	r3, #1
 800fa24:	73fb      	strb	r3, [r7, #15]
      break;
 800fa26:	e000      	b.n	800fa2a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fa28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3710      	adds	r7, #16
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa88:	bf00      	nop
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4a3a      	ldr	r2, [pc, #232]	@ (800fb90 <TIM_Base_SetConfig+0xfc>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d00f      	beq.n	800facc <TIM_Base_SetConfig+0x38>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fab2:	d00b      	beq.n	800facc <TIM_Base_SetConfig+0x38>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a37      	ldr	r2, [pc, #220]	@ (800fb94 <TIM_Base_SetConfig+0x100>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d007      	beq.n	800facc <TIM_Base_SetConfig+0x38>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a36      	ldr	r2, [pc, #216]	@ (800fb98 <TIM_Base_SetConfig+0x104>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d003      	beq.n	800facc <TIM_Base_SetConfig+0x38>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a35      	ldr	r2, [pc, #212]	@ (800fb9c <TIM_Base_SetConfig+0x108>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d108      	bne.n	800fade <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	4313      	orrs	r3, r2
 800fadc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a2b      	ldr	r2, [pc, #172]	@ (800fb90 <TIM_Base_SetConfig+0xfc>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d01b      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faec:	d017      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a28      	ldr	r2, [pc, #160]	@ (800fb94 <TIM_Base_SetConfig+0x100>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d013      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a27      	ldr	r2, [pc, #156]	@ (800fb98 <TIM_Base_SetConfig+0x104>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d00f      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4a26      	ldr	r2, [pc, #152]	@ (800fb9c <TIM_Base_SetConfig+0x108>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d00b      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a25      	ldr	r2, [pc, #148]	@ (800fba0 <TIM_Base_SetConfig+0x10c>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d007      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a24      	ldr	r2, [pc, #144]	@ (800fba4 <TIM_Base_SetConfig+0x110>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d003      	beq.n	800fb1e <TIM_Base_SetConfig+0x8a>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a23      	ldr	r2, [pc, #140]	@ (800fba8 <TIM_Base_SetConfig+0x114>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d108      	bne.n	800fb30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	695b      	ldr	r3, [r3, #20]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	689a      	ldr	r2, [r3, #8]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a0e      	ldr	r2, [pc, #56]	@ (800fb90 <TIM_Base_SetConfig+0xfc>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d103      	bne.n	800fb64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	691a      	ldr	r2, [r3, #16]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d105      	bne.n	800fb82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	f023 0201 	bic.w	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	611a      	str	r2, [r3, #16]
  }
}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	40010000 	.word	0x40010000
 800fb94:	40000400 	.word	0x40000400
 800fb98:	40000800 	.word	0x40000800
 800fb9c:	40000c00 	.word	0x40000c00
 800fba0:	40014000 	.word	0x40014000
 800fba4:	40014400 	.word	0x40014400
 800fba8:	40014800 	.word	0x40014800

0800fbac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	f023 0201 	bic.w	r2, r3, #1
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fbd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f023 030a 	bic.w	r3, r3, #10
 800fbe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	693a      	ldr	r2, [r7, #16]
 800fbf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	621a      	str	r2, [r3, #32]
}
 800fbfe:	bf00      	nop
 800fc00:	371c      	adds	r7, #28
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr

0800fc0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc0a:	b480      	push	{r7}
 800fc0c:	b087      	sub	sp, #28
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	60f8      	str	r0, [r7, #12]
 800fc12:	60b9      	str	r1, [r7, #8]
 800fc14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6a1b      	ldr	r3, [r3, #32]
 800fc20:	f023 0210 	bic.w	r2, r3, #16
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fc34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	031b      	lsls	r3, r3, #12
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	011b      	lsls	r3, r3, #4
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	621a      	str	r2, [r3, #32]
}
 800fc5e:	bf00      	nop
 800fc60:	371c      	adds	r7, #28
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr

0800fc6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc6a:	b480      	push	{r7}
 800fc6c:	b085      	sub	sp, #20
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	689b      	ldr	r3, [r3, #8]
 800fc78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	f043 0307 	orr.w	r3, r3, #7
 800fc8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	609a      	str	r2, [r3, #8]
}
 800fc94:	bf00      	nop
 800fc96:	3714      	adds	r7, #20
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b087      	sub	sp, #28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fcba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	021a      	lsls	r2, r3, #8
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	4313      	orrs	r3, r2
 800fccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	609a      	str	r2, [r3, #8]
}
 800fcd4:	bf00      	nop
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d101      	bne.n	800fcf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	e050      	b.n	800fd9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2202      	movs	r2, #2
 800fd04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a1c      	ldr	r2, [pc, #112]	@ (800fda8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d018      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd44:	d013      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a18      	ldr	r2, [pc, #96]	@ (800fdac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d00e      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a16      	ldr	r2, [pc, #88]	@ (800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d009      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4a15      	ldr	r2, [pc, #84]	@ (800fdb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d004      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a13      	ldr	r2, [pc, #76]	@ (800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d10c      	bne.n	800fd88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	40010000 	.word	0x40010000
 800fdac:	40000400 	.word	0x40000400
 800fdb0:	40000800 	.word	0x40000800
 800fdb4:	40000c00 	.word	0x40000c00
 800fdb8:	40014000 	.word	0x40014000

0800fdbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fdc4:	bf00      	nop
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fde8:	4904      	ldr	r1, [pc, #16]	@ (800fdfc <MX_FATFS_Init+0x18>)
 800fdea:	4805      	ldr	r0, [pc, #20]	@ (800fe00 <MX_FATFS_Init+0x1c>)
 800fdec:	f003 fc54 	bl	8013698 <FATFS_LinkDriver>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4b03      	ldr	r3, [pc, #12]	@ (800fe04 <MX_FATFS_Init+0x20>)
 800fdf6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fdf8:	bf00      	nop
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	2000119c 	.word	0x2000119c
 800fe00:	20000144 	.word	0x20000144
 800fe04:	20001198 	.word	0x20001198

0800fe08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fe0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;

	return USER_SPI_initialize(pdrv);
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 f9b5 	bl	8010194 <USER_SPI_initialize>
 800fe2a:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;

	return USER_SPI_status(pdrv);
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 fa79 	bl	8010338 <USER_SPI_status>
 800fe46:	4603      	mov	r3, r0

  /* USER CODE END STATUS */
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	607a      	str	r2, [r7, #4]
 800fe5a:	603b      	str	r3, [r7, #0]
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 800fe60:	7bf8      	ldrb	r0, [r7, #15]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	68b9      	ldr	r1, [r7, #8]
 800fe68:	f000 fa9a 	bl	80103a0 <USER_SPI_read>
 800fe6c:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	603b      	str	r3, [r7, #0]
 800fe82:	4603      	mov	r3, r0
 800fe84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;

	return USER_SPI_write(pdrv, buff, sector, count);
 800fe86:	7bf8      	ldrb	r0, [r7, #15]
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	68b9      	ldr	r1, [r7, #8]
 800fe8e:	f000 fb1f 	bl	80104d0 <USER_SPI_write>
 800fe92:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	4603      	mov	r3, r0
 800fea4:	603a      	str	r2, [r7, #0]
 800fea6:	71fb      	strb	r3, [r7, #7]
 800fea8:	460b      	mov	r3, r1
 800feaa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;

	return USER_SPI_ioctl(pdrv, cmd, buff);
 800feac:	79b9      	ldrb	r1, [r7, #6]
 800feae:	79fb      	ldrb	r3, [r7, #7]
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 fb88 	bl	80105c8 <USER_SPI_ioctl>
 800feb8:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
	...

0800fec4 <set_sd_interface_speed>:
#define DESELECT()			(GPIO_SD_CS->BSRR = GPIO_SD_CS_PIN)

//скорость интерфейса SPI
//speed от 0 (FCLK/2) до 7 (FCLK/256)
static void set_sd_interface_speed(uint8_t speed)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	71fb      	strb	r3, [r7, #7]
	if (speed > 7) speed = 7;
 800fece:	79fb      	ldrb	r3, [r7, #7]
 800fed0:	2b07      	cmp	r3, #7
 800fed2:	d901      	bls.n	800fed8 <set_sd_interface_speed+0x14>
 800fed4:	2307      	movs	r3, #7
 800fed6:	71fb      	strb	r3, [r7, #7]
	SPI_SD->CR1 &= ~SPI_CR1_SPE; //SPI отключено
 800fed8:	4b13      	ldr	r3, [pc, #76]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	4b12      	ldr	r3, [pc, #72]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fee6:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 &= ~(0x07UL<<(3U)); //маска бит скорости
 800fee8:	4b0f      	ldr	r3, [pc, #60]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	4b0e      	ldr	r3, [pc, #56]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800fef6:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 |= (uint32_t)(speed<<(3U));
 800fef8:	4b0b      	ldr	r3, [pc, #44]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	6819      	ldr	r1, [r3, #0]
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	00da      	lsls	r2, r3, #3
 800ff02:	4b09      	ldr	r3, [pc, #36]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	430a      	orrs	r2, r1
 800ff08:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 |= SPI_CR1_SPE; // SPI enable
 800ff0a:	4b07      	ldr	r3, [pc, #28]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <set_sd_interface_speed+0x64>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff18:	601a      	str	r2, [r3, #0]
}
 800ff1a:	bf00      	nop
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	200007a0 	.word	0x200007a0

0800ff2c <spi_rw>:

static BYTE spi_rw(BYTE wval)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	71fb      	strb	r3, [r7, #7]
	*((volatile uint8_t *)&SPI_SD->DR) = wval;
 800ff36:	4b10      	ldr	r3, [pc, #64]	@ (800ff78 <spi_rw+0x4c>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	330c      	adds	r3, #12
 800ff3c:	79fa      	ldrb	r2, [r7, #7]
 800ff3e:	701a      	strb	r2, [r3, #0]
	while(!(SPI_SD->SR & SPI_SR_RXNE)) ;
 800ff40:	bf00      	nop
 800ff42:	4b0d      	ldr	r3, [pc, #52]	@ (800ff78 <spi_rw+0x4c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	f003 0301 	and.w	r3, r3, #1
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d0f8      	beq.n	800ff42 <spi_rw+0x16>
	while(SPI_SD->SR & SPI_SR_BSY) ;
 800ff50:	bf00      	nop
 800ff52:	4b09      	ldr	r3, [pc, #36]	@ (800ff78 <spi_rw+0x4c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1f8      	bne.n	800ff52 <spi_rw+0x26>
	return *((volatile uint8_t *)&SPI_SD->DR);
 800ff60:	4b05      	ldr	r3, [pc, #20]	@ (800ff78 <spi_rw+0x4c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	330c      	adds	r3, #12
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	b2db      	uxtb	r3, r3
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	200007a0 	.word	0x200007a0

0800ff7c <HAL_SPI_TxRxCpltCallback>:
#define rcvr_spi_m(dst)  *(dst)=spi_rw(0xFF)

#ifdef SD_USE_DMA

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) //коллбэк по окончанию приема/передачи
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4a05      	ldr	r2, [pc, #20]	@ (800ff9c <HAL_SPI_TxRxCpltCallback+0x20>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d102      	bne.n	800ff92 <HAL_SPI_TxRxCpltCallback+0x16>
	{
		HAL_SPI_DMAStop(&SD_SPI_HANDLE);
 800ff8c:	4803      	ldr	r0, [pc, #12]	@ (800ff9c <HAL_SPI_TxRxCpltCallback+0x20>)
 800ff8e:	f7ff f83f 	bl	800f010 <HAL_SPI_DMAStop>
	}
}
 800ff92:	bf00      	nop
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	200007a0 	.word	0x200007a0

0800ffa0 <SPI_DMA_TransmitReceive>:
	SPI_Transfer_Transmit
} SPI_TransferType;

//SPI DMA прием/передача полный дуплекс мастер
static void SPI_DMA_TransmitReceive(SPI_TransferType type, const BYTE* buff, uint16_t buff_size)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b088      	sub	sp, #32
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
 800ffac:	4613      	mov	r3, r2
 800ffae:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp = 0xFF;
 800ffb0:	23ff      	movs	r3, #255	@ 0xff
 800ffb2:	73fb      	strb	r3, [r7, #15]
	uint8_t *TXdata, *RXdata;
	DMA_Stream_TypeDef *hdma_rx = SD_SPI_HANDLE.hdmarx->Instance;
 800ffb4:	4b34      	ldr	r3, [pc, #208]	@ (8010088 <SPI_DMA_TransmitReceive+0xe8>)
 800ffb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *hdma_tx = SD_SPI_HANDLE.hdmatx->Instance;
 800ffbc:	4b32      	ldr	r3, [pc, #200]	@ (8010088 <SPI_DMA_TransmitReceive+0xe8>)
 800ffbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	613b      	str	r3, [r7, #16]
	hdma_tx->CR &= ~DMA_SxCR_EN; //выключаем канал DMA передачи
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f023 0201 	bic.w	r2, r3, #1
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	601a      	str	r2, [r3, #0]
	hdma_rx->CR &= ~DMA_SxCR_EN; //выключаем канал DMA приема
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f023 0201 	bic.w	r2, r3, #1
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	601a      	str	r2, [r3, #0]
	//ждем отключения каналов DMA
	while ((hdma_tx->CR & DMA_SxCR_EN) || (hdma_rx->CR & DMA_SxCR_EN)) {__NOP();}
 800ffdc:	e000      	b.n	800ffe0 <SPI_DMA_TransmitReceive+0x40>
 800ffde:	bf00      	nop
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1f8      	bne.n	800ffde <SPI_DMA_TransmitReceive+0x3e>
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f003 0301 	and.w	r3, r3, #1
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1f2      	bne.n	800ffde <SPI_DMA_TransmitReceive+0x3e>
	if(type == SPI_Transfer_Receive) //настройка каналов DMA для приема данных с карты
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d117      	bne.n	801002e <SPI_DMA_TransmitReceive+0x8e>
	{
		hdma_rx->CR &= ~DMA_SxCR_PINC; 	//DMA_PINC_DISABLE
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	601a      	str	r2, [r3, #0]
		hdma_rx->CR |= DMA_SxCR_MINC;  	//DMA_MINC_ENABLE
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	601a      	str	r2, [r3, #0]
		hdma_tx->CR &= ~(DMA_SxCR_PINC | DMA_SxCR_MINC); 	//DMA_PINC_DISABLE & DMA_MINC_DISABLE
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	601a      	str	r2, [r3, #0]
	    TXdata = (uint8_t*)&tmp;
 8010022:	f107 030f 	add.w	r3, r7, #15
 8010026:	61fb      	str	r3, [r7, #28]
	    RXdata = (uint8_t*)buff;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	61bb      	str	r3, [r7, #24]
 801002c:	e019      	b.n	8010062 <SPI_DMA_TransmitReceive+0xc2>
	}
	else if (type == SPI_Transfer_Transmit)//настройка канала DMA для передачи данных на карту
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d116      	bne.n	8010062 <SPI_DMA_TransmitReceive+0xc2>
	{
		hdma_rx->CR &= ~(DMA_SxCR_PINC | DMA_SxCR_MINC); 	//DMA_PINC_DISABLE & DMA_MINC_DISABLE
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	601a      	str	r2, [r3, #0]
		hdma_tx->CR &= ~DMA_SxCR_PINC; 	//DMA_PINC_DISABLE
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	601a      	str	r2, [r3, #0]
		hdma_tx->CR |= DMA_SxCR_MINC; 	//DMA_MINC_ENABLE
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	601a      	str	r2, [r3, #0]
	    TXdata = (uint8_t*)buff;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	61fb      	str	r3, [r7, #28]
	    RXdata = (uint8_t*)&tmp;
 801005c:	f107 030f 	add.w	r3, r7, #15
 8010060:	61bb      	str	r3, [r7, #24]
	}
	HAL_SPI_TransmitReceive_DMA(&SD_SPI_HANDLE, TXdata, RXdata, buff_size);
 8010062:	88bb      	ldrh	r3, [r7, #4]
 8010064:	69ba      	ldr	r2, [r7, #24]
 8010066:	69f9      	ldr	r1, [r7, #28]
 8010068:	4807      	ldr	r0, [pc, #28]	@ (8010088 <SPI_DMA_TransmitReceive+0xe8>)
 801006a:	f7fe fed5 	bl	800ee18 <HAL_SPI_TransmitReceive_DMA>
	while (SD_SPI_HANDLE.State != HAL_SPI_STATE_READY) ;
 801006e:	bf00      	nop
 8010070:	4b05      	ldr	r3, [pc, #20]	@ (8010088 <SPI_DMA_TransmitReceive+0xe8>)
 8010072:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b01      	cmp	r3, #1
 801007a:	d1f9      	bne.n	8010070 <SPI_DMA_TransmitReceive+0xd0>
}
 801007c:	bf00      	nop
 801007e:	bf00      	nop
 8010080:	3720      	adds	r7, #32
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	200007a0 	.word	0x200007a0

0801008c <wait_ready>:
/* SD card definitions */
static volatile DSTATUS Stat = STA_NOINIT; //	Disk status
static BYTE CardType;	 // Card type flags

static BYTE wait_ready(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
	BYTE res;
	rcvr_spi();
 8010092:	20ff      	movs	r0, #255	@ 0xff
 8010094:	f7ff ff4a 	bl	800ff2c <spi_rw>
	do {
		res = rcvr_spi();
 8010098:	20ff      	movs	r0, #255	@ 0xff
 801009a:	f7ff ff47 	bl	800ff2c <spi_rw>
 801009e:	4603      	mov	r3, r0
 80100a0:	71fb      	strb	r3, [r7, #7]
	} while (res != 0xFF); // check timeout
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	2bff      	cmp	r3, #255	@ 0xff
 80100a6:	d1f7      	bne.n	8010098 <wait_ready+0xc>
	return res;
 80100a8:	79fb      	ldrb	r3, [r7, #7]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <send_cmd>:

static BYTE send_cmd(BYTE cmd, DWORD arg)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	6039      	str	r1, [r7, #0]
 80100be:	71fb      	strb	r3, [r7, #7]
	BYTE res;

	if(cmd & 0x80){	// ACMD<n> is the command sequence of CMD55-CMD<n>
 80100c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	da0e      	bge.n	80100e6 <send_cmd+0x32>
		cmd &= 0x7F;
 80100c8:	79fb      	ldrb	r3, [r7, #7]
 80100ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100ce:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80100d0:	2100      	movs	r1, #0
 80100d2:	2077      	movs	r0, #119	@ 0x77
 80100d4:	f7ff ffee 	bl	80100b4 <send_cmd>
 80100d8:	4603      	mov	r3, r0
 80100da:	737b      	strb	r3, [r7, #13]
		if(res > 1) return res;
 80100dc:	7b7b      	ldrb	r3, [r7, #13]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d901      	bls.n	80100e6 <send_cmd+0x32>
 80100e2:	7b7b      	ldrb	r3, [r7, #13]
 80100e4:	e050      	b.n	8010188 <send_cmd+0xd4>
	}

	DESELECT();
 80100e6:	4b2a      	ldr	r3, [pc, #168]	@ (8010190 <send_cmd+0xdc>)
 80100e8:	2201      	movs	r2, #1
 80100ea:	619a      	str	r2, [r3, #24]
	SELECT();
 80100ec:	4b28      	ldr	r3, [pc, #160]	@ (8010190 <send_cmd+0xdc>)
 80100ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80100f2:	619a      	str	r2, [r3, #24]
	if(wait_ready() != 0xFF){
 80100f4:	f7ff ffca 	bl	801008c <wait_ready>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2bff      	cmp	r3, #255	@ 0xff
 80100fc:	d001      	beq.n	8010102 <send_cmd+0x4e>
		return 0xFF;
 80100fe:	23ff      	movs	r3, #255	@ 0xff
 8010100:	e042      	b.n	8010188 <send_cmd+0xd4>
	}

	// transmit cmd + arg + crc
	xmit_spi(cmd);								// Start + Command index
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff ff11 	bl	800ff2c <spi_rw>
	xmit_spi((BYTE)(arg >> 24));	// Argument[31..24]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	0e1b      	lsrs	r3, r3, #24
 801010e:	b2db      	uxtb	r3, r3
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff ff0b 	bl	800ff2c <spi_rw>
	xmit_spi((BYTE)(arg >> 16));	// Argument[23..16]
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	0c1b      	lsrs	r3, r3, #16
 801011a:	b2db      	uxtb	r3, r3
 801011c:	4618      	mov	r0, r3
 801011e:	f7ff ff05 	bl	800ff2c <spi_rw>
	xmit_spi((BYTE)(arg >> 8));		// Argument[15..8]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	0a1b      	lsrs	r3, r3, #8
 8010126:	b2db      	uxtb	r3, r3
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff feff 	bl	800ff2c <spi_rw>
	xmit_spi((BYTE)arg);					// Argument[7..0]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	b2db      	uxtb	r3, r3
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fefa 	bl	800ff2c <spi_rw>
	BYTE crc = 0x01; // Dummy CRC + Stop
 8010138:	2301      	movs	r3, #1
 801013a:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD0) crc = 0x95;			// Valid CRC for CMD0(0)
 801013c:	79fb      	ldrb	r3, [r7, #7]
 801013e:	2b40      	cmp	r3, #64	@ 0x40
 8010140:	d101      	bne.n	8010146 <send_cmd+0x92>
 8010142:	2395      	movs	r3, #149	@ 0x95
 8010144:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD8) crc = 0x87;			// Valid CRC for CMD8(0x1AA)
 8010146:	79fb      	ldrb	r3, [r7, #7]
 8010148:	2b48      	cmp	r3, #72	@ 0x48
 801014a:	d101      	bne.n	8010150 <send_cmd+0x9c>
 801014c:	2387      	movs	r3, #135	@ 0x87
 801014e:	73fb      	strb	r3, [r7, #15]
	xmit_spi(crc);
 8010150:	7bfb      	ldrb	r3, [r7, #15]
 8010152:	4618      	mov	r0, r3
 8010154:	f7ff feea 	bl	800ff2c <spi_rw>

	// Receive command response
	if(cmd == CMD12) rcvr_spi();		// Skip a stuff byte when stop reading
 8010158:	79fb      	ldrb	r3, [r7, #7]
 801015a:	2b4c      	cmp	r3, #76	@ 0x4c
 801015c:	d102      	bne.n	8010164 <send_cmd+0xb0>
 801015e:	20ff      	movs	r0, #255	@ 0xff
 8010160:	f7ff fee4 	bl	800ff2c <spi_rw>

	// Wait for a valid response in timeout of 10 attempts
	BYTE attempt = 10;
 8010164:	230a      	movs	r3, #10
 8010166:	73bb      	strb	r3, [r7, #14]
	do {
		res = rcvr_spi();
 8010168:	20ff      	movs	r0, #255	@ 0xff
 801016a:	f7ff fedf 	bl	800ff2c <spi_rw>
 801016e:	4603      	mov	r3, r0
 8010170:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && (--attempt));
 8010172:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010176:	2b00      	cmp	r3, #0
 8010178:	da05      	bge.n	8010186 <send_cmd+0xd2>
 801017a:	7bbb      	ldrb	r3, [r7, #14]
 801017c:	3b01      	subs	r3, #1
 801017e:	73bb      	strb	r3, [r7, #14]
 8010180:	7bbb      	ldrb	r3, [r7, #14]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1f0      	bne.n	8010168 <send_cmd+0xb4>

	return res;
 8010186:	7b7b      	ldrb	r3, [r7, #13]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	40020400 	.word	0x40020400

08010194 <USER_SPI_initialize>:

DSTATUS USER_SPI_initialize(BYTE drv)
{
 8010194:	b590      	push	{r4, r7, lr}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	4603      	mov	r3, r0
 801019c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty = 0, ocr[4];
 801019e:	2300      	movs	r3, #0
 80101a0:	737b      	strb	r3, [r7, #13]
	DESELECT();
 80101a2:	4b62      	ldr	r3, [pc, #392]	@ (801032c <USER_SPI_initialize+0x198>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	619a      	str	r2, [r3, #24]
	set_sd_interface_speed(SD_INI_SPEED); //медленное spi
 80101a8:	2007      	movs	r0, #7
 80101aa:	f7ff fe8b 	bl	800fec4 <set_sd_interface_speed>
	SELECT();
 80101ae:	4b5f      	ldr	r3, [pc, #380]	@ (801032c <USER_SPI_initialize+0x198>)
 80101b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80101b4:	619a      	str	r2, [r3, #24]

	for(n=10; n; n--) rcvr_spi();	// 80 dummy clocks
 80101b6:	230a      	movs	r3, #10
 80101b8:	73fb      	strb	r3, [r7, #15]
 80101ba:	e005      	b.n	80101c8 <USER_SPI_initialize+0x34>
 80101bc:	20ff      	movs	r0, #255	@ 0xff
 80101be:	f7ff feb5 	bl	800ff2c <spi_rw>
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
 80101c4:	3b01      	subs	r3, #1
 80101c6:	73fb      	strb	r3, [r7, #15]
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1f6      	bne.n	80101bc <USER_SPI_initialize+0x28>

	if(0x01 == send_cmd(CMD0, 0))
 80101ce:	2100      	movs	r1, #0
 80101d0:	2040      	movs	r0, #64	@ 0x40
 80101d2:	f7ff ff6f 	bl	80100b4 <send_cmd>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d172      	bne.n	80102c2 <USER_SPI_initialize+0x12e>
	{
		// Enter Idle state
		if(0x01 == send_cmd(CMD8, 0x1AA))
 80101dc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80101e0:	2048      	movs	r0, #72	@ 0x48
 80101e2:	f7ff ff67 	bl	80100b4 <send_cmd>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d147      	bne.n	801027c <USER_SPI_initialize+0xe8>
		{
			// SDHC ?
			for(n=0; n<4; n++) ocr[n] = rcvr_spi(); // Get trailing return value of R7 response
 80101ec:	2300      	movs	r3, #0
 80101ee:	73fb      	strb	r3, [r7, #15]
 80101f0:	e00d      	b.n	801020e <USER_SPI_initialize+0x7a>
 80101f2:	7bfc      	ldrb	r4, [r7, #15]
 80101f4:	20ff      	movs	r0, #255	@ 0xff
 80101f6:	f7ff fe99 	bl	800ff2c <spi_rw>
 80101fa:	4603      	mov	r3, r0
 80101fc:	461a      	mov	r2, r3
 80101fe:	f104 0310 	add.w	r3, r4, #16
 8010202:	443b      	add	r3, r7
 8010204:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	3301      	adds	r3, #1
 801020c:	73fb      	strb	r3, [r7, #15]
 801020e:	7bfb      	ldrb	r3, [r7, #15]
 8010210:	2b03      	cmp	r3, #3
 8010212:	d9ee      	bls.n	80101f2 <USER_SPI_initialize+0x5e>

			if((0x01 == ocr[2]) && (0xAA == ocr[3]))
 8010214:	7abb      	ldrb	r3, [r7, #10]
 8010216:	2b01      	cmp	r3, #1
 8010218:	d153      	bne.n	80102c2 <USER_SPI_initialize+0x12e>
 801021a:	7afb      	ldrb	r3, [r7, #11]
 801021c:	2baa      	cmp	r3, #170	@ 0xaa
 801021e:	d150      	bne.n	80102c2 <USER_SPI_initialize+0x12e>
			{
				// The card can work at VDD range of 2.7-3.6V
				while(send_cmd(ACMD41, (1UL << 30)));	// Wait for leaving idle state (ACMD41 with HCS bit)
 8010220:	bf00      	nop
 8010222:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8010226:	20e9      	movs	r0, #233	@ 0xe9
 8010228:	f7ff ff44 	bl	80100b4 <send_cmd>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1f7      	bne.n	8010222 <USER_SPI_initialize+0x8e>

				if(0x00 == send_cmd(CMD58, 0))
 8010232:	2100      	movs	r1, #0
 8010234:	207a      	movs	r0, #122	@ 0x7a
 8010236:	f7ff ff3d 	bl	80100b4 <send_cmd>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d140      	bne.n	80102c2 <USER_SPI_initialize+0x12e>
				{
					// Check CCS bit in the OCR
					for(n=0; n<4; n++) ocr[n] = rcvr_spi();
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
 8010244:	e00d      	b.n	8010262 <USER_SPI_initialize+0xce>
 8010246:	7bfc      	ldrb	r4, [r7, #15]
 8010248:	20ff      	movs	r0, #255	@ 0xff
 801024a:	f7ff fe6f 	bl	800ff2c <spi_rw>
 801024e:	4603      	mov	r3, r0
 8010250:	461a      	mov	r2, r3
 8010252:	f104 0310 	add.w	r3, r4, #16
 8010256:	443b      	add	r3, r7
 8010258:	f803 2c08 	strb.w	r2, [r3, #-8]
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	3301      	adds	r3, #1
 8010260:	73fb      	strb	r3, [r7, #15]
 8010262:	7bfb      	ldrb	r3, [r7, #15]
 8010264:	2b03      	cmp	r3, #3
 8010266:	d9ee      	bls.n	8010246 <USER_SPI_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8010268:	7a3b      	ldrb	r3, [r7, #8]
 801026a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <USER_SPI_initialize+0xe2>
 8010272:	230c      	movs	r3, #12
 8010274:	e000      	b.n	8010278 <USER_SPI_initialize+0xe4>
 8010276:	2304      	movs	r3, #4
 8010278:	737b      	strb	r3, [r7, #13]
 801027a:	e022      	b.n	80102c2 <USER_SPI_initialize+0x12e>
			}
		}
		else
		{
			// SDSC or MMC
			if(send_cmd(ACMD41, 0) <= 0x01)
 801027c:	2100      	movs	r1, #0
 801027e:	20e9      	movs	r0, #233	@ 0xe9
 8010280:	f7ff ff18 	bl	80100b4 <send_cmd>
 8010284:	4603      	mov	r3, r0
 8010286:	2b01      	cmp	r3, #1
 8010288:	d804      	bhi.n	8010294 <USER_SPI_initialize+0x100>
			{
				// SDSC
				ty = CT_SD1;
 801028a:	2302      	movs	r3, #2
 801028c:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41;
 801028e:	23e9      	movs	r3, #233	@ 0xe9
 8010290:	73bb      	strb	r3, [r7, #14]
 8010292:	e003      	b.n	801029c <USER_SPI_initialize+0x108>
			}
			else
			{
				// MMC
				ty = CT_MMC;
 8010294:	2301      	movs	r3, #1
 8010296:	737b      	strb	r3, [r7, #13]
				cmd = CMD1;
 8010298:	2341      	movs	r3, #65	@ 0x41
 801029a:	73bb      	strb	r3, [r7, #14]
			}

			while(send_cmd(cmd, 0)); // Wait for leaving idle state
 801029c:	bf00      	nop
 801029e:	7bbb      	ldrb	r3, [r7, #14]
 80102a0:	2100      	movs	r1, #0
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff ff06 	bl	80100b4 <send_cmd>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d1f7      	bne.n	801029e <USER_SPI_initialize+0x10a>

			if(send_cmd(CMD16, 512) != 0)	// Set R/W block length to 512
 80102ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80102b2:	2050      	movs	r0, #80	@ 0x50
 80102b4:	f7ff fefe 	bl	80100b4 <send_cmd>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <USER_SPI_initialize+0x12e>
				ty = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 80102c2:	4a1b      	ldr	r2, [pc, #108]	@ (8010330 <USER_SPI_initialize+0x19c>)
 80102c4:	7b7b      	ldrb	r3, [r7, #13]
 80102c6:	7013      	strb	r3, [r2, #0]
	DESELECT();
 80102c8:	4b18      	ldr	r3, [pc, #96]	@ (801032c <USER_SPI_initialize+0x198>)
 80102ca:	2201      	movs	r2, #1
 80102cc:	619a      	str	r2, [r3, #24]

	if(ty)
 80102ce:	7b7b      	ldrb	r3, [r7, #13]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00b      	beq.n	80102ec <USER_SPI_initialize+0x158>
	{
		// Initialization succeeded
		Stat &= ~STA_NOINIT; // Clear STA_NOINIT
 80102d4:	4b17      	ldr	r3, [pc, #92]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	f023 0301 	bic.w	r3, r3, #1
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	4b14      	ldr	r3, [pc, #80]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 80102e2:	701a      	strb	r2, [r3, #0]
		set_sd_interface_speed(SD_MAX_SPEED); // быстрое SPI
 80102e4:	2001      	movs	r0, #1
 80102e6:	f7ff fded 	bl	800fec4 <set_sd_interface_speed>
 80102ea:	e017      	b.n	801031c <USER_SPI_initialize+0x188>
	}
	else
	{
		// Initialization failed
		if(!(Stat & STA_NOINIT))
 80102ec:	4b11      	ldr	r3, [pc, #68]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d108      	bne.n	801030c <USER_SPI_initialize+0x178>
		{
			SELECT();
 80102fa:	4b0c      	ldr	r3, [pc, #48]	@ (801032c <USER_SPI_initialize+0x198>)
 80102fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010300:	619a      	str	r2, [r3, #24]
			wait_ready();
 8010302:	f7ff fec3 	bl	801008c <wait_ready>
			DESELECT();
 8010306:	4b09      	ldr	r3, [pc, #36]	@ (801032c <USER_SPI_initialize+0x198>)
 8010308:	2201      	movs	r2, #1
 801030a:	619a      	str	r2, [r3, #24]
		}

		Stat |= STA_NOINIT;
 801030c:	4b09      	ldr	r3, [pc, #36]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	b2db      	uxtb	r3, r3
 8010312:	f043 0301 	orr.w	r3, r3, #1
 8010316:	b2da      	uxtb	r2, r3
 8010318:	4b06      	ldr	r3, [pc, #24]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 801031a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 801031c:	4b05      	ldr	r3, [pc, #20]	@ (8010334 <USER_SPI_initialize+0x1a0>)
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	b2db      	uxtb	r3, r3
}
 8010322:	4618      	mov	r0, r3
 8010324:	3714      	adds	r7, #20
 8010326:	46bd      	mov	sp, r7
 8010328:	bd90      	pop	{r4, r7, pc}
 801032a:	bf00      	nop
 801032c:	40020400 	.word	0x40020400
 8010330:	200013d4 	.word	0x200013d4
 8010334:	20000158 	.word	0x20000158

08010338 <USER_SPI_status>:

DSTATUS USER_SPI_status(BYTE drv)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	71fb      	strb	r3, [r7, #7]
	return Stat;
 8010342:	4b04      	ldr	r3, [pc, #16]	@ (8010354 <USER_SPI_status+0x1c>)
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	b2db      	uxtb	r3, r3
}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	20000158 	.word	0x20000158

08010358 <rcvr_datablock>:

// NOTE: btr must be multiple of 4
static uint8_t rcvr_datablock(BYTE *buff, UINT btr)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
	BYTE token;

	do {
		token = rcvr_spi();
 8010362:	20ff      	movs	r0, #255	@ 0xff
 8010364:	f7ff fde2 	bl	800ff2c <spi_rw>
 8010368:	4603      	mov	r3, r0
 801036a:	73fb      	strb	r3, [r7, #15]
	} while (token == 0xFF); // wait for data packet in timeout of 100ms
 801036c:	7bfb      	ldrb	r3, [r7, #15]
 801036e:	2bff      	cmp	r3, #255	@ 0xff
 8010370:	d0f7      	beq.n	8010362 <rcvr_datablock+0xa>
	if(token != 0xFE) return 0;	// not a valid data token
 8010372:	7bfb      	ldrb	r3, [r7, #15]
 8010374:	2bfe      	cmp	r3, #254	@ 0xfe
 8010376:	d001      	beq.n	801037c <rcvr_datablock+0x24>
 8010378:	2300      	movs	r3, #0
 801037a:	e00d      	b.n	8010398 <rcvr_datablock+0x40>

#ifdef SD_USE_DMA
	SPI_DMA_TransmitReceive(SPI_Transfer_Receive, buff, btr);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	b29b      	uxth	r3, r3
 8010380:	461a      	mov	r2, r3
 8010382:	6879      	ldr	r1, [r7, #4]
 8010384:	2000      	movs	r0, #0
 8010386:	f7ff fe0b 	bl	800ffa0 <SPI_DMA_TransmitReceive>
			rcvr_spi_m(buff++);
		} while (btr -= 4);
	}
#endif

	rcvr_spi(); // discard CRC
 801038a:	20ff      	movs	r0, #255	@ 0xff
 801038c:	f7ff fdce 	bl	800ff2c <spi_rw>
	rcvr_spi();
 8010390:	20ff      	movs	r0, #255	@ 0xff
 8010392:	f7ff fdcb 	bl	800ff2c <spi_rw>
	return 1;
 8010396:	2301      	movs	r3, #1
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <USER_SPI_read>:

DRESULT USER_SPI_read(BYTE drv, BYTE *buff, DWORD sector, UINT count)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60b9      	str	r1, [r7, #8]
 80103a8:	607a      	str	r2, [r7, #4]
 80103aa:	603b      	str	r3, [r7, #0]
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]
	if(!count) return RES_PARERR;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <USER_SPI_read+0x1a>
 80103b6:	2304      	movs	r3, #4
 80103b8:	e04e      	b.n	8010458 <USER_SPI_read+0xb8>
	if(Stat & STA_NOINIT) return RES_NOTRDY;
 80103ba:	4b29      	ldr	r3, [pc, #164]	@ (8010460 <USER_SPI_read+0xc0>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f003 0301 	and.w	r3, r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <USER_SPI_read+0x2c>
 80103c8:	2303      	movs	r3, #3
 80103ca:	e045      	b.n	8010458 <USER_SPI_read+0xb8>
	if(!(CardType & CT_BLOCK)) sector *= 512;	// Convert to byte address if needed
 80103cc:	4b25      	ldr	r3, [pc, #148]	@ (8010464 <USER_SPI_read+0xc4>)
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	f003 0308 	and.w	r3, r3, #8
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <USER_SPI_read+0x3e>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	025b      	lsls	r3, r3, #9
 80103dc:	607b      	str	r3, [r7, #4]

	if(1 == count)
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d111      	bne.n	8010408 <USER_SPI_read+0x68>
	{
		// CMD17 - READ_SINGLE_BLOCK
		if(0x00 == send_cmd(CMD17, sector))
 80103e4:	6879      	ldr	r1, [r7, #4]
 80103e6:	2051      	movs	r0, #81	@ 0x51
 80103e8:	f7ff fe64 	bl	80100b4 <send_cmd>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d129      	bne.n	8010446 <USER_SPI_read+0xa6>
		{
			if(rcvr_datablock(buff, 512)) count = 0;
 80103f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80103f6:	68b8      	ldr	r0, [r7, #8]
 80103f8:	f7ff ffae 	bl	8010358 <rcvr_datablock>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d021      	beq.n	8010446 <USER_SPI_read+0xa6>
 8010402:	2300      	movs	r3, #0
 8010404:	603b      	str	r3, [r7, #0]
 8010406:	e01e      	b.n	8010446 <USER_SPI_read+0xa6>
		}
	}
	else
	{
		// CMD18 - READ_MULTIPLE_BLOCK
		if(0x00 == send_cmd(CMD18, sector))
 8010408:	6879      	ldr	r1, [r7, #4]
 801040a:	2052      	movs	r0, #82	@ 0x52
 801040c:	f7ff fe52 	bl	80100b4 <send_cmd>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d117      	bne.n	8010446 <USER_SPI_read+0xa6>
		{
			do {
				if(!rcvr_datablock(buff, 512)) break;
 8010416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801041a:	68b8      	ldr	r0, [r7, #8]
 801041c:	f7ff ff9c 	bl	8010358 <rcvr_datablock>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00a      	beq.n	801043c <USER_SPI_read+0x9c>
				buff += 512;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801042c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	3b01      	subs	r3, #1
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1ed      	bne.n	8010416 <USER_SPI_read+0x76>
 801043a:	e000      	b.n	801043e <USER_SPI_read+0x9e>
				if(!rcvr_datablock(buff, 512)) break;
 801043c:	bf00      	nop
			send_cmd(CMD12, 0); // CMD12 - STOP_TRANSMISSION
 801043e:	2100      	movs	r1, #0
 8010440:	204c      	movs	r0, #76	@ 0x4c
 8010442:	f7ff fe37 	bl	80100b4 <send_cmd>
		}
	}
	DESELECT();
 8010446:	4b08      	ldr	r3, [pc, #32]	@ (8010468 <USER_SPI_read+0xc8>)
 8010448:	2201      	movs	r2, #1
 801044a:	619a      	str	r2, [r3, #24]

	return count ? RES_ERROR : RES_OK;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bf14      	ite	ne
 8010452:	2301      	movne	r3, #1
 8010454:	2300      	moveq	r3, #0
 8010456:	b2db      	uxtb	r3, r3
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20000158 	.word	0x20000158
 8010464:	200013d4 	.word	0x200013d4
 8010468:	40020400 	.word	0x40020400

0801046c <xmit_datablock>:

#if _FS_READONLY == 0
// token - Data/Stop token
static uint8_t xmit_datablock(const BYTE *buff, BYTE token)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	70fb      	strb	r3, [r7, #3]
	BYTE resp;
#ifndef SD_USE_DMA
	BYTE wc;
#endif

	if(0xFF != wait_ready()) return 0;
 8010478:	f7ff fe08 	bl	801008c <wait_ready>
 801047c:	4603      	mov	r3, r0
 801047e:	2bff      	cmp	r3, #255	@ 0xff
 8010480:	d001      	beq.n	8010486 <xmit_datablock+0x1a>
 8010482:	2300      	movs	r3, #0
 8010484:	e01f      	b.n	80104c6 <xmit_datablock+0x5a>
	xmit_spi(token); // transmit Data token
 8010486:	78fb      	ldrb	r3, [r7, #3]
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fd4f 	bl	800ff2c <spi_rw>

	if(0xFD != token) // Is data token
 801048e:	78fb      	ldrb	r3, [r7, #3]
 8010490:	2bfd      	cmp	r3, #253	@ 0xfd
 8010492:	d017      	beq.n	80104c4 <xmit_datablock+0x58>
	{
		// transmit the 512 byte data block to MMC
#ifdef SD_USE_DMA
		SPI_DMA_TransmitReceive(SPI_Transfer_Transmit, buff, 512);
 8010494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	2001      	movs	r0, #1
 801049c:	f7ff fd80 	bl	800ffa0 <SPI_DMA_TransmitReceive>
			xmit_spi(*buff++);
		} while (--wc);
#endif

		// CRC (Dummy)
		xmit_spi(0xFF);
 80104a0:	20ff      	movs	r0, #255	@ 0xff
 80104a2:	f7ff fd43 	bl	800ff2c <spi_rw>
		xmit_spi(0xFF);
 80104a6:	20ff      	movs	r0, #255	@ 0xff
 80104a8:	f7ff fd40 	bl	800ff2c <spi_rw>

		// Receive data response
		resp = rcvr_spi();
 80104ac:	20ff      	movs	r0, #255	@ 0xff
 80104ae:	f7ff fd3d 	bl	800ff2c <spi_rw>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
		if((resp & 0x1F) != 0x05) // If not accepted, return with error
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	f003 031f 	and.w	r3, r3, #31
 80104bc:	2b05      	cmp	r3, #5
 80104be:	d001      	beq.n	80104c4 <xmit_datablock+0x58>
			return 0;
 80104c0:	2300      	movs	r3, #0
 80104c2:	e000      	b.n	80104c6 <xmit_datablock+0x5a>
	}

	return 1;
 80104c4:	2301      	movs	r3, #1
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <USER_SPI_write>:

DRESULT USER_SPI_write(BYTE drv, const BYTE *buff, DWORD sector, UINT count)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	607a      	str	r2, [r7, #4]
 80104da:	603b      	str	r3, [r7, #0]
 80104dc:	4603      	mov	r3, r0
 80104de:	73fb      	strb	r3, [r7, #15]
	if(!count) return RES_PARERR;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <USER_SPI_write+0x1a>
 80104e6:	2304      	movs	r3, #4
 80104e8:	e064      	b.n	80105b4 <USER_SPI_write+0xe4>
	if(Stat & STA_NOINIT) return RES_NOTRDY;
 80104ea:	4b34      	ldr	r3, [pc, #208]	@ (80105bc <USER_SPI_write+0xec>)
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	f003 0301 	and.w	r3, r3, #1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d001      	beq.n	80104fc <USER_SPI_write+0x2c>
 80104f8:	2303      	movs	r3, #3
 80104fa:	e05b      	b.n	80105b4 <USER_SPI_write+0xe4>
	if(Stat & STA_PROTECT) return RES_WRPRT;
 80104fc:	4b2f      	ldr	r3, [pc, #188]	@ (80105bc <USER_SPI_write+0xec>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	b2db      	uxtb	r3, r3
 8010502:	f003 0304 	and.w	r3, r3, #4
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <USER_SPI_write+0x3e>
 801050a:	2302      	movs	r3, #2
 801050c:	e052      	b.n	80105b4 <USER_SPI_write+0xe4>
	if(!(CardType & CT_BLOCK)) sector *= 512;	// Convert to byte address if needed
 801050e:	4b2c      	ldr	r3, [pc, #176]	@ (80105c0 <USER_SPI_write+0xf0>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	f003 0308 	and.w	r3, r3, #8
 8010516:	2b00      	cmp	r3, #0
 8010518:	d102      	bne.n	8010520 <USER_SPI_write+0x50>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	025b      	lsls	r3, r3, #9
 801051e:	607b      	str	r3, [r7, #4]

	if(1 == count)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2b01      	cmp	r3, #1
 8010524:	d110      	bne.n	8010548 <USER_SPI_write+0x78>
	{
		// CMD24 - WRITE_BLOCK
		if((0x00 == send_cmd(CMD24, sector)) && xmit_datablock(buff, 0xFE)) count = 0;
 8010526:	6879      	ldr	r1, [r7, #4]
 8010528:	2058      	movs	r0, #88	@ 0x58
 801052a:	f7ff fdc3 	bl	80100b4 <send_cmd>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d136      	bne.n	80105a2 <USER_SPI_write+0xd2>
 8010534:	21fe      	movs	r1, #254	@ 0xfe
 8010536:	68b8      	ldr	r0, [r7, #8]
 8010538:	f7ff ff98 	bl	801046c <xmit_datablock>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02f      	beq.n	80105a2 <USER_SPI_write+0xd2>
 8010542:	2300      	movs	r3, #0
 8010544:	603b      	str	r3, [r7, #0]
 8010546:	e02c      	b.n	80105a2 <USER_SPI_write+0xd2>
	}
	else
	{
		// CMD25 - WRITE_MULTIPLE_BLOCK
		if(CardType & CT_SDC) send_cmd(ACMD23, count);
 8010548:	4b1d      	ldr	r3, [pc, #116]	@ (80105c0 <USER_SPI_write+0xf0>)
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	f003 0306 	and.w	r3, r3, #6
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <USER_SPI_write+0x8c>
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	20d7      	movs	r0, #215	@ 0xd7
 8010558:	f7ff fdac 	bl	80100b4 <send_cmd>
		if(0x00 == send_cmd(CMD25, sector))
 801055c:	6879      	ldr	r1, [r7, #4]
 801055e:	2059      	movs	r0, #89	@ 0x59
 8010560:	f7ff fda8 	bl	80100b4 <send_cmd>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d11b      	bne.n	80105a2 <USER_SPI_write+0xd2>
		{
			do {
				if(!xmit_datablock(buff, 0xFC)) break;
 801056a:	21fc      	movs	r1, #252	@ 0xfc
 801056c:	68b8      	ldr	r0, [r7, #8]
 801056e:	f7ff ff7d 	bl	801046c <xmit_datablock>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00a      	beq.n	801058e <USER_SPI_write+0xbe>
				buff += 512;
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801057e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	3b01      	subs	r3, #1
 8010584:	603b      	str	r3, [r7, #0]
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d1ee      	bne.n	801056a <USER_SPI_write+0x9a>
 801058c:	e000      	b.n	8010590 <USER_SPI_write+0xc0>
				if(!xmit_datablock(buff, 0xFC)) break;
 801058e:	bf00      	nop

			if(!xmit_datablock(0, 0xFD)) // STOP_TRAN token
 8010590:	21fd      	movs	r1, #253	@ 0xfd
 8010592:	2000      	movs	r0, #0
 8010594:	f7ff ff6a 	bl	801046c <xmit_datablock>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <USER_SPI_write+0xd2>
				count = 1;
 801059e:	2301      	movs	r3, #1
 80105a0:	603b      	str	r3, [r7, #0]
		}
	}
	DESELECT();
 80105a2:	4b08      	ldr	r3, [pc, #32]	@ (80105c4 <USER_SPI_write+0xf4>)
 80105a4:	2201      	movs	r2, #1
 80105a6:	619a      	str	r2, [r3, #24]

	return count ? RES_ERROR : RES_OK;
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	bf14      	ite	ne
 80105ae:	2301      	movne	r3, #1
 80105b0:	2300      	moveq	r3, #0
 80105b2:	b2db      	uxtb	r3, r3
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	20000158 	.word	0x20000158
 80105c0:	200013d4 	.word	0x200013d4
 80105c4:	40020400 	.word	0x40020400

080105c8 <USER_SPI_ioctl>:
#endif /* _READONLY == 0 */

DRESULT USER_SPI_ioctl(BYTE drv, BYTE ctrl,	void *buff)
{
 80105c8:	b590      	push	{r4, r7, lr}
 80105ca:	b08b      	sub	sp, #44	@ 0x2c
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	4603      	mov	r3, r0
 80105d0:	603a      	str	r2, [r7, #0]
 80105d2:	71fb      	strb	r3, [r7, #7]
 80105d4:	460b      	mov	r3, r1
 80105d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BYTE n, csd[16], *ptr = buff;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	623b      	str	r3, [r7, #32]
	WORD csize;

	if(Stat & STA_NOINIT) return RES_NOTRDY;
 80105e2:	4bc0      	ldr	r3, [pc, #768]	@ (80108e4 <USER_SPI_ioctl+0x31c>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <USER_SPI_ioctl+0x2c>
 80105f0:	2303      	movs	r3, #3
 80105f2:	e185      	b.n	8010900 <USER_SPI_ioctl+0x338>

	switch(ctrl)
 80105f4:	79bb      	ldrb	r3, [r7, #6]
 80105f6:	2b0e      	cmp	r3, #14
 80105f8:	f200 8167 	bhi.w	80108ca <USER_SPI_ioctl+0x302>
 80105fc:	a201      	add	r2, pc, #4	@ (adr r2, 8010604 <USER_SPI_ioctl+0x3c>)
 80105fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010602:	bf00      	nop
 8010604:	08010641 	.word	0x08010641
 8010608:	08010655 	.word	0x08010655
 801060c:	08010703 	.word	0x08010703
 8010610:	08010713 	.word	0x08010713
 8010614:	080108cb 	.word	0x080108cb
 8010618:	080108cb 	.word	0x080108cb
 801061c:	080108cb 	.word	0x080108cb
 8010620:	080108cb 	.word	0x080108cb
 8010624:	080108cb 	.word	0x080108cb
 8010628:	080108cb 	.word	0x080108cb
 801062c:	08010809 	.word	0x08010809
 8010630:	08010819 	.word	0x08010819
 8010634:	0801083d 	.word	0x0801083d
 8010638:	08010861 	.word	0x08010861
 801063c:	080108a1 	.word	0x080108a1
	{
		case CTRL_SYNC:
			// Make sure that no pending write process
			if(0xFF == wait_ready()) res = RES_OK;
 8010640:	f7ff fd24 	bl	801008c <wait_ready>
 8010644:	4603      	mov	r3, r0
 8010646:	2bff      	cmp	r3, #255	@ 0xff
 8010648:	f040 8143 	bne.w	80108d2 <USER_SPI_ioctl+0x30a>
 801064c:	2300      	movs	r3, #0
 801064e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8010652:	e13e      	b.n	80108d2 <USER_SPI_ioctl+0x30a>

		case GET_SECTOR_COUNT:
			// Get number of sectors on the disk (DWORD)
			if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(csd, 16))
 8010654:	2100      	movs	r1, #0
 8010656:	2049      	movs	r0, #73	@ 0x49
 8010658:	f7ff fd2c 	bl	80100b4 <send_cmd>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	f040 8139 	bne.w	80108d6 <USER_SPI_ioctl+0x30e>
 8010664:	f107 030c 	add.w	r3, r7, #12
 8010668:	2110      	movs	r1, #16
 801066a:	4618      	mov	r0, r3
 801066c:	f7ff fe74 	bl	8010358 <rcvr_datablock>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 812f 	beq.w	80108d6 <USER_SPI_ioctl+0x30e>
			{
				if((csd[0] >> 6) == 1)
 8010678:	7b3b      	ldrb	r3, [r7, #12]
 801067a:	099b      	lsrs	r3, r3, #6
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b01      	cmp	r3, #1
 8010680:	d10d      	bne.n	801069e <USER_SPI_ioctl+0xd6>
				{
					// SDC version 2.00
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8010682:	7d7b      	ldrb	r3, [r7, #21]
 8010684:	461a      	mov	r2, r3
 8010686:	7d3b      	ldrb	r3, [r7, #20]
 8010688:	021b      	lsls	r3, r3, #8
 801068a:	b29b      	uxth	r3, r3
 801068c:	4413      	add	r3, r2
 801068e:	b29b      	uxth	r3, r3
 8010690:	3301      	adds	r3, #1
 8010692:	83fb      	strh	r3, [r7, #30]
					*(DWORD*)buff = (DWORD)csize << 10;
 8010694:	8bfb      	ldrh	r3, [r7, #30]
 8010696:	029a      	lsls	r2, r3, #10
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	e02d      	b.n	80106fa <USER_SPI_ioctl+0x132>
				}
				else
				{
					// SDC version 1.XX or MMC
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801069e:	7c7b      	ldrb	r3, [r7, #17]
 80106a0:	f003 030f 	and.w	r3, r3, #15
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	7dbb      	ldrb	r3, [r7, #22]
 80106a8:	09db      	lsrs	r3, r3, #7
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	4413      	add	r3, r2
 80106ae:	b2da      	uxtb	r2, r3
 80106b0:	7d7b      	ldrb	r3, [r7, #21]
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	f003 0306 	and.w	r3, r3, #6
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	4413      	add	r3, r2
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	3302      	adds	r3, #2
 80106c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80106c6:	7d3b      	ldrb	r3, [r7, #20]
 80106c8:	099b      	lsrs	r3, r3, #6
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	461a      	mov	r2, r3
 80106ce:	7cfb      	ldrb	r3, [r7, #19]
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	4413      	add	r3, r2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	7cbb      	ldrb	r3, [r7, #18]
 80106da:	029b      	lsls	r3, r3, #10
 80106dc:	b29b      	uxth	r3, r3
 80106de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4413      	add	r3, r2
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	3301      	adds	r3, #1
 80106ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*)buff = (DWORD)csize << (n - 9);
 80106ec:	8bfa      	ldrh	r2, [r7, #30]
 80106ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106f2:	3b09      	subs	r3, #9
 80106f4:	409a      	lsls	r2, r3
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 8010700:	e0e9      	b.n	80108d6 <USER_SPI_ioctl+0x30e>

		case GET_SECTOR_SIZE:
			// Get R/W sector size (WORD)
			*(WORD*)buff = 512;
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010708:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 801070a:	2300      	movs	r3, #0
 801070c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8010710:	e0f1      	b.n	80108f6 <USER_SPI_ioctl+0x32e>

		case GET_BLOCK_SIZE:
			// Get erase block size in unit of sector (DWORD)
			if(CardType & CT_SD2)
 8010712:	4b75      	ldr	r3, [pc, #468]	@ (80108e8 <USER_SPI_ioctl+0x320>)
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	f003 0304 	and.w	r3, r3, #4
 801071a:	2b00      	cmp	r3, #0
 801071c:	d031      	beq.n	8010782 <USER_SPI_ioctl+0x1ba>
			{
				// SDC version 2.00
				if(0x00 == send_cmd(ACMD13, 0))
 801071e:	2100      	movs	r1, #0
 8010720:	20cd      	movs	r0, #205	@ 0xcd
 8010722:	f7ff fcc7 	bl	80100b4 <send_cmd>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	f040 80d6 	bne.w	80108da <USER_SPI_ioctl+0x312>
				{
					// Read SD status
					rcvr_spi();
 801072e:	20ff      	movs	r0, #255	@ 0xff
 8010730:	f7ff fbfc 	bl	800ff2c <spi_rw>
					if(rcvr_datablock(csd, 16))
 8010734:	f107 030c 	add.w	r3, r7, #12
 8010738:	2110      	movs	r1, #16
 801073a:	4618      	mov	r0, r3
 801073c:	f7ff fe0c 	bl	8010358 <rcvr_datablock>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 80c9 	beq.w	80108da <USER_SPI_ioctl+0x312>
					{
						// Read partial block
						for (n = 64 - 16; n; n--) rcvr_spi();	// Purge trailing data
 8010748:	2330      	movs	r3, #48	@ 0x30
 801074a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801074e:	e007      	b.n	8010760 <USER_SPI_ioctl+0x198>
 8010750:	20ff      	movs	r0, #255	@ 0xff
 8010752:	f7ff fbeb 	bl	800ff2c <spi_rw>
 8010756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801075a:	3b01      	subs	r3, #1
 801075c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010764:	2b00      	cmp	r3, #0
 8010766:	d1f3      	bne.n	8010750 <USER_SPI_ioctl+0x188>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010768:	7dbb      	ldrb	r3, [r7, #22]
 801076a:	091b      	lsrs	r3, r3, #4
 801076c:	b2db      	uxtb	r3, r3
 801076e:	461a      	mov	r2, r3
 8010770:	2310      	movs	r3, #16
 8010772:	fa03 f202 	lsl.w	r2, r3, r2
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	601a      	str	r2, [r3, #0]
						res = RES_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
		break;
 8010780:	e0ab      	b.n	80108da <USER_SPI_ioctl+0x312>
				if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(csd, 16))
 8010782:	2100      	movs	r1, #0
 8010784:	2049      	movs	r0, #73	@ 0x49
 8010786:	f7ff fc95 	bl	80100b4 <send_cmd>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	f040 80a4 	bne.w	80108da <USER_SPI_ioctl+0x312>
 8010792:	f107 030c 	add.w	r3, r7, #12
 8010796:	2110      	movs	r1, #16
 8010798:	4618      	mov	r0, r3
 801079a:	f7ff fddd 	bl	8010358 <rcvr_datablock>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f000 809a 	beq.w	80108da <USER_SPI_ioctl+0x312>
					if(CardType & CT_SD1)
 80107a6:	4b50      	ldr	r3, [pc, #320]	@ (80108e8 <USER_SPI_ioctl+0x320>)
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	f003 0302 	and.w	r3, r3, #2
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d012      	beq.n	80107d8 <USER_SPI_ioctl+0x210>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80107b2:	7dbb      	ldrb	r3, [r7, #22]
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80107ba:	7dfa      	ldrb	r2, [r7, #23]
 80107bc:	09d2      	lsrs	r2, r2, #7
 80107be:	b2d2      	uxtb	r2, r2
 80107c0:	4413      	add	r3, r2
 80107c2:	1c5a      	adds	r2, r3, #1
 80107c4:	7e7b      	ldrb	r3, [r7, #25]
 80107c6:	099b      	lsrs	r3, r3, #6
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	3b01      	subs	r3, #1
 80107cc:	fa02 f303 	lsl.w	r3, r2, r3
 80107d0:	461a      	mov	r2, r3
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	e013      	b.n	8010800 <USER_SPI_ioctl+0x238>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80107d8:	7dbb      	ldrb	r3, [r7, #22]
 80107da:	109b      	asrs	r3, r3, #2
 80107dc:	b29b      	uxth	r3, r3
 80107de:	f003 031f 	and.w	r3, r3, #31
 80107e2:	3301      	adds	r3, #1
 80107e4:	7dfa      	ldrb	r2, [r7, #23]
 80107e6:	00d2      	lsls	r2, r2, #3
 80107e8:	f002 0218 	and.w	r2, r2, #24
 80107ec:	7df9      	ldrb	r1, [r7, #23]
 80107ee:	0949      	lsrs	r1, r1, #5
 80107f0:	b2c9      	uxtb	r1, r1
 80107f2:	440a      	add	r2, r1
 80107f4:	3201      	adds	r2, #1
 80107f6:	fb02 f303 	mul.w	r3, r2, r3
 80107fa:	461a      	mov	r2, r3
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8010806:	e068      	b.n	80108da <USER_SPI_ioctl+0x312>

		case MMC_GET_TYPE:
			// Get card type flags (1 byte)
			*ptr = CardType;
 8010808:	4b37      	ldr	r3, [pc, #220]	@ (80108e8 <USER_SPI_ioctl+0x320>)
 801080a:	781a      	ldrb	r2, [r3, #0]
 801080c:	6a3b      	ldr	r3, [r7, #32]
 801080e:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8010816:	e06e      	b.n	80108f6 <USER_SPI_ioctl+0x32e>

		case MMC_GET_CSD:
			// Receive CSD (CMD9) as a data block (16 bytes)
			if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(ptr, 16)) res = RES_OK;
 8010818:	2100      	movs	r1, #0
 801081a:	2049      	movs	r0, #73	@ 0x49
 801081c:	f7ff fc4a 	bl	80100b4 <send_cmd>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d15b      	bne.n	80108de <USER_SPI_ioctl+0x316>
 8010826:	2110      	movs	r1, #16
 8010828:	6a38      	ldr	r0, [r7, #32]
 801082a:	f7ff fd95 	bl	8010358 <rcvr_datablock>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d054      	beq.n	80108de <USER_SPI_ioctl+0x316>
 8010834:	2300      	movs	r3, #0
 8010836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 801083a:	e050      	b.n	80108de <USER_SPI_ioctl+0x316>

		case MMC_GET_CID:
			// Receive CID (CMD10) as a data block (16 bytes)
			if((0x00 == send_cmd(CMD10, 0)) && rcvr_datablock(ptr, 16))	res = RES_OK;
 801083c:	2100      	movs	r1, #0
 801083e:	204a      	movs	r0, #74	@ 0x4a
 8010840:	f7ff fc38 	bl	80100b4 <send_cmd>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d150      	bne.n	80108ec <USER_SPI_ioctl+0x324>
 801084a:	2110      	movs	r1, #16
 801084c:	6a38      	ldr	r0, [r7, #32]
 801084e:	f7ff fd83 	bl	8010358 <rcvr_datablock>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d049      	beq.n	80108ec <USER_SPI_ioctl+0x324>
 8010858:	2300      	movs	r3, #0
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 801085e:	e045      	b.n	80108ec <USER_SPI_ioctl+0x324>

		case MMC_GET_OCR:
			// Receive OCR (CMD58) as an R3 resp (4 bytes)
			if(0x00 == send_cmd(CMD58, 0))
 8010860:	2100      	movs	r1, #0
 8010862:	207a      	movs	r0, #122	@ 0x7a
 8010864:	f7ff fc26 	bl	80100b4 <send_cmd>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d140      	bne.n	80108f0 <USER_SPI_ioctl+0x328>
			{
				for(n=4; n; n--) *ptr++ = rcvr_spi();
 801086e:	2304      	movs	r3, #4
 8010870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010874:	e00c      	b.n	8010890 <USER_SPI_ioctl+0x2c8>
 8010876:	6a3c      	ldr	r4, [r7, #32]
 8010878:	1c63      	adds	r3, r4, #1
 801087a:	623b      	str	r3, [r7, #32]
 801087c:	20ff      	movs	r0, #255	@ 0xff
 801087e:	f7ff fb55 	bl	800ff2c <spi_rw>
 8010882:	4603      	mov	r3, r0
 8010884:	7023      	strb	r3, [r4, #0]
 8010886:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801088a:	3b01      	subs	r3, #1
 801088c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010890:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1ee      	bne.n	8010876 <USER_SPI_ioctl+0x2ae>
				res = RES_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 801089e:	e027      	b.n	80108f0 <USER_SPI_ioctl+0x328>

		case MMC_GET_SDSTAT:
			// Receive SD status (ACMD13) as a data block (64 bytes)
			if(0x00 == send_cmd(ACMD13, 0))
 80108a0:	2100      	movs	r1, #0
 80108a2:	20cd      	movs	r0, #205	@ 0xcd
 80108a4:	f7ff fc06 	bl	80100b4 <send_cmd>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d122      	bne.n	80108f4 <USER_SPI_ioctl+0x32c>
			{
				rcvr_spi();
 80108ae:	20ff      	movs	r0, #255	@ 0xff
 80108b0:	f7ff fb3c 	bl	800ff2c <spi_rw>
				if(rcvr_datablock(ptr, 64)) res = RES_OK;
 80108b4:	2140      	movs	r1, #64	@ 0x40
 80108b6:	6a38      	ldr	r0, [r7, #32]
 80108b8:	f7ff fd4e 	bl	8010358 <rcvr_datablock>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d018      	beq.n	80108f4 <USER_SPI_ioctl+0x32c>
 80108c2:	2300      	movs	r3, #0
 80108c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 80108c8:	e014      	b.n	80108f4 <USER_SPI_ioctl+0x32c>

		default:
			res = RES_PARERR;
 80108ca:	2304      	movs	r3, #4
 80108cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108d0:	e011      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108d2:	bf00      	nop
 80108d4:	e00f      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108d6:	bf00      	nop
 80108d8:	e00d      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108da:	bf00      	nop
 80108dc:	e00b      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108de:	bf00      	nop
 80108e0:	e009      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
 80108e2:	bf00      	nop
 80108e4:	20000158 	.word	0x20000158
 80108e8:	200013d4 	.word	0x200013d4
		break;
 80108ec:	bf00      	nop
 80108ee:	e002      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108f0:	bf00      	nop
 80108f2:	e000      	b.n	80108f6 <USER_SPI_ioctl+0x32e>
		break;
 80108f4:	bf00      	nop
	}

	DESELECT();
 80108f6:	4b04      	ldr	r3, [pc, #16]	@ (8010908 <USER_SPI_ioctl+0x340>)
 80108f8:	2201      	movs	r2, #1
 80108fa:	619a      	str	r2, [r3, #24]
	return res;
 80108fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010900:	4618      	mov	r0, r3
 8010902:	372c      	adds	r7, #44	@ 0x2c
 8010904:	46bd      	mov	sp, r7
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	40020400 	.word	0x40020400

0801090c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010916:	79fb      	ldrb	r3, [r7, #7]
 8010918:	4a08      	ldr	r2, [pc, #32]	@ (801093c <disk_status+0x30>)
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	4413      	add	r3, r2
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	79fa      	ldrb	r2, [r7, #7]
 8010924:	4905      	ldr	r1, [pc, #20]	@ (801093c <disk_status+0x30>)
 8010926:	440a      	add	r2, r1
 8010928:	7a12      	ldrb	r2, [r2, #8]
 801092a:	4610      	mov	r0, r2
 801092c:	4798      	blx	r3
 801092e:	4603      	mov	r3, r0
 8010930:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010932:	7bfb      	ldrb	r3, [r7, #15]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3710      	adds	r7, #16
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	20001630 	.word	0x20001630

08010940 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	4603      	mov	r3, r0
 8010948:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	4a0e      	ldr	r2, [pc, #56]	@ (801098c <disk_initialize+0x4c>)
 8010952:	5cd3      	ldrb	r3, [r2, r3]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d114      	bne.n	8010982 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	4a0c      	ldr	r2, [pc, #48]	@ (801098c <disk_initialize+0x4c>)
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	79fa      	ldrb	r2, [r7, #7]
 8010966:	4909      	ldr	r1, [pc, #36]	@ (801098c <disk_initialize+0x4c>)
 8010968:	440a      	add	r2, r1
 801096a:	7a12      	ldrb	r2, [r2, #8]
 801096c:	4610      	mov	r0, r2
 801096e:	4798      	blx	r3
 8010970:	4603      	mov	r3, r0
 8010972:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d103      	bne.n	8010982 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801097a:	79fb      	ldrb	r3, [r7, #7]
 801097c:	4a03      	ldr	r2, [pc, #12]	@ (801098c <disk_initialize+0x4c>)
 801097e:	2101      	movs	r1, #1
 8010980:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010982:	7bfb      	ldrb	r3, [r7, #15]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	20001630 	.word	0x20001630

08010990 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010990:	b590      	push	{r4, r7, lr}
 8010992:	b087      	sub	sp, #28
 8010994:	af00      	add	r7, sp, #0
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
 801099a:	603b      	str	r3, [r7, #0]
 801099c:	4603      	mov	r3, r0
 801099e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	4a0a      	ldr	r2, [pc, #40]	@ (80109cc <disk_read+0x3c>)
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	689c      	ldr	r4, [r3, #8]
 80109ac:	7bfb      	ldrb	r3, [r7, #15]
 80109ae:	4a07      	ldr	r2, [pc, #28]	@ (80109cc <disk_read+0x3c>)
 80109b0:	4413      	add	r3, r2
 80109b2:	7a18      	ldrb	r0, [r3, #8]
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	68b9      	ldr	r1, [r7, #8]
 80109ba:	47a0      	blx	r4
 80109bc:	4603      	mov	r3, r0
 80109be:	75fb      	strb	r3, [r7, #23]
  return res;
 80109c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	371c      	adds	r7, #28
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd90      	pop	{r4, r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20001630 	.word	0x20001630

080109d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80109d0:	b590      	push	{r4, r7, lr}
 80109d2:	b087      	sub	sp, #28
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	607a      	str	r2, [r7, #4]
 80109da:	603b      	str	r3, [r7, #0]
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	4a0a      	ldr	r2, [pc, #40]	@ (8010a0c <disk_write+0x3c>)
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	4413      	add	r3, r2
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	68dc      	ldr	r4, [r3, #12]
 80109ec:	7bfb      	ldrb	r3, [r7, #15]
 80109ee:	4a07      	ldr	r2, [pc, #28]	@ (8010a0c <disk_write+0x3c>)
 80109f0:	4413      	add	r3, r2
 80109f2:	7a18      	ldrb	r0, [r3, #8]
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	68b9      	ldr	r1, [r7, #8]
 80109fa:	47a0      	blx	r4
 80109fc:	4603      	mov	r3, r0
 80109fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	20001630 	.word	0x20001630

08010a10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	4603      	mov	r3, r0
 8010a18:	603a      	str	r2, [r7, #0]
 8010a1a:	71fb      	strb	r3, [r7, #7]
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a20:	79fb      	ldrb	r3, [r7, #7]
 8010a22:	4a09      	ldr	r2, [pc, #36]	@ (8010a48 <disk_ioctl+0x38>)
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	4413      	add	r3, r2
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	79fa      	ldrb	r2, [r7, #7]
 8010a2e:	4906      	ldr	r1, [pc, #24]	@ (8010a48 <disk_ioctl+0x38>)
 8010a30:	440a      	add	r2, r1
 8010a32:	7a10      	ldrb	r0, [r2, #8]
 8010a34:	79b9      	ldrb	r1, [r7, #6]
 8010a36:	683a      	ldr	r2, [r7, #0]
 8010a38:	4798      	blx	r3
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8010a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20001630 	.word	0x20001630

08010a4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	3301      	adds	r3, #1
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010a5c:	89fb      	ldrh	r3, [r7, #14]
 8010a5e:	021b      	lsls	r3, r3, #8
 8010a60:	b21a      	sxth	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	b21b      	sxth	r3, r3
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	b21b      	sxth	r3, r3
 8010a6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010a6e:	89fb      	ldrh	r3, [r7, #14]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3714      	adds	r7, #20
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3303      	adds	r3, #3
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	021b      	lsls	r3, r3, #8
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	3202      	adds	r2, #2
 8010a94:	7812      	ldrb	r2, [r2, #0]
 8010a96:	4313      	orrs	r3, r2
 8010a98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	021b      	lsls	r3, r3, #8
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	3201      	adds	r2, #1
 8010aa2:	7812      	ldrb	r2, [r2, #0]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	021b      	lsls	r3, r3, #8
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	7812      	ldrb	r2, [r2, #0]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	60fb      	str	r3, [r7, #12]
	return rv;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr

08010ac2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010ac2:	b480      	push	{r7}
 8010ac4:	b083      	sub	sp, #12
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	460b      	mov	r3, r1
 8010acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	887a      	ldrh	r2, [r7, #2]
 8010ad6:	b2d2      	uxtb	r2, r2
 8010ad8:	701a      	strb	r2, [r3, #0]
 8010ada:	887b      	ldrh	r3, [r7, #2]
 8010adc:	0a1b      	lsrs	r3, r3, #8
 8010ade:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	607a      	str	r2, [r7, #4]
 8010ae6:	887a      	ldrh	r2, [r7, #2]
 8010ae8:	b2d2      	uxtb	r2, r2
 8010aea:	701a      	strb	r2, [r3, #0]
}
 8010aec:	bf00      	nop
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	1c5a      	adds	r2, r3, #1
 8010b06:	607a      	str	r2, [r7, #4]
 8010b08:	683a      	ldr	r2, [r7, #0]
 8010b0a:	b2d2      	uxtb	r2, r2
 8010b0c:	701a      	strb	r2, [r3, #0]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	0a1b      	lsrs	r3, r3, #8
 8010b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	1c5a      	adds	r2, r3, #1
 8010b18:	607a      	str	r2, [r7, #4]
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	b2d2      	uxtb	r2, r2
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	0a1b      	lsrs	r3, r3, #8
 8010b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	607a      	str	r2, [r7, #4]
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	b2d2      	uxtb	r2, r2
 8010b30:	701a      	strb	r2, [r3, #0]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	0a1b      	lsrs	r3, r3, #8
 8010b36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	1c5a      	adds	r2, r3, #1
 8010b3c:	607a      	str	r2, [r7, #4]
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	b2d2      	uxtb	r2, r2
 8010b42:	701a      	strb	r2, [r3, #0]
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010b50:	b480      	push	{r7}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00d      	beq.n	8010b86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010b6a:	693a      	ldr	r2, [r7, #16]
 8010b6c:	1c53      	adds	r3, r2, #1
 8010b6e:	613b      	str	r3, [r7, #16]
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	1c59      	adds	r1, r3, #1
 8010b74:	6179      	str	r1, [r7, #20]
 8010b76:	7812      	ldrb	r2, [r2, #0]
 8010b78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	607b      	str	r3, [r7, #4]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d1f1      	bne.n	8010b6a <mem_cpy+0x1a>
	}
}
 8010b86:	bf00      	nop
 8010b88:	371c      	adds	r7, #28
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010b92:	b480      	push	{r7}
 8010b94:	b087      	sub	sp, #28
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	60f8      	str	r0, [r7, #12]
 8010b9a:	60b9      	str	r1, [r7, #8]
 8010b9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	617a      	str	r2, [r7, #20]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	b2d2      	uxtb	r2, r2
 8010bac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	607b      	str	r3, [r7, #4]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1f3      	bne.n	8010ba2 <mem_set+0x10>
}
 8010bba:	bf00      	nop
 8010bbc:	bf00      	nop
 8010bbe:	371c      	adds	r7, #28
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010bc8:	b480      	push	{r7}
 8010bca:	b089      	sub	sp, #36	@ 0x24
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	61fb      	str	r3, [r7, #28]
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	61fa      	str	r2, [r7, #28]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	61ba      	str	r2, [r7, #24]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	1acb      	subs	r3, r1, r3
 8010bf4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	607b      	str	r3, [r7, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d002      	beq.n	8010c08 <mem_cmp+0x40>
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0eb      	beq.n	8010be0 <mem_cmp+0x18>

	return r;
 8010c08:	697b      	ldr	r3, [r7, #20]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3724      	adds	r7, #36	@ 0x24
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010c16:	b480      	push	{r7}
 8010c18:	b083      	sub	sp, #12
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010c20:	e002      	b.n	8010c28 <chk_chr+0x12>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	3301      	adds	r3, #1
 8010c26:	607b      	str	r3, [r7, #4]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d005      	beq.n	8010c3c <chk_chr+0x26>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	461a      	mov	r2, r3
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d1f2      	bne.n	8010c22 <chk_chr+0xc>
	return *str;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	781b      	ldrb	r3, [r3, #0]
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010c56:	2300      	movs	r3, #0
 8010c58:	60bb      	str	r3, [r7, #8]
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	60fb      	str	r3, [r7, #12]
 8010c5e:	e029      	b.n	8010cb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010c60:	4a27      	ldr	r2, [pc, #156]	@ (8010d00 <chk_lock+0xb4>)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	011b      	lsls	r3, r3, #4
 8010c66:	4413      	add	r3, r2
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d01d      	beq.n	8010caa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010c6e:	4a24      	ldr	r2, [pc, #144]	@ (8010d00 <chk_lock+0xb4>)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	4413      	add	r3, r2
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d116      	bne.n	8010cae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010c80:	4a1f      	ldr	r2, [pc, #124]	@ (8010d00 <chk_lock+0xb4>)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	011b      	lsls	r3, r3, #4
 8010c86:	4413      	add	r3, r2
 8010c88:	3304      	adds	r3, #4
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d10c      	bne.n	8010cae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010c94:	4a1a      	ldr	r2, [pc, #104]	@ (8010d00 <chk_lock+0xb4>)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	4413      	add	r3, r2
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d102      	bne.n	8010cae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ca8:	e007      	b.n	8010cba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010caa:	2301      	movs	r3, #1
 8010cac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	60fb      	str	r3, [r7, #12]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2b04      	cmp	r3, #4
 8010cb8:	d9d2      	bls.n	8010c60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2b05      	cmp	r3, #5
 8010cbe:	d109      	bne.n	8010cd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d102      	bne.n	8010ccc <chk_lock+0x80>
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d101      	bne.n	8010cd0 <chk_lock+0x84>
 8010ccc:	2300      	movs	r3, #0
 8010cce:	e010      	b.n	8010cf2 <chk_lock+0xa6>
 8010cd0:	2312      	movs	r3, #18
 8010cd2:	e00e      	b.n	8010cf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d108      	bne.n	8010cec <chk_lock+0xa0>
 8010cda:	4a09      	ldr	r2, [pc, #36]	@ (8010d00 <chk_lock+0xb4>)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	011b      	lsls	r3, r3, #4
 8010ce0:	4413      	add	r3, r2
 8010ce2:	330c      	adds	r3, #12
 8010ce4:	881b      	ldrh	r3, [r3, #0]
 8010ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010cea:	d101      	bne.n	8010cf0 <chk_lock+0xa4>
 8010cec:	2310      	movs	r3, #16
 8010cee:	e000      	b.n	8010cf2 <chk_lock+0xa6>
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3714      	adds	r7, #20
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	200013e0 	.word	0x200013e0

08010d04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	607b      	str	r3, [r7, #4]
 8010d0e:	e002      	b.n	8010d16 <enq_lock+0x12>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3301      	adds	r3, #1
 8010d14:	607b      	str	r3, [r7, #4]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b04      	cmp	r3, #4
 8010d1a:	d806      	bhi.n	8010d2a <enq_lock+0x26>
 8010d1c:	4a09      	ldr	r2, [pc, #36]	@ (8010d44 <enq_lock+0x40>)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	4413      	add	r3, r2
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1f2      	bne.n	8010d10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b05      	cmp	r3, #5
 8010d2e:	bf14      	ite	ne
 8010d30:	2301      	movne	r3, #1
 8010d32:	2300      	moveq	r3, #0
 8010d34:	b2db      	uxtb	r3, r3
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	200013e0 	.word	0x200013e0

08010d48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010d52:	2300      	movs	r3, #0
 8010d54:	60fb      	str	r3, [r7, #12]
 8010d56:	e01f      	b.n	8010d98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010d58:	4a41      	ldr	r2, [pc, #260]	@ (8010e60 <inc_lock+0x118>)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	011b      	lsls	r3, r3, #4
 8010d5e:	4413      	add	r3, r2
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d113      	bne.n	8010d92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8010e60 <inc_lock+0x118>)
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	011b      	lsls	r3, r3, #4
 8010d70:	4413      	add	r3, r2
 8010d72:	3304      	adds	r3, #4
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d109      	bne.n	8010d92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010d7e:	4a38      	ldr	r2, [pc, #224]	@ (8010e60 <inc_lock+0x118>)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	011b      	lsls	r3, r3, #4
 8010d84:	4413      	add	r3, r2
 8010d86:	3308      	adds	r3, #8
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d006      	beq.n	8010da0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3301      	adds	r3, #1
 8010d96:	60fb      	str	r3, [r7, #12]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b04      	cmp	r3, #4
 8010d9c:	d9dc      	bls.n	8010d58 <inc_lock+0x10>
 8010d9e:	e000      	b.n	8010da2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010da0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b05      	cmp	r3, #5
 8010da6:	d132      	bne.n	8010e0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010da8:	2300      	movs	r3, #0
 8010daa:	60fb      	str	r3, [r7, #12]
 8010dac:	e002      	b.n	8010db4 <inc_lock+0x6c>
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	3301      	adds	r3, #1
 8010db2:	60fb      	str	r3, [r7, #12]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2b04      	cmp	r3, #4
 8010db8:	d806      	bhi.n	8010dc8 <inc_lock+0x80>
 8010dba:	4a29      	ldr	r2, [pc, #164]	@ (8010e60 <inc_lock+0x118>)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	011b      	lsls	r3, r3, #4
 8010dc0:	4413      	add	r3, r2
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d1f2      	bne.n	8010dae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2b05      	cmp	r3, #5
 8010dcc:	d101      	bne.n	8010dd2 <inc_lock+0x8a>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	e040      	b.n	8010e54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	4922      	ldr	r1, [pc, #136]	@ (8010e60 <inc_lock+0x118>)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	011b      	lsls	r3, r3, #4
 8010ddc:	440b      	add	r3, r1
 8010dde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	689a      	ldr	r2, [r3, #8]
 8010de4:	491e      	ldr	r1, [pc, #120]	@ (8010e60 <inc_lock+0x118>)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	011b      	lsls	r3, r3, #4
 8010dea:	440b      	add	r3, r1
 8010dec:	3304      	adds	r3, #4
 8010dee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	695a      	ldr	r2, [r3, #20]
 8010df4:	491a      	ldr	r1, [pc, #104]	@ (8010e60 <inc_lock+0x118>)
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	011b      	lsls	r3, r3, #4
 8010dfa:	440b      	add	r3, r1
 8010dfc:	3308      	adds	r3, #8
 8010dfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010e00:	4a17      	ldr	r2, [pc, #92]	@ (8010e60 <inc_lock+0x118>)
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	4413      	add	r3, r2
 8010e08:	330c      	adds	r3, #12
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d009      	beq.n	8010e28 <inc_lock+0xe0>
 8010e14:	4a12      	ldr	r2, [pc, #72]	@ (8010e60 <inc_lock+0x118>)
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	011b      	lsls	r3, r3, #4
 8010e1a:	4413      	add	r3, r2
 8010e1c:	330c      	adds	r3, #12
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d001      	beq.n	8010e28 <inc_lock+0xe0>
 8010e24:	2300      	movs	r3, #0
 8010e26:	e015      	b.n	8010e54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d108      	bne.n	8010e40 <inc_lock+0xf8>
 8010e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8010e60 <inc_lock+0x118>)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	011b      	lsls	r3, r3, #4
 8010e34:	4413      	add	r3, r2
 8010e36:	330c      	adds	r3, #12
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	e001      	b.n	8010e44 <inc_lock+0xfc>
 8010e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010e44:	4906      	ldr	r1, [pc, #24]	@ (8010e60 <inc_lock+0x118>)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	011b      	lsls	r3, r3, #4
 8010e4a:	440b      	add	r3, r1
 8010e4c:	330c      	adds	r3, #12
 8010e4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	3301      	adds	r3, #1
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr
 8010e60:	200013e0 	.word	0x200013e0

08010e64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	607b      	str	r3, [r7, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2b04      	cmp	r3, #4
 8010e76:	d825      	bhi.n	8010ec4 <dec_lock+0x60>
		n = Files[i].ctr;
 8010e78:	4a17      	ldr	r2, [pc, #92]	@ (8010ed8 <dec_lock+0x74>)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	011b      	lsls	r3, r3, #4
 8010e7e:	4413      	add	r3, r2
 8010e80:	330c      	adds	r3, #12
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010e86:	89fb      	ldrh	r3, [r7, #14]
 8010e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e8c:	d101      	bne.n	8010e92 <dec_lock+0x2e>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010e92:	89fb      	ldrh	r3, [r7, #14]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <dec_lock+0x3a>
 8010e98:	89fb      	ldrh	r3, [r7, #14]
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8010ed8 <dec_lock+0x74>)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	011b      	lsls	r3, r3, #4
 8010ea4:	4413      	add	r3, r2
 8010ea6:	330c      	adds	r3, #12
 8010ea8:	89fa      	ldrh	r2, [r7, #14]
 8010eaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010eac:	89fb      	ldrh	r3, [r7, #14]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d105      	bne.n	8010ebe <dec_lock+0x5a>
 8010eb2:	4a09      	ldr	r2, [pc, #36]	@ (8010ed8 <dec_lock+0x74>)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	4413      	add	r3, r2
 8010eba:	2200      	movs	r2, #0
 8010ebc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	737b      	strb	r3, [r7, #13]
 8010ec2:	e001      	b.n	8010ec8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010ec8:	7b7b      	ldrb	r3, [r7, #13]
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3714      	adds	r7, #20
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	200013e0 	.word	0x200013e0

08010edc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b085      	sub	sp, #20
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	e010      	b.n	8010f0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010eea:	4a0d      	ldr	r2, [pc, #52]	@ (8010f20 <clear_lock+0x44>)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	011b      	lsls	r3, r3, #4
 8010ef0:	4413      	add	r3, r2
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d105      	bne.n	8010f06 <clear_lock+0x2a>
 8010efa:	4a09      	ldr	r2, [pc, #36]	@ (8010f20 <clear_lock+0x44>)
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	011b      	lsls	r3, r3, #4
 8010f00:	4413      	add	r3, r2
 8010f02:	2200      	movs	r2, #0
 8010f04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	3301      	adds	r3, #1
 8010f0a:	60fb      	str	r3, [r7, #12]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d9eb      	bls.n	8010eea <clear_lock+0xe>
	}
}
 8010f12:	bf00      	nop
 8010f14:	bf00      	nop
 8010f16:	3714      	adds	r7, #20
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr
 8010f20:	200013e0 	.word	0x200013e0

08010f24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	78db      	ldrb	r3, [r3, #3]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d034      	beq.n	8010fa2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	7858      	ldrb	r0, [r3, #1]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010f48:	2301      	movs	r3, #1
 8010f4a:	697a      	ldr	r2, [r7, #20]
 8010f4c:	f7ff fd40 	bl	80109d0 <disk_write>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d002      	beq.n	8010f5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010f56:	2301      	movs	r3, #1
 8010f58:	73fb      	strb	r3, [r7, #15]
 8010f5a:	e022      	b.n	8010fa2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f66:	697a      	ldr	r2, [r7, #20]
 8010f68:	1ad2      	subs	r2, r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d217      	bcs.n	8010fa2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	789b      	ldrb	r3, [r3, #2]
 8010f76:	613b      	str	r3, [r7, #16]
 8010f78:	e010      	b.n	8010f9c <sync_window+0x78>
					wsect += fs->fsize;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	697a      	ldr	r2, [r7, #20]
 8010f80:	4413      	add	r3, r2
 8010f82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	7858      	ldrb	r0, [r3, #1]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010f8e:	2301      	movs	r3, #1
 8010f90:	697a      	ldr	r2, [r7, #20]
 8010f92:	f7ff fd1d 	bl	80109d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	613b      	str	r3, [r7, #16]
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d8eb      	bhi.n	8010f7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3718      	adds	r7, #24
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d01b      	beq.n	8010ffc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ff ffad 	bl	8010f24 <sync_window>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010fce:	7bfb      	ldrb	r3, [r7, #15]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d113      	bne.n	8010ffc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	7858      	ldrb	r0, [r3, #1]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010fde:	2301      	movs	r3, #1
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	f7ff fcd5 	bl	8010990 <disk_read>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010fec:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8010ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
	...

08011008 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff ff87 	bl	8010f24 <sync_window>
 8011016:	4603      	mov	r3, r0
 8011018:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801101a:	7bfb      	ldrb	r3, [r7, #15]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d158      	bne.n	80110d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b03      	cmp	r3, #3
 8011026:	d148      	bne.n	80110ba <sync_fs+0xb2>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	791b      	ldrb	r3, [r3, #4]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d144      	bne.n	80110ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	3334      	adds	r3, #52	@ 0x34
 8011034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011038:	2100      	movs	r1, #0
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fda9 	bl	8010b92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3334      	adds	r3, #52	@ 0x34
 8011044:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011048:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff fd38 	bl	8010ac2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	3334      	adds	r3, #52	@ 0x34
 8011056:	4921      	ldr	r1, [pc, #132]	@ (80110dc <sync_fs+0xd4>)
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fd4d 	bl	8010af8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	3334      	adds	r3, #52	@ 0x34
 8011062:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011066:	491e      	ldr	r1, [pc, #120]	@ (80110e0 <sync_fs+0xd8>)
 8011068:	4618      	mov	r0, r3
 801106a:	f7ff fd45 	bl	8010af8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	3334      	adds	r3, #52	@ 0x34
 8011072:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	695b      	ldr	r3, [r3, #20]
 801107a:	4619      	mov	r1, r3
 801107c:	4610      	mov	r0, r2
 801107e:	f7ff fd3b 	bl	8010af8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	3334      	adds	r3, #52	@ 0x34
 8011086:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	4619      	mov	r1, r3
 8011090:	4610      	mov	r0, r2
 8011092:	f7ff fd31 	bl	8010af8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6a1b      	ldr	r3, [r3, #32]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	7858      	ldrb	r0, [r3, #1]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110ae:	2301      	movs	r3, #1
 80110b0:	f7ff fc8e 	bl	80109d0 <disk_write>
			fs->fsi_flag = 0;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	785b      	ldrb	r3, [r3, #1]
 80110be:	2200      	movs	r2, #0
 80110c0:	2100      	movs	r1, #0
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7ff fca4 	bl	8010a10 <disk_ioctl>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <sync_fs+0xca>
 80110ce:	2301      	movs	r3, #1
 80110d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	41615252 	.word	0x41615252
 80110e0:	61417272 	.word	0x61417272

080110e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	3b02      	subs	r3, #2
 80110f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	699b      	ldr	r3, [r3, #24]
 80110f8:	3b02      	subs	r3, #2
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d301      	bcc.n	8011104 <clust2sect+0x20>
 8011100:	2300      	movs	r3, #0
 8011102:	e008      	b.n	8011116 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	895b      	ldrh	r3, [r3, #10]
 8011108:	461a      	mov	r2, r3
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	fb03 f202 	mul.w	r2, r3, r2
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011114:	4413      	add	r3, r2
}
 8011116:	4618      	mov	r0, r3
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b086      	sub	sp, #24
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d904      	bls.n	8011142 <get_fat+0x20>
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	699b      	ldr	r3, [r3, #24]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	429a      	cmp	r2, r3
 8011140:	d302      	bcc.n	8011148 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011142:	2301      	movs	r3, #1
 8011144:	617b      	str	r3, [r7, #20]
 8011146:	e08e      	b.n	8011266 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011148:	f04f 33ff 	mov.w	r3, #4294967295
 801114c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b03      	cmp	r3, #3
 8011154:	d061      	beq.n	801121a <get_fat+0xf8>
 8011156:	2b03      	cmp	r3, #3
 8011158:	dc7b      	bgt.n	8011252 <get_fat+0x130>
 801115a:	2b01      	cmp	r3, #1
 801115c:	d002      	beq.n	8011164 <get_fat+0x42>
 801115e:	2b02      	cmp	r3, #2
 8011160:	d041      	beq.n	80111e6 <get_fat+0xc4>
 8011162:	e076      	b.n	8011252 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	60fb      	str	r3, [r7, #12]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	085b      	lsrs	r3, r3, #1
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	4413      	add	r3, r2
 8011170:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	0a5b      	lsrs	r3, r3, #9
 801117a:	4413      	add	r3, r2
 801117c:	4619      	mov	r1, r3
 801117e:	6938      	ldr	r0, [r7, #16]
 8011180:	f7ff ff14 	bl	8010fac <move_window>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d166      	bne.n	8011258 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	1c5a      	adds	r2, r3, #1
 801118e:	60fa      	str	r2, [r7, #12]
 8011190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011194:	693a      	ldr	r2, [r7, #16]
 8011196:	4413      	add	r3, r2
 8011198:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801119c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	0a5b      	lsrs	r3, r3, #9
 80111a6:	4413      	add	r3, r2
 80111a8:	4619      	mov	r1, r3
 80111aa:	6938      	ldr	r0, [r7, #16]
 80111ac:	f7ff fefe 	bl	8010fac <move_window>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d152      	bne.n	801125c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	4413      	add	r3, r2
 80111c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80111c4:	021b      	lsls	r3, r3, #8
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d002      	beq.n	80111dc <get_fat+0xba>
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	091b      	lsrs	r3, r3, #4
 80111da:	e002      	b.n	80111e2 <get_fat+0xc0>
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80111e2:	617b      	str	r3, [r7, #20]
			break;
 80111e4:	e03f      	b.n	8011266 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	0a1b      	lsrs	r3, r3, #8
 80111ee:	4413      	add	r3, r2
 80111f0:	4619      	mov	r1, r3
 80111f2:	6938      	ldr	r0, [r7, #16]
 80111f4:	f7ff feda 	bl	8010fac <move_window>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d130      	bne.n	8011260 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801120c:	4413      	add	r3, r2
 801120e:	4618      	mov	r0, r3
 8011210:	f7ff fc1c 	bl	8010a4c <ld_word>
 8011214:	4603      	mov	r3, r0
 8011216:	617b      	str	r3, [r7, #20]
			break;
 8011218:	e025      	b.n	8011266 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	09db      	lsrs	r3, r3, #7
 8011222:	4413      	add	r3, r2
 8011224:	4619      	mov	r1, r3
 8011226:	6938      	ldr	r0, [r7, #16]
 8011228:	f7ff fec0 	bl	8010fac <move_window>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d118      	bne.n	8011264 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011240:	4413      	add	r3, r2
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fc1a 	bl	8010a7c <ld_dword>
 8011248:	4603      	mov	r3, r0
 801124a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801124e:	617b      	str	r3, [r7, #20]
			break;
 8011250:	e009      	b.n	8011266 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011252:	2301      	movs	r3, #1
 8011254:	617b      	str	r3, [r7, #20]
 8011256:	e006      	b.n	8011266 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011258:	bf00      	nop
 801125a:	e004      	b.n	8011266 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801125c:	bf00      	nop
 801125e:	e002      	b.n	8011266 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011260:	bf00      	nop
 8011262:	e000      	b.n	8011266 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011264:	bf00      	nop
		}
	}

	return val;
 8011266:	697b      	ldr	r3, [r7, #20]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011270:	b590      	push	{r4, r7, lr}
 8011272:	b089      	sub	sp, #36	@ 0x24
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801127c:	2302      	movs	r3, #2
 801127e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2b01      	cmp	r3, #1
 8011284:	f240 80d9 	bls.w	801143a <put_fat+0x1ca>
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	699b      	ldr	r3, [r3, #24]
 801128c:	68ba      	ldr	r2, [r7, #8]
 801128e:	429a      	cmp	r2, r3
 8011290:	f080 80d3 	bcs.w	801143a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b03      	cmp	r3, #3
 801129a:	f000 8096 	beq.w	80113ca <put_fat+0x15a>
 801129e:	2b03      	cmp	r3, #3
 80112a0:	f300 80cb 	bgt.w	801143a <put_fat+0x1ca>
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d002      	beq.n	80112ae <put_fat+0x3e>
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d06e      	beq.n	801138a <put_fat+0x11a>
 80112ac:	e0c5      	b.n	801143a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	61bb      	str	r3, [r7, #24]
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	085b      	lsrs	r3, r3, #1
 80112b6:	69ba      	ldr	r2, [r7, #24]
 80112b8:	4413      	add	r3, r2
 80112ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	0a5b      	lsrs	r3, r3, #9
 80112c4:	4413      	add	r3, r2
 80112c6:	4619      	mov	r1, r3
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f7ff fe6f 	bl	8010fac <move_window>
 80112ce:	4603      	mov	r3, r0
 80112d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80112d2:	7ffb      	ldrb	r3, [r7, #31]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f040 80a9 	bne.w	801142c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	1c59      	adds	r1, r3, #1
 80112e4:	61b9      	str	r1, [r7, #24]
 80112e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112ea:	4413      	add	r3, r2
 80112ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	f003 0301 	and.w	r3, r3, #1
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00d      	beq.n	8011314 <put_fat+0xa4>
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	b25b      	sxtb	r3, r3
 80112fe:	f003 030f 	and.w	r3, r3, #15
 8011302:	b25a      	sxtb	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	b2db      	uxtb	r3, r3
 8011308:	011b      	lsls	r3, r3, #4
 801130a:	b25b      	sxtb	r3, r3
 801130c:	4313      	orrs	r3, r2
 801130e:	b25b      	sxtb	r3, r3
 8011310:	b2db      	uxtb	r3, r3
 8011312:	e001      	b.n	8011318 <put_fat+0xa8>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	b2db      	uxtb	r3, r3
 8011318:	697a      	ldr	r2, [r7, #20]
 801131a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2201      	movs	r2, #1
 8011320:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	0a5b      	lsrs	r3, r3, #9
 801132a:	4413      	add	r3, r2
 801132c:	4619      	mov	r1, r3
 801132e:	68f8      	ldr	r0, [r7, #12]
 8011330:	f7ff fe3c 	bl	8010fac <move_window>
 8011334:	4603      	mov	r3, r0
 8011336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011338:	7ffb      	ldrb	r3, [r7, #31]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d178      	bne.n	8011430 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801134a:	4413      	add	r3, r2
 801134c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d003      	beq.n	8011360 <put_fat+0xf0>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	091b      	lsrs	r3, r3, #4
 801135c:	b2db      	uxtb	r3, r3
 801135e:	e00e      	b.n	801137e <put_fat+0x10e>
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	b25b      	sxtb	r3, r3
 8011366:	f023 030f 	bic.w	r3, r3, #15
 801136a:	b25a      	sxtb	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	0a1b      	lsrs	r3, r3, #8
 8011370:	b25b      	sxtb	r3, r3
 8011372:	f003 030f 	and.w	r3, r3, #15
 8011376:	b25b      	sxtb	r3, r3
 8011378:	4313      	orrs	r3, r2
 801137a:	b25b      	sxtb	r3, r3
 801137c:	b2db      	uxtb	r3, r3
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2201      	movs	r2, #1
 8011386:	70da      	strb	r2, [r3, #3]
			break;
 8011388:	e057      	b.n	801143a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	0a1b      	lsrs	r3, r3, #8
 8011392:	4413      	add	r3, r2
 8011394:	4619      	mov	r1, r3
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f7ff fe08 	bl	8010fac <move_window>
 801139c:	4603      	mov	r3, r0
 801139e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113a0:	7ffb      	ldrb	r3, [r7, #31]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d146      	bne.n	8011434 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	005b      	lsls	r3, r3, #1
 80113b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80113b4:	4413      	add	r3, r2
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	b292      	uxth	r2, r2
 80113ba:	4611      	mov	r1, r2
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fb80 	bl	8010ac2 <st_word>
			fs->wflag = 1;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2201      	movs	r2, #1
 80113c6:	70da      	strb	r2, [r3, #3]
			break;
 80113c8:	e037      	b.n	801143a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	09db      	lsrs	r3, r3, #7
 80113d2:	4413      	add	r3, r2
 80113d4:	4619      	mov	r1, r3
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f7ff fde8 	bl	8010fac <move_window>
 80113dc:	4603      	mov	r3, r0
 80113de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113e0:	7ffb      	ldrb	r3, [r7, #31]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d128      	bne.n	8011438 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80113fa:	4413      	add	r3, r2
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fb3d 	bl	8010a7c <ld_dword>
 8011402:	4603      	mov	r3, r0
 8011404:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011408:	4323      	orrs	r3, r4
 801140a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801141a:	4413      	add	r3, r2
 801141c:	6879      	ldr	r1, [r7, #4]
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff fb6a 	bl	8010af8 <st_dword>
			fs->wflag = 1;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2201      	movs	r2, #1
 8011428:	70da      	strb	r2, [r3, #3]
			break;
 801142a:	e006      	b.n	801143a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801142c:	bf00      	nop
 801142e:	e004      	b.n	801143a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011430:	bf00      	nop
 8011432:	e002      	b.n	801143a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011434:	bf00      	nop
 8011436:	e000      	b.n	801143a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011438:	bf00      	nop
		}
	}
	return res;
 801143a:	7ffb      	ldrb	r3, [r7, #31]
}
 801143c:	4618      	mov	r0, r3
 801143e:	3724      	adds	r7, #36	@ 0x24
 8011440:	46bd      	mov	sp, r7
 8011442:	bd90      	pop	{r4, r7, pc}

08011444 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011450:	2300      	movs	r3, #0
 8011452:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d904      	bls.n	801146a <remove_chain+0x26>
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	699b      	ldr	r3, [r3, #24]
 8011464:	68ba      	ldr	r2, [r7, #8]
 8011466:	429a      	cmp	r2, r3
 8011468:	d301      	bcc.n	801146e <remove_chain+0x2a>
 801146a:	2302      	movs	r3, #2
 801146c:	e04b      	b.n	8011506 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00c      	beq.n	801148e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011474:	f04f 32ff 	mov.w	r2, #4294967295
 8011478:	6879      	ldr	r1, [r7, #4]
 801147a:	69b8      	ldr	r0, [r7, #24]
 801147c:	f7ff fef8 	bl	8011270 <put_fat>
 8011480:	4603      	mov	r3, r0
 8011482:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011484:	7ffb      	ldrb	r3, [r7, #31]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d001      	beq.n	801148e <remove_chain+0x4a>
 801148a:	7ffb      	ldrb	r3, [r7, #31]
 801148c:	e03b      	b.n	8011506 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801148e:	68b9      	ldr	r1, [r7, #8]
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f7ff fe46 	bl	8011122 <get_fat>
 8011496:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d031      	beq.n	8011502 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d101      	bne.n	80114a8 <remove_chain+0x64>
 80114a4:	2302      	movs	r3, #2
 80114a6:	e02e      	b.n	8011506 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ae:	d101      	bne.n	80114b4 <remove_chain+0x70>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e028      	b.n	8011506 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80114b4:	2200      	movs	r2, #0
 80114b6:	68b9      	ldr	r1, [r7, #8]
 80114b8:	69b8      	ldr	r0, [r7, #24]
 80114ba:	f7ff fed9 	bl	8011270 <put_fat>
 80114be:	4603      	mov	r3, r0
 80114c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80114c2:	7ffb      	ldrb	r3, [r7, #31]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d001      	beq.n	80114cc <remove_chain+0x88>
 80114c8:	7ffb      	ldrb	r3, [r7, #31]
 80114ca:	e01c      	b.n	8011506 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	695a      	ldr	r2, [r3, #20]
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	3b02      	subs	r3, #2
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d20b      	bcs.n	80114f2 <remove_chain+0xae>
			fs->free_clst++;
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	1c5a      	adds	r2, r3, #1
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	791b      	ldrb	r3, [r3, #4]
 80114e8:	f043 0301 	orr.w	r3, r3, #1
 80114ec:	b2da      	uxtb	r2, r3
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d3c6      	bcc.n	801148e <remove_chain+0x4a>
 8011500:	e000      	b.n	8011504 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011502:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3720      	adds	r7, #32
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b088      	sub	sp, #32
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
 8011516:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10d      	bne.n	8011540 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d004      	beq.n	801153a <create_chain+0x2c>
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	699b      	ldr	r3, [r3, #24]
 8011534:	69ba      	ldr	r2, [r7, #24]
 8011536:	429a      	cmp	r2, r3
 8011538:	d31b      	bcc.n	8011572 <create_chain+0x64>
 801153a:	2301      	movs	r3, #1
 801153c:	61bb      	str	r3, [r7, #24]
 801153e:	e018      	b.n	8011572 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7ff fded 	bl	8011122 <get_fat>
 8011548:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d801      	bhi.n	8011554 <create_chain+0x46>
 8011550:	2301      	movs	r3, #1
 8011552:	e070      	b.n	8011636 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155a:	d101      	bne.n	8011560 <create_chain+0x52>
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	e06a      	b.n	8011636 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	68fa      	ldr	r2, [r7, #12]
 8011566:	429a      	cmp	r2, r3
 8011568:	d201      	bcs.n	801156e <create_chain+0x60>
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	e063      	b.n	8011636 <create_chain+0x128>
		scl = clst;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	3301      	adds	r3, #1
 801157a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	69fa      	ldr	r2, [r7, #28]
 8011582:	429a      	cmp	r2, r3
 8011584:	d307      	bcc.n	8011596 <create_chain+0x88>
				ncl = 2;
 8011586:	2302      	movs	r3, #2
 8011588:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801158a:	69fa      	ldr	r2, [r7, #28]
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	429a      	cmp	r2, r3
 8011590:	d901      	bls.n	8011596 <create_chain+0x88>
 8011592:	2300      	movs	r3, #0
 8011594:	e04f      	b.n	8011636 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011596:	69f9      	ldr	r1, [r7, #28]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff fdc2 	bl	8011122 <get_fat>
 801159e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00e      	beq.n	80115c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d003      	beq.n	80115b4 <create_chain+0xa6>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b2:	d101      	bne.n	80115b8 <create_chain+0xaa>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	e03e      	b.n	8011636 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80115b8:	69fa      	ldr	r2, [r7, #28]
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d1da      	bne.n	8011576 <create_chain+0x68>
 80115c0:	2300      	movs	r3, #0
 80115c2:	e038      	b.n	8011636 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80115c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80115c6:	f04f 32ff 	mov.w	r2, #4294967295
 80115ca:	69f9      	ldr	r1, [r7, #28]
 80115cc:	6938      	ldr	r0, [r7, #16]
 80115ce:	f7ff fe4f 	bl	8011270 <put_fat>
 80115d2:	4603      	mov	r3, r0
 80115d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80115d6:	7dfb      	ldrb	r3, [r7, #23]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d109      	bne.n	80115f0 <create_chain+0xe2>
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d006      	beq.n	80115f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80115e2:	69fa      	ldr	r2, [r7, #28]
 80115e4:	6839      	ldr	r1, [r7, #0]
 80115e6:	6938      	ldr	r0, [r7, #16]
 80115e8:	f7ff fe42 	bl	8011270 <put_fat>
 80115ec:	4603      	mov	r3, r0
 80115ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80115f0:	7dfb      	ldrb	r3, [r7, #23]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d116      	bne.n	8011624 <create_chain+0x116>
		fs->last_clst = ncl;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	69fa      	ldr	r2, [r7, #28]
 80115fa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	695a      	ldr	r2, [r3, #20]
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	3b02      	subs	r3, #2
 8011606:	429a      	cmp	r2, r3
 8011608:	d804      	bhi.n	8011614 <create_chain+0x106>
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	1e5a      	subs	r2, r3, #1
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	791b      	ldrb	r3, [r3, #4]
 8011618:	f043 0301 	orr.w	r3, r3, #1
 801161c:	b2da      	uxtb	r2, r3
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	711a      	strb	r2, [r3, #4]
 8011622:	e007      	b.n	8011634 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011624:	7dfb      	ldrb	r3, [r7, #23]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d102      	bne.n	8011630 <create_chain+0x122>
 801162a:	f04f 33ff 	mov.w	r3, #4294967295
 801162e:	e000      	b.n	8011632 <create_chain+0x124>
 8011630:	2301      	movs	r3, #1
 8011632:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011634:	69fb      	ldr	r3, [r7, #28]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3720      	adds	r7, #32
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801163e:	b480      	push	{r7}
 8011640:	b087      	sub	sp, #28
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011652:	3304      	adds	r3, #4
 8011654:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	0a5b      	lsrs	r3, r3, #9
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	8952      	ldrh	r2, [r2, #10]
 801165e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011662:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	1d1a      	adds	r2, r3, #4
 8011668:	613a      	str	r2, [r7, #16]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <clmt_clust+0x3a>
 8011674:	2300      	movs	r3, #0
 8011676:	e010      	b.n	801169a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	429a      	cmp	r2, r3
 801167e:	d307      	bcc.n	8011690 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011680:	697a      	ldr	r2, [r7, #20]
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	617b      	str	r3, [r7, #20]
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	3304      	adds	r3, #4
 801168c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801168e:	e7e9      	b.n	8011664 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011690:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	4413      	add	r3, r2
}
 801169a:	4618      	mov	r0, r3
 801169c:	371c      	adds	r7, #28
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b086      	sub	sp, #24
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80116bc:	d204      	bcs.n	80116c8 <dir_sdi+0x22>
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	f003 031f 	and.w	r3, r3, #31
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d001      	beq.n	80116cc <dir_sdi+0x26>
		return FR_INT_ERR;
 80116c8:	2302      	movs	r3, #2
 80116ca:	e063      	b.n	8011794 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	689b      	ldr	r3, [r3, #8]
 80116d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <dir_sdi+0x46>
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d902      	bls.n	80116ec <dir_sdi+0x46>
		clst = fs->dirbase;
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10c      	bne.n	801170c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	095b      	lsrs	r3, r3, #5
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	8912      	ldrh	r2, [r2, #8]
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d301      	bcc.n	8011702 <dir_sdi+0x5c>
 80116fe:	2302      	movs	r3, #2
 8011700:	e048      	b.n	8011794 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	61da      	str	r2, [r3, #28]
 801170a:	e029      	b.n	8011760 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	895b      	ldrh	r3, [r3, #10]
 8011710:	025b      	lsls	r3, r3, #9
 8011712:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011714:	e019      	b.n	801174a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6979      	ldr	r1, [r7, #20]
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fd01 	bl	8011122 <get_fat>
 8011720:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011728:	d101      	bne.n	801172e <dir_sdi+0x88>
 801172a:	2301      	movs	r3, #1
 801172c:	e032      	b.n	8011794 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	2b01      	cmp	r3, #1
 8011732:	d904      	bls.n	801173e <dir_sdi+0x98>
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	429a      	cmp	r2, r3
 801173c:	d301      	bcc.n	8011742 <dir_sdi+0x9c>
 801173e:	2302      	movs	r3, #2
 8011740:	e028      	b.n	8011794 <dir_sdi+0xee>
			ofs -= csz;
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	429a      	cmp	r2, r3
 8011750:	d2e1      	bcs.n	8011716 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011752:	6979      	ldr	r1, [r7, #20]
 8011754:	6938      	ldr	r0, [r7, #16]
 8011756:	f7ff fcc5 	bl	80110e4 <clust2sect>
 801175a:	4602      	mov	r2, r0
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	69db      	ldr	r3, [r3, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d101      	bne.n	8011772 <dir_sdi+0xcc>
 801176e:	2302      	movs	r3, #2
 8011770:	e010      	b.n	8011794 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	69da      	ldr	r2, [r3, #28]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	0a5b      	lsrs	r3, r3, #9
 801177a:	441a      	add	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801178c:	441a      	add	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011792:	2300      	movs	r3, #0
}
 8011794:	4618      	mov	r0, r3
 8011796:	3718      	adds	r7, #24
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	3320      	adds	r3, #32
 80117b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	69db      	ldr	r3, [r3, #28]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d003      	beq.n	80117c4 <dir_next+0x28>
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80117c2:	d301      	bcc.n	80117c8 <dir_next+0x2c>
 80117c4:	2304      	movs	r3, #4
 80117c6:	e0aa      	b.n	801191e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f040 8098 	bne.w	8011904 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	69db      	ldr	r3, [r3, #28]
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	699b      	ldr	r3, [r3, #24]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d10b      	bne.n	80117fe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	095b      	lsrs	r3, r3, #5
 80117ea:	68fa      	ldr	r2, [r7, #12]
 80117ec:	8912      	ldrh	r2, [r2, #8]
 80117ee:	4293      	cmp	r3, r2
 80117f0:	f0c0 8088 	bcc.w	8011904 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	61da      	str	r2, [r3, #28]
 80117fa:	2304      	movs	r3, #4
 80117fc:	e08f      	b.n	801191e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	0a5b      	lsrs	r3, r3, #9
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	8952      	ldrh	r2, [r2, #10]
 8011806:	3a01      	subs	r2, #1
 8011808:	4013      	ands	r3, r2
 801180a:	2b00      	cmp	r3, #0
 801180c:	d17a      	bne.n	8011904 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	4619      	mov	r1, r3
 8011816:	4610      	mov	r0, r2
 8011818:	f7ff fc83 	bl	8011122 <get_fat>
 801181c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b01      	cmp	r3, #1
 8011822:	d801      	bhi.n	8011828 <dir_next+0x8c>
 8011824:	2302      	movs	r3, #2
 8011826:	e07a      	b.n	801191e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182e:	d101      	bne.n	8011834 <dir_next+0x98>
 8011830:	2301      	movs	r3, #1
 8011832:	e074      	b.n	801191e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	699b      	ldr	r3, [r3, #24]
 8011838:	697a      	ldr	r2, [r7, #20]
 801183a:	429a      	cmp	r2, r3
 801183c:	d358      	bcc.n	80118f0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d104      	bne.n	801184e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	61da      	str	r2, [r3, #28]
 801184a:	2304      	movs	r3, #4
 801184c:	e067      	b.n	801191e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	699b      	ldr	r3, [r3, #24]
 8011854:	4619      	mov	r1, r3
 8011856:	4610      	mov	r0, r2
 8011858:	f7ff fe59 	bl	801150e <create_chain>
 801185c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d101      	bne.n	8011868 <dir_next+0xcc>
 8011864:	2307      	movs	r3, #7
 8011866:	e05a      	b.n	801191e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d101      	bne.n	8011872 <dir_next+0xd6>
 801186e:	2302      	movs	r3, #2
 8011870:	e055      	b.n	801191e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011878:	d101      	bne.n	801187e <dir_next+0xe2>
 801187a:	2301      	movs	r3, #1
 801187c:	e04f      	b.n	801191e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7ff fb50 	bl	8010f24 <sync_window>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d001      	beq.n	801188e <dir_next+0xf2>
 801188a:	2301      	movs	r3, #1
 801188c:	e047      	b.n	801191e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	3334      	adds	r3, #52	@ 0x34
 8011892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011896:	2100      	movs	r1, #0
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff f97a 	bl	8010b92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801189e:	2300      	movs	r3, #0
 80118a0:	613b      	str	r3, [r7, #16]
 80118a2:	6979      	ldr	r1, [r7, #20]
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7ff fc1d 	bl	80110e4 <clust2sect>
 80118aa:	4602      	mov	r2, r0
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80118b0:	e012      	b.n	80118d8 <dir_next+0x13c>
						fs->wflag = 1;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2201      	movs	r2, #1
 80118b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f7ff fb33 	bl	8010f24 <sync_window>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <dir_next+0x12c>
 80118c4:	2301      	movs	r3, #1
 80118c6:	e02a      	b.n	801191e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	3301      	adds	r3, #1
 80118cc:	613b      	str	r3, [r7, #16]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118d2:	1c5a      	adds	r2, r3, #1
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	895b      	ldrh	r3, [r3, #10]
 80118dc:	461a      	mov	r2, r3
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d3e6      	bcc.n	80118b2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	1ad2      	subs	r2, r2, r3
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80118f6:	6979      	ldr	r1, [r7, #20]
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f7ff fbf3 	bl	80110e4 <clust2sect>
 80118fe:	4602      	mov	r2, r0
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	68ba      	ldr	r2, [r7, #8]
 8011908:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011916:	441a      	add	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b086      	sub	sp, #24
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
 801192e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011936:	2100      	movs	r1, #0
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff feb4 	bl	80116a6 <dir_sdi>
 801193e:	4603      	mov	r3, r0
 8011940:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d12b      	bne.n	80119a0 <dir_alloc+0x7a>
		n = 0;
 8011948:	2300      	movs	r3, #0
 801194a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	69db      	ldr	r3, [r3, #28]
 8011950:	4619      	mov	r1, r3
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7ff fb2a 	bl	8010fac <move_window>
 8011958:	4603      	mov	r3, r0
 801195a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801195c:	7dfb      	ldrb	r3, [r7, #23]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d11d      	bne.n	801199e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a1b      	ldr	r3, [r3, #32]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2be5      	cmp	r3, #229	@ 0xe5
 801196a:	d004      	beq.n	8011976 <dir_alloc+0x50>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a1b      	ldr	r3, [r3, #32]
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d107      	bne.n	8011986 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	3301      	adds	r3, #1
 801197a:	613b      	str	r3, [r7, #16]
 801197c:	693a      	ldr	r2, [r7, #16]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d102      	bne.n	801198a <dir_alloc+0x64>
 8011984:	e00c      	b.n	80119a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011986:	2300      	movs	r3, #0
 8011988:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801198a:	2101      	movs	r1, #1
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7ff ff05 	bl	801179c <dir_next>
 8011992:	4603      	mov	r3, r0
 8011994:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011996:	7dfb      	ldrb	r3, [r7, #23]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d0d7      	beq.n	801194c <dir_alloc+0x26>
 801199c:	e000      	b.n	80119a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801199e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80119a0:	7dfb      	ldrb	r3, [r7, #23]
 80119a2:	2b04      	cmp	r3, #4
 80119a4:	d101      	bne.n	80119aa <dir_alloc+0x84>
 80119a6:	2307      	movs	r3, #7
 80119a8:	75fb      	strb	r3, [r7, #23]
	return res;
 80119aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3718      	adds	r7, #24
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	331a      	adds	r3, #26
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff f842 	bl	8010a4c <ld_word>
 80119c8:	4603      	mov	r3, r0
 80119ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	2b03      	cmp	r3, #3
 80119d2:	d109      	bne.n	80119e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	3314      	adds	r3, #20
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff f837 	bl	8010a4c <ld_word>
 80119de:	4603      	mov	r3, r0
 80119e0:	041b      	lsls	r3, r3, #16
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	4313      	orrs	r3, r2
 80119e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80119e8:	68fb      	ldr	r3, [r7, #12]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b084      	sub	sp, #16
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	60f8      	str	r0, [r7, #12]
 80119fa:	60b9      	str	r1, [r7, #8]
 80119fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	331a      	adds	r3, #26
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	b292      	uxth	r2, r2
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff f85a 	bl	8010ac2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d109      	bne.n	8011a2a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	f103 0214 	add.w	r2, r3, #20
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	0c1b      	lsrs	r3, r3, #16
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4619      	mov	r1, r3
 8011a24:	4610      	mov	r0, r2
 8011a26:	f7ff f84c 	bl	8010ac2 <st_word>
	}
}
 8011a2a:	bf00      	nop
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
	...

08011a34 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b087      	sub	sp, #28
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	331a      	adds	r3, #26
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7ff f802 	bl	8010a4c <ld_word>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d001      	beq.n	8011a52 <cmp_lfn+0x1e>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e059      	b.n	8011b06 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a5a:	1e5a      	subs	r2, r3, #1
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	4413      	add	r3, r2
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011a68:	2301      	movs	r3, #1
 8011a6a:	81fb      	strh	r3, [r7, #14]
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	613b      	str	r3, [r7, #16]
 8011a70:	e033      	b.n	8011ada <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011a72:	4a27      	ldr	r2, [pc, #156]	@ (8011b10 <cmp_lfn+0xdc>)
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	4413      	add	r3, r2
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	4413      	add	r3, r2
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fe ffe3 	bl	8010a4c <ld_word>
 8011a86:	4603      	mov	r3, r0
 8011a88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011a8a:	89fb      	ldrh	r3, [r7, #14]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01a      	beq.n	8011ac6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	2bfe      	cmp	r3, #254	@ 0xfe
 8011a94:	d812      	bhi.n	8011abc <cmp_lfn+0x88>
 8011a96:	89bb      	ldrh	r3, [r7, #12]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f001 fe49 	bl	8013730 <ff_wtoupper>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	461c      	mov	r4, r3
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	617a      	str	r2, [r7, #20]
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	4413      	add	r3, r2
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f001 fe3d 	bl	8013730 <ff_wtoupper>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	429c      	cmp	r4, r3
 8011aba:	d001      	beq.n	8011ac0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011abc:	2300      	movs	r3, #0
 8011abe:	e022      	b.n	8011b06 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011ac0:	89bb      	ldrh	r3, [r7, #12]
 8011ac2:	81fb      	strh	r3, [r7, #14]
 8011ac4:	e006      	b.n	8011ad4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011ac6:	89bb      	ldrh	r3, [r7, #12]
 8011ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d001      	beq.n	8011ad4 <cmp_lfn+0xa0>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e018      	b.n	8011b06 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	613b      	str	r3, [r7, #16]
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	2b0c      	cmp	r3, #12
 8011ade:	d9c8      	bls.n	8011a72 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00b      	beq.n	8011b04 <cmp_lfn+0xd0>
 8011aec:	89fb      	ldrh	r3, [r7, #14]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d008      	beq.n	8011b04 <cmp_lfn+0xd0>
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	005b      	lsls	r3, r3, #1
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	4413      	add	r3, r2
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <cmp_lfn+0xd0>
 8011b00:	2300      	movs	r3, #0
 8011b02:	e000      	b.n	8011b06 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011b04:	2301      	movs	r3, #1
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	371c      	adds	r7, #28
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd90      	pop	{r4, r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	08016a84 	.word	0x08016a84

08011b14 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b088      	sub	sp, #32
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	4611      	mov	r1, r2
 8011b20:	461a      	mov	r2, r3
 8011b22:	460b      	mov	r3, r1
 8011b24:	71fb      	strb	r3, [r7, #7]
 8011b26:	4613      	mov	r3, r2
 8011b28:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	330d      	adds	r3, #13
 8011b2e:	79ba      	ldrb	r2, [r7, #6]
 8011b30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	330b      	adds	r3, #11
 8011b36:	220f      	movs	r2, #15
 8011b38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	330c      	adds	r3, #12
 8011b3e:	2200      	movs	r2, #0
 8011b40:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	331a      	adds	r3, #26
 8011b46:	2100      	movs	r1, #0
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe ffba 	bl	8010ac2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	1e5a      	subs	r2, r3, #1
 8011b52:	4613      	mov	r3, r2
 8011b54:	005b      	lsls	r3, r3, #1
 8011b56:	4413      	add	r3, r2
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	82fb      	strh	r3, [r7, #22]
 8011b62:	2300      	movs	r3, #0
 8011b64:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011b66:	8afb      	ldrh	r3, [r7, #22]
 8011b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d007      	beq.n	8011b80 <put_lfn+0x6c>
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	1c5a      	adds	r2, r3, #1
 8011b74:	61fa      	str	r2, [r7, #28]
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	881b      	ldrh	r3, [r3, #0]
 8011b7e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011b80:	4a17      	ldr	r2, [pc, #92]	@ (8011be0 <put_lfn+0xcc>)
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	4413      	add	r3, r2
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	461a      	mov	r2, r3
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	8afa      	ldrh	r2, [r7, #22]
 8011b90:	4611      	mov	r1, r2
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe ff95 	bl	8010ac2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011b98:	8afb      	ldrh	r3, [r7, #22]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <put_lfn+0x90>
 8011b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011ba2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	61bb      	str	r3, [r7, #24]
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	2b0c      	cmp	r3, #12
 8011bae:	d9da      	bls.n	8011b66 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011bb0:	8afb      	ldrh	r3, [r7, #22]
 8011bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d006      	beq.n	8011bc8 <put_lfn+0xb4>
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	005b      	lsls	r3, r3, #1
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d103      	bne.n	8011bd0 <put_lfn+0xbc>
 8011bc8:	79fb      	ldrb	r3, [r7, #7]
 8011bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	79fa      	ldrb	r2, [r7, #7]
 8011bd4:	701a      	strb	r2, [r3, #0]
}
 8011bd6:	bf00      	nop
 8011bd8:	3720      	adds	r7, #32
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	08016a84 	.word	0x08016a84

08011be4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b08c      	sub	sp, #48	@ 0x30
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	607a      	str	r2, [r7, #4]
 8011bf0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011bf2:	220b      	movs	r2, #11
 8011bf4:	68b9      	ldr	r1, [r7, #8]
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f7fe ffaa 	bl	8010b50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b05      	cmp	r3, #5
 8011c00:	d92b      	bls.n	8011c5a <gen_numname+0x76>
		sr = seq;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011c06:	e022      	b.n	8011c4e <gen_numname+0x6a>
			wc = *lfn++;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	1c9a      	adds	r2, r3, #2
 8011c0c:	607a      	str	r2, [r7, #4]
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8011c12:	2300      	movs	r3, #0
 8011c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c16:	e017      	b.n	8011c48 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	005a      	lsls	r2, r3, #1
 8011c1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c1e:	f003 0301 	and.w	r3, r3, #1
 8011c22:	4413      	add	r3, r2
 8011c24:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011c26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c28:	085b      	lsrs	r3, r3, #1
 8011c2a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d005      	beq.n	8011c42 <gen_numname+0x5e>
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8011c3c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8011c40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c44:	3301      	adds	r3, #1
 8011c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4a:	2b0f      	cmp	r3, #15
 8011c4c:	d9e4      	bls.n	8011c18 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1d8      	bne.n	8011c08 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011c5a:	2307      	movs	r3, #7
 8011c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	f003 030f 	and.w	r3, r3, #15
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	3330      	adds	r3, #48	@ 0x30
 8011c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8011c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c72:	2b39      	cmp	r3, #57	@ 0x39
 8011c74:	d904      	bls.n	8011c80 <gen_numname+0x9c>
 8011c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c7a:	3307      	adds	r3, #7
 8011c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8011c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c82:	1e5a      	subs	r2, r3, #1
 8011c84:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011c86:	3330      	adds	r3, #48	@ 0x30
 8011c88:	443b      	add	r3, r7
 8011c8a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011c8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	091b      	lsrs	r3, r3, #4
 8011c96:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1df      	bne.n	8011c5e <gen_numname+0x7a>
	ns[i] = '~';
 8011c9e:	f107 0214 	add.w	r2, r7, #20
 8011ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca4:	4413      	add	r3, r2
 8011ca6:	227e      	movs	r2, #126	@ 0x7e
 8011ca8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011caa:	2300      	movs	r3, #0
 8011cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cae:	e002      	b.n	8011cb6 <gen_numname+0xd2>
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d205      	bcs.n	8011cca <gen_numname+0xe6>
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc2:	4413      	add	r3, r2
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	2b20      	cmp	r3, #32
 8011cc8:	d1f2      	bne.n	8011cb0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ccc:	2b07      	cmp	r3, #7
 8011cce:	d807      	bhi.n	8011ce0 <gen_numname+0xfc>
 8011cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011cd6:	3330      	adds	r3, #48	@ 0x30
 8011cd8:	443b      	add	r3, r7
 8011cda:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011cde:	e000      	b.n	8011ce2 <gen_numname+0xfe>
 8011ce0:	2120      	movs	r1, #32
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	627a      	str	r2, [r7, #36]	@ 0x24
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	4413      	add	r3, r2
 8011cec:	460a      	mov	r2, r1
 8011cee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf2:	2b07      	cmp	r3, #7
 8011cf4:	d9e9      	bls.n	8011cca <gen_numname+0xe6>
}
 8011cf6:	bf00      	nop
 8011cf8:	bf00      	nop
 8011cfa:	3730      	adds	r7, #48	@ 0x30
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b085      	sub	sp, #20
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011d0c:	230b      	movs	r3, #11
 8011d0e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	0852      	lsrs	r2, r2, #1
 8011d16:	01db      	lsls	r3, r3, #7
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	1c59      	adds	r1, r3, #1
 8011d20:	6079      	str	r1, [r7, #4]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	4413      	add	r3, r2
 8011d26:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	60bb      	str	r3, [r7, #8]
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1ed      	bne.n	8011d10 <sum_sfn+0x10>
	return sum;
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b086      	sub	sp, #24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d50:	2100      	movs	r1, #0
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7ff fca7 	bl	80116a6 <dir_sdi>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <dir_find+0x24>
 8011d62:	7dfb      	ldrb	r3, [r7, #23]
 8011d64:	e0a9      	b.n	8011eba <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011d66:	23ff      	movs	r3, #255	@ 0xff
 8011d68:	753b      	strb	r3, [r7, #20]
 8011d6a:	7d3b      	ldrb	r3, [r7, #20]
 8011d6c:	757b      	strb	r3, [r7, #21]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f04f 32ff 	mov.w	r2, #4294967295
 8011d74:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	69db      	ldr	r3, [r3, #28]
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	6938      	ldr	r0, [r7, #16]
 8011d7e:	f7ff f915 	bl	8010fac <move_window>
 8011d82:	4603      	mov	r3, r0
 8011d84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d86:	7dfb      	ldrb	r3, [r7, #23]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f040 8090 	bne.w	8011eae <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a1b      	ldr	r3, [r3, #32]
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011d96:	7dbb      	ldrb	r3, [r7, #22]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <dir_find+0x60>
 8011d9c:	2304      	movs	r3, #4
 8011d9e:	75fb      	strb	r3, [r7, #23]
 8011da0:	e08a      	b.n	8011eb8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6a1b      	ldr	r3, [r3, #32]
 8011da6:	330b      	adds	r3, #11
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011dae:	73fb      	strb	r3, [r7, #15]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	7bfa      	ldrb	r2, [r7, #15]
 8011db4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011db6:	7dbb      	ldrb	r3, [r7, #22]
 8011db8:	2be5      	cmp	r3, #229	@ 0xe5
 8011dba:	d007      	beq.n	8011dcc <dir_find+0x8a>
 8011dbc:	7bfb      	ldrb	r3, [r7, #15]
 8011dbe:	f003 0308 	and.w	r3, r3, #8
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d009      	beq.n	8011dda <dir_find+0x98>
 8011dc6:	7bfb      	ldrb	r3, [r7, #15]
 8011dc8:	2b0f      	cmp	r3, #15
 8011dca:	d006      	beq.n	8011dda <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011dcc:	23ff      	movs	r3, #255	@ 0xff
 8011dce:	757b      	strb	r3, [r7, #21]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011dd8:	e05e      	b.n	8011e98 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011dda:	7bfb      	ldrb	r3, [r7, #15]
 8011ddc:	2b0f      	cmp	r3, #15
 8011dde:	d136      	bne.n	8011e4e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d154      	bne.n	8011e98 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011dee:	7dbb      	ldrb	r3, [r7, #22]
 8011df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00d      	beq.n	8011e14 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6a1b      	ldr	r3, [r3, #32]
 8011dfc:	7b5b      	ldrb	r3, [r3, #13]
 8011dfe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011e00:	7dbb      	ldrb	r3, [r7, #22]
 8011e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e06:	75bb      	strb	r3, [r7, #22]
 8011e08:	7dbb      	ldrb	r3, [r7, #22]
 8011e0a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	695a      	ldr	r2, [r3, #20]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011e14:	7dba      	ldrb	r2, [r7, #22]
 8011e16:	7d7b      	ldrb	r3, [r7, #21]
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d115      	bne.n	8011e48 <dir_find+0x106>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a1b      	ldr	r3, [r3, #32]
 8011e20:	330d      	adds	r3, #13
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	7d3a      	ldrb	r2, [r7, #20]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d10e      	bne.n	8011e48 <dir_find+0x106>
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	68da      	ldr	r2, [r3, #12]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a1b      	ldr	r3, [r3, #32]
 8011e32:	4619      	mov	r1, r3
 8011e34:	4610      	mov	r0, r2
 8011e36:	f7ff fdfd 	bl	8011a34 <cmp_lfn>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d003      	beq.n	8011e48 <dir_find+0x106>
 8011e40:	7d7b      	ldrb	r3, [r7, #21]
 8011e42:	3b01      	subs	r3, #1
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	e000      	b.n	8011e4a <dir_find+0x108>
 8011e48:	23ff      	movs	r3, #255	@ 0xff
 8011e4a:	757b      	strb	r3, [r7, #21]
 8011e4c:	e024      	b.n	8011e98 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011e4e:	7d7b      	ldrb	r3, [r7, #21]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d109      	bne.n	8011e68 <dir_find+0x126>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6a1b      	ldr	r3, [r3, #32]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7ff ff51 	bl	8011d00 <sum_sfn>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	461a      	mov	r2, r3
 8011e62:	7d3b      	ldrb	r3, [r7, #20]
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d024      	beq.n	8011eb2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011e6e:	f003 0301 	and.w	r3, r3, #1
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d10a      	bne.n	8011e8c <dir_find+0x14a>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a18      	ldr	r0, [r3, #32]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	3324      	adds	r3, #36	@ 0x24
 8011e7e:	220b      	movs	r2, #11
 8011e80:	4619      	mov	r1, r3
 8011e82:	f7fe fea1 	bl	8010bc8 <mem_cmp>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d014      	beq.n	8011eb6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011e8c:	23ff      	movs	r3, #255	@ 0xff
 8011e8e:	757b      	strb	r3, [r7, #21]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f04f 32ff 	mov.w	r2, #4294967295
 8011e96:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011e98:	2100      	movs	r1, #0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7ff fc7e 	bl	801179c <dir_next>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f43f af65 	beq.w	8011d76 <dir_find+0x34>
 8011eac:	e004      	b.n	8011eb8 <dir_find+0x176>
		if (res != FR_OK) break;
 8011eae:	bf00      	nop
 8011eb0:	e002      	b.n	8011eb8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011eb2:	bf00      	nop
 8011eb4:	e000      	b.n	8011eb8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011eb6:	bf00      	nop

	return res;
 8011eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3718      	adds	r7, #24
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
	...

08011ec4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b08c      	sub	sp, #48	@ 0x30
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011ed8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <dir_register+0x20>
 8011ee0:	2306      	movs	r3, #6
 8011ee2:	e0e0      	b.n	80120a6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ee8:	e002      	b.n	8011ef0 <dir_register+0x2c>
 8011eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eec:	3301      	adds	r3, #1
 8011eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	68da      	ldr	r2, [r3, #12]
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	4413      	add	r3, r2
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d1f4      	bne.n	8011eea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8011f06:	f107 030c 	add.w	r3, r7, #12
 8011f0a:	220c      	movs	r2, #12
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe fe1f 	bl	8010b50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011f12:	7dfb      	ldrb	r3, [r7, #23]
 8011f14:	f003 0301 	and.w	r3, r3, #1
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d032      	beq.n	8011f82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2240      	movs	r2, #64	@ 0x40
 8011f20:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8011f24:	2301      	movs	r3, #1
 8011f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f28:	e016      	b.n	8011f58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	68da      	ldr	r2, [r3, #12]
 8011f34:	f107 010c 	add.w	r1, r7, #12
 8011f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3a:	f7ff fe53 	bl	8011be4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff feff 	bl	8011d42 <dir_find>
 8011f44:	4603      	mov	r3, r0
 8011f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8011f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f54:	3301      	adds	r3, #1
 8011f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f5a:	2b63      	cmp	r3, #99	@ 0x63
 8011f5c:	d9e5      	bls.n	8011f2a <dir_register+0x66>
 8011f5e:	e000      	b.n	8011f62 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011f60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f64:	2b64      	cmp	r3, #100	@ 0x64
 8011f66:	d101      	bne.n	8011f6c <dir_register+0xa8>
 8011f68:	2307      	movs	r3, #7
 8011f6a:	e09c      	b.n	80120a6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f70:	2b04      	cmp	r3, #4
 8011f72:	d002      	beq.n	8011f7a <dir_register+0xb6>
 8011f74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f78:	e095      	b.n	80120a6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011f7a:	7dfa      	ldrb	r2, [r7, #23]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	f003 0302 	and.w	r3, r3, #2
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d007      	beq.n	8011f9c <dir_register+0xd8>
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f8e:	330c      	adds	r3, #12
 8011f90:	4a47      	ldr	r2, [pc, #284]	@ (80120b0 <dir_register+0x1ec>)
 8011f92:	fba2 2303 	umull	r2, r3, r2, r3
 8011f96:	089b      	lsrs	r3, r3, #2
 8011f98:	3301      	adds	r3, #1
 8011f9a:	e000      	b.n	8011f9e <dir_register+0xda>
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011fa0:	6a39      	ldr	r1, [r7, #32]
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff fcbf 	bl	8011926 <dir_alloc>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d148      	bne.n	8012048 <dir_register+0x184>
 8011fb6:	6a3b      	ldr	r3, [r7, #32]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	623b      	str	r3, [r7, #32]
 8011fbc:	6a3b      	ldr	r3, [r7, #32]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d042      	beq.n	8012048 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	695a      	ldr	r2, [r3, #20]
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
 8011fc8:	015b      	lsls	r3, r3, #5
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff fb69 	bl	80116a6 <dir_sdi>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d132      	bne.n	8012048 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3324      	adds	r3, #36	@ 0x24
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7ff fe8a 	bl	8011d00 <sum_sfn>
 8011fec:	4603      	mov	r3, r0
 8011fee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	69db      	ldr	r3, [r3, #28]
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	69f8      	ldr	r0, [r7, #28]
 8011ff8:	f7fe ffd8 	bl	8010fac <move_window>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012002:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012006:	2b00      	cmp	r3, #0
 8012008:	d11d      	bne.n	8012046 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	68d8      	ldr	r0, [r3, #12]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a19      	ldr	r1, [r3, #32]
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	b2da      	uxtb	r2, r3
 8012016:	7efb      	ldrb	r3, [r7, #27]
 8012018:	f7ff fd7c 	bl	8011b14 <put_lfn>
				fs->wflag = 1;
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	2201      	movs	r2, #1
 8012020:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012022:	2100      	movs	r1, #0
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff fbb9 	bl	801179c <dir_next>
 801202a:	4603      	mov	r3, r0
 801202c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012034:	2b00      	cmp	r3, #0
 8012036:	d107      	bne.n	8012048 <dir_register+0x184>
 8012038:	6a3b      	ldr	r3, [r7, #32]
 801203a:	3b01      	subs	r3, #1
 801203c:	623b      	str	r3, [r7, #32]
 801203e:	6a3b      	ldr	r3, [r7, #32]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1d5      	bne.n	8011ff0 <dir_register+0x12c>
 8012044:	e000      	b.n	8012048 <dir_register+0x184>
				if (res != FR_OK) break;
 8012046:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801204c:	2b00      	cmp	r3, #0
 801204e:	d128      	bne.n	80120a2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	69db      	ldr	r3, [r3, #28]
 8012054:	4619      	mov	r1, r3
 8012056:	69f8      	ldr	r0, [r7, #28]
 8012058:	f7fe ffa8 	bl	8010fac <move_window>
 801205c:	4603      	mov	r3, r0
 801205e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012066:	2b00      	cmp	r3, #0
 8012068:	d11b      	bne.n	80120a2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a1b      	ldr	r3, [r3, #32]
 801206e:	2220      	movs	r2, #32
 8012070:	2100      	movs	r1, #0
 8012072:	4618      	mov	r0, r3
 8012074:	f7fe fd8d 	bl	8010b92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6a18      	ldr	r0, [r3, #32]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	3324      	adds	r3, #36	@ 0x24
 8012080:	220b      	movs	r2, #11
 8012082:	4619      	mov	r1, r3
 8012084:	f7fe fd64 	bl	8010b50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6a1b      	ldr	r3, [r3, #32]
 8012092:	330c      	adds	r3, #12
 8012094:	f002 0218 	and.w	r2, r2, #24
 8012098:	b2d2      	uxtb	r2, r2
 801209a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	2201      	movs	r2, #1
 80120a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80120a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3730      	adds	r7, #48	@ 0x30
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	4ec4ec4f 	.word	0x4ec4ec4f

080120b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	@ 0x28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	613b      	str	r3, [r7, #16]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	2300      	movs	r3, #0
 80120ce:	617b      	str	r3, [r7, #20]
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	1c5a      	adds	r2, r3, #1
 80120d8:	61ba      	str	r2, [r7, #24]
 80120da:	693a      	ldr	r2, [r7, #16]
 80120dc:	4413      	add	r3, r2
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80120e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120e4:	2b1f      	cmp	r3, #31
 80120e6:	d940      	bls.n	801216a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80120e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80120ec:	d006      	beq.n	80120fc <create_name+0x48>
 80120ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80120f2:	d110      	bne.n	8012116 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80120f4:	e002      	b.n	80120fc <create_name+0x48>
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	3301      	adds	r3, #1
 80120fa:	61bb      	str	r3, [r7, #24]
 80120fc:	693a      	ldr	r2, [r7, #16]
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	4413      	add	r3, r2
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b2f      	cmp	r3, #47	@ 0x2f
 8012106:	d0f6      	beq.n	80120f6 <create_name+0x42>
 8012108:	693a      	ldr	r2, [r7, #16]
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	4413      	add	r3, r2
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	2b5c      	cmp	r3, #92	@ 0x5c
 8012112:	d0f0      	beq.n	80120f6 <create_name+0x42>
			break;
 8012114:	e02a      	b.n	801216c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	2bfe      	cmp	r3, #254	@ 0xfe
 801211a:	d901      	bls.n	8012120 <create_name+0x6c>
 801211c:	2306      	movs	r3, #6
 801211e:	e17d      	b.n	801241c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012120:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012122:	b2db      	uxtb	r3, r3
 8012124:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012126:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012128:	2101      	movs	r1, #1
 801212a:	4618      	mov	r0, r3
 801212c:	f001 fac4 	bl	80136b8 <ff_convert>
 8012130:	4603      	mov	r3, r0
 8012132:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012136:	2b00      	cmp	r3, #0
 8012138:	d101      	bne.n	801213e <create_name+0x8a>
 801213a:	2306      	movs	r3, #6
 801213c:	e16e      	b.n	801241c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801213e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012140:	2b7f      	cmp	r3, #127	@ 0x7f
 8012142:	d809      	bhi.n	8012158 <create_name+0xa4>
 8012144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012146:	4619      	mov	r1, r3
 8012148:	488d      	ldr	r0, [pc, #564]	@ (8012380 <create_name+0x2cc>)
 801214a:	f7fe fd64 	bl	8010c16 <chk_chr>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d001      	beq.n	8012158 <create_name+0xa4>
 8012154:	2306      	movs	r3, #6
 8012156:	e161      	b.n	801241c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	617a      	str	r2, [r7, #20]
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	4413      	add	r3, r2
 8012164:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012166:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012168:	e7b4      	b.n	80120d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801216a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801216c:	693a      	ldr	r2, [r7, #16]
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	441a      	add	r2, r3
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012178:	2b1f      	cmp	r3, #31
 801217a:	d801      	bhi.n	8012180 <create_name+0xcc>
 801217c:	2304      	movs	r3, #4
 801217e:	e000      	b.n	8012182 <create_name+0xce>
 8012180:	2300      	movs	r3, #0
 8012182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012186:	e011      	b.n	80121ac <create_name+0xf8>
		w = lfn[di - 1];
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801218e:	3b01      	subs	r3, #1
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	68fa      	ldr	r2, [r7, #12]
 8012194:	4413      	add	r3, r2
 8012196:	881b      	ldrh	r3, [r3, #0]
 8012198:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801219a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801219c:	2b20      	cmp	r3, #32
 801219e:	d002      	beq.n	80121a6 <create_name+0xf2>
 80121a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80121a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80121a4:	d106      	bne.n	80121b4 <create_name+0x100>
		di--;
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	3b01      	subs	r3, #1
 80121aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d1ea      	bne.n	8012188 <create_name+0xd4>
 80121b2:	e000      	b.n	80121b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80121b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	68fa      	ldr	r2, [r7, #12]
 80121bc:	4413      	add	r3, r2
 80121be:	2200      	movs	r2, #0
 80121c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <create_name+0x118>
 80121c8:	2306      	movs	r3, #6
 80121ca:	e127      	b.n	801241c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	3324      	adds	r3, #36	@ 0x24
 80121d0:	220b      	movs	r2, #11
 80121d2:	2120      	movs	r1, #32
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fe fcdc 	bl	8010b92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80121da:	2300      	movs	r3, #0
 80121dc:	61bb      	str	r3, [r7, #24]
 80121de:	e002      	b.n	80121e6 <create_name+0x132>
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	3301      	adds	r3, #1
 80121e4:	61bb      	str	r3, [r7, #24]
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	005b      	lsls	r3, r3, #1
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	4413      	add	r3, r2
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	2b20      	cmp	r3, #32
 80121f2:	d0f5      	beq.n	80121e0 <create_name+0x12c>
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	4413      	add	r3, r2
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8012200:	d0ee      	beq.n	80121e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d009      	beq.n	801221c <create_name+0x168>
 8012208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801220c:	f043 0303 	orr.w	r3, r3, #3
 8012210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012214:	e002      	b.n	801221c <create_name+0x168>
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	3b01      	subs	r3, #1
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d009      	beq.n	8012236 <create_name+0x182>
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012228:	3b01      	subs	r3, #1
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	4413      	add	r3, r2
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	2b2e      	cmp	r3, #46	@ 0x2e
 8012234:	d1ef      	bne.n	8012216 <create_name+0x162>

	i = b = 0; ni = 8;
 8012236:	2300      	movs	r3, #0
 8012238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801223c:	2300      	movs	r3, #0
 801223e:	623b      	str	r3, [r7, #32]
 8012240:	2308      	movs	r3, #8
 8012242:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	1c5a      	adds	r2, r3, #1
 8012248:	61ba      	str	r2, [r7, #24]
 801224a:	005b      	lsls	r3, r3, #1
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	4413      	add	r3, r2
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012254:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 8090 	beq.w	801237c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801225c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801225e:	2b20      	cmp	r3, #32
 8012260:	d006      	beq.n	8012270 <create_name+0x1bc>
 8012262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012264:	2b2e      	cmp	r3, #46	@ 0x2e
 8012266:	d10a      	bne.n	801227e <create_name+0x1ca>
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	429a      	cmp	r2, r3
 801226e:	d006      	beq.n	801227e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012274:	f043 0303 	orr.w	r3, r3, #3
 8012278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801227c:	e07d      	b.n	801237a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801227e:	6a3a      	ldr	r2, [r7, #32]
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	429a      	cmp	r2, r3
 8012284:	d203      	bcs.n	801228e <create_name+0x1da>
 8012286:	69ba      	ldr	r2, [r7, #24]
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	429a      	cmp	r2, r3
 801228c:	d123      	bne.n	80122d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	2b0b      	cmp	r3, #11
 8012292:	d106      	bne.n	80122a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012298:	f043 0303 	orr.w	r3, r3, #3
 801229c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80122a0:	e075      	b.n	801238e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80122a2:	69ba      	ldr	r2, [r7, #24]
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d005      	beq.n	80122b6 <create_name+0x202>
 80122aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122ae:	f043 0303 	orr.w	r3, r3, #3
 80122b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80122b6:	69ba      	ldr	r2, [r7, #24]
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d866      	bhi.n	801238c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	61bb      	str	r3, [r7, #24]
 80122c2:	2308      	movs	r3, #8
 80122c4:	623b      	str	r3, [r7, #32]
 80122c6:	230b      	movs	r3, #11
 80122c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80122ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80122d4:	e051      	b.n	801237a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80122d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80122da:	d914      	bls.n	8012306 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80122dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122de:	2100      	movs	r1, #0
 80122e0:	4618      	mov	r0, r3
 80122e2:	f001 f9e9 	bl	80136b8 <ff_convert>
 80122e6:	4603      	mov	r3, r0
 80122e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80122ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d004      	beq.n	80122fa <create_name+0x246>
 80122f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122f2:	3b80      	subs	r3, #128	@ 0x80
 80122f4:	4a23      	ldr	r2, [pc, #140]	@ (8012384 <create_name+0x2d0>)
 80122f6:	5cd3      	ldrb	r3, [r2, r3]
 80122f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80122fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122fe:	f043 0302 	orr.w	r3, r3, #2
 8012302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012308:	2b00      	cmp	r3, #0
 801230a:	d007      	beq.n	801231c <create_name+0x268>
 801230c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801230e:	4619      	mov	r1, r3
 8012310:	481d      	ldr	r0, [pc, #116]	@ (8012388 <create_name+0x2d4>)
 8012312:	f7fe fc80 	bl	8010c16 <chk_chr>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d008      	beq.n	801232e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801231c:	235f      	movs	r3, #95	@ 0x5f
 801231e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012324:	f043 0303 	orr.w	r3, r3, #3
 8012328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801232c:	e01b      	b.n	8012366 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801232e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012330:	2b40      	cmp	r3, #64	@ 0x40
 8012332:	d909      	bls.n	8012348 <create_name+0x294>
 8012334:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012336:	2b5a      	cmp	r3, #90	@ 0x5a
 8012338:	d806      	bhi.n	8012348 <create_name+0x294>
					b |= 2;
 801233a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801233e:	f043 0302 	orr.w	r3, r3, #2
 8012342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012346:	e00e      	b.n	8012366 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801234a:	2b60      	cmp	r3, #96	@ 0x60
 801234c:	d90b      	bls.n	8012366 <create_name+0x2b2>
 801234e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012350:	2b7a      	cmp	r3, #122	@ 0x7a
 8012352:	d808      	bhi.n	8012366 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012358:	f043 0301 	orr.w	r3, r3, #1
 801235c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012362:	3b20      	subs	r3, #32
 8012364:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012366:	6a3b      	ldr	r3, [r7, #32]
 8012368:	1c5a      	adds	r2, r3, #1
 801236a:	623a      	str	r2, [r7, #32]
 801236c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801236e:	b2d1      	uxtb	r1, r2
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	4413      	add	r3, r2
 8012374:	460a      	mov	r2, r1
 8012376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801237a:	e763      	b.n	8012244 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801237c:	bf00      	nop
 801237e:	e006      	b.n	801238e <create_name+0x2da>
 8012380:	08014710 	.word	0x08014710
 8012384:	08016a04 	.word	0x08016a04
 8012388:	0801471c 	.word	0x0801471c
			if (si > di) break;			/* No extension */
 801238c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012394:	2be5      	cmp	r3, #229	@ 0xe5
 8012396:	d103      	bne.n	80123a0 <create_name+0x2ec>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2205      	movs	r2, #5
 801239c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	2b08      	cmp	r3, #8
 80123a4:	d104      	bne.n	80123b0 <create_name+0x2fc>
 80123a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80123b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123b4:	f003 030c 	and.w	r3, r3, #12
 80123b8:	2b0c      	cmp	r3, #12
 80123ba:	d005      	beq.n	80123c8 <create_name+0x314>
 80123bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123c0:	f003 0303 	and.w	r3, r3, #3
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d105      	bne.n	80123d4 <create_name+0x320>
 80123c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123cc:	f043 0302 	orr.w	r3, r3, #2
 80123d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80123d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123d8:	f003 0302 	and.w	r3, r3, #2
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d117      	bne.n	8012410 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80123e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123e4:	f003 0303 	and.w	r3, r3, #3
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d105      	bne.n	80123f8 <create_name+0x344>
 80123ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123f0:	f043 0310 	orr.w	r3, r3, #16
 80123f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80123f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123fc:	f003 030c 	and.w	r3, r3, #12
 8012400:	2b04      	cmp	r3, #4
 8012402:	d105      	bne.n	8012410 <create_name+0x35c>
 8012404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012408:	f043 0308 	orr.w	r3, r3, #8
 801240c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012416:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801241a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801241c:	4618      	mov	r0, r3
 801241e:	3728      	adds	r7, #40	@ 0x28
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012438:	e002      	b.n	8012440 <follow_path+0x1c>
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	3301      	adds	r3, #1
 801243e:	603b      	str	r3, [r7, #0]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b2f      	cmp	r3, #47	@ 0x2f
 8012446:	d0f8      	beq.n	801243a <follow_path+0x16>
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	2b5c      	cmp	r3, #92	@ 0x5c
 801244e:	d0f4      	beq.n	801243a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	2200      	movs	r2, #0
 8012454:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	2b1f      	cmp	r3, #31
 801245c:	d80a      	bhi.n	8012474 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2280      	movs	r2, #128	@ 0x80
 8012462:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012466:	2100      	movs	r1, #0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff f91c 	bl	80116a6 <dir_sdi>
 801246e:	4603      	mov	r3, r0
 8012470:	75fb      	strb	r3, [r7, #23]
 8012472:	e043      	b.n	80124fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012474:	463b      	mov	r3, r7
 8012476:	4619      	mov	r1, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f7ff fe1b 	bl	80120b4 <create_name>
 801247e:	4603      	mov	r3, r0
 8012480:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012482:	7dfb      	ldrb	r3, [r7, #23]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d134      	bne.n	80124f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7ff fc5a 	bl	8011d42 <dir_find>
 801248e:	4603      	mov	r3, r0
 8012490:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012498:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00a      	beq.n	80124b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80124a0:	7dfb      	ldrb	r3, [r7, #23]
 80124a2:	2b04      	cmp	r3, #4
 80124a4:	d127      	bne.n	80124f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80124a6:	7afb      	ldrb	r3, [r7, #11]
 80124a8:	f003 0304 	and.w	r3, r3, #4
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d122      	bne.n	80124f6 <follow_path+0xd2>
 80124b0:	2305      	movs	r3, #5
 80124b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80124b4:	e01f      	b.n	80124f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124b6:	7afb      	ldrb	r3, [r7, #11]
 80124b8:	f003 0304 	and.w	r3, r3, #4
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d11c      	bne.n	80124fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	799b      	ldrb	r3, [r3, #6]
 80124c4:	f003 0310 	and.w	r3, r3, #16
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d102      	bne.n	80124d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80124cc:	2305      	movs	r3, #5
 80124ce:	75fb      	strb	r3, [r7, #23]
 80124d0:	e014      	b.n	80124fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	695b      	ldr	r3, [r3, #20]
 80124dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124e0:	4413      	add	r3, r2
 80124e2:	4619      	mov	r1, r3
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f7ff fa65 	bl	80119b4 <ld_clust>
 80124ea:	4602      	mov	r2, r0
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124f0:	e7c0      	b.n	8012474 <follow_path+0x50>
			if (res != FR_OK) break;
 80124f2:	bf00      	nop
 80124f4:	e002      	b.n	80124fc <follow_path+0xd8>
				break;
 80124f6:	bf00      	nop
 80124f8:	e000      	b.n	80124fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124fa:	bf00      	nop
			}
		}
	}

	return res;
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3718      	adds	r7, #24
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012506:	b480      	push	{r7}
 8012508:	b087      	sub	sp, #28
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801250e:	f04f 33ff 	mov.w	r3, #4294967295
 8012512:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d031      	beq.n	8012580 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	617b      	str	r3, [r7, #20]
 8012522:	e002      	b.n	801252a <get_ldnumber+0x24>
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	3301      	adds	r3, #1
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2b1f      	cmp	r3, #31
 8012530:	d903      	bls.n	801253a <get_ldnumber+0x34>
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b3a      	cmp	r3, #58	@ 0x3a
 8012538:	d1f4      	bne.n	8012524 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012540:	d11c      	bne.n	801257c <get_ldnumber+0x76>
			tp = *path;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	1c5a      	adds	r2, r3, #1
 801254c:	60fa      	str	r2, [r7, #12]
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	3b30      	subs	r3, #48	@ 0x30
 8012552:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	2b09      	cmp	r3, #9
 8012558:	d80e      	bhi.n	8012578 <get_ldnumber+0x72>
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	429a      	cmp	r2, r3
 8012560:	d10a      	bne.n	8012578 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d107      	bne.n	8012578 <get_ldnumber+0x72>
					vol = (int)i;
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	3301      	adds	r3, #1
 8012570:	617b      	str	r3, [r7, #20]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	697a      	ldr	r2, [r7, #20]
 8012576:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	e002      	b.n	8012582 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801257c:	2300      	movs	r3, #0
 801257e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012580:	693b      	ldr	r3, [r7, #16]
}
 8012582:	4618      	mov	r0, r3
 8012584:	371c      	adds	r7, #28
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
	...

08012590 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2200      	movs	r2, #0
 801259e:	70da      	strb	r2, [r3, #3]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f04f 32ff 	mov.w	r2, #4294967295
 80125a6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80125a8:	6839      	ldr	r1, [r7, #0]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7fe fcfe 	bl	8010fac <move_window>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <check_fs+0x2a>
 80125b6:	2304      	movs	r3, #4
 80125b8:	e038      	b.n	801262c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	3334      	adds	r3, #52	@ 0x34
 80125be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fe fa42 	bl	8010a4c <ld_word>
 80125c8:	4603      	mov	r3, r0
 80125ca:	461a      	mov	r2, r3
 80125cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d001      	beq.n	80125d8 <check_fs+0x48>
 80125d4:	2303      	movs	r3, #3
 80125d6:	e029      	b.n	801262c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80125de:	2be9      	cmp	r3, #233	@ 0xe9
 80125e0:	d009      	beq.n	80125f6 <check_fs+0x66>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80125e8:	2beb      	cmp	r3, #235	@ 0xeb
 80125ea:	d11e      	bne.n	801262a <check_fs+0x9a>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80125f2:	2b90      	cmp	r3, #144	@ 0x90
 80125f4:	d119      	bne.n	801262a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	3334      	adds	r3, #52	@ 0x34
 80125fa:	3336      	adds	r3, #54	@ 0x36
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7fe fa3d 	bl	8010a7c <ld_dword>
 8012602:	4603      	mov	r3, r0
 8012604:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012608:	4a0a      	ldr	r2, [pc, #40]	@ (8012634 <check_fs+0xa4>)
 801260a:	4293      	cmp	r3, r2
 801260c:	d101      	bne.n	8012612 <check_fs+0x82>
 801260e:	2300      	movs	r3, #0
 8012610:	e00c      	b.n	801262c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3334      	adds	r3, #52	@ 0x34
 8012616:	3352      	adds	r3, #82	@ 0x52
 8012618:	4618      	mov	r0, r3
 801261a:	f7fe fa2f 	bl	8010a7c <ld_dword>
 801261e:	4603      	mov	r3, r0
 8012620:	4a05      	ldr	r2, [pc, #20]	@ (8012638 <check_fs+0xa8>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d101      	bne.n	801262a <check_fs+0x9a>
 8012626:	2300      	movs	r3, #0
 8012628:	e000      	b.n	801262c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801262a:	2302      	movs	r3, #2
}
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	00544146 	.word	0x00544146
 8012638:	33544146 	.word	0x33544146

0801263c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b096      	sub	sp, #88	@ 0x58
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	4613      	mov	r3, r2
 8012648:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	f7ff ff58 	bl	8012506 <get_ldnumber>
 8012656:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801265a:	2b00      	cmp	r3, #0
 801265c:	da01      	bge.n	8012662 <find_volume+0x26>
 801265e:	230b      	movs	r3, #11
 8012660:	e230      	b.n	8012ac4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012662:	4aa1      	ldr	r2, [pc, #644]	@ (80128e8 <find_volume+0x2ac>)
 8012664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801266a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <find_volume+0x3a>
 8012672:	230c      	movs	r3, #12
 8012674:	e226      	b.n	8012ac4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801267a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801267c:	79fb      	ldrb	r3, [r7, #7]
 801267e:	f023 0301 	bic.w	r3, r3, #1
 8012682:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d01a      	beq.n	80126c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801268c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801268e:	785b      	ldrb	r3, [r3, #1]
 8012690:	4618      	mov	r0, r3
 8012692:	f7fe f93b 	bl	801090c <disk_status>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801269c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126a0:	f003 0301 	and.w	r3, r3, #1
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d10c      	bne.n	80126c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80126a8:	79fb      	ldrb	r3, [r7, #7]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d007      	beq.n	80126be <find_volume+0x82>
 80126ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126b2:	f003 0304 	and.w	r3, r3, #4
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80126ba:	230a      	movs	r3, #10
 80126bc:	e202      	b.n	8012ac4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80126be:	2300      	movs	r3, #0
 80126c0:	e200      	b.n	8012ac4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80126c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126c4:	2200      	movs	r2, #0
 80126c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80126c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80126d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126d2:	785b      	ldrb	r3, [r3, #1]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe f933 	bl	8010940 <disk_initialize>
 80126da:	4603      	mov	r3, r0
 80126dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80126e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126e4:	f003 0301 	and.w	r3, r3, #1
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80126ec:	2303      	movs	r3, #3
 80126ee:	e1e9      	b.n	8012ac4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80126f0:	79fb      	ldrb	r3, [r7, #7]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d007      	beq.n	8012706 <find_volume+0xca>
 80126f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012702:	230a      	movs	r3, #10
 8012704:	e1de      	b.n	8012ac4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801270a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801270c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801270e:	f7ff ff3f 	bl	8012590 <check_fs>
 8012712:	4603      	mov	r3, r0
 8012714:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801271c:	2b02      	cmp	r3, #2
 801271e:	d149      	bne.n	80127b4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012720:	2300      	movs	r3, #0
 8012722:	643b      	str	r3, [r7, #64]	@ 0x40
 8012724:	e01e      	b.n	8012764 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012728:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801272c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012734:	4413      	add	r3, r2
 8012736:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801273a:	3304      	adds	r3, #4
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d006      	beq.n	8012750 <find_volume+0x114>
 8012742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012744:	3308      	adds	r3, #8
 8012746:	4618      	mov	r0, r3
 8012748:	f7fe f998 	bl	8010a7c <ld_dword>
 801274c:	4602      	mov	r2, r0
 801274e:	e000      	b.n	8012752 <find_volume+0x116>
 8012750:	2200      	movs	r2, #0
 8012752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	3358      	adds	r3, #88	@ 0x58
 8012758:	443b      	add	r3, r7
 801275a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801275e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012760:	3301      	adds	r3, #1
 8012762:	643b      	str	r3, [r7, #64]	@ 0x40
 8012764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012766:	2b03      	cmp	r3, #3
 8012768:	d9dd      	bls.n	8012726 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801276a:	2300      	movs	r3, #0
 801276c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801276e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <find_volume+0x13e>
 8012774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012776:	3b01      	subs	r3, #1
 8012778:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801277a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	3358      	adds	r3, #88	@ 0x58
 8012780:	443b      	add	r3, r7
 8012782:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012786:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801278a:	2b00      	cmp	r3, #0
 801278c:	d005      	beq.n	801279a <find_volume+0x15e>
 801278e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012790:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012792:	f7ff fefd 	bl	8012590 <check_fs>
 8012796:	4603      	mov	r3, r0
 8012798:	e000      	b.n	801279c <find_volume+0x160>
 801279a:	2303      	movs	r3, #3
 801279c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d905      	bls.n	80127b4 <find_volume+0x178>
 80127a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127aa:	3301      	adds	r3, #1
 80127ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80127ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127b0:	2b03      	cmp	r3, #3
 80127b2:	d9e2      	bls.n	801277a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80127b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127b8:	2b04      	cmp	r3, #4
 80127ba:	d101      	bne.n	80127c0 <find_volume+0x184>
 80127bc:	2301      	movs	r3, #1
 80127be:	e181      	b.n	8012ac4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80127c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d901      	bls.n	80127cc <find_volume+0x190>
 80127c8:	230d      	movs	r3, #13
 80127ca:	e17b      	b.n	8012ac4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80127cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ce:	3334      	adds	r3, #52	@ 0x34
 80127d0:	330b      	adds	r3, #11
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe f93a 	bl	8010a4c <ld_word>
 80127d8:	4603      	mov	r3, r0
 80127da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127de:	d001      	beq.n	80127e4 <find_volume+0x1a8>
 80127e0:	230d      	movs	r3, #13
 80127e2:	e16f      	b.n	8012ac4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80127e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127e6:	3334      	adds	r3, #52	@ 0x34
 80127e8:	3316      	adds	r3, #22
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe f92e 	bl	8010a4c <ld_word>
 80127f0:	4603      	mov	r3, r0
 80127f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80127f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d106      	bne.n	8012808 <find_volume+0x1cc>
 80127fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127fc:	3334      	adds	r3, #52	@ 0x34
 80127fe:	3324      	adds	r3, #36	@ 0x24
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe f93b 	bl	8010a7c <ld_dword>
 8012806:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801280a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801280c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012810:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012816:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801281a:	789b      	ldrb	r3, [r3, #2]
 801281c:	2b01      	cmp	r3, #1
 801281e:	d005      	beq.n	801282c <find_volume+0x1f0>
 8012820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012822:	789b      	ldrb	r3, [r3, #2]
 8012824:	2b02      	cmp	r3, #2
 8012826:	d001      	beq.n	801282c <find_volume+0x1f0>
 8012828:	230d      	movs	r3, #13
 801282a:	e14b      	b.n	8012ac4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801282c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801282e:	789b      	ldrb	r3, [r3, #2]
 8012830:	461a      	mov	r2, r3
 8012832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012834:	fb02 f303 	mul.w	r3, r2, r3
 8012838:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801283c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012840:	461a      	mov	r2, r3
 8012842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012844:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012848:	895b      	ldrh	r3, [r3, #10]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d008      	beq.n	8012860 <find_volume+0x224>
 801284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012850:	895b      	ldrh	r3, [r3, #10]
 8012852:	461a      	mov	r2, r3
 8012854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012856:	895b      	ldrh	r3, [r3, #10]
 8012858:	3b01      	subs	r3, #1
 801285a:	4013      	ands	r3, r2
 801285c:	2b00      	cmp	r3, #0
 801285e:	d001      	beq.n	8012864 <find_volume+0x228>
 8012860:	230d      	movs	r3, #13
 8012862:	e12f      	b.n	8012ac4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012866:	3334      	adds	r3, #52	@ 0x34
 8012868:	3311      	adds	r3, #17
 801286a:	4618      	mov	r0, r3
 801286c:	f7fe f8ee 	bl	8010a4c <ld_word>
 8012870:	4603      	mov	r3, r0
 8012872:	461a      	mov	r2, r3
 8012874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012876:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801287a:	891b      	ldrh	r3, [r3, #8]
 801287c:	f003 030f 	and.w	r3, r3, #15
 8012880:	b29b      	uxth	r3, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d001      	beq.n	801288a <find_volume+0x24e>
 8012886:	230d      	movs	r3, #13
 8012888:	e11c      	b.n	8012ac4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288c:	3334      	adds	r3, #52	@ 0x34
 801288e:	3313      	adds	r3, #19
 8012890:	4618      	mov	r0, r3
 8012892:	f7fe f8db 	bl	8010a4c <ld_word>
 8012896:	4603      	mov	r3, r0
 8012898:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801289a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801289c:	2b00      	cmp	r3, #0
 801289e:	d106      	bne.n	80128ae <find_volume+0x272>
 80128a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a2:	3334      	adds	r3, #52	@ 0x34
 80128a4:	3320      	adds	r3, #32
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe f8e8 	bl	8010a7c <ld_dword>
 80128ac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80128ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b0:	3334      	adds	r3, #52	@ 0x34
 80128b2:	330e      	adds	r3, #14
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe f8c9 	bl	8010a4c <ld_word>
 80128ba:	4603      	mov	r3, r0
 80128bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80128be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <find_volume+0x28c>
 80128c4:	230d      	movs	r3, #13
 80128c6:	e0fd      	b.n	8012ac4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80128c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80128ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128cc:	4413      	add	r3, r2
 80128ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128d0:	8912      	ldrh	r2, [r2, #8]
 80128d2:	0912      	lsrs	r2, r2, #4
 80128d4:	b292      	uxth	r2, r2
 80128d6:	4413      	add	r3, r2
 80128d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80128da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128de:	429a      	cmp	r2, r3
 80128e0:	d204      	bcs.n	80128ec <find_volume+0x2b0>
 80128e2:	230d      	movs	r3, #13
 80128e4:	e0ee      	b.n	8012ac4 <find_volume+0x488>
 80128e6:	bf00      	nop
 80128e8:	200013d8 	.word	0x200013d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80128ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128f4:	8952      	ldrh	r2, [r2, #10]
 80128f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80128fa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80128fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d101      	bne.n	8012906 <find_volume+0x2ca>
 8012902:	230d      	movs	r3, #13
 8012904:	e0de      	b.n	8012ac4 <find_volume+0x488>
		fmt = FS_FAT32;
 8012906:	2303      	movs	r3, #3
 8012908:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012912:	4293      	cmp	r3, r2
 8012914:	d802      	bhi.n	801291c <find_volume+0x2e0>
 8012916:	2302      	movs	r3, #2
 8012918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801291e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012922:	4293      	cmp	r3, r2
 8012924:	d802      	bhi.n	801292c <find_volume+0x2f0>
 8012926:	2301      	movs	r3, #1
 8012928:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801292e:	1c9a      	adds	r2, r3, #2
 8012930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012932:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012938:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801293a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801293c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801293e:	441a      	add	r2, r3
 8012940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012942:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012944:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012948:	441a      	add	r2, r3
 801294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801294e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012952:	2b03      	cmp	r3, #3
 8012954:	d11e      	bne.n	8012994 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012958:	3334      	adds	r3, #52	@ 0x34
 801295a:	332a      	adds	r3, #42	@ 0x2a
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe f875 	bl	8010a4c <ld_word>
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <find_volume+0x330>
 8012968:	230d      	movs	r3, #13
 801296a:	e0ab      	b.n	8012ac4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801296c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801296e:	891b      	ldrh	r3, [r3, #8]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d001      	beq.n	8012978 <find_volume+0x33c>
 8012974:	230d      	movs	r3, #13
 8012976:	e0a5      	b.n	8012ac4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297a:	3334      	adds	r3, #52	@ 0x34
 801297c:	332c      	adds	r3, #44	@ 0x2c
 801297e:	4618      	mov	r0, r3
 8012980:	f7fe f87c 	bl	8010a7c <ld_dword>
 8012984:	4602      	mov	r2, r0
 8012986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012988:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801298a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801298c:	699b      	ldr	r3, [r3, #24]
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	647b      	str	r3, [r7, #68]	@ 0x44
 8012992:	e01f      	b.n	80129d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012996:	891b      	ldrh	r3, [r3, #8]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d101      	bne.n	80129a0 <find_volume+0x364>
 801299c:	230d      	movs	r3, #13
 801299e:	e091      	b.n	8012ac4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80129a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129a6:	441a      	add	r2, r3
 80129a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129aa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80129ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80129b0:	2b02      	cmp	r3, #2
 80129b2:	d103      	bne.n	80129bc <find_volume+0x380>
 80129b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b6:	699b      	ldr	r3, [r3, #24]
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	e00a      	b.n	80129d2 <find_volume+0x396>
 80129bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129be:	699a      	ldr	r2, [r3, #24]
 80129c0:	4613      	mov	r3, r2
 80129c2:	005b      	lsls	r3, r3, #1
 80129c4:	4413      	add	r3, r2
 80129c6:	085a      	lsrs	r2, r3, #1
 80129c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ca:	699b      	ldr	r3, [r3, #24]
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80129d2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80129d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129d6:	69da      	ldr	r2, [r3, #28]
 80129d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80129de:	0a5b      	lsrs	r3, r3, #9
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d201      	bcs.n	80129e8 <find_volume+0x3ac>
 80129e4:	230d      	movs	r3, #13
 80129e6:	e06d      	b.n	8012ac4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80129e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ea:	f04f 32ff 	mov.w	r2, #4294967295
 80129ee:	615a      	str	r2, [r3, #20]
 80129f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f2:	695a      	ldr	r2, [r3, #20]
 80129f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80129f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129fa:	2280      	movs	r2, #128	@ 0x80
 80129fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80129fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a02:	2b03      	cmp	r3, #3
 8012a04:	d149      	bne.n	8012a9a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a08:	3334      	adds	r3, #52	@ 0x34
 8012a0a:	3330      	adds	r3, #48	@ 0x30
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7fe f81d 	bl	8010a4c <ld_word>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d140      	bne.n	8012a9a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012a20:	f7fe fac4 	bl	8010fac <move_window>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d137      	bne.n	8012a9a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a32:	3334      	adds	r3, #52	@ 0x34
 8012a34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fe f807 	bl	8010a4c <ld_word>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	461a      	mov	r2, r3
 8012a42:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d127      	bne.n	8012a9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4c:	3334      	adds	r3, #52	@ 0x34
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fe f814 	bl	8010a7c <ld_dword>
 8012a54:	4603      	mov	r3, r0
 8012a56:	4a1d      	ldr	r2, [pc, #116]	@ (8012acc <find_volume+0x490>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d11e      	bne.n	8012a9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5e:	3334      	adds	r3, #52	@ 0x34
 8012a60:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fe f809 	bl	8010a7c <ld_dword>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	4a18      	ldr	r2, [pc, #96]	@ (8012ad0 <find_volume+0x494>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d113      	bne.n	8012a9a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a74:	3334      	adds	r3, #52	@ 0x34
 8012a76:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fd fffe 	bl	8010a7c <ld_dword>
 8012a80:	4602      	mov	r2, r0
 8012a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a84:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a88:	3334      	adds	r3, #52	@ 0x34
 8012a8a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fd fff4 	bl	8010a7c <ld_dword>
 8012a94:	4602      	mov	r2, r0
 8012a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a98:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a9c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012aa0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8012ad4 <find_volume+0x498>)
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8012ad4 <find_volume+0x498>)
 8012aac:	801a      	strh	r2, [r3, #0]
 8012aae:	4b09      	ldr	r3, [pc, #36]	@ (8012ad4 <find_volume+0x498>)
 8012ab0:	881a      	ldrh	r2, [r3, #0]
 8012ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab8:	4a07      	ldr	r2, [pc, #28]	@ (8012ad8 <find_volume+0x49c>)
 8012aba:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012abc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012abe:	f7fe fa0d 	bl	8010edc <clear_lock>
#endif
	return FR_OK;
 8012ac2:	2300      	movs	r3, #0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3758      	adds	r7, #88	@ 0x58
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	41615252 	.word	0x41615252
 8012ad0:	61417272 	.word	0x61417272
 8012ad4:	200013dc 	.word	0x200013dc
 8012ad8:	20001430 	.word	0x20001430

08012adc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ae6:	2309      	movs	r3, #9
 8012ae8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d01c      	beq.n	8012b2a <validate+0x4e>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d018      	beq.n	8012b2a <validate+0x4e>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d013      	beq.n	8012b2a <validate+0x4e>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	889a      	ldrh	r2, [r3, #4]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	88db      	ldrh	r3, [r3, #6]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d10c      	bne.n	8012b2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	785b      	ldrb	r3, [r3, #1]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fd fef8 	bl	801090c <disk_status>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d101      	bne.n	8012b2a <validate+0x4e>
			res = FR_OK;
 8012b26:	2300      	movs	r3, #0
 8012b28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012b2a:	7bfb      	ldrb	r3, [r7, #15]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d102      	bne.n	8012b36 <validate+0x5a>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	e000      	b.n	8012b38 <validate+0x5c>
 8012b36:	2300      	movs	r3, #0
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	6013      	str	r3, [r2, #0]
	return res;
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
	...

08012b48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b088      	sub	sp, #32
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	4613      	mov	r3, r2
 8012b54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012b5a:	f107 0310 	add.w	r3, r7, #16
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7ff fcd1 	bl	8012506 <get_ldnumber>
 8012b64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	da01      	bge.n	8012b70 <f_mount+0x28>
 8012b6c:	230b      	movs	r3, #11
 8012b6e:	e02b      	b.n	8012bc8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012b70:	4a17      	ldr	r2, [pc, #92]	@ (8012bd0 <f_mount+0x88>)
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d005      	beq.n	8012b8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012b80:	69b8      	ldr	r0, [r7, #24]
 8012b82:	f7fe f9ab 	bl	8010edc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d002      	beq.n	8012b98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2200      	movs	r2, #0
 8012b96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	490d      	ldr	r1, [pc, #52]	@ (8012bd0 <f_mount+0x88>)
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d002      	beq.n	8012bae <f_mount+0x66>
 8012ba8:	79fb      	ldrb	r3, [r7, #7]
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d001      	beq.n	8012bb2 <f_mount+0x6a>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	e00a      	b.n	8012bc8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012bb2:	f107 010c 	add.w	r1, r7, #12
 8012bb6:	f107 0308 	add.w	r3, r7, #8
 8012bba:	2200      	movs	r2, #0
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7ff fd3d 	bl	801263c <find_volume>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3720      	adds	r7, #32
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	200013d8 	.word	0x200013d8

08012bd4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b09a      	sub	sp, #104	@ 0x68
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	60b9      	str	r1, [r7, #8]
 8012bde:	4613      	mov	r3, r2
 8012be0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d101      	bne.n	8012bec <f_open+0x18>
 8012be8:	2309      	movs	r3, #9
 8012bea:	e1a9      	b.n	8012f40 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012bec:	79fb      	ldrb	r3, [r7, #7]
 8012bee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012bf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012bf4:	79fa      	ldrb	r2, [r7, #7]
 8012bf6:	f107 0114 	add.w	r1, r7, #20
 8012bfa:	f107 0308 	add.w	r3, r7, #8
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7ff fd1c 	bl	801263c <find_volume>
 8012c04:	4603      	mov	r3, r0
 8012c06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8012c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f040 818d 	bne.w	8012f2e <f_open+0x35a>
		dj.obj.fs = fs;
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	f107 0318 	add.w	r3, r7, #24
 8012c1e:	4611      	mov	r1, r2
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7ff fbff 	bl	8012424 <follow_path>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d118      	bne.n	8012c66 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012c34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012c38:	b25b      	sxtb	r3, r3
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	da03      	bge.n	8012c46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012c3e:	2306      	movs	r3, #6
 8012c40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012c44:	e00f      	b.n	8012c66 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c46:	79fb      	ldrb	r3, [r7, #7]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	bf8c      	ite	hi
 8012c4c:	2301      	movhi	r3, #1
 8012c4e:	2300      	movls	r3, #0
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	461a      	mov	r2, r3
 8012c54:	f107 0318 	add.w	r3, r7, #24
 8012c58:	4611      	mov	r1, r2
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fd fff6 	bl	8010c4c <chk_lock>
 8012c60:	4603      	mov	r3, r0
 8012c62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012c66:	79fb      	ldrb	r3, [r7, #7]
 8012c68:	f003 031c 	and.w	r3, r3, #28
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d07f      	beq.n	8012d70 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012c70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d017      	beq.n	8012ca8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012c78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c7c:	2b04      	cmp	r3, #4
 8012c7e:	d10e      	bne.n	8012c9e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012c80:	f7fe f840 	bl	8010d04 <enq_lock>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d006      	beq.n	8012c98 <f_open+0xc4>
 8012c8a:	f107 0318 	add.w	r3, r7, #24
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff f918 	bl	8011ec4 <dir_register>
 8012c94:	4603      	mov	r3, r0
 8012c96:	e000      	b.n	8012c9a <f_open+0xc6>
 8012c98:	2312      	movs	r3, #18
 8012c9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012c9e:	79fb      	ldrb	r3, [r7, #7]
 8012ca0:	f043 0308 	orr.w	r3, r3, #8
 8012ca4:	71fb      	strb	r3, [r7, #7]
 8012ca6:	e010      	b.n	8012cca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ca8:	7fbb      	ldrb	r3, [r7, #30]
 8012caa:	f003 0311 	and.w	r3, r3, #17
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d003      	beq.n	8012cba <f_open+0xe6>
					res = FR_DENIED;
 8012cb2:	2307      	movs	r3, #7
 8012cb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012cb8:	e007      	b.n	8012cca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012cba:	79fb      	ldrb	r3, [r7, #7]
 8012cbc:	f003 0304 	and.w	r3, r3, #4
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <f_open+0xf6>
 8012cc4:	2308      	movs	r3, #8
 8012cc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012cca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d168      	bne.n	8012da4 <f_open+0x1d0>
 8012cd2:	79fb      	ldrb	r3, [r7, #7]
 8012cd4:	f003 0308 	and.w	r3, r3, #8
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d063      	beq.n	8012da4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012cdc:	f7fd f894 	bl	800fe08 <get_fattime>
 8012ce0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ce4:	330e      	adds	r3, #14
 8012ce6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7fd ff05 	bl	8010af8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cf0:	3316      	adds	r3, #22
 8012cf2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fd feff 	bl	8010af8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cfc:	330b      	adds	r3, #11
 8012cfe:	2220      	movs	r2, #32
 8012d00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d06:	4611      	mov	r1, r2
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fe fe53 	bl	80119b4 <ld_clust>
 8012d0e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012d14:	2200      	movs	r2, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe fe6b 	bl	80119f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d1e:	331c      	adds	r3, #28
 8012d20:	2100      	movs	r1, #0
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7fd fee8 	bl	8010af8 <st_dword>
					fs->wflag = 1;
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d037      	beq.n	8012da4 <f_open+0x1d0>
						dw = fs->winsect;
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d38:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012d3a:	f107 0318 	add.w	r3, r7, #24
 8012d3e:	2200      	movs	r2, #0
 8012d40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fe fb7e 	bl	8011444 <remove_chain>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8012d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d126      	bne.n	8012da4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7fe f926 	bl	8010fac <move_window>
 8012d60:	4603      	mov	r3, r0
 8012d62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012d6a:	3a01      	subs	r2, #1
 8012d6c:	611a      	str	r2, [r3, #16]
 8012d6e:	e019      	b.n	8012da4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012d70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d115      	bne.n	8012da4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012d78:	7fbb      	ldrb	r3, [r7, #30]
 8012d7a:	f003 0310 	and.w	r3, r3, #16
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d003      	beq.n	8012d8a <f_open+0x1b6>
					res = FR_NO_FILE;
 8012d82:	2304      	movs	r3, #4
 8012d84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012d88:	e00c      	b.n	8012da4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012d8a:	79fb      	ldrb	r3, [r7, #7]
 8012d8c:	f003 0302 	and.w	r3, r3, #2
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d007      	beq.n	8012da4 <f_open+0x1d0>
 8012d94:	7fbb      	ldrb	r3, [r7, #30]
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d002      	beq.n	8012da4 <f_open+0x1d0>
						res = FR_DENIED;
 8012d9e:	2307      	movs	r3, #7
 8012da0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012da4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d126      	bne.n	8012dfa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012dac:	79fb      	ldrb	r3, [r7, #7]
 8012dae:	f003 0308 	and.w	r3, r3, #8
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d003      	beq.n	8012dbe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012dc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	bf8c      	ite	hi
 8012dd2:	2301      	movhi	r3, #1
 8012dd4:	2300      	movls	r3, #0
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	461a      	mov	r2, r3
 8012dda:	f107 0318 	add.w	r3, r7, #24
 8012dde:	4611      	mov	r1, r2
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fd ffb1 	bl	8010d48 <inc_lock>
 8012de6:	4602      	mov	r2, r0
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	691b      	ldr	r3, [r3, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d102      	bne.n	8012dfa <f_open+0x226>
 8012df4:	2302      	movs	r3, #2
 8012df6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012dfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	f040 8095 	bne.w	8012f2e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e08:	4611      	mov	r1, r2
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fe fdd2 	bl	80119b4 <ld_clust>
 8012e10:	4602      	mov	r2, r0
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e18:	331c      	adds	r3, #28
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fd fe2e 	bl	8010a7c <ld_dword>
 8012e20:	4602      	mov	r2, r0
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012e2c:	697a      	ldr	r2, [r7, #20]
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	88da      	ldrh	r2, [r3, #6]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	79fa      	ldrb	r2, [r7, #7]
 8012e3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2200      	movs	r2, #0
 8012e44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	3330      	adds	r3, #48	@ 0x30
 8012e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fd fe98 	bl	8010b92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012e62:	79fb      	ldrb	r3, [r7, #7]
 8012e64:	f003 0320 	and.w	r3, r3, #32
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d060      	beq.n	8012f2e <f_open+0x35a>
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d05c      	beq.n	8012f2e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	68da      	ldr	r2, [r3, #12]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	895b      	ldrh	r3, [r3, #10]
 8012e80:	025b      	lsls	r3, r3, #9
 8012e82:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e90:	e016      	b.n	8012ec0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fe f943 	bl	8011122 <get_fat>
 8012e9c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012e9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d802      	bhi.n	8012eaa <f_open+0x2d6>
 8012ea4:	2302      	movs	r3, #2
 8012ea6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb0:	d102      	bne.n	8012eb8 <f_open+0x2e4>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012eb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ebc:	1ad3      	subs	r3, r2, r3
 8012ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d103      	bne.n	8012ed0 <f_open+0x2fc>
 8012ec8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d8e0      	bhi.n	8012e92 <f_open+0x2be>
				}
				fp->clust = clst;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012ed4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d127      	bne.n	8012f2e <f_open+0x35a>
 8012ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d022      	beq.n	8012f2e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fe f8f9 	bl	80110e4 <clust2sect>
 8012ef2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d103      	bne.n	8012f02 <f_open+0x32e>
						res = FR_INT_ERR;
 8012efa:	2302      	movs	r3, #2
 8012efc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012f00:	e015      	b.n	8012f2e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f04:	0a5a      	lsrs	r2, r3, #9
 8012f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f08:	441a      	add	r2, r3
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	7858      	ldrb	r0, [r3, #1]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	6a1a      	ldr	r2, [r3, #32]
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	f7fd fd37 	bl	8010990 <disk_read>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d002      	beq.n	8012f2e <f_open+0x35a>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d002      	beq.n	8012f3c <f_open+0x368>
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3768      	adds	r7, #104	@ 0x68
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08e      	sub	sp, #56	@ 0x38
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f107 0214 	add.w	r2, r7, #20
 8012f66:	4611      	mov	r1, r2
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7ff fdb7 	bl	8012adc <validate>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012f74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d107      	bne.n	8012f8c <f_read+0x44>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	7d5b      	ldrb	r3, [r3, #21]
 8012f80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012f84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d002      	beq.n	8012f92 <f_read+0x4a>
 8012f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f90:	e115      	b.n	80131be <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	7d1b      	ldrb	r3, [r3, #20]
 8012f96:	f003 0301 	and.w	r3, r3, #1
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d101      	bne.n	8012fa2 <f_read+0x5a>
 8012f9e:	2307      	movs	r3, #7
 8012fa0:	e10d      	b.n	80131be <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	68da      	ldr	r2, [r3, #12]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	699b      	ldr	r3, [r3, #24]
 8012faa:	1ad3      	subs	r3, r2, r3
 8012fac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	f240 80fe 	bls.w	80131b4 <f_read+0x26c>
 8012fb8:	6a3b      	ldr	r3, [r7, #32]
 8012fba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012fbc:	e0fa      	b.n	80131b4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	699b      	ldr	r3, [r3, #24]
 8012fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f040 80c6 	bne.w	8013158 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	699b      	ldr	r3, [r3, #24]
 8012fd0:	0a5b      	lsrs	r3, r3, #9
 8012fd2:	697a      	ldr	r2, [r7, #20]
 8012fd4:	8952      	ldrh	r2, [r2, #10]
 8012fd6:	3a01      	subs	r2, #1
 8012fd8:	4013      	ands	r3, r2
 8012fda:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d12f      	bne.n	8013042 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	699b      	ldr	r3, [r3, #24]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d103      	bne.n	8012ff2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ff0:	e013      	b.n	801301a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d007      	beq.n	801300a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	699b      	ldr	r3, [r3, #24]
 8012ffe:	4619      	mov	r1, r3
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f7fe fb1c 	bl	801163e <clmt_clust>
 8013006:	6338      	str	r0, [r7, #48]	@ 0x30
 8013008:	e007      	b.n	801301a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	69db      	ldr	r3, [r3, #28]
 8013010:	4619      	mov	r1, r3
 8013012:	4610      	mov	r0, r2
 8013014:	f7fe f885 	bl	8011122 <get_fat>
 8013018:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801301c:	2b01      	cmp	r3, #1
 801301e:	d804      	bhi.n	801302a <f_read+0xe2>
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2202      	movs	r2, #2
 8013024:	755a      	strb	r2, [r3, #21]
 8013026:	2302      	movs	r3, #2
 8013028:	e0c9      	b.n	80131be <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013030:	d104      	bne.n	801303c <f_read+0xf4>
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2201      	movs	r2, #1
 8013036:	755a      	strb	r2, [r3, #21]
 8013038:	2301      	movs	r3, #1
 801303a:	e0c0      	b.n	80131be <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013040:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013042:	697a      	ldr	r2, [r7, #20]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	69db      	ldr	r3, [r3, #28]
 8013048:	4619      	mov	r1, r3
 801304a:	4610      	mov	r0, r2
 801304c:	f7fe f84a 	bl	80110e4 <clust2sect>
 8013050:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d104      	bne.n	8013062 <f_read+0x11a>
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2202      	movs	r2, #2
 801305c:	755a      	strb	r2, [r3, #21]
 801305e:	2302      	movs	r3, #2
 8013060:	e0ad      	b.n	80131be <f_read+0x276>
			sect += csect;
 8013062:	69ba      	ldr	r2, [r7, #24]
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	4413      	add	r3, r2
 8013068:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	0a5b      	lsrs	r3, r3, #9
 801306e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013072:	2b00      	cmp	r3, #0
 8013074:	d039      	beq.n	80130ea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013076:	69fa      	ldr	r2, [r7, #28]
 8013078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801307a:	4413      	add	r3, r2
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	8952      	ldrh	r2, [r2, #10]
 8013080:	4293      	cmp	r3, r2
 8013082:	d905      	bls.n	8013090 <f_read+0x148>
					cc = fs->csize - csect;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	895b      	ldrh	r3, [r3, #10]
 8013088:	461a      	mov	r2, r3
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	7858      	ldrb	r0, [r3, #1]
 8013094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801309a:	f7fd fc79 	bl	8010990 <disk_read>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d004      	beq.n	80130ae <f_read+0x166>
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2201      	movs	r2, #1
 80130a8:	755a      	strb	r2, [r3, #21]
 80130aa:	2301      	movs	r3, #1
 80130ac:	e087      	b.n	80131be <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	7d1b      	ldrb	r3, [r3, #20]
 80130b2:	b25b      	sxtb	r3, r3
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	da14      	bge.n	80130e2 <f_read+0x19a>
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6a1a      	ldr	r2, [r3, #32]
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	1ad3      	subs	r3, r2, r3
 80130c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d90d      	bls.n	80130e2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6a1a      	ldr	r2, [r3, #32]
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	025b      	lsls	r3, r3, #9
 80130d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130d2:	18d0      	adds	r0, r2, r3
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	3330      	adds	r3, #48	@ 0x30
 80130d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130dc:	4619      	mov	r1, r3
 80130de:	f7fd fd37 	bl	8010b50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80130e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e4:	025b      	lsls	r3, r3, #9
 80130e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80130e8:	e050      	b.n	801318c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	6a1b      	ldr	r3, [r3, #32]
 80130ee:	69ba      	ldr	r2, [r7, #24]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d02e      	beq.n	8013152 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	7d1b      	ldrb	r3, [r3, #20]
 80130f8:	b25b      	sxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	da18      	bge.n	8013130 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	7858      	ldrb	r0, [r3, #1]
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	6a1a      	ldr	r2, [r3, #32]
 801310c:	2301      	movs	r3, #1
 801310e:	f7fd fc5f 	bl	80109d0 <disk_write>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d004      	beq.n	8013122 <f_read+0x1da>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2201      	movs	r2, #1
 801311c:	755a      	strb	r2, [r3, #21]
 801311e:	2301      	movs	r3, #1
 8013120:	e04d      	b.n	80131be <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	7d1b      	ldrb	r3, [r3, #20]
 8013126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801312a:	b2da      	uxtb	r2, r3
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	7858      	ldrb	r0, [r3, #1]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801313a:	2301      	movs	r3, #1
 801313c:	69ba      	ldr	r2, [r7, #24]
 801313e:	f7fd fc27 	bl	8010990 <disk_read>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d004      	beq.n	8013152 <f_read+0x20a>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2201      	movs	r2, #1
 801314c:	755a      	strb	r2, [r3, #21]
 801314e:	2301      	movs	r3, #1
 8013150:	e035      	b.n	80131be <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	69ba      	ldr	r2, [r7, #24]
 8013156:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	699b      	ldr	r3, [r3, #24]
 801315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013160:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013164:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	429a      	cmp	r2, r3
 801316c:	d901      	bls.n	8013172 <f_read+0x22a>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013180:	4413      	add	r3, r2
 8013182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013184:	4619      	mov	r1, r3
 8013186:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013188:	f7fd fce2 	bl	8010b50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013190:	4413      	add	r3, r2
 8013192:	627b      	str	r3, [r7, #36]	@ 0x24
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	699a      	ldr	r2, [r3, #24]
 8013198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319a:	441a      	add	r2, r3
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	619a      	str	r2, [r3, #24]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a6:	441a      	add	r2, r3
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	601a      	str	r2, [r3, #0]
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	f47f af01 	bne.w	8012fbe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3738      	adds	r7, #56	@ 0x38
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b08c      	sub	sp, #48	@ 0x30
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	60f8      	str	r0, [r7, #12]
 80131ce:	60b9      	str	r1, [r7, #8]
 80131d0:	607a      	str	r2, [r7, #4]
 80131d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	2200      	movs	r2, #0
 80131dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f107 0210 	add.w	r2, r7, #16
 80131e4:	4611      	mov	r1, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff fc78 	bl	8012adc <validate>
 80131ec:	4603      	mov	r3, r0
 80131ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80131f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d107      	bne.n	801320a <f_write+0x44>
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	7d5b      	ldrb	r3, [r3, #21]
 80131fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013206:	2b00      	cmp	r3, #0
 8013208:	d002      	beq.n	8013210 <f_write+0x4a>
 801320a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801320e:	e14b      	b.n	80134a8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	7d1b      	ldrb	r3, [r3, #20]
 8013214:	f003 0302 	and.w	r3, r3, #2
 8013218:	2b00      	cmp	r3, #0
 801321a:	d101      	bne.n	8013220 <f_write+0x5a>
 801321c:	2307      	movs	r3, #7
 801321e:	e143      	b.n	80134a8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	699a      	ldr	r2, [r3, #24]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	441a      	add	r2, r3
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	699b      	ldr	r3, [r3, #24]
 801322c:	429a      	cmp	r2, r3
 801322e:	f080 812d 	bcs.w	801348c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	699b      	ldr	r3, [r3, #24]
 8013236:	43db      	mvns	r3, r3
 8013238:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801323a:	e127      	b.n	801348c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	699b      	ldr	r3, [r3, #24]
 8013240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013244:	2b00      	cmp	r3, #0
 8013246:	f040 80e3 	bne.w	8013410 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	699b      	ldr	r3, [r3, #24]
 801324e:	0a5b      	lsrs	r3, r3, #9
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	8952      	ldrh	r2, [r2, #10]
 8013254:	3a01      	subs	r2, #1
 8013256:	4013      	ands	r3, r2
 8013258:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d143      	bne.n	80132e8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	699b      	ldr	r3, [r3, #24]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10c      	bne.n	8013282 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013270:	2b00      	cmp	r3, #0
 8013272:	d11a      	bne.n	80132aa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2100      	movs	r1, #0
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe f948 	bl	801150e <create_chain>
 801327e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013280:	e013      	b.n	80132aa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013286:	2b00      	cmp	r3, #0
 8013288:	d007      	beq.n	801329a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	699b      	ldr	r3, [r3, #24]
 801328e:	4619      	mov	r1, r3
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f7fe f9d4 	bl	801163e <clmt_clust>
 8013296:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013298:	e007      	b.n	80132aa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	69db      	ldr	r3, [r3, #28]
 80132a0:	4619      	mov	r1, r3
 80132a2:	4610      	mov	r0, r2
 80132a4:	f7fe f933 	bl	801150e <create_chain>
 80132a8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80132aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 80f2 	beq.w	8013496 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80132b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d104      	bne.n	80132c2 <f_write+0xfc>
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2202      	movs	r2, #2
 80132bc:	755a      	strb	r2, [r3, #21]
 80132be:	2302      	movs	r3, #2
 80132c0:	e0f2      	b.n	80134a8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80132c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c8:	d104      	bne.n	80132d4 <f_write+0x10e>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	2201      	movs	r2, #1
 80132ce:	755a      	strb	r2, [r3, #21]
 80132d0:	2301      	movs	r3, #1
 80132d2:	e0e9      	b.n	80134a8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	689b      	ldr	r3, [r3, #8]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d102      	bne.n	80132e8 <f_write+0x122>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	7d1b      	ldrb	r3, [r3, #20]
 80132ec:	b25b      	sxtb	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	da18      	bge.n	8013324 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	7858      	ldrb	r0, [r3, #1]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	6a1a      	ldr	r2, [r3, #32]
 8013300:	2301      	movs	r3, #1
 8013302:	f7fd fb65 	bl	80109d0 <disk_write>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d004      	beq.n	8013316 <f_write+0x150>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2201      	movs	r2, #1
 8013310:	755a      	strb	r2, [r3, #21]
 8013312:	2301      	movs	r3, #1
 8013314:	e0c8      	b.n	80134a8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	7d1b      	ldrb	r3, [r3, #20]
 801331a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801331e:	b2da      	uxtb	r2, r3
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013324:	693a      	ldr	r2, [r7, #16]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	69db      	ldr	r3, [r3, #28]
 801332a:	4619      	mov	r1, r3
 801332c:	4610      	mov	r0, r2
 801332e:	f7fd fed9 	bl	80110e4 <clust2sect>
 8013332:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d104      	bne.n	8013344 <f_write+0x17e>
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2202      	movs	r2, #2
 801333e:	755a      	strb	r2, [r3, #21]
 8013340:	2302      	movs	r3, #2
 8013342:	e0b1      	b.n	80134a8 <f_write+0x2e2>
			sect += csect;
 8013344:	697a      	ldr	r2, [r7, #20]
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	4413      	add	r3, r2
 801334a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	0a5b      	lsrs	r3, r3, #9
 8013350:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013352:	6a3b      	ldr	r3, [r7, #32]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d03c      	beq.n	80133d2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013358:	69ba      	ldr	r2, [r7, #24]
 801335a:	6a3b      	ldr	r3, [r7, #32]
 801335c:	4413      	add	r3, r2
 801335e:	693a      	ldr	r2, [r7, #16]
 8013360:	8952      	ldrh	r2, [r2, #10]
 8013362:	4293      	cmp	r3, r2
 8013364:	d905      	bls.n	8013372 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	895b      	ldrh	r3, [r3, #10]
 801336a:	461a      	mov	r2, r3
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	7858      	ldrb	r0, [r3, #1]
 8013376:	6a3b      	ldr	r3, [r7, #32]
 8013378:	697a      	ldr	r2, [r7, #20]
 801337a:	69f9      	ldr	r1, [r7, #28]
 801337c:	f7fd fb28 	bl	80109d0 <disk_write>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d004      	beq.n	8013390 <f_write+0x1ca>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2201      	movs	r2, #1
 801338a:	755a      	strb	r2, [r3, #21]
 801338c:	2301      	movs	r3, #1
 801338e:	e08b      	b.n	80134a8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6a1a      	ldr	r2, [r3, #32]
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	6a3a      	ldr	r2, [r7, #32]
 801339a:	429a      	cmp	r2, r3
 801339c:	d915      	bls.n	80133ca <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6a1a      	ldr	r2, [r3, #32]
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	025b      	lsls	r3, r3, #9
 80133ae:	69fa      	ldr	r2, [r7, #28]
 80133b0:	4413      	add	r3, r2
 80133b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80133b6:	4619      	mov	r1, r3
 80133b8:	f7fd fbca 	bl	8010b50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	7d1b      	ldrb	r3, [r3, #20]
 80133c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133c4:	b2da      	uxtb	r2, r3
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80133ca:	6a3b      	ldr	r3, [r7, #32]
 80133cc:	025b      	lsls	r3, r3, #9
 80133ce:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80133d0:	e03f      	b.n	8013452 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	697a      	ldr	r2, [r7, #20]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d016      	beq.n	801340a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	699a      	ldr	r2, [r3, #24]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d210      	bcs.n	801340a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	7858      	ldrb	r0, [r3, #1]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80133f2:	2301      	movs	r3, #1
 80133f4:	697a      	ldr	r2, [r7, #20]
 80133f6:	f7fd facb 	bl	8010990 <disk_read>
 80133fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d004      	beq.n	801340a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2201      	movs	r2, #1
 8013404:	755a      	strb	r2, [r3, #21]
 8013406:	2301      	movs	r3, #1
 8013408:	e04e      	b.n	80134a8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	697a      	ldr	r2, [r7, #20]
 801340e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	699b      	ldr	r3, [r3, #24]
 8013414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013418:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801341c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801341e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	429a      	cmp	r2, r3
 8013424:	d901      	bls.n	801342a <f_write+0x264>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	699b      	ldr	r3, [r3, #24]
 8013434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013438:	4413      	add	r3, r2
 801343a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801343c:	69f9      	ldr	r1, [r7, #28]
 801343e:	4618      	mov	r0, r3
 8013440:	f7fd fb86 	bl	8010b50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	7d1b      	ldrb	r3, [r3, #20]
 8013448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801344c:	b2da      	uxtb	r2, r3
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013452:	69fa      	ldr	r2, [r7, #28]
 8013454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013456:	4413      	add	r3, r2
 8013458:	61fb      	str	r3, [r7, #28]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	699a      	ldr	r2, [r3, #24]
 801345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013460:	441a      	add	r2, r3
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	619a      	str	r2, [r3, #24]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68da      	ldr	r2, [r3, #12]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	429a      	cmp	r2, r3
 8013470:	bf38      	it	cc
 8013472:	461a      	movcc	r2, r3
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	60da      	str	r2, [r3, #12]
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347e:	441a      	add	r2, r3
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f47f aed4 	bne.w	801323c <f_write+0x76>
 8013494:	e000      	b.n	8013498 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013496:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80134a6:	2300      	movs	r3, #0
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3730      	adds	r7, #48	@ 0x30
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b086      	sub	sp, #24
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f107 0208 	add.w	r2, r7, #8
 80134be:	4611      	mov	r1, r2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7ff fb0b 	bl	8012adc <validate>
 80134c6:	4603      	mov	r3, r0
 80134c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134ca:	7dfb      	ldrb	r3, [r7, #23]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d168      	bne.n	80135a2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7d1b      	ldrb	r3, [r3, #20]
 80134d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d062      	beq.n	80135a2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	7d1b      	ldrb	r3, [r3, #20]
 80134e0:	b25b      	sxtb	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	da15      	bge.n	8013512 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	7858      	ldrb	r0, [r3, #1]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a1a      	ldr	r2, [r3, #32]
 80134f4:	2301      	movs	r3, #1
 80134f6:	f7fd fa6b 	bl	80109d0 <disk_write>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d001      	beq.n	8013504 <f_sync+0x54>
 8013500:	2301      	movs	r3, #1
 8013502:	e04f      	b.n	80135a4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	7d1b      	ldrb	r3, [r3, #20]
 8013508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801350c:	b2da      	uxtb	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013512:	f7fc fc79 	bl	800fe08 <get_fattime>
 8013516:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013518:	68ba      	ldr	r2, [r7, #8]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801351e:	4619      	mov	r1, r3
 8013520:	4610      	mov	r0, r2
 8013522:	f7fd fd43 	bl	8010fac <move_window>
 8013526:	4603      	mov	r3, r0
 8013528:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801352a:	7dfb      	ldrb	r3, [r7, #23]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d138      	bne.n	80135a2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013534:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	330b      	adds	r3, #11
 801353a:	781a      	ldrb	r2, [r3, #0]
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	330b      	adds	r3, #11
 8013540:	f042 0220 	orr.w	r2, r2, #32
 8013544:	b2d2      	uxtb	r2, r2
 8013546:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6818      	ldr	r0, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	461a      	mov	r2, r3
 8013552:	68f9      	ldr	r1, [r7, #12]
 8013554:	f7fe fa4d 	bl	80119f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f103 021c 	add.w	r2, r3, #28
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	4619      	mov	r1, r3
 8013564:	4610      	mov	r0, r2
 8013566:	f7fd fac7 	bl	8010af8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3316      	adds	r3, #22
 801356e:	6939      	ldr	r1, [r7, #16]
 8013570:	4618      	mov	r0, r3
 8013572:	f7fd fac1 	bl	8010af8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3312      	adds	r3, #18
 801357a:	2100      	movs	r1, #0
 801357c:	4618      	mov	r0, r3
 801357e:	f7fd faa0 	bl	8010ac2 <st_word>
					fs->wflag = 1;
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	2201      	movs	r2, #1
 8013586:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	4618      	mov	r0, r3
 801358c:	f7fd fd3c 	bl	8011008 <sync_fs>
 8013590:	4603      	mov	r3, r0
 8013592:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	7d1b      	ldrb	r3, [r3, #20]
 8013598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801359c:	b2da      	uxtb	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3718      	adds	r7, #24
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b084      	sub	sp, #16
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7ff ff7b 	bl	80134b0 <f_sync>
 80135ba:	4603      	mov	r3, r0
 80135bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80135be:	7bfb      	ldrb	r3, [r7, #15]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d118      	bne.n	80135f6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f107 0208 	add.w	r2, r7, #8
 80135ca:	4611      	mov	r1, r2
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fa85 	bl	8012adc <validate>
 80135d2:	4603      	mov	r3, r0
 80135d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80135d6:	7bfb      	ldrb	r3, [r7, #15]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d10c      	bne.n	80135f6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	691b      	ldr	r3, [r3, #16]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fd fc3f 	bl	8010e64 <dec_lock>
 80135e6:	4603      	mov	r3, r0
 80135e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80135ea:	7bfb      	ldrb	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d102      	bne.n	80135f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80135f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013600:	b480      	push	{r7}
 8013602:	b087      	sub	sp, #28
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	4613      	mov	r3, r2
 801360c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801360e:	2301      	movs	r3, #1
 8013610:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013616:	4b1f      	ldr	r3, [pc, #124]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013618:	7a5b      	ldrb	r3, [r3, #9]
 801361a:	b2db      	uxtb	r3, r3
 801361c:	2b00      	cmp	r3, #0
 801361e:	d131      	bne.n	8013684 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013620:	4b1c      	ldr	r3, [pc, #112]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013622:	7a5b      	ldrb	r3, [r3, #9]
 8013624:	b2db      	uxtb	r3, r3
 8013626:	461a      	mov	r2, r3
 8013628:	4b1a      	ldr	r3, [pc, #104]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 801362a:	2100      	movs	r1, #0
 801362c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801362e:	4b19      	ldr	r3, [pc, #100]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013630:	7a5b      	ldrb	r3, [r3, #9]
 8013632:	b2db      	uxtb	r3, r3
 8013634:	4a17      	ldr	r2, [pc, #92]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	4413      	add	r3, r2
 801363a:	68fa      	ldr	r2, [r7, #12]
 801363c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801363e:	4b15      	ldr	r3, [pc, #84]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013640:	7a5b      	ldrb	r3, [r3, #9]
 8013642:	b2db      	uxtb	r3, r3
 8013644:	461a      	mov	r2, r3
 8013646:	4b13      	ldr	r3, [pc, #76]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013648:	4413      	add	r3, r2
 801364a:	79fa      	ldrb	r2, [r7, #7]
 801364c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801364e:	4b11      	ldr	r3, [pc, #68]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 8013650:	7a5b      	ldrb	r3, [r3, #9]
 8013652:	b2db      	uxtb	r3, r3
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	b2d1      	uxtb	r1, r2
 8013658:	4a0e      	ldr	r2, [pc, #56]	@ (8013694 <FATFS_LinkDriverEx+0x94>)
 801365a:	7251      	strb	r1, [r2, #9]
 801365c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801365e:	7dbb      	ldrb	r3, [r7, #22]
 8013660:	3330      	adds	r3, #48	@ 0x30
 8013662:	b2da      	uxtb	r2, r3
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	3301      	adds	r3, #1
 801366c:	223a      	movs	r2, #58	@ 0x3a
 801366e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	3302      	adds	r3, #2
 8013674:	222f      	movs	r2, #47	@ 0x2f
 8013676:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	3303      	adds	r3, #3
 801367c:	2200      	movs	r2, #0
 801367e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013684:	7dfb      	ldrb	r3, [r7, #23]
}
 8013686:	4618      	mov	r0, r3
 8013688:	371c      	adds	r7, #28
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop
 8013694:	20001630 	.word	0x20001630

08013698 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80136a2:	2200      	movs	r2, #0
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f7ff ffaa 	bl	8013600 <FATFS_LinkDriverEx>
 80136ac:	4603      	mov	r3, r0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3708      	adds	r7, #8
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
	...

080136b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80136b8:	b480      	push	{r7}
 80136ba:	b085      	sub	sp, #20
 80136bc:	af00      	add	r7, sp, #0
 80136be:	4603      	mov	r3, r0
 80136c0:	6039      	str	r1, [r7, #0]
 80136c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80136c4:	88fb      	ldrh	r3, [r7, #6]
 80136c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80136c8:	d802      	bhi.n	80136d0 <ff_convert+0x18>
		c = chr;
 80136ca:	88fb      	ldrh	r3, [r7, #6]
 80136cc:	81fb      	strh	r3, [r7, #14]
 80136ce:	e025      	b.n	801371c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d00b      	beq.n	80136ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80136d6:	88fb      	ldrh	r3, [r7, #6]
 80136d8:	2bff      	cmp	r3, #255	@ 0xff
 80136da:	d805      	bhi.n	80136e8 <ff_convert+0x30>
 80136dc:	88fb      	ldrh	r3, [r7, #6]
 80136de:	3b80      	subs	r3, #128	@ 0x80
 80136e0:	4a12      	ldr	r2, [pc, #72]	@ (801372c <ff_convert+0x74>)
 80136e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136e6:	e000      	b.n	80136ea <ff_convert+0x32>
 80136e8:	2300      	movs	r3, #0
 80136ea:	81fb      	strh	r3, [r7, #14]
 80136ec:	e016      	b.n	801371c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80136ee:	2300      	movs	r3, #0
 80136f0:	81fb      	strh	r3, [r7, #14]
 80136f2:	e009      	b.n	8013708 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80136f4:	89fb      	ldrh	r3, [r7, #14]
 80136f6:	4a0d      	ldr	r2, [pc, #52]	@ (801372c <ff_convert+0x74>)
 80136f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136fc:	88fa      	ldrh	r2, [r7, #6]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d006      	beq.n	8013710 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013702:	89fb      	ldrh	r3, [r7, #14]
 8013704:	3301      	adds	r3, #1
 8013706:	81fb      	strh	r3, [r7, #14]
 8013708:	89fb      	ldrh	r3, [r7, #14]
 801370a:	2b7f      	cmp	r3, #127	@ 0x7f
 801370c:	d9f2      	bls.n	80136f4 <ff_convert+0x3c>
 801370e:	e000      	b.n	8013712 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013710:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013712:	89fb      	ldrh	r3, [r7, #14]
 8013714:	3380      	adds	r3, #128	@ 0x80
 8013716:	b29b      	uxth	r3, r3
 8013718:	b2db      	uxtb	r3, r3
 801371a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801371c:	89fb      	ldrh	r3, [r7, #14]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3714      	adds	r7, #20
 8013722:	46bd      	mov	sp, r7
 8013724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop
 801372c:	08016a94 	.word	0x08016a94

08013730 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013730:	b480      	push	{r7}
 8013732:	b087      	sub	sp, #28
 8013734:	af00      	add	r7, sp, #0
 8013736:	4603      	mov	r3, r0
 8013738:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801373a:	88fb      	ldrh	r3, [r7, #6]
 801373c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013740:	d201      	bcs.n	8013746 <ff_wtoupper+0x16>
 8013742:	4b3e      	ldr	r3, [pc, #248]	@ (801383c <ff_wtoupper+0x10c>)
 8013744:	e000      	b.n	8013748 <ff_wtoupper+0x18>
 8013746:	4b3e      	ldr	r3, [pc, #248]	@ (8013840 <ff_wtoupper+0x110>)
 8013748:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	1c9a      	adds	r2, r3, #2
 801374e:	617a      	str	r2, [r7, #20]
 8013750:	881b      	ldrh	r3, [r3, #0]
 8013752:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013754:	8a7b      	ldrh	r3, [r7, #18]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d068      	beq.n	801382c <ff_wtoupper+0xfc>
 801375a:	88fa      	ldrh	r2, [r7, #6]
 801375c:	8a7b      	ldrh	r3, [r7, #18]
 801375e:	429a      	cmp	r2, r3
 8013760:	d364      	bcc.n	801382c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	1c9a      	adds	r2, r3, #2
 8013766:	617a      	str	r2, [r7, #20]
 8013768:	881b      	ldrh	r3, [r3, #0]
 801376a:	823b      	strh	r3, [r7, #16]
 801376c:	8a3b      	ldrh	r3, [r7, #16]
 801376e:	0a1b      	lsrs	r3, r3, #8
 8013770:	81fb      	strh	r3, [r7, #14]
 8013772:	8a3b      	ldrh	r3, [r7, #16]
 8013774:	b2db      	uxtb	r3, r3
 8013776:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013778:	88fa      	ldrh	r2, [r7, #6]
 801377a:	8a79      	ldrh	r1, [r7, #18]
 801377c:	8a3b      	ldrh	r3, [r7, #16]
 801377e:	440b      	add	r3, r1
 8013780:	429a      	cmp	r2, r3
 8013782:	da49      	bge.n	8013818 <ff_wtoupper+0xe8>
			switch (cmd) {
 8013784:	89fb      	ldrh	r3, [r7, #14]
 8013786:	2b08      	cmp	r3, #8
 8013788:	d84f      	bhi.n	801382a <ff_wtoupper+0xfa>
 801378a:	a201      	add	r2, pc, #4	@ (adr r2, 8013790 <ff_wtoupper+0x60>)
 801378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013790:	080137b5 	.word	0x080137b5
 8013794:	080137c7 	.word	0x080137c7
 8013798:	080137dd 	.word	0x080137dd
 801379c:	080137e5 	.word	0x080137e5
 80137a0:	080137ed 	.word	0x080137ed
 80137a4:	080137f5 	.word	0x080137f5
 80137a8:	080137fd 	.word	0x080137fd
 80137ac:	08013805 	.word	0x08013805
 80137b0:	0801380d 	.word	0x0801380d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80137b4:	88fa      	ldrh	r2, [r7, #6]
 80137b6:	8a7b      	ldrh	r3, [r7, #18]
 80137b8:	1ad3      	subs	r3, r2, r3
 80137ba:	005b      	lsls	r3, r3, #1
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	4413      	add	r3, r2
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	80fb      	strh	r3, [r7, #6]
 80137c4:	e027      	b.n	8013816 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80137c6:	88fa      	ldrh	r2, [r7, #6]
 80137c8:	8a7b      	ldrh	r3, [r7, #18]
 80137ca:	1ad3      	subs	r3, r2, r3
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	f003 0301 	and.w	r3, r3, #1
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	88fa      	ldrh	r2, [r7, #6]
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	80fb      	strh	r3, [r7, #6]
 80137da:	e01c      	b.n	8013816 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80137dc:	88fb      	ldrh	r3, [r7, #6]
 80137de:	3b10      	subs	r3, #16
 80137e0:	80fb      	strh	r3, [r7, #6]
 80137e2:	e018      	b.n	8013816 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80137e4:	88fb      	ldrh	r3, [r7, #6]
 80137e6:	3b20      	subs	r3, #32
 80137e8:	80fb      	strh	r3, [r7, #6]
 80137ea:	e014      	b.n	8013816 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80137ec:	88fb      	ldrh	r3, [r7, #6]
 80137ee:	3b30      	subs	r3, #48	@ 0x30
 80137f0:	80fb      	strh	r3, [r7, #6]
 80137f2:	e010      	b.n	8013816 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80137f4:	88fb      	ldrh	r3, [r7, #6]
 80137f6:	3b1a      	subs	r3, #26
 80137f8:	80fb      	strh	r3, [r7, #6]
 80137fa:	e00c      	b.n	8013816 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80137fc:	88fb      	ldrh	r3, [r7, #6]
 80137fe:	3308      	adds	r3, #8
 8013800:	80fb      	strh	r3, [r7, #6]
 8013802:	e008      	b.n	8013816 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013804:	88fb      	ldrh	r3, [r7, #6]
 8013806:	3b50      	subs	r3, #80	@ 0x50
 8013808:	80fb      	strh	r3, [r7, #6]
 801380a:	e004      	b.n	8013816 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801380c:	88fb      	ldrh	r3, [r7, #6]
 801380e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8013812:	80fb      	strh	r3, [r7, #6]
 8013814:	bf00      	nop
			}
			break;
 8013816:	e008      	b.n	801382a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013818:	89fb      	ldrh	r3, [r7, #14]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d195      	bne.n	801374a <ff_wtoupper+0x1a>
 801381e:	8a3b      	ldrh	r3, [r7, #16]
 8013820:	005b      	lsls	r3, r3, #1
 8013822:	697a      	ldr	r2, [r7, #20]
 8013824:	4413      	add	r3, r2
 8013826:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013828:	e78f      	b.n	801374a <ff_wtoupper+0x1a>
			break;
 801382a:	bf00      	nop
	}

	return chr;
 801382c:	88fb      	ldrh	r3, [r7, #6]
}
 801382e:	4618      	mov	r0, r3
 8013830:	371c      	adds	r7, #28
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop
 801383c:	08016b94 	.word	0x08016b94
 8013840:	08016d88 	.word	0x08016d88

08013844 <realloc>:
 8013844:	4b02      	ldr	r3, [pc, #8]	@ (8013850 <realloc+0xc>)
 8013846:	460a      	mov	r2, r1
 8013848:	4601      	mov	r1, r0
 801384a:	6818      	ldr	r0, [r3, #0]
 801384c:	f000 b802 	b.w	8013854 <_realloc_r>
 8013850:	2000015c 	.word	0x2000015c

08013854 <_realloc_r>:
 8013854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013858:	4680      	mov	r8, r0
 801385a:	4615      	mov	r5, r2
 801385c:	460c      	mov	r4, r1
 801385e:	b921      	cbnz	r1, 801386a <_realloc_r+0x16>
 8013860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013864:	4611      	mov	r1, r2
 8013866:	f000 b8f1 	b.w	8013a4c <_malloc_r>
 801386a:	b92a      	cbnz	r2, 8013878 <_realloc_r+0x24>
 801386c:	f000 f882 	bl	8013974 <_free_r>
 8013870:	2400      	movs	r4, #0
 8013872:	4620      	mov	r0, r4
 8013874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013878:	f000 f974 	bl	8013b64 <_malloc_usable_size_r>
 801387c:	4285      	cmp	r5, r0
 801387e:	4606      	mov	r6, r0
 8013880:	d802      	bhi.n	8013888 <_realloc_r+0x34>
 8013882:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013886:	d8f4      	bhi.n	8013872 <_realloc_r+0x1e>
 8013888:	4629      	mov	r1, r5
 801388a:	4640      	mov	r0, r8
 801388c:	f000 f8de 	bl	8013a4c <_malloc_r>
 8013890:	4607      	mov	r7, r0
 8013892:	2800      	cmp	r0, #0
 8013894:	d0ec      	beq.n	8013870 <_realloc_r+0x1c>
 8013896:	42b5      	cmp	r5, r6
 8013898:	462a      	mov	r2, r5
 801389a:	4621      	mov	r1, r4
 801389c:	bf28      	it	cs
 801389e:	4632      	movcs	r2, r6
 80138a0:	f000 f85a 	bl	8013958 <memcpy>
 80138a4:	4621      	mov	r1, r4
 80138a6:	4640      	mov	r0, r8
 80138a8:	f000 f864 	bl	8013974 <_free_r>
 80138ac:	463c      	mov	r4, r7
 80138ae:	e7e0      	b.n	8013872 <_realloc_r+0x1e>

080138b0 <siprintf>:
 80138b0:	b40e      	push	{r1, r2, r3}
 80138b2:	b500      	push	{lr}
 80138b4:	b09c      	sub	sp, #112	@ 0x70
 80138b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80138b8:	9002      	str	r0, [sp, #8]
 80138ba:	9006      	str	r0, [sp, #24]
 80138bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80138c0:	4809      	ldr	r0, [pc, #36]	@ (80138e8 <siprintf+0x38>)
 80138c2:	9107      	str	r1, [sp, #28]
 80138c4:	9104      	str	r1, [sp, #16]
 80138c6:	4909      	ldr	r1, [pc, #36]	@ (80138ec <siprintf+0x3c>)
 80138c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80138cc:	9105      	str	r1, [sp, #20]
 80138ce:	6800      	ldr	r0, [r0, #0]
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	a902      	add	r1, sp, #8
 80138d4:	f000 f9aa 	bl	8013c2c <_svfiprintf_r>
 80138d8:	9b02      	ldr	r3, [sp, #8]
 80138da:	2200      	movs	r2, #0
 80138dc:	701a      	strb	r2, [r3, #0]
 80138de:	b01c      	add	sp, #112	@ 0x70
 80138e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80138e4:	b003      	add	sp, #12
 80138e6:	4770      	bx	lr
 80138e8:	2000015c 	.word	0x2000015c
 80138ec:	ffff0208 	.word	0xffff0208

080138f0 <memset>:
 80138f0:	4402      	add	r2, r0
 80138f2:	4603      	mov	r3, r0
 80138f4:	4293      	cmp	r3, r2
 80138f6:	d100      	bne.n	80138fa <memset+0xa>
 80138f8:	4770      	bx	lr
 80138fa:	f803 1b01 	strb.w	r1, [r3], #1
 80138fe:	e7f9      	b.n	80138f4 <memset+0x4>

08013900 <__errno>:
 8013900:	4b01      	ldr	r3, [pc, #4]	@ (8013908 <__errno+0x8>)
 8013902:	6818      	ldr	r0, [r3, #0]
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	2000015c 	.word	0x2000015c

0801390c <__libc_init_array>:
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	4d0d      	ldr	r5, [pc, #52]	@ (8013944 <__libc_init_array+0x38>)
 8013910:	4c0d      	ldr	r4, [pc, #52]	@ (8013948 <__libc_init_array+0x3c>)
 8013912:	1b64      	subs	r4, r4, r5
 8013914:	10a4      	asrs	r4, r4, #2
 8013916:	2600      	movs	r6, #0
 8013918:	42a6      	cmp	r6, r4
 801391a:	d109      	bne.n	8013930 <__libc_init_array+0x24>
 801391c:	4d0b      	ldr	r5, [pc, #44]	@ (801394c <__libc_init_array+0x40>)
 801391e:	4c0c      	ldr	r4, [pc, #48]	@ (8013950 <__libc_init_array+0x44>)
 8013920:	f000 fc38 	bl	8014194 <_init>
 8013924:	1b64      	subs	r4, r4, r5
 8013926:	10a4      	asrs	r4, r4, #2
 8013928:	2600      	movs	r6, #0
 801392a:	42a6      	cmp	r6, r4
 801392c:	d105      	bne.n	801393a <__libc_init_array+0x2e>
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	f855 3b04 	ldr.w	r3, [r5], #4
 8013934:	4798      	blx	r3
 8013936:	3601      	adds	r6, #1
 8013938:	e7ee      	b.n	8013918 <__libc_init_array+0xc>
 801393a:	f855 3b04 	ldr.w	r3, [r5], #4
 801393e:	4798      	blx	r3
 8013940:	3601      	adds	r6, #1
 8013942:	e7f2      	b.n	801392a <__libc_init_array+0x1e>
 8013944:	08016e80 	.word	0x08016e80
 8013948:	08016e80 	.word	0x08016e80
 801394c:	08016e80 	.word	0x08016e80
 8013950:	08016e84 	.word	0x08016e84

08013954 <__retarget_lock_acquire_recursive>:
 8013954:	4770      	bx	lr

08013956 <__retarget_lock_release_recursive>:
 8013956:	4770      	bx	lr

08013958 <memcpy>:
 8013958:	440a      	add	r2, r1
 801395a:	4291      	cmp	r1, r2
 801395c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013960:	d100      	bne.n	8013964 <memcpy+0xc>
 8013962:	4770      	bx	lr
 8013964:	b510      	push	{r4, lr}
 8013966:	f811 4b01 	ldrb.w	r4, [r1], #1
 801396a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801396e:	4291      	cmp	r1, r2
 8013970:	d1f9      	bne.n	8013966 <memcpy+0xe>
 8013972:	bd10      	pop	{r4, pc}

08013974 <_free_r>:
 8013974:	b538      	push	{r3, r4, r5, lr}
 8013976:	4605      	mov	r5, r0
 8013978:	2900      	cmp	r1, #0
 801397a:	d041      	beq.n	8013a00 <_free_r+0x8c>
 801397c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013980:	1f0c      	subs	r4, r1, #4
 8013982:	2b00      	cmp	r3, #0
 8013984:	bfb8      	it	lt
 8013986:	18e4      	addlt	r4, r4, r3
 8013988:	f000 f8e0 	bl	8013b4c <__malloc_lock>
 801398c:	4a1d      	ldr	r2, [pc, #116]	@ (8013a04 <_free_r+0x90>)
 801398e:	6813      	ldr	r3, [r2, #0]
 8013990:	b933      	cbnz	r3, 80139a0 <_free_r+0x2c>
 8013992:	6063      	str	r3, [r4, #4]
 8013994:	6014      	str	r4, [r2, #0]
 8013996:	4628      	mov	r0, r5
 8013998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801399c:	f000 b8dc 	b.w	8013b58 <__malloc_unlock>
 80139a0:	42a3      	cmp	r3, r4
 80139a2:	d908      	bls.n	80139b6 <_free_r+0x42>
 80139a4:	6820      	ldr	r0, [r4, #0]
 80139a6:	1821      	adds	r1, r4, r0
 80139a8:	428b      	cmp	r3, r1
 80139aa:	bf01      	itttt	eq
 80139ac:	6819      	ldreq	r1, [r3, #0]
 80139ae:	685b      	ldreq	r3, [r3, #4]
 80139b0:	1809      	addeq	r1, r1, r0
 80139b2:	6021      	streq	r1, [r4, #0]
 80139b4:	e7ed      	b.n	8013992 <_free_r+0x1e>
 80139b6:	461a      	mov	r2, r3
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	b10b      	cbz	r3, 80139c0 <_free_r+0x4c>
 80139bc:	42a3      	cmp	r3, r4
 80139be:	d9fa      	bls.n	80139b6 <_free_r+0x42>
 80139c0:	6811      	ldr	r1, [r2, #0]
 80139c2:	1850      	adds	r0, r2, r1
 80139c4:	42a0      	cmp	r0, r4
 80139c6:	d10b      	bne.n	80139e0 <_free_r+0x6c>
 80139c8:	6820      	ldr	r0, [r4, #0]
 80139ca:	4401      	add	r1, r0
 80139cc:	1850      	adds	r0, r2, r1
 80139ce:	4283      	cmp	r3, r0
 80139d0:	6011      	str	r1, [r2, #0]
 80139d2:	d1e0      	bne.n	8013996 <_free_r+0x22>
 80139d4:	6818      	ldr	r0, [r3, #0]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	6053      	str	r3, [r2, #4]
 80139da:	4408      	add	r0, r1
 80139dc:	6010      	str	r0, [r2, #0]
 80139de:	e7da      	b.n	8013996 <_free_r+0x22>
 80139e0:	d902      	bls.n	80139e8 <_free_r+0x74>
 80139e2:	230c      	movs	r3, #12
 80139e4:	602b      	str	r3, [r5, #0]
 80139e6:	e7d6      	b.n	8013996 <_free_r+0x22>
 80139e8:	6820      	ldr	r0, [r4, #0]
 80139ea:	1821      	adds	r1, r4, r0
 80139ec:	428b      	cmp	r3, r1
 80139ee:	bf04      	itt	eq
 80139f0:	6819      	ldreq	r1, [r3, #0]
 80139f2:	685b      	ldreq	r3, [r3, #4]
 80139f4:	6063      	str	r3, [r4, #4]
 80139f6:	bf04      	itt	eq
 80139f8:	1809      	addeq	r1, r1, r0
 80139fa:	6021      	streq	r1, [r4, #0]
 80139fc:	6054      	str	r4, [r2, #4]
 80139fe:	e7ca      	b.n	8013996 <_free_r+0x22>
 8013a00:	bd38      	pop	{r3, r4, r5, pc}
 8013a02:	bf00      	nop
 8013a04:	20001780 	.word	0x20001780

08013a08 <sbrk_aligned>:
 8013a08:	b570      	push	{r4, r5, r6, lr}
 8013a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8013a48 <sbrk_aligned+0x40>)
 8013a0c:	460c      	mov	r4, r1
 8013a0e:	6831      	ldr	r1, [r6, #0]
 8013a10:	4605      	mov	r5, r0
 8013a12:	b911      	cbnz	r1, 8013a1a <sbrk_aligned+0x12>
 8013a14:	f000 fbae 	bl	8014174 <_sbrk_r>
 8013a18:	6030      	str	r0, [r6, #0]
 8013a1a:	4621      	mov	r1, r4
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f000 fba9 	bl	8014174 <_sbrk_r>
 8013a22:	1c43      	adds	r3, r0, #1
 8013a24:	d103      	bne.n	8013a2e <sbrk_aligned+0x26>
 8013a26:	f04f 34ff 	mov.w	r4, #4294967295
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	bd70      	pop	{r4, r5, r6, pc}
 8013a2e:	1cc4      	adds	r4, r0, #3
 8013a30:	f024 0403 	bic.w	r4, r4, #3
 8013a34:	42a0      	cmp	r0, r4
 8013a36:	d0f8      	beq.n	8013a2a <sbrk_aligned+0x22>
 8013a38:	1a21      	subs	r1, r4, r0
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f000 fb9a 	bl	8014174 <_sbrk_r>
 8013a40:	3001      	adds	r0, #1
 8013a42:	d1f2      	bne.n	8013a2a <sbrk_aligned+0x22>
 8013a44:	e7ef      	b.n	8013a26 <sbrk_aligned+0x1e>
 8013a46:	bf00      	nop
 8013a48:	2000177c 	.word	0x2000177c

08013a4c <_malloc_r>:
 8013a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a50:	1ccd      	adds	r5, r1, #3
 8013a52:	f025 0503 	bic.w	r5, r5, #3
 8013a56:	3508      	adds	r5, #8
 8013a58:	2d0c      	cmp	r5, #12
 8013a5a:	bf38      	it	cc
 8013a5c:	250c      	movcc	r5, #12
 8013a5e:	2d00      	cmp	r5, #0
 8013a60:	4606      	mov	r6, r0
 8013a62:	db01      	blt.n	8013a68 <_malloc_r+0x1c>
 8013a64:	42a9      	cmp	r1, r5
 8013a66:	d904      	bls.n	8013a72 <_malloc_r+0x26>
 8013a68:	230c      	movs	r3, #12
 8013a6a:	6033      	str	r3, [r6, #0]
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013b48 <_malloc_r+0xfc>
 8013a76:	f000 f869 	bl	8013b4c <__malloc_lock>
 8013a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a7e:	461c      	mov	r4, r3
 8013a80:	bb44      	cbnz	r4, 8013ad4 <_malloc_r+0x88>
 8013a82:	4629      	mov	r1, r5
 8013a84:	4630      	mov	r0, r6
 8013a86:	f7ff ffbf 	bl	8013a08 <sbrk_aligned>
 8013a8a:	1c43      	adds	r3, r0, #1
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	d158      	bne.n	8013b42 <_malloc_r+0xf6>
 8013a90:	f8d8 4000 	ldr.w	r4, [r8]
 8013a94:	4627      	mov	r7, r4
 8013a96:	2f00      	cmp	r7, #0
 8013a98:	d143      	bne.n	8013b22 <_malloc_r+0xd6>
 8013a9a:	2c00      	cmp	r4, #0
 8013a9c:	d04b      	beq.n	8013b36 <_malloc_r+0xea>
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	eb04 0903 	add.w	r9, r4, r3
 8013aa8:	f000 fb64 	bl	8014174 <_sbrk_r>
 8013aac:	4581      	cmp	r9, r0
 8013aae:	d142      	bne.n	8013b36 <_malloc_r+0xea>
 8013ab0:	6821      	ldr	r1, [r4, #0]
 8013ab2:	1a6d      	subs	r5, r5, r1
 8013ab4:	4629      	mov	r1, r5
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f7ff ffa6 	bl	8013a08 <sbrk_aligned>
 8013abc:	3001      	adds	r0, #1
 8013abe:	d03a      	beq.n	8013b36 <_malloc_r+0xea>
 8013ac0:	6823      	ldr	r3, [r4, #0]
 8013ac2:	442b      	add	r3, r5
 8013ac4:	6023      	str	r3, [r4, #0]
 8013ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8013aca:	685a      	ldr	r2, [r3, #4]
 8013acc:	bb62      	cbnz	r2, 8013b28 <_malloc_r+0xdc>
 8013ace:	f8c8 7000 	str.w	r7, [r8]
 8013ad2:	e00f      	b.n	8013af4 <_malloc_r+0xa8>
 8013ad4:	6822      	ldr	r2, [r4, #0]
 8013ad6:	1b52      	subs	r2, r2, r5
 8013ad8:	d420      	bmi.n	8013b1c <_malloc_r+0xd0>
 8013ada:	2a0b      	cmp	r2, #11
 8013adc:	d917      	bls.n	8013b0e <_malloc_r+0xc2>
 8013ade:	1961      	adds	r1, r4, r5
 8013ae0:	42a3      	cmp	r3, r4
 8013ae2:	6025      	str	r5, [r4, #0]
 8013ae4:	bf18      	it	ne
 8013ae6:	6059      	strne	r1, [r3, #4]
 8013ae8:	6863      	ldr	r3, [r4, #4]
 8013aea:	bf08      	it	eq
 8013aec:	f8c8 1000 	streq.w	r1, [r8]
 8013af0:	5162      	str	r2, [r4, r5]
 8013af2:	604b      	str	r3, [r1, #4]
 8013af4:	4630      	mov	r0, r6
 8013af6:	f000 f82f 	bl	8013b58 <__malloc_unlock>
 8013afa:	f104 000b 	add.w	r0, r4, #11
 8013afe:	1d23      	adds	r3, r4, #4
 8013b00:	f020 0007 	bic.w	r0, r0, #7
 8013b04:	1ac2      	subs	r2, r0, r3
 8013b06:	bf1c      	itt	ne
 8013b08:	1a1b      	subne	r3, r3, r0
 8013b0a:	50a3      	strne	r3, [r4, r2]
 8013b0c:	e7af      	b.n	8013a6e <_malloc_r+0x22>
 8013b0e:	6862      	ldr	r2, [r4, #4]
 8013b10:	42a3      	cmp	r3, r4
 8013b12:	bf0c      	ite	eq
 8013b14:	f8c8 2000 	streq.w	r2, [r8]
 8013b18:	605a      	strne	r2, [r3, #4]
 8013b1a:	e7eb      	b.n	8013af4 <_malloc_r+0xa8>
 8013b1c:	4623      	mov	r3, r4
 8013b1e:	6864      	ldr	r4, [r4, #4]
 8013b20:	e7ae      	b.n	8013a80 <_malloc_r+0x34>
 8013b22:	463c      	mov	r4, r7
 8013b24:	687f      	ldr	r7, [r7, #4]
 8013b26:	e7b6      	b.n	8013a96 <_malloc_r+0x4a>
 8013b28:	461a      	mov	r2, r3
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	42a3      	cmp	r3, r4
 8013b2e:	d1fb      	bne.n	8013b28 <_malloc_r+0xdc>
 8013b30:	2300      	movs	r3, #0
 8013b32:	6053      	str	r3, [r2, #4]
 8013b34:	e7de      	b.n	8013af4 <_malloc_r+0xa8>
 8013b36:	230c      	movs	r3, #12
 8013b38:	6033      	str	r3, [r6, #0]
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	f000 f80c 	bl	8013b58 <__malloc_unlock>
 8013b40:	e794      	b.n	8013a6c <_malloc_r+0x20>
 8013b42:	6005      	str	r5, [r0, #0]
 8013b44:	e7d6      	b.n	8013af4 <_malloc_r+0xa8>
 8013b46:	bf00      	nop
 8013b48:	20001780 	.word	0x20001780

08013b4c <__malloc_lock>:
 8013b4c:	4801      	ldr	r0, [pc, #4]	@ (8013b54 <__malloc_lock+0x8>)
 8013b4e:	f7ff bf01 	b.w	8013954 <__retarget_lock_acquire_recursive>
 8013b52:	bf00      	nop
 8013b54:	20001778 	.word	0x20001778

08013b58 <__malloc_unlock>:
 8013b58:	4801      	ldr	r0, [pc, #4]	@ (8013b60 <__malloc_unlock+0x8>)
 8013b5a:	f7ff befc 	b.w	8013956 <__retarget_lock_release_recursive>
 8013b5e:	bf00      	nop
 8013b60:	20001778 	.word	0x20001778

08013b64 <_malloc_usable_size_r>:
 8013b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b68:	1f18      	subs	r0, r3, #4
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	bfbc      	itt	lt
 8013b6e:	580b      	ldrlt	r3, [r1, r0]
 8013b70:	18c0      	addlt	r0, r0, r3
 8013b72:	4770      	bx	lr

08013b74 <__ssputs_r>:
 8013b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b78:	688e      	ldr	r6, [r1, #8]
 8013b7a:	461f      	mov	r7, r3
 8013b7c:	42be      	cmp	r6, r7
 8013b7e:	680b      	ldr	r3, [r1, #0]
 8013b80:	4682      	mov	sl, r0
 8013b82:	460c      	mov	r4, r1
 8013b84:	4690      	mov	r8, r2
 8013b86:	d82d      	bhi.n	8013be4 <__ssputs_r+0x70>
 8013b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013b90:	d026      	beq.n	8013be0 <__ssputs_r+0x6c>
 8013b92:	6965      	ldr	r5, [r4, #20]
 8013b94:	6909      	ldr	r1, [r1, #16]
 8013b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b9a:	eba3 0901 	sub.w	r9, r3, r1
 8013b9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ba2:	1c7b      	adds	r3, r7, #1
 8013ba4:	444b      	add	r3, r9
 8013ba6:	106d      	asrs	r5, r5, #1
 8013ba8:	429d      	cmp	r5, r3
 8013baa:	bf38      	it	cc
 8013bac:	461d      	movcc	r5, r3
 8013bae:	0553      	lsls	r3, r2, #21
 8013bb0:	d527      	bpl.n	8013c02 <__ssputs_r+0x8e>
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	f7ff ff4a 	bl	8013a4c <_malloc_r>
 8013bb8:	4606      	mov	r6, r0
 8013bba:	b360      	cbz	r0, 8013c16 <__ssputs_r+0xa2>
 8013bbc:	6921      	ldr	r1, [r4, #16]
 8013bbe:	464a      	mov	r2, r9
 8013bc0:	f7ff feca 	bl	8013958 <memcpy>
 8013bc4:	89a3      	ldrh	r3, [r4, #12]
 8013bc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013bce:	81a3      	strh	r3, [r4, #12]
 8013bd0:	6126      	str	r6, [r4, #16]
 8013bd2:	6165      	str	r5, [r4, #20]
 8013bd4:	444e      	add	r6, r9
 8013bd6:	eba5 0509 	sub.w	r5, r5, r9
 8013bda:	6026      	str	r6, [r4, #0]
 8013bdc:	60a5      	str	r5, [r4, #8]
 8013bde:	463e      	mov	r6, r7
 8013be0:	42be      	cmp	r6, r7
 8013be2:	d900      	bls.n	8013be6 <__ssputs_r+0x72>
 8013be4:	463e      	mov	r6, r7
 8013be6:	6820      	ldr	r0, [r4, #0]
 8013be8:	4632      	mov	r2, r6
 8013bea:	4641      	mov	r1, r8
 8013bec:	f000 faa8 	bl	8014140 <memmove>
 8013bf0:	68a3      	ldr	r3, [r4, #8]
 8013bf2:	1b9b      	subs	r3, r3, r6
 8013bf4:	60a3      	str	r3, [r4, #8]
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	4433      	add	r3, r6
 8013bfa:	6023      	str	r3, [r4, #0]
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c02:	462a      	mov	r2, r5
 8013c04:	f7ff fe26 	bl	8013854 <_realloc_r>
 8013c08:	4606      	mov	r6, r0
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d1e0      	bne.n	8013bd0 <__ssputs_r+0x5c>
 8013c0e:	6921      	ldr	r1, [r4, #16]
 8013c10:	4650      	mov	r0, sl
 8013c12:	f7ff feaf 	bl	8013974 <_free_r>
 8013c16:	230c      	movs	r3, #12
 8013c18:	f8ca 3000 	str.w	r3, [sl]
 8013c1c:	89a3      	ldrh	r3, [r4, #12]
 8013c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c22:	81a3      	strh	r3, [r4, #12]
 8013c24:	f04f 30ff 	mov.w	r0, #4294967295
 8013c28:	e7e9      	b.n	8013bfe <__ssputs_r+0x8a>
	...

08013c2c <_svfiprintf_r>:
 8013c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c30:	4698      	mov	r8, r3
 8013c32:	898b      	ldrh	r3, [r1, #12]
 8013c34:	061b      	lsls	r3, r3, #24
 8013c36:	b09d      	sub	sp, #116	@ 0x74
 8013c38:	4607      	mov	r7, r0
 8013c3a:	460d      	mov	r5, r1
 8013c3c:	4614      	mov	r4, r2
 8013c3e:	d510      	bpl.n	8013c62 <_svfiprintf_r+0x36>
 8013c40:	690b      	ldr	r3, [r1, #16]
 8013c42:	b973      	cbnz	r3, 8013c62 <_svfiprintf_r+0x36>
 8013c44:	2140      	movs	r1, #64	@ 0x40
 8013c46:	f7ff ff01 	bl	8013a4c <_malloc_r>
 8013c4a:	6028      	str	r0, [r5, #0]
 8013c4c:	6128      	str	r0, [r5, #16]
 8013c4e:	b930      	cbnz	r0, 8013c5e <_svfiprintf_r+0x32>
 8013c50:	230c      	movs	r3, #12
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	f04f 30ff 	mov.w	r0, #4294967295
 8013c58:	b01d      	add	sp, #116	@ 0x74
 8013c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5e:	2340      	movs	r3, #64	@ 0x40
 8013c60:	616b      	str	r3, [r5, #20]
 8013c62:	2300      	movs	r3, #0
 8013c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c66:	2320      	movs	r3, #32
 8013c68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c70:	2330      	movs	r3, #48	@ 0x30
 8013c72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013e10 <_svfiprintf_r+0x1e4>
 8013c76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c7a:	f04f 0901 	mov.w	r9, #1
 8013c7e:	4623      	mov	r3, r4
 8013c80:	469a      	mov	sl, r3
 8013c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c86:	b10a      	cbz	r2, 8013c8c <_svfiprintf_r+0x60>
 8013c88:	2a25      	cmp	r2, #37	@ 0x25
 8013c8a:	d1f9      	bne.n	8013c80 <_svfiprintf_r+0x54>
 8013c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8013c90:	d00b      	beq.n	8013caa <_svfiprintf_r+0x7e>
 8013c92:	465b      	mov	r3, fp
 8013c94:	4622      	mov	r2, r4
 8013c96:	4629      	mov	r1, r5
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f7ff ff6b 	bl	8013b74 <__ssputs_r>
 8013c9e:	3001      	adds	r0, #1
 8013ca0:	f000 80a7 	beq.w	8013df2 <_svfiprintf_r+0x1c6>
 8013ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ca6:	445a      	add	r2, fp
 8013ca8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013caa:	f89a 3000 	ldrb.w	r3, [sl]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f000 809f 	beq.w	8013df2 <_svfiprintf_r+0x1c6>
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8013cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cbe:	f10a 0a01 	add.w	sl, sl, #1
 8013cc2:	9304      	str	r3, [sp, #16]
 8013cc4:	9307      	str	r3, [sp, #28]
 8013cc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013cca:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ccc:	4654      	mov	r4, sl
 8013cce:	2205      	movs	r2, #5
 8013cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cd4:	484e      	ldr	r0, [pc, #312]	@ (8013e10 <_svfiprintf_r+0x1e4>)
 8013cd6:	f7ec fa8b 	bl	80001f0 <memchr>
 8013cda:	9a04      	ldr	r2, [sp, #16]
 8013cdc:	b9d8      	cbnz	r0, 8013d16 <_svfiprintf_r+0xea>
 8013cde:	06d0      	lsls	r0, r2, #27
 8013ce0:	bf44      	itt	mi
 8013ce2:	2320      	movmi	r3, #32
 8013ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ce8:	0711      	lsls	r1, r2, #28
 8013cea:	bf44      	itt	mi
 8013cec:	232b      	movmi	r3, #43	@ 0x2b
 8013cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8013cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cf8:	d015      	beq.n	8013d26 <_svfiprintf_r+0xfa>
 8013cfa:	9a07      	ldr	r2, [sp, #28]
 8013cfc:	4654      	mov	r4, sl
 8013cfe:	2000      	movs	r0, #0
 8013d00:	f04f 0c0a 	mov.w	ip, #10
 8013d04:	4621      	mov	r1, r4
 8013d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d0a:	3b30      	subs	r3, #48	@ 0x30
 8013d0c:	2b09      	cmp	r3, #9
 8013d0e:	d94b      	bls.n	8013da8 <_svfiprintf_r+0x17c>
 8013d10:	b1b0      	cbz	r0, 8013d40 <_svfiprintf_r+0x114>
 8013d12:	9207      	str	r2, [sp, #28]
 8013d14:	e014      	b.n	8013d40 <_svfiprintf_r+0x114>
 8013d16:	eba0 0308 	sub.w	r3, r0, r8
 8013d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	9304      	str	r3, [sp, #16]
 8013d22:	46a2      	mov	sl, r4
 8013d24:	e7d2      	b.n	8013ccc <_svfiprintf_r+0xa0>
 8013d26:	9b03      	ldr	r3, [sp, #12]
 8013d28:	1d19      	adds	r1, r3, #4
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	9103      	str	r1, [sp, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	bfbb      	ittet	lt
 8013d32:	425b      	neglt	r3, r3
 8013d34:	f042 0202 	orrlt.w	r2, r2, #2
 8013d38:	9307      	strge	r3, [sp, #28]
 8013d3a:	9307      	strlt	r3, [sp, #28]
 8013d3c:	bfb8      	it	lt
 8013d3e:	9204      	strlt	r2, [sp, #16]
 8013d40:	7823      	ldrb	r3, [r4, #0]
 8013d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d44:	d10a      	bne.n	8013d5c <_svfiprintf_r+0x130>
 8013d46:	7863      	ldrb	r3, [r4, #1]
 8013d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d4a:	d132      	bne.n	8013db2 <_svfiprintf_r+0x186>
 8013d4c:	9b03      	ldr	r3, [sp, #12]
 8013d4e:	1d1a      	adds	r2, r3, #4
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	9203      	str	r2, [sp, #12]
 8013d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d58:	3402      	adds	r4, #2
 8013d5a:	9305      	str	r3, [sp, #20]
 8013d5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013e20 <_svfiprintf_r+0x1f4>
 8013d60:	7821      	ldrb	r1, [r4, #0]
 8013d62:	2203      	movs	r2, #3
 8013d64:	4650      	mov	r0, sl
 8013d66:	f7ec fa43 	bl	80001f0 <memchr>
 8013d6a:	b138      	cbz	r0, 8013d7c <_svfiprintf_r+0x150>
 8013d6c:	9b04      	ldr	r3, [sp, #16]
 8013d6e:	eba0 000a 	sub.w	r0, r0, sl
 8013d72:	2240      	movs	r2, #64	@ 0x40
 8013d74:	4082      	lsls	r2, r0
 8013d76:	4313      	orrs	r3, r2
 8013d78:	3401      	adds	r4, #1
 8013d7a:	9304      	str	r3, [sp, #16]
 8013d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d80:	4824      	ldr	r0, [pc, #144]	@ (8013e14 <_svfiprintf_r+0x1e8>)
 8013d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d86:	2206      	movs	r2, #6
 8013d88:	f7ec fa32 	bl	80001f0 <memchr>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d036      	beq.n	8013dfe <_svfiprintf_r+0x1d2>
 8013d90:	4b21      	ldr	r3, [pc, #132]	@ (8013e18 <_svfiprintf_r+0x1ec>)
 8013d92:	bb1b      	cbnz	r3, 8013ddc <_svfiprintf_r+0x1b0>
 8013d94:	9b03      	ldr	r3, [sp, #12]
 8013d96:	3307      	adds	r3, #7
 8013d98:	f023 0307 	bic.w	r3, r3, #7
 8013d9c:	3308      	adds	r3, #8
 8013d9e:	9303      	str	r3, [sp, #12]
 8013da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013da2:	4433      	add	r3, r6
 8013da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013da6:	e76a      	b.n	8013c7e <_svfiprintf_r+0x52>
 8013da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013dac:	460c      	mov	r4, r1
 8013dae:	2001      	movs	r0, #1
 8013db0:	e7a8      	b.n	8013d04 <_svfiprintf_r+0xd8>
 8013db2:	2300      	movs	r3, #0
 8013db4:	3401      	adds	r4, #1
 8013db6:	9305      	str	r3, [sp, #20]
 8013db8:	4619      	mov	r1, r3
 8013dba:	f04f 0c0a 	mov.w	ip, #10
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dc4:	3a30      	subs	r2, #48	@ 0x30
 8013dc6:	2a09      	cmp	r2, #9
 8013dc8:	d903      	bls.n	8013dd2 <_svfiprintf_r+0x1a6>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d0c6      	beq.n	8013d5c <_svfiprintf_r+0x130>
 8013dce:	9105      	str	r1, [sp, #20]
 8013dd0:	e7c4      	b.n	8013d5c <_svfiprintf_r+0x130>
 8013dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	2301      	movs	r3, #1
 8013dda:	e7f0      	b.n	8013dbe <_svfiprintf_r+0x192>
 8013ddc:	ab03      	add	r3, sp, #12
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	462a      	mov	r2, r5
 8013de2:	4b0e      	ldr	r3, [pc, #56]	@ (8013e1c <_svfiprintf_r+0x1f0>)
 8013de4:	a904      	add	r1, sp, #16
 8013de6:	4638      	mov	r0, r7
 8013de8:	f3af 8000 	nop.w
 8013dec:	1c42      	adds	r2, r0, #1
 8013dee:	4606      	mov	r6, r0
 8013df0:	d1d6      	bne.n	8013da0 <_svfiprintf_r+0x174>
 8013df2:	89ab      	ldrh	r3, [r5, #12]
 8013df4:	065b      	lsls	r3, r3, #25
 8013df6:	f53f af2d 	bmi.w	8013c54 <_svfiprintf_r+0x28>
 8013dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013dfc:	e72c      	b.n	8013c58 <_svfiprintf_r+0x2c>
 8013dfe:	ab03      	add	r3, sp, #12
 8013e00:	9300      	str	r3, [sp, #0]
 8013e02:	462a      	mov	r2, r5
 8013e04:	4b05      	ldr	r3, [pc, #20]	@ (8013e1c <_svfiprintf_r+0x1f0>)
 8013e06:	a904      	add	r1, sp, #16
 8013e08:	4638      	mov	r0, r7
 8013e0a:	f000 f879 	bl	8013f00 <_printf_i>
 8013e0e:	e7ed      	b.n	8013dec <_svfiprintf_r+0x1c0>
 8013e10:	08016e44 	.word	0x08016e44
 8013e14:	08016e4e 	.word	0x08016e4e
 8013e18:	00000000 	.word	0x00000000
 8013e1c:	08013b75 	.word	0x08013b75
 8013e20:	08016e4a 	.word	0x08016e4a

08013e24 <_printf_common>:
 8013e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e28:	4616      	mov	r6, r2
 8013e2a:	4698      	mov	r8, r3
 8013e2c:	688a      	ldr	r2, [r1, #8]
 8013e2e:	690b      	ldr	r3, [r1, #16]
 8013e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e34:	4293      	cmp	r3, r2
 8013e36:	bfb8      	it	lt
 8013e38:	4613      	movlt	r3, r2
 8013e3a:	6033      	str	r3, [r6, #0]
 8013e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013e40:	4607      	mov	r7, r0
 8013e42:	460c      	mov	r4, r1
 8013e44:	b10a      	cbz	r2, 8013e4a <_printf_common+0x26>
 8013e46:	3301      	adds	r3, #1
 8013e48:	6033      	str	r3, [r6, #0]
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	0699      	lsls	r1, r3, #26
 8013e4e:	bf42      	ittt	mi
 8013e50:	6833      	ldrmi	r3, [r6, #0]
 8013e52:	3302      	addmi	r3, #2
 8013e54:	6033      	strmi	r3, [r6, #0]
 8013e56:	6825      	ldr	r5, [r4, #0]
 8013e58:	f015 0506 	ands.w	r5, r5, #6
 8013e5c:	d106      	bne.n	8013e6c <_printf_common+0x48>
 8013e5e:	f104 0a19 	add.w	sl, r4, #25
 8013e62:	68e3      	ldr	r3, [r4, #12]
 8013e64:	6832      	ldr	r2, [r6, #0]
 8013e66:	1a9b      	subs	r3, r3, r2
 8013e68:	42ab      	cmp	r3, r5
 8013e6a:	dc26      	bgt.n	8013eba <_printf_common+0x96>
 8013e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013e70:	6822      	ldr	r2, [r4, #0]
 8013e72:	3b00      	subs	r3, #0
 8013e74:	bf18      	it	ne
 8013e76:	2301      	movne	r3, #1
 8013e78:	0692      	lsls	r2, r2, #26
 8013e7a:	d42b      	bmi.n	8013ed4 <_printf_common+0xb0>
 8013e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013e80:	4641      	mov	r1, r8
 8013e82:	4638      	mov	r0, r7
 8013e84:	47c8      	blx	r9
 8013e86:	3001      	adds	r0, #1
 8013e88:	d01e      	beq.n	8013ec8 <_printf_common+0xa4>
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	6922      	ldr	r2, [r4, #16]
 8013e8e:	f003 0306 	and.w	r3, r3, #6
 8013e92:	2b04      	cmp	r3, #4
 8013e94:	bf02      	ittt	eq
 8013e96:	68e5      	ldreq	r5, [r4, #12]
 8013e98:	6833      	ldreq	r3, [r6, #0]
 8013e9a:	1aed      	subeq	r5, r5, r3
 8013e9c:	68a3      	ldr	r3, [r4, #8]
 8013e9e:	bf0c      	ite	eq
 8013ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ea4:	2500      	movne	r5, #0
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	bfc4      	itt	gt
 8013eaa:	1a9b      	subgt	r3, r3, r2
 8013eac:	18ed      	addgt	r5, r5, r3
 8013eae:	2600      	movs	r6, #0
 8013eb0:	341a      	adds	r4, #26
 8013eb2:	42b5      	cmp	r5, r6
 8013eb4:	d11a      	bne.n	8013eec <_printf_common+0xc8>
 8013eb6:	2000      	movs	r0, #0
 8013eb8:	e008      	b.n	8013ecc <_printf_common+0xa8>
 8013eba:	2301      	movs	r3, #1
 8013ebc:	4652      	mov	r2, sl
 8013ebe:	4641      	mov	r1, r8
 8013ec0:	4638      	mov	r0, r7
 8013ec2:	47c8      	blx	r9
 8013ec4:	3001      	adds	r0, #1
 8013ec6:	d103      	bne.n	8013ed0 <_printf_common+0xac>
 8013ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ed0:	3501      	adds	r5, #1
 8013ed2:	e7c6      	b.n	8013e62 <_printf_common+0x3e>
 8013ed4:	18e1      	adds	r1, r4, r3
 8013ed6:	1c5a      	adds	r2, r3, #1
 8013ed8:	2030      	movs	r0, #48	@ 0x30
 8013eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ede:	4422      	add	r2, r4
 8013ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013ee8:	3302      	adds	r3, #2
 8013eea:	e7c7      	b.n	8013e7c <_printf_common+0x58>
 8013eec:	2301      	movs	r3, #1
 8013eee:	4622      	mov	r2, r4
 8013ef0:	4641      	mov	r1, r8
 8013ef2:	4638      	mov	r0, r7
 8013ef4:	47c8      	blx	r9
 8013ef6:	3001      	adds	r0, #1
 8013ef8:	d0e6      	beq.n	8013ec8 <_printf_common+0xa4>
 8013efa:	3601      	adds	r6, #1
 8013efc:	e7d9      	b.n	8013eb2 <_printf_common+0x8e>
	...

08013f00 <_printf_i>:
 8013f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f04:	7e0f      	ldrb	r7, [r1, #24]
 8013f06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013f08:	2f78      	cmp	r7, #120	@ 0x78
 8013f0a:	4691      	mov	r9, r2
 8013f0c:	4680      	mov	r8, r0
 8013f0e:	460c      	mov	r4, r1
 8013f10:	469a      	mov	sl, r3
 8013f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013f16:	d807      	bhi.n	8013f28 <_printf_i+0x28>
 8013f18:	2f62      	cmp	r7, #98	@ 0x62
 8013f1a:	d80a      	bhi.n	8013f32 <_printf_i+0x32>
 8013f1c:	2f00      	cmp	r7, #0
 8013f1e:	f000 80d2 	beq.w	80140c6 <_printf_i+0x1c6>
 8013f22:	2f58      	cmp	r7, #88	@ 0x58
 8013f24:	f000 80b9 	beq.w	801409a <_printf_i+0x19a>
 8013f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013f30:	e03a      	b.n	8013fa8 <_printf_i+0xa8>
 8013f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013f36:	2b15      	cmp	r3, #21
 8013f38:	d8f6      	bhi.n	8013f28 <_printf_i+0x28>
 8013f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8013f40 <_printf_i+0x40>)
 8013f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f40:	08013f99 	.word	0x08013f99
 8013f44:	08013fad 	.word	0x08013fad
 8013f48:	08013f29 	.word	0x08013f29
 8013f4c:	08013f29 	.word	0x08013f29
 8013f50:	08013f29 	.word	0x08013f29
 8013f54:	08013f29 	.word	0x08013f29
 8013f58:	08013fad 	.word	0x08013fad
 8013f5c:	08013f29 	.word	0x08013f29
 8013f60:	08013f29 	.word	0x08013f29
 8013f64:	08013f29 	.word	0x08013f29
 8013f68:	08013f29 	.word	0x08013f29
 8013f6c:	080140ad 	.word	0x080140ad
 8013f70:	08013fd7 	.word	0x08013fd7
 8013f74:	08014067 	.word	0x08014067
 8013f78:	08013f29 	.word	0x08013f29
 8013f7c:	08013f29 	.word	0x08013f29
 8013f80:	080140cf 	.word	0x080140cf
 8013f84:	08013f29 	.word	0x08013f29
 8013f88:	08013fd7 	.word	0x08013fd7
 8013f8c:	08013f29 	.word	0x08013f29
 8013f90:	08013f29 	.word	0x08013f29
 8013f94:	0801406f 	.word	0x0801406f
 8013f98:	6833      	ldr	r3, [r6, #0]
 8013f9a:	1d1a      	adds	r2, r3, #4
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	6032      	str	r2, [r6, #0]
 8013fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e09d      	b.n	80140e8 <_printf_i+0x1e8>
 8013fac:	6833      	ldr	r3, [r6, #0]
 8013fae:	6820      	ldr	r0, [r4, #0]
 8013fb0:	1d19      	adds	r1, r3, #4
 8013fb2:	6031      	str	r1, [r6, #0]
 8013fb4:	0606      	lsls	r6, r0, #24
 8013fb6:	d501      	bpl.n	8013fbc <_printf_i+0xbc>
 8013fb8:	681d      	ldr	r5, [r3, #0]
 8013fba:	e003      	b.n	8013fc4 <_printf_i+0xc4>
 8013fbc:	0645      	lsls	r5, r0, #25
 8013fbe:	d5fb      	bpl.n	8013fb8 <_printf_i+0xb8>
 8013fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013fc4:	2d00      	cmp	r5, #0
 8013fc6:	da03      	bge.n	8013fd0 <_printf_i+0xd0>
 8013fc8:	232d      	movs	r3, #45	@ 0x2d
 8013fca:	426d      	negs	r5, r5
 8013fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fd0:	4859      	ldr	r0, [pc, #356]	@ (8014138 <_printf_i+0x238>)
 8013fd2:	230a      	movs	r3, #10
 8013fd4:	e011      	b.n	8013ffa <_printf_i+0xfa>
 8013fd6:	6821      	ldr	r1, [r4, #0]
 8013fd8:	6833      	ldr	r3, [r6, #0]
 8013fda:	0608      	lsls	r0, r1, #24
 8013fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013fe0:	d402      	bmi.n	8013fe8 <_printf_i+0xe8>
 8013fe2:	0649      	lsls	r1, r1, #25
 8013fe4:	bf48      	it	mi
 8013fe6:	b2ad      	uxthmi	r5, r5
 8013fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8013fea:	4853      	ldr	r0, [pc, #332]	@ (8014138 <_printf_i+0x238>)
 8013fec:	6033      	str	r3, [r6, #0]
 8013fee:	bf14      	ite	ne
 8013ff0:	230a      	movne	r3, #10
 8013ff2:	2308      	moveq	r3, #8
 8013ff4:	2100      	movs	r1, #0
 8013ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ffa:	6866      	ldr	r6, [r4, #4]
 8013ffc:	60a6      	str	r6, [r4, #8]
 8013ffe:	2e00      	cmp	r6, #0
 8014000:	bfa2      	ittt	ge
 8014002:	6821      	ldrge	r1, [r4, #0]
 8014004:	f021 0104 	bicge.w	r1, r1, #4
 8014008:	6021      	strge	r1, [r4, #0]
 801400a:	b90d      	cbnz	r5, 8014010 <_printf_i+0x110>
 801400c:	2e00      	cmp	r6, #0
 801400e:	d04b      	beq.n	80140a8 <_printf_i+0x1a8>
 8014010:	4616      	mov	r6, r2
 8014012:	fbb5 f1f3 	udiv	r1, r5, r3
 8014016:	fb03 5711 	mls	r7, r3, r1, r5
 801401a:	5dc7      	ldrb	r7, [r0, r7]
 801401c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014020:	462f      	mov	r7, r5
 8014022:	42bb      	cmp	r3, r7
 8014024:	460d      	mov	r5, r1
 8014026:	d9f4      	bls.n	8014012 <_printf_i+0x112>
 8014028:	2b08      	cmp	r3, #8
 801402a:	d10b      	bne.n	8014044 <_printf_i+0x144>
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	07df      	lsls	r7, r3, #31
 8014030:	d508      	bpl.n	8014044 <_printf_i+0x144>
 8014032:	6923      	ldr	r3, [r4, #16]
 8014034:	6861      	ldr	r1, [r4, #4]
 8014036:	4299      	cmp	r1, r3
 8014038:	bfde      	ittt	le
 801403a:	2330      	movle	r3, #48	@ 0x30
 801403c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014044:	1b92      	subs	r2, r2, r6
 8014046:	6122      	str	r2, [r4, #16]
 8014048:	f8cd a000 	str.w	sl, [sp]
 801404c:	464b      	mov	r3, r9
 801404e:	aa03      	add	r2, sp, #12
 8014050:	4621      	mov	r1, r4
 8014052:	4640      	mov	r0, r8
 8014054:	f7ff fee6 	bl	8013e24 <_printf_common>
 8014058:	3001      	adds	r0, #1
 801405a:	d14a      	bne.n	80140f2 <_printf_i+0x1f2>
 801405c:	f04f 30ff 	mov.w	r0, #4294967295
 8014060:	b004      	add	sp, #16
 8014062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	f043 0320 	orr.w	r3, r3, #32
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	4833      	ldr	r0, [pc, #204]	@ (801413c <_printf_i+0x23c>)
 8014070:	2778      	movs	r7, #120	@ 0x78
 8014072:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014076:	6823      	ldr	r3, [r4, #0]
 8014078:	6831      	ldr	r1, [r6, #0]
 801407a:	061f      	lsls	r7, r3, #24
 801407c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014080:	d402      	bmi.n	8014088 <_printf_i+0x188>
 8014082:	065f      	lsls	r7, r3, #25
 8014084:	bf48      	it	mi
 8014086:	b2ad      	uxthmi	r5, r5
 8014088:	6031      	str	r1, [r6, #0]
 801408a:	07d9      	lsls	r1, r3, #31
 801408c:	bf44      	itt	mi
 801408e:	f043 0320 	orrmi.w	r3, r3, #32
 8014092:	6023      	strmi	r3, [r4, #0]
 8014094:	b11d      	cbz	r5, 801409e <_printf_i+0x19e>
 8014096:	2310      	movs	r3, #16
 8014098:	e7ac      	b.n	8013ff4 <_printf_i+0xf4>
 801409a:	4827      	ldr	r0, [pc, #156]	@ (8014138 <_printf_i+0x238>)
 801409c:	e7e9      	b.n	8014072 <_printf_i+0x172>
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	f023 0320 	bic.w	r3, r3, #32
 80140a4:	6023      	str	r3, [r4, #0]
 80140a6:	e7f6      	b.n	8014096 <_printf_i+0x196>
 80140a8:	4616      	mov	r6, r2
 80140aa:	e7bd      	b.n	8014028 <_printf_i+0x128>
 80140ac:	6833      	ldr	r3, [r6, #0]
 80140ae:	6825      	ldr	r5, [r4, #0]
 80140b0:	6961      	ldr	r1, [r4, #20]
 80140b2:	1d18      	adds	r0, r3, #4
 80140b4:	6030      	str	r0, [r6, #0]
 80140b6:	062e      	lsls	r6, r5, #24
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	d501      	bpl.n	80140c0 <_printf_i+0x1c0>
 80140bc:	6019      	str	r1, [r3, #0]
 80140be:	e002      	b.n	80140c6 <_printf_i+0x1c6>
 80140c0:	0668      	lsls	r0, r5, #25
 80140c2:	d5fb      	bpl.n	80140bc <_printf_i+0x1bc>
 80140c4:	8019      	strh	r1, [r3, #0]
 80140c6:	2300      	movs	r3, #0
 80140c8:	6123      	str	r3, [r4, #16]
 80140ca:	4616      	mov	r6, r2
 80140cc:	e7bc      	b.n	8014048 <_printf_i+0x148>
 80140ce:	6833      	ldr	r3, [r6, #0]
 80140d0:	1d1a      	adds	r2, r3, #4
 80140d2:	6032      	str	r2, [r6, #0]
 80140d4:	681e      	ldr	r6, [r3, #0]
 80140d6:	6862      	ldr	r2, [r4, #4]
 80140d8:	2100      	movs	r1, #0
 80140da:	4630      	mov	r0, r6
 80140dc:	f7ec f888 	bl	80001f0 <memchr>
 80140e0:	b108      	cbz	r0, 80140e6 <_printf_i+0x1e6>
 80140e2:	1b80      	subs	r0, r0, r6
 80140e4:	6060      	str	r0, [r4, #4]
 80140e6:	6863      	ldr	r3, [r4, #4]
 80140e8:	6123      	str	r3, [r4, #16]
 80140ea:	2300      	movs	r3, #0
 80140ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140f0:	e7aa      	b.n	8014048 <_printf_i+0x148>
 80140f2:	6923      	ldr	r3, [r4, #16]
 80140f4:	4632      	mov	r2, r6
 80140f6:	4649      	mov	r1, r9
 80140f8:	4640      	mov	r0, r8
 80140fa:	47d0      	blx	sl
 80140fc:	3001      	adds	r0, #1
 80140fe:	d0ad      	beq.n	801405c <_printf_i+0x15c>
 8014100:	6823      	ldr	r3, [r4, #0]
 8014102:	079b      	lsls	r3, r3, #30
 8014104:	d413      	bmi.n	801412e <_printf_i+0x22e>
 8014106:	68e0      	ldr	r0, [r4, #12]
 8014108:	9b03      	ldr	r3, [sp, #12]
 801410a:	4298      	cmp	r0, r3
 801410c:	bfb8      	it	lt
 801410e:	4618      	movlt	r0, r3
 8014110:	e7a6      	b.n	8014060 <_printf_i+0x160>
 8014112:	2301      	movs	r3, #1
 8014114:	4632      	mov	r2, r6
 8014116:	4649      	mov	r1, r9
 8014118:	4640      	mov	r0, r8
 801411a:	47d0      	blx	sl
 801411c:	3001      	adds	r0, #1
 801411e:	d09d      	beq.n	801405c <_printf_i+0x15c>
 8014120:	3501      	adds	r5, #1
 8014122:	68e3      	ldr	r3, [r4, #12]
 8014124:	9903      	ldr	r1, [sp, #12]
 8014126:	1a5b      	subs	r3, r3, r1
 8014128:	42ab      	cmp	r3, r5
 801412a:	dcf2      	bgt.n	8014112 <_printf_i+0x212>
 801412c:	e7eb      	b.n	8014106 <_printf_i+0x206>
 801412e:	2500      	movs	r5, #0
 8014130:	f104 0619 	add.w	r6, r4, #25
 8014134:	e7f5      	b.n	8014122 <_printf_i+0x222>
 8014136:	bf00      	nop
 8014138:	08016e55 	.word	0x08016e55
 801413c:	08016e66 	.word	0x08016e66

08014140 <memmove>:
 8014140:	4288      	cmp	r0, r1
 8014142:	b510      	push	{r4, lr}
 8014144:	eb01 0402 	add.w	r4, r1, r2
 8014148:	d902      	bls.n	8014150 <memmove+0x10>
 801414a:	4284      	cmp	r4, r0
 801414c:	4623      	mov	r3, r4
 801414e:	d807      	bhi.n	8014160 <memmove+0x20>
 8014150:	1e43      	subs	r3, r0, #1
 8014152:	42a1      	cmp	r1, r4
 8014154:	d008      	beq.n	8014168 <memmove+0x28>
 8014156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801415a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801415e:	e7f8      	b.n	8014152 <memmove+0x12>
 8014160:	4402      	add	r2, r0
 8014162:	4601      	mov	r1, r0
 8014164:	428a      	cmp	r2, r1
 8014166:	d100      	bne.n	801416a <memmove+0x2a>
 8014168:	bd10      	pop	{r4, pc}
 801416a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801416e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014172:	e7f7      	b.n	8014164 <memmove+0x24>

08014174 <_sbrk_r>:
 8014174:	b538      	push	{r3, r4, r5, lr}
 8014176:	4d06      	ldr	r5, [pc, #24]	@ (8014190 <_sbrk_r+0x1c>)
 8014178:	2300      	movs	r3, #0
 801417a:	4604      	mov	r4, r0
 801417c:	4608      	mov	r0, r1
 801417e:	602b      	str	r3, [r5, #0]
 8014180:	f7f7 fa8c 	bl	800b69c <_sbrk>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d102      	bne.n	801418e <_sbrk_r+0x1a>
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	b103      	cbz	r3, 801418e <_sbrk_r+0x1a>
 801418c:	6023      	str	r3, [r4, #0]
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	20001774 	.word	0x20001774

08014194 <_init>:
 8014194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014196:	bf00      	nop
 8014198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801419a:	bc08      	pop	{r3}
 801419c:	469e      	mov	lr, r3
 801419e:	4770      	bx	lr

080141a0 <_fini>:
 80141a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a2:	bf00      	nop
 80141a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141a6:	bc08      	pop	{r3}
 80141a8:	469e      	mov	lr, r3
 80141aa:	4770      	bx	lr
